/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/live-reload/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// modules
	const App_1 = __webpack_require__(1);
	const Block_1 = __webpack_require__(27);
	const Code_1 = __webpack_require__(140);
	const Data_1 = __webpack_require__(141);
	const DragDrop_1 = __webpack_require__(149);
	const Factory_1 = __webpack_require__(10);
	const Graph_1 = __webpack_require__(46);
	const Library_1 = __webpack_require__(155);
	const Midi_1 = __webpack_require__(53);
	const Playback_1 = __webpack_require__(44);
	const Project_1 = __webpack_require__(8);
	const Scene_1 = __webpack_require__(251);
	const Status_1 = __webpack_require__(57);
	const User_1 = __webpack_require__(258);
	const Sync_1 = __webpack_require__(264);
	const Router = __webpack_require__(269);
	const Controller = __webpack_require__(119);
	const Devtools = __webpack_require__(285);
	const Http = __webpack_require__(286);
	const Model = __webpack_require__(79);
	const Component_1 = __webpack_require__(12); // Component for jsx on this page
	const App_2 = __webpack_require__(287);
	//import { TestView as AppView } from './TestView'
	const model = Model({});
	const controller = Controller(model);
	const router = Router({ '/': 'app.homeUrl',
	    '/project': 'app.projectsUrl',
	    '/project/:_id': 'app.projectUrl',
	    '/user': 'app.userUrl'
	}, { onlyHash: true,
	    mapper: { query: true }
	});
	controller.addModules({ app: App_1.App(),
	    block: Block_1.Block(),
	    code: Code_1.Code(),
	    data: Data_1.Data(),
	    $dragdrop: DragDrop_1.DragDrop(),
	    $factory: Factory_1.Factory(),
	    graph: Graph_1.Graph(),
	    devtools: Devtools(),
	    http: Http(),
	    library: Library_1.Library(),
	    midi: Midi_1.Midi(),
	    playback: Playback_1.Playback(),
	    project: Project_1.Project(),
	    router,
	    scene: Scene_1.Scene(),
	    $status: Status_1.Status(),
	    user: User_1.User(),
	    $sync: Sync_1.Sync()
	});
	Component_1.render(() => Component_1.Component.createElement(App_2.App, null), document.getElementById('app'), controller);
	const warn = console.warn;
	console.warn = (msg) => {
	    console.trace();
	    warn.call(console, msg);
	};
	controller.getSignals().app.mounted();


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const mounted_1 = __webpack_require__(2);
	const homeUrl_1 = __webpack_require__(136);
	const projectUrl_1 = __webpack_require__(137);
	const projectsUrl_1 = __webpack_require__(138);
	const userUrl_1 = __webpack_require__(139);
	exports.App = (options = {}) => {
	    return (module, controller) => {
	        // no state added
	        module.addSignals({ mounted: mounted_1.mounted,
	            homeUrl: homeUrl_1.homeUrl,
	            projectUrl: projectUrl_1.projectUrl,
	            projectsUrl: projectsUrl_1.projectsUrl,
	            userUrl: userUrl_1.userUrl
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const status_1 = __webpack_require__(3);
	const reload_1 = __webpack_require__(5);
	const runtests_1 = __webpack_require__(107);
	const init_1 = __webpack_require__(54);
	exports.mounted = [status_1.setStatus({ type: 'info', message: 'Lucidity started' }),
	    [...reload_1.reload] // async
	    ,
	    [...init_1.init] // async
	    ,
	    ...runtests_1.runtests // sync
	];


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const toggleDetail_1 = __webpack_require__(4);
	// History will never grow beyond this
	exports.MAX_STATUS_HISTORY = 250;
	// When history gets to MAX, we shrink to MIN
	exports.MIN_STATUS_HISTORY = 200;
	exports.HISTORY_PATH = ['$status', 'list'];
	let ref = 0;
	// Used during testing only
	exports.resetRef = () => { ref = 0; };
	const addStatus = (state, status) => {
	    const curr = state.get(exports.HISTORY_PATH) || [];
	    ref += 1;
	    const s = Object.assign({}, status, { ref });
	    let list = [s, ...curr];
	    if (list.length > exports.MAX_STATUS_HISTORY) {
	        list = list.slice(0, exports.MIN_STATUS_HISTORY);
	    }
	    state.set(exports.HISTORY_PATH, list);
	    return s;
	};
	exports.status = ({ state, input, output }) => {
	    if (input.status) {
	        const s = addStatus(state, input.status);
	        if (s.type === 'error') {
	            // Automatically open on error
	            toggleDetail_1.setDetail(state, s);
	        }
	    }
	};
	// Cerebral type checking
	//status [ 'input' ] =
	//{ status:
	//  { type: String
	//  , message: String
	//  }
	//}
	// FIXME do we need this ?
	exports.setStatus = (status) => {
	    return ({ state }) => {
	        addStatus(state, status);
	    };
	};


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	exports.setDetail = (state, status) => {
	    const visible = state.get(['$status', 'detail', 'visible']);
	    const curr = state.get(['$status', 'detail']);
	    if (curr.ref === status.ref) {
	        // toggle
	        state.set(['$status', 'showDetail'], !state.get(['$status', 'showDetail']));
	    }
	    else {
	        // display
	        state.set(['$status', 'detail'], status);
	        state.set(['$status', 'showDetail'], true);
	    }
	};
	exports.toggleDetail = ({ state, input }) => {
	    exports.setDetail(state, input.detail);
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const reload_1 = __webpack_require__(6);
	const dataToState_1 = __webpack_require__(7);
	const Project_1 = __webpack_require__(8);
	const copy = __webpack_require__(81);
	const when = __webpack_require__(105);
	exports.reload = [reload_1.reload,
	    { success: [dataToState_1.dataToState,
	            when('state:/$projectId'),
	            { true: [copy('state:/$projectId', 'output:/_id'),
	                    Project_1.selectAction
	                ],
	                false: []
	            }
	        ],
	        error: []
	    }
	];


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	exports.reload = ({ services, output }) => {
	    const db = services.data.db;
	    const data = {};
	    db.allDocs({ include_docs: true, descending: true }, (err, docs) => {
	        if (err) {
	            output.error({ type: 'error', message: err });
	        }
	        else {
	            for (const mdoc of docs.rows) {
	                const doc = mdoc.doc;
	                let branch = data[doc.type];
	                if (!branch) {
	                    branch = {};
	                    data[doc.type] = branch;
	                }
	                branch[doc._id] = doc;
	            }
	            output.success({ data: data, path: 'data' });
	        }
	    });
	};
	exports.reload['async'] = true;


/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	exports.dataToState = ({ state, input }) => {
	    state.set(input.path, input.data);
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(9));
	__export(__webpack_require__(98));
	const Model = __webpack_require__(79);
	const add_1 = __webpack_require__(99);
	const name_1 = __webpack_require__(101);
	const select_1 = __webpack_require__(104);
	const CurrentProject = Model.monkey({ cursors: { projectById: ['data', 'project'],
	        id: ['$projectId']
	    },
	    get(data) {
	        const projectById = data.projectById || {};
	        return projectById[data.id];
	    }
	});
	exports.Project = (options = {}) => {
	    return (module, controller) => {
	        module.addState(CurrentProject);
	        module.addSignals({ add: add_1.add,
	            name: name_1.name,
	            select: select_1.select
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Factory_1 = __webpack_require__(10);
	const GraphHelper_1 = __webpack_require__(25);
	const SceneHelper_1 = __webpack_require__(97);
	var ProjectHelper;
	(function (ProjectHelper) {
	    ProjectHelper.create = () => {
	        const _id = Factory_1.makeId();
	        const graph = GraphHelper_1.GraphHelper.create();
	        const scene = SceneHelper_1.SceneHelper.create();
	        const project = Object.freeze({ _id,
	            type: 'project',
	            name: 'New project',
	            graph,
	            scenes: [scene._id]
	        });
	        return { scene, project };
	    };
	    ProjectHelper.select = (state, user, project) => {
	        const nuser = Object.assign({}, user, { projectId: project._id,
	            sceneId: null
	        });
	        const scenes = project.scenes || [];
	        const sceneId = scenes[0]; // can be null
	        if (sceneId) {
	            const scene = state.get['data', 'scene', sceneId];
	            if (scene) {
	                return SceneHelper_1.SceneHelper.select(state, nuser, scene);
	            }
	        }
	        return nuser;
	    };
	})(ProjectHelper = exports.ProjectHelper || (exports.ProjectHelper = {}));


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(11));
	__export(__webpack_require__(15));
	__export(__webpack_require__(17));
	__export(__webpack_require__(18));
	__export(__webpack_require__(19));
	const common_1 = __webpack_require__(21);
	exports.Factory = (options = {}) => {
	    return (module, controller) => {
	        module.addState({ editing: false // would contain the path of edited element
	        });
	        // FIXME: none of these should exist.
	        module.addSignals({ set: common_1.set
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// FIXME: move Component to '/lib' ?
	// FIXME: move Factory to '/lib' ?
	// FIXME: should import styles ?
	const Component_1 = __webpack_require__(12);
	// Add new element
	exports.add = (type, path) => {
	    const comp = Component_1.Component({}, ({ props, children, signals }) => {
	        const klass = props.class || {};
	        klass.add = true;
	        const addElement = () => {
	            signals.$factory.add({ path, type });
	        };
	        return Component_1.Component.createElement("div", {class: klass, "on-click": addElement}, children);
	    });
	    return comp;
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const cerebral_view_snabbdom_1 = __webpack_require__(13);
	const SVGNS = 'http://www.w3.org/2000/svg';
	const modulesNS = ['hook', 'on', 'style', 'class', 'props', 'attrs'];
	const slice = Array.prototype.slice;
	const hasData = /^data\-/;
	const mapData = function (adata, noprops) {
	    const data = {};
	    const props = noprops ? data : {};
	    let hasProps = false;
	    for (const k in adata) {
	        if (k === 'class') {
	            const aclass = adata[k];
	            let klass = data[k];
	            if (!klass) {
	                klass = {};
	                data[k] = klass;
	            }
	            if (typeof aclass === 'string') {
	                const klasses = aclass.split(/\s+/);
	                for (const k of klasses) {
	                    klass[k] = true;
	                }
	            }
	            else {
	                Object.assign(klass, aclass);
	            }
	        }
	        else if (k === 'style') {
	            const astyle = adata[k];
	            let style = data[k];
	            if (!style) {
	                style = {};
	                data[k] = style;
	            }
	            if (typeof astyle === 'string') {
	                const styles = astyle.split(/\s*;\s*/);
	                for (const s of styles) {
	                    const [key, value] = s.split(/\s*:\s*/);
	                    style[key] = value;
	                }
	            }
	            else {
	                Object.assign(style, astyle);
	            }
	        }
	        else {
	            const dash = k.indexOf('-');
	            if (dash > 0) {
	                if (hasData.test(k)) {
	                    const attrs = data.attrs = data.attrs || {};
	                    attrs[k] = adata[k];
	                }
	                else {
	                    const nkey = k.split('-');
	                    const fkey = nkey.pop();
	                    let base = data;
	                    for (const l of nkey) {
	                        if (!base[l]) {
	                            base = base[l] = {};
	                        }
	                        else {
	                            base = base[l];
	                        }
	                    }
	                    base[fkey] = adata[k];
	                }
	            }
	            else {
	                if (modulesNS.indexOf(k) >= 0) {
	                    if (data[k]) {
	                        Object.assign(data[k], adata[k]);
	                    }
	                    else {
	                        data[k] = adata[k];
	                    }
	                }
	                else {
	                    hasProps = true;
	                    props[k] = adata[k];
	                }
	            }
	        }
	    }
	    if (!noprops && hasProps) {
	        data.props = props;
	    }
	    return data;
	};
	const mapChildren = (c) => {
	    if (typeof c === 'object') {
	        return c;
	    }
	    else {
	        return { text: c };
	    }
	};
	const remapSVGData = (adata) => {
	    const props = adata.props || {};
	    adata.attrs = Object.assign(props.attrs || {}, adata.attrs, props);
	    delete adata.props;
	    delete adata.attrs.attrs;
	    adata.ns = SVGNS;
	    return adata;
	};
	const setSVGChildren = (children) => {
	    for (const c of children) {
	        if (c.data) {
	            c.data = remapSVGData(c.data);
	            if (c.children) {
	                setSVGChildren(c.children);
	            }
	        }
	    }
	};
	const createElement = function (sel, adata, achildren) {
	    let children = [];
	    if (arguments.length > 2) {
	        for (const c of slice.call(arguments, 2)) {
	            if (Array.isArray(c)) {
	                children = [...children, ...c];
	            }
	            else {
	                children.push(c);
	            }
	        }
	    }
	    if (children) {
	        children = children.map((c) => typeof c === 'object' ? c : { text: c });
	    }
	    if (typeof sel === 'string') {
	        const vnode = { sel };
	        if (adata) {
	            if (adata.key) {
	                vnode.key = adata.key;
	            }
	            const data = mapData(adata);
	            vnode.data = data;
	        }
	        else {
	            vnode.data = {};
	        }
	        if (children) {
	            vnode.children = children;
	        }
	        if (sel === 'svg') {
	            setSVGChildren([vnode]);
	        }
	        return vnode;
	    }
	    else {
	        return sel(mapData(adata, true), children);
	    }
	};
	// HACK. Should be able to change this without or should
	// rewrite cerebral-view-snabbdom entirely.
	cerebral_view_snabbdom_1.Component['createElement'] = createElement; // CComp.DOM
	exports.Component = cerebral_view_snabbdom_1.Component;
	exports.render = cerebral_view_snabbdom_1.render;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(127);

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = vendor_lib;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Component_1 = __webpack_require__(12);
	const EditableText_1 = __webpack_require__(16);
	const EditingPath = ['$factory', 'editing'];
	// We use a switch case instead of signals[ key ] to force type check.
	const getSignal = (signals, type, attr) => {
	    switch (type) {
	        case 'block':
	            switch (attr) {
	                case 'name':
	                    return signals.block.name;
	            }
	            break;
	        case 'project':
	            switch (attr) {
	                case 'name':
	                    return signals.project.name;
	            }
	        case 'scene':
	            switch (attr) {
	                case 'name':
	                    return signals.scene.name;
	            }
	        case 'user':
	            switch (attr) {
	                case 'name':
	                    return signals.user.name;
	                case 'libraryGithubPath':
	                    return signals.user.libraryGithubPath;
	                case 'libraryGithubToken':
	                    return signals.user.libraryGithubToken;
	            }
	            break;
	    }
	};
	// Editable Component factory
	exports.editable = (path, idscope = '') => {
	    const spath = path.join('-') + idscope;
	    const fpath = ['$factory', ...path];
	    const comp = Component_1.Component({ text: path,
	        stext: [...fpath, 'value'],
	        saving: [...fpath, 'saving'],
	        editing: fpath // EditingPath
	    }, ({ state, signals, props }) => {
	        const edit = () => signals.$factory.set({ path: fpath, value: state.text });
	        const changed = (value) => signals.$factory.set({ path: fpath, value });
	        const signal = getSignal(signals, path[0], path[1]);
	        const save = (value) => signal({ value });
	        const isediting = state.editing;
	        return Component_1.Component.createElement(EditableText_1.EditableText, {class: props.class, text: state.text, stext: state.stext, editing: isediting, saving: state.saving, "on-edit": edit, "on-save": save, "on-change": changed});
	    });
	    comp.path = fpath;
	    return comp;
	};


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Component_1 = __webpack_require__(12);
	// FIXME: how can I move this to Factory ?
	const focus = (_, { elm }) => {
	    setTimeout(() => {
	        elm.focus();
	        elm.select();
	    }, 0);
	};
	const makeKeyup = function ({ on, text }) {
	    return (e) => {
	        if (e.keyCode === 27) {
	            // ESC = abort
	            e.preventDefault();
	            e.target.setAttribute('data-done', true);
	            on.save(text);
	        }
	        else if (e.keyCode === 13) {
	            // enter = save
	            e.preventDefault();
	            e.target.setAttribute('data-done', true);
	            on.save(e.target.value);
	        }
	        else if (on.change) {
	            on.change(e.target.value);
	        }
	    };
	};
	const makeChange = function ({ on }) {
	    return (e) => {
	        if (!e.target.getAttribute('data-done')) {
	            e.target.setAttribute('data-done', true);
	            on.save(e.target.value);
	        }
	    };
	};
	exports.EditableText = Component_1.Component({}, ({ props }) => {
	    if (props.editing) {
	        const klass = Object.assign({ EditableText: true, active: true }, props.class || {});
	        const keyup = makeKeyup(props);
	        const change = makeChange(props);
	        const blur = (e) => {
	            change(e);
	        };
	        return Component_1.Component.createElement("div", {class: klass}, 
	            Component_1.Component.createElement("input", {class: 'fld', value: props.text, "hook-create": focus, "on-keyup": keyup, "on-blur": blur, "on-change": change})
	        );
	    }
	    else {
	        const text = props.saving ? props.stext : props.text;
	        const klass = Object.assign({ EditableText: true, saving: props.saving }, props.class || {});
	        return Component_1.Component.createElement("div", {class: klass, "on-click": (e) => props.on.edit({})}, text || props.text || ' ');
	    }
	});


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// FIXME: move Component to '/lib' ?
	// FIXME: move Factory to '/lib' ?
	// FIXME: should import styles ?
	const Component_1 = __webpack_require__(12);
	// We use a switch case instead of signals[ key ] to force type check.
	const getSignal = (signals, opts) => {
	    switch (opts.type) {
	        case 'scene':
	            switch (opts.operation) {
	                case 'remove':
	                    return signals.scene.remove;
	            }
	            break;
	    }
	};
	const ModalPath = ['$factory', 'modal'];
	exports.openModal = (opts, signals) => {
	    return (e) => {
	        signals.$factory.set({ path: ModalPath,
	            value: Object.assign({}, opts, { active: true })
	        });
	    };
	};
	exports.Modal = Component_1.Component({ modalOpts: ModalPath // State of the pane.
	}, ({ state, children, signals }) => {
	    const opts = state.modalOpts || {};
	    const cancel = () => {
	        signals.$factory.set({ path: [...ModalPath, 'active'], value: false });
	    };
	    const continueOp = () => {
	        const signal = getSignal(signals, opts);
	        if (signal) {
	            signal({ _id: opts._id });
	        }
	        else {
	            console.error('Invalid signal for modal:', opts);
	        }
	    };
	    return Component_1.Component.createElement("div", {class: { Modal: true, active: opts.active }}, 
	        Component_1.Component.createElement("div", {class: 'wrap', "on-click": cancel}, 
	            Component_1.Component.createElement("p", {class: 'message'}, opts.message), 
	            Component_1.Component.createElement("div", {class: 'bwrap'}, 
	                Component_1.Component.createElement("div", {class: 'button cancel', "on-click": cancel}, "Cancel"), 
	                Component_1.Component.createElement("div", {class: 'button continue', "on-click": continueOp}, opts.confirm || 'Continue')))
	    );
	});


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	// FIXME: move Component to '/lib' ?
	// FIXME: move Factory to '/lib' ?
	// FIXME: should import styles ?
	const Component_1 = __webpack_require__(12);
	// Open/closeable pane
	exports.pane = (name) => {
	    const panePath = ['$factory', 'pane', name];
	    const comp = Component_1.Component({ active: panePath // State of the pane.
	    }, ({ state, props, children, signals }) => {
	        const active = state.active;
	        const klass = Object.assign({}, props.class || {}, { Pane: true, active });
	        return Component_1.Component.createElement("div", {class: klass}, 
	            Component_1.Component.createElement("div", {class: 'wrap'}, children)
	        );
	    });
	    comp.path = panePath;
	    comp.toggle = Component_1.Component({ active: panePath
	    }, ({ state, props, children, signals }) => {
	        const active = state.active;
	        const toggle = (e) => {
	            signals.$factory.set({ path: panePath, value: !state.active });
	        };
	        const klass = Object.assign({}, props.class || {}, { active });
	        return Component_1.Component.createElement("div", {class: klass, "on-click": toggle}, children);
	    });
	    return comp;
	};


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const uuid = __webpack_require__(20);
	// make sure we do not pass parameters to uuid
	exports.makeId = () => uuid();


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(63);

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(22));


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const set_action_1 = __webpack_require__(23);
	exports.set = [set_action_1.setAction
	];


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const check = __webpack_require__(24);
	exports.setAction = ({ state, input: { path, value }, output }) => {
	    if (path[0] === 'data') {
	        throw ("SHOULD NOT USE set with data");
	    }
	    else {
	        // we could write this even during a save for faster UI ops
	        state.set(path, value);
	    }
	};
	exports.setAction['input'] =
	    { path: check.array.of.string,
	        value: check.assigned
	    };


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(163);

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const NodeHelper_1 = __webpack_require__(26);
	const Block_1 = __webpack_require__(27);
	const Playback_1 = __webpack_require__(44);
	const Immutable_1 = __webpack_require__(43);
	const rootNodeId = NodeHelper_1.NodeHelper.rootNodeId;
	const defaultMeta = Playback_1.PlaybackHelper.defaultMeta;
	var GraphHelper;
	(function (GraphHelper) {
	    const createNode = NodeHelper_1.NodeHelper.create;
	    const nextNodeId = NodeHelper_1.NodeHelper.nextNodeId;
	    const nextBlockId = Block_1.BlockHelper.nextBlockId;
	    const checkFreeze = (graph) => {
	        if (Object.isFrozen(graph)) {
	            graph =
	                { nodesById: Object.assign({}, graph.nodesById),
	                    blocksById: graph.blocksById
	                };
	        }
	        else {
	            graph.blocksById = Object.freeze(graph.blocksById);
	        }
	        check(graph); // this will freeze nodes
	        graph.nodesById = Object.freeze(graph.nodesById);
	        return Object.freeze(graph);
	    };
	    const check = (graph, context = Playback_1.PlaybackHelper.mainContextProvide, nodeId = rootNodeId, allvoid = [], parentError = null, shouldBeVoid = false) => {
	        let node = graph.nodesById[nodeId];
	        const block = graph.blocksById[node.blockId];
	        const meta = block.meta;
	        const expect = meta.expect || {};
	        const cerr = parentError ? [parentError] : [];
	        let voidUpdateError = false;
	        let all = [];
	        if (shouldBeVoid && meta.update) {
	            cerr.push(`invalid 'update' (should not be typed)`);
	            voidUpdateError = true;
	        }
	        for (const k in meta.expect) {
	            const e = expect[k];
	            const c = context[k];
	            if (!c) {
	                cerr.push(`missing '${k}': ${e}`);
	            }
	            else if (e !== c) {
	                cerr.push(`invalid '${k}': ${c} instead of ${e}`);
	            }
	        }
	        const childrenTypes = meta.children;
	        const children = node.children;
	        let childrenm;
	        const nodesById = graph.nodesById;
	        const blocksById = graph.blocksById;
	        const serr = [];
	        if (childrenTypes) {
	            for (let i = 0; i < childrenTypes.length; ++i) {
	                const e = childrenTypes[i];
	                const n = nodesById[children[i]];
	                let b;
	                if (n) {
	                    b = blocksById[n.blockId];
	                }
	                if (!b) {
	                    serr[i] = `missing child ${i + 1}: ${e}`;
	                }
	                else {
	                    let c = b.meta.update;
	                    if (!c) {
	                        // try to find child in grand-children
	                        if (!childrenm) {
	                            childrenm = Object.assign([], children);
	                        }
	                        let nc = n;
	                        while (!c && nc) {
	                            const childId = nc.children[0];
	                            nc = null;
	                            if (childId) {
	                                nc = nodesById[childId];
	                                if (nc) {
	                                    const b = blocksById[nc.blockId];
	                                    const u = b.meta.update;
	                                    if (u) {
	                                        // found child (will check if type is correct)
	                                        childrenm[i] = childId;
	                                        c = u;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                    if (e !== c) {
	                        serr[i] = `invalid child ${i + 1}: ${c} instead of ${e}`;
	                    }
	                }
	            }
	        }
	        const valid = cerr.length === 0 && serr.length === 0;
	        if (valid) {
	            if (block.meta.isvoid) {
	                // add ourself to the capturing of void updates
	                allvoid.push(nodeId);
	            }
	            // valid
	            node =
	                { id: nodeId,
	                    blockId: node.blockId,
	                    parent: node.parent,
	                    children
	                };
	            if (childrenTypes) {
	                // Only set direct children for helper if we have explicit
	                // types for them.
	                node.childrenm = childrenm || children;
	            }
	            if (block.meta.all) {
	                // grab our own list of nodes
	                all = [];
	                node.all = all;
	            }
	        }
	        else {
	            // invalid
	            node =
	                { id: nodeId,
	                    blockId: node.blockId,
	                    parent: node.parent,
	                    children,
	                    invalid: true,
	                    cerr,
	                    serr
	                };
	        }
	        const sub = context.set(meta.provide || {});
	        const perror = node.invalid ?
	            `Parent '${block.name}' invalid.` : null;
	        const inlen = childrenTypes ? childrenTypes.length : null;
	        for (let i = 0; i < children.length; ++i) {
	            const childId = children[i];
	            if (childId) {
	                if (inlen) {
	                    // Typed children
	                    const err = i >= inlen ? `Not linked to parent: detached` : null;
	                    check(graph, sub, childId, all, err || perror);
	                    if (!node.invalid) {
	                        // valid node
	                        const n = nodesById[childId];
	                        if (n.invalid) {
	                            // Invalid typed child: we become invalid as well
	                            node.invalid = true;
	                            node.serr = [`invalid child ${i + 1}`];
	                        }
	                    }
	                }
	                else {
	                    // No type definitions for children: update must have '():void' type.
	                    if (check(graph, sub, childId, all, perror, true)) {
	                        serr[i] = `invalid child ${i + 1}: update is typed`;
	                    }
	                }
	            }
	        }
	        graph.nodesById[nodeId] = Object.freeze(node);
	        if (!block.meta.all && !node.invalid) {
	            // node is valid and does not capture `isvoid` children.
	            // Add new elements in all to allvoid.
	            for (const nid of all) {
	                allvoid.push(nid);
	            }
	        }
	        return voidUpdateError;
	    };
	    GraphHelper.create = (name = 'main', source = Block_1.BlockHelper.MAIN_SOURCE) => {
	        const block = Block_1.BlockHelper.create(name, source);
	        const nid = rootNodeId;
	        return Object.freeze({ nodesById: Object.freeze({ [nid]: createNode(block.id, nid, null) }),
	            blocksById: Object.freeze({ [block.id]: block }),
	            blockId: block.id
	        });
	    };
	    const insertInGraph = (newgraph, oldgraph, oldid, parentId, tail, dropId) => {
	        const oldnode = oldgraph.nodesById[oldid];
	        let block = oldgraph.blocksById[oldnode.blockId];
	        if (!block['_copyblock']) {
	            const bid = nextBlockId(newgraph.blocksById);
	            block = Object.assign({}, block, { id: bid });
	            newgraph.blocksById[bid] = Object.freeze(block);
	            // make sure we do not add it twice (in case it's an alias)
	            oldgraph.blocksById[oldnode.blockId] =
	                Object.assign({}, block, { _copyblock: true });
	        }
	        // our new node id
	        const nid = nextNodeId(newgraph.nodesById);
	        // lock this id
	        const node = { id: nid,
	            blockId: block.id,
	            parent: parentId,
	            children: []
	        };
	        newgraph.nodesById[nid] = node;
	        if (!tail.nid && !oldnode.children[0]) {
	            // found tail
	            tail.nid = nid;
	        }
	        // map our children with new nodes and ids
	        let nochild = true;
	        node.children = oldnode.children.map((oid) => {
	            if (oid === null || oid === dropId) {
	                return null;
	            }
	            else {
	                nochild = false;
	                return insertInGraph(newgraph, oldgraph, oid, nid, tail, dropId);
	            }
	        });
	        if (nochild) {
	            node.children = [];
	        }
	        newgraph.nodesById[nid] = node;
	        return nid;
	    };
	    const copyNodes = (nodesById) => {
	        const r = {};
	        for (const k in nodesById) {
	            r[k] = Object.assign({}, nodesById[k]);
	        }
	        return r;
	    };
	    GraphHelper.insert = (graph, parentId, pos, achild) => {
	        // add nodes
	        let g = { nodesById: copyNodes(graph.nodesById),
	            blocksById: Object.assign({}, graph.blocksById),
	            blockId: graph.blockId
	        };
	        const oldgraph = { nodesById: achild.nodesById,
	            blocksById: Object.assign({}, achild.blocksById)
	        };
	        const tail = { nid: null };
	        // copy nodes and rename ids
	        const nid = insertInGraph(g, oldgraph, rootNodeId, parentId, tail);
	        g.blockId = g.nodesById[nid].blockId;
	        // link in parent
	        const parent = g.nodesById[parentId];
	        parent.children = Immutable_1.Immutable.insert(parent.children, pos, nid);
	        return checkFreeze(g);
	    };
	    GraphHelper.append = function (graph, parentId, child) {
	        return GraphHelper.insert(graph, parentId, -1, child);
	    };
	    // slip a new graph between parent and child
	    // FIXME: need to detect deepest child on first slot in graph
	    GraphHelper.slip = (graph, parentId, pos, achild) => {
	        let g = { nodesById: copyNodes(graph.nodesById),
	            blocksById: Object.assign({}, graph.blocksById),
	            blockId: graph.blockId
	        };
	        const oldgraph = { nodesById: achild.nodesById,
	            blocksById: Object.assign({}, achild.blocksById)
	        };
	        const tail = { nid: null };
	        // copy nodes and rename ids
	        const nid = insertInGraph(g, oldgraph, rootNodeId, parentId, tail);
	        g.blockId = g.nodesById[nid].blockId;
	        // get previous child at this position
	        const parent = g.nodesById[parentId];
	        const previd = parent.children[pos];
	        const prevnode = g.nodesById[previd];
	        // This is where the previous child will go
	        const tailnode = g.nodesById[tail.nid];
	        // tail.children [ 0 ] = previd
	        tailnode.children = Immutable_1.Immutable.aset(tailnode.children, 0, previd);
	        prevnode.parent = tail.nid;
	        // parent.children [ pos ] = nid
	        parent.children = Immutable_1.Immutable.aset(parent.children, pos, nid);
	        return checkFreeze(g);
	    };
	    // Cut a branch a return the branch as a new graph.
	    GraphHelper.cut = (graph, nodeId) => {
	        let g = { nodesById: {},
	            blocksById: {},
	            blockId: Block_1.BlockHelper.rootBlockId
	        };
	        const oldgraph = { nodesById: graph.nodesById,
	            blocksById: Object.assign({}, graph.blocksById)
	        };
	        const tail = { nid: null };
	        insertInGraph(g, oldgraph, nodeId, null, tail);
	        return checkFreeze(g);
	    };
	    // Remove a branch and return the smaller tree.
	    GraphHelper.drop = (graph, nodeId) => {
	        let g = { nodesById: {},
	            blocksById: {},
	            blockId: Block_1.BlockHelper.rootBlockId
	        };
	        const oldgraph = { nodesById: graph.nodesById,
	            blocksById: Object.assign({}, graph.blocksById)
	        };
	        const tail = { nid: null };
	        insertInGraph(g, oldgraph, rootNodeId, null, tail, nodeId);
	        return checkFreeze(g);
	    };
	    const exportOne = (graph, context, file, folder, nodeId, slotref) => {
	        const node = graph.nodesById[nodeId];
	        const block = graph.blocksById[node.blockId];
	        const name = slotref ? `${slotref}.${block.name}` : block.name;
	        file(context, `${name}.ts`, block.source);
	        let sub;
	        const children = node.children;
	        for (let i = 0; i < children.length; ++i) {
	            const slotref = i < 10 ? `0${i}` : String(i);
	            const childId = children[i];
	            if (childId) {
	                if (!sub) {
	                    // create folder for children
	                    sub = folder(context, name);
	                }
	                exportOne(graph, sub, file, folder, childId, slotref);
	            }
	        }
	    };
	    GraphHelper.exportGraph = (graph, context // this is the context passed for root element
	        , file, folder) => {
	        exportOne(graph, context, file, folder, rootNodeId);
	    };
	    GraphHelper.updateSource = (graph, blockId, source) => {
	        const oblock = graph.blocksById[blockId];
	        const block = Block_1.BlockHelper.update(oblock, { source });
	        const g = Immutable_1.Immutable.update(graph, 'blocksById', blockId, block);
	        // FIXME: checkFreeze
	        return checkFreeze(g);
	    };
	})(GraphHelper = exports.GraphHelper || (exports.GraphHelper = {}));


/***/ },
/* 26 */
/***/ function(module, exports) {

	"use strict";
	var NodeHelper;
	(function (NodeHelper) {
	    NodeHelper.nextNodeId = (nodesById) => {
	        let n = 0;
	        while (nodesById[`n${n}`]) {
	            n += 1;
	        }
	        return `n${n}`;
	    };
	    NodeHelper.rootNodeId = NodeHelper.nextNodeId({});
	    NodeHelper.create = (blockId, id, parent, children) => {
	        return Object.freeze({ id,
	            blockId,
	            parent,
	            children: Object.freeze(children || [])
	        });
	    };
	})(NodeHelper = exports.NodeHelper || (exports.NodeHelper = {}));


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(28));
	__export(__webpack_require__(74));
	__export(__webpack_require__(78));
	const Model = __webpack_require__(79);
	const add_2 = __webpack_require__(74);
	const controls_1 = __webpack_require__(80);
	const name_1 = __webpack_require__(85);
	const select_1 = __webpack_require__(87);
	const source_1 = __webpack_require__(89);
	const tab_1 = __webpack_require__(94);
	const values_1 = __webpack_require__(95);
	const CurrentBlock = Model.monkey({ cursors: { sceneById: ['data', 'scene'],
	        sceneId: ['$sceneId'],
	        projectById: ['data', 'project'],
	        projectId: ['$projectId'],
	        select: ['$block']
	    },
	    get(state) {
	        const project = (state.projectById || {})[state.projectId];
	        const scene = (state.sceneById || {})[state.sceneId];
	        const choice = { project, scene };
	        const select = state.select || {};
	        let graph;
	        if (project && select.ownerType === 'project') {
	            graph = project.graph;
	        }
	        else if (scene && select.ownerType === 'scene') {
	            graph = scene.graph;
	        }
	        if (graph) {
	            return graph.blocksById[select.id];
	        }
	        else {
	            return undefined;
	        }
	    }
	});
	exports.Block = (options = {}) => {
	    return (module, controller) => {
	        // This state is where we read and write to
	        // the database
	        module.addState(CurrentBlock);
	        module.addSignals({ add: add_2.add,
	            controls: controls_1.controls,
	            name: name_1.name,
	            select: select_1.select,
	            source: source_1.source,
	            tab: tab_1.tab,
	            values: values_1.values
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(29));


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const CodeHelper_1 = __webpack_require__(30);
	const Immutable_1 = __webpack_require__(43);
	const Playback_1 = __webpack_require__(44);
	const DEFAULT_SOURCE = __webpack_require__(72);
	const defaultMeta = Playback_1.PlaybackHelper.defaultMeta;
	var BlockHelper;
	(function (BlockHelper) {
	    BlockHelper.MAIN_SOURCE = __webpack_require__(73);
	    BlockHelper.nextBlockId = (blocksById) => {
	        let n = 0;
	        while (blocksById[`b${n}`]) {
	            n += 1;
	        }
	        return `b${n}`;
	    };
	    BlockHelper.rootBlockId = BlockHelper.nextBlockId({});
	    BlockHelper.main = () => {
	        return BlockHelper.create('main', BlockHelper.MAIN_SOURCE);
	    };
	    BlockHelper.create = (name, source = DEFAULT_SOURCE) => {
	        const info = processSource(source);
	        return Immutable_1.Immutable.merge({ id: BlockHelper.rootBlockId,
	            name,
	            source
	        }, info);
	    };
	    BlockHelper.update = (block, changes) => {
	        const newobj = Immutable_1.Immutable.merge(block, changes);
	        if (changes.source) {
	            const info = processSource(changes.source);
	            return Immutable_1.Immutable.merge(newobj, info);
	        }
	        else {
	            return newobj;
	        }
	    };
	    const TypeRe = /^\s*\(([^\)]*)\)\s*:\s*(\S+)\s*$/;
	    const ArgRe = /^\s*$|^\s*\S+\s*:\s*(\S+)\s*$/;
	    BlockHelper.normalizeType = (t) => {
	        if (!t) {
	            return null;
	        }
	        const m = TypeRe.exec(t);
	        if (!m) {
	            throw `Invalid type '${t}' (SyntaxError).`;
	        }
	        const args = [];
	        const list = m[1].split(',');
	        for (const e of list) {
	            const a = ArgRe.exec(e);
	            if (!a) {
	                throw `Invalid type '${t}' (SyntaxError).`;
	            }
	            args.push(a[1]);
	        }
	        return `(${args.join()}):${m[2]}`;
	    };
	    BlockHelper.parseMeta = (exports) => {
	        const meta = {};
	        const emeta = exports.meta || {};
	        // expect?: TypeMap
	        const expect = emeta.expect;
	        if (expect) {
	            meta.expect = expect;
	        }
	        // provide?: TypeMap
	        const provide = emeta.provide;
	        if (provide) {
	            meta.provide = provide;
	        }
	        const children = emeta.children;
	        // all?: boolean // set to true if children: 'all'
	        if (emeta.children === 'all') {
	            meta.all = true;
	        }
	        else if (Array.isArray(children)) {
	            meta.children = children.map(BlockHelper.normalizeType);
	        }
	        // update?: number // normalized type
	        if (exports.update && !emeta.update) {
	            meta.isvoid = true;
	        }
	        else if (emeta.update) {
	            meta.update = BlockHelper.normalizeType(emeta.update);
	        }
	        return meta;
	    };
	    const processSource = (source) => {
	        let js = '';
	        js = CodeHelper_1.CodeHelper.transpile(source);
	        const codefunc = new Function('exports', js);
	        // We now run the code.
	        const exports = {};
	        codefunc(exports);
	        const meta = BlockHelper.parseMeta(exports);
	        return { js,
	            meta
	        };
	    };
	})(BlockHelper = exports.BlockHelper || (exports.BlockHelper = {}));


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const LanguageService = __webpack_require__(31);
	const CodeMirror = __webpack_require__(35);
	// JS mode
	__webpack_require__(36);
	// Addons, extentions
	__webpack_require__(37);
	__webpack_require__(41);
	__webpack_require__(42);
	exports.SCRUBBER_VAR = '$scrub$';
	const UNARY_AFTER = ['=', '(', '?', ':', '['];
	const floatRe = /\./;
	const scrubdown = (e, i, cm) => {
	    // start click
	    const scrubber = cm.options.scrubber;
	    const sedit = scrubber.editor;
	    if (!sedit.lock) {
	        sedit.lock = 'scrub';
	    }
	    e.preventDefault();
	    const el = e.target;
	    const sx = e.clientX;
	    const sy = e.clientY;
	    // original value
	    const sv = scrubber.values[i];
	    // original literal (until we save on mouseup)
	    const lit = scrubber.literals[i];
	    // original line
	    const doc = cm.getDoc();
	    const oline = doc.getLine(lit.line);
	    const before = oline.substr(0, lit.ch);
	    const after = oline.substr(lit.ch + lit.text.length);
	    el.classList.add('scrubbing');
	    const sfloat = floatRe.test(el.innerHTML);
	    let v;
	    // move callback on global window (like drag)
	    const mousemove = (e) => {
	        e.preventDefault();
	        const isfloat = (sfloat && !e.shiftKey) || e.altKey;
	        // scale to -0.5, 0.5 in screen
	        const dx = (e.clientX - sx) / (window.innerWidth / 2);
	        const dy = -(e.clientY - sy) / (window.innerHeight / 2);
	        if (isfloat) {
	            // FLOAT
	            // get dim as approx 10^2 .... 10^-2 .... 10^2
	            const dimx = Math.pow(10, Math.abs(6 * dx) - 2);
	            const dimy = Math.pow(10, Math.abs(6 * dy) - 2);
	            const dist = (dx > 0 ? 1 : -1) * dimx
	                + (dy > 0 ? 1 : -1) * dimy;
	            v = (sv + dist).toFixed(4);
	            scrubber.values[i] = parseFloat(v); // ensures str === live value
	        }
	        else {
	            // INT
	            // get dim as approx 10^2 .... 1 .... 10^2
	            const dimx = Math.pow(10, Math.abs(2 * dx));
	            const dimy = Math.pow(10, Math.abs(2 * dy));
	            const dist = (dx > 0 ? 1 : -1) * dimx
	                + (dy > 0 ? 1 : -1) * dimy;
	            v = (sv + dist).toFixed(0);
	            scrubber.values[i] = parseInt(v);
	        }
	        el.textContent = v;
	        try {
	            scrubber.init();
	        }
	        catch (err) {
	            console.log(err);
	        }
	    };
	    const mouseup = (e) => {
	        window.removeEventListener('mousemove', mousemove);
	        window.removeEventListener('mouseup', mouseup);
	        // move mouse back
	        el.classList.remove('scrubbing');
	        document.body.style.cursor = 'auto';
	        // end of interaction, incoming sources from save op
	        const nline = before + v + after;
	        const f = { line: lit.line, ch: 0 };
	        const t = { line: lit.line, ch: oline.length };
	        if (scrubber.editor.lock === 'scrub') {
	            scrubber.editor.lock = null;
	        }
	        doc.replaceRange(nline, f, t);
	    };
	    document.body.style.cursor = 'move';
	    window.addEventListener('mousemove', mousemove);
	    window.addEventListener('mouseup', mouseup);
	};
	var CodeHelper;
	(function (CodeHelper) {
	    const replaceWithScrubber = (literals, value) => {
	        const idx = literals.push(value) - 1;
	        return `${exports.SCRUBBER_VAR}[${idx}]`;
	    };
	    CodeHelper.scrubParse = (source, literals, mode = 'javascript') => {
	        const output = [];
	        let line = 0;
	        let ch = 0;
	        const CM = CodeMirror; // this is annoying
	        CM.runMode(source, mode, (text, klass) => {
	            if (text === '\n') {
	                ++line;
	                ch = 0;
	                output.push(text);
	            }
	            else {
	                if (klass === 'number') {
	                    // const foo = 4 - 5
	                    const idx = literals.push({ text, line, ch, value: parseFloat(text) }) - 1;
	                    let p = output.length - 1;
	                    let uch = '';
	                    let unarypos = null;
	                    let getMinus = true;
	                    while (true) {
	                        const op = output[p];
	                        if (op[0] === ' ') {
	                            // whitespace
	                            if (getMinus) {
	                                uch = op + uch;
	                            }
	                            --p;
	                        }
	                        else if (getMinus) {
	                            if (op === '-') {
	                                getMinus = false;
	                                unarypos = p;
	                                uch = op + uch;
	                                --p;
	                            }
	                            else {
	                                // not unary minus
	                                break;
	                            }
	                        }
	                        else if (UNARY_AFTER.indexOf(op) >= 0) {
	                            break;
	                        }
	                        else {
	                            unarypos = null;
	                            break;
	                        }
	                    }
	                    const s = `${exports.SCRUBBER_VAR}[${idx}]`;
	                    if (unarypos) {
	                        // unary minus
	                        while (output.length > unarypos) {
	                            output.pop();
	                        }
	                        output.push(s);
	                        // make unary
	                        const l = literals[idx];
	                        l.value = -l.value;
	                        l.text = uch + l.text;
	                        l.ch -= uch.length;
	                    }
	                    else {
	                        output.push(s);
	                    }
	                }
	                else {
	                    output.push(text);
	                }
	                ch += text.length;
	            }
	        });
	        return output.join('');
	    };
	    CodeHelper.transpile = (source, scrubber) => {
	        let src = source;
	        if (scrubber) {
	            scrubber.literals = [];
	            src = CodeHelper.scrubParse(source, scrubber.literals);
	            scrubber.values = scrubber.literals.map(l => l.value);
	        }
	        const { code, errors } = LanguageService.compile(src); // ts.transpile ( src )
	        if (scrubber) {
	            scrubber['HACK'] = errors;
	        }
	        return code;
	    };
	    let updating = false;
	    // Called by playback when the content is compiled.
	    CodeHelper.scrubMark = (cm) => {
	        const scrubber = cm.options.scrubber;
	        if (updating || scrubber.editor.noscrub) {
	            // update could be called while we update the tree. Avoid.
	            return;
	        }
	        updating = true;
	        // clear previous marks
	        const doc = cm.getDoc();
	        const marks = doc.getAllMarks();
	        for (const m of marks) {
	            m.clear();
	        }
	        scrubber.editor.cursorMarkCleared = false;
	        const literals = scrubber.literals;
	        if (!literals) {
	            updating = false;
	            return;
	        }
	        for (let i = 0; i < literals.length; ++i) {
	            const l = literals[i];
	            const span = document.createElement('span');
	            span.textContent = l.text;
	            const start = { line: l.line, ch: l.ch };
	            const end = { line: l.line, ch: l.ch + l.text.length };
	            span.classList.add('cm-number');
	            span.classList.add('scrub');
	            const mark = doc.markText(start, end, { handleMouseEvents: true,
	                replacedWith: span,
	                atomic: false
	            });
	            CodeMirror.on(mark, 'beforeCursorEnter', () => {
	                // mark around cursor are a mess
	                scrubber.editor.cursorMarkCleared = true;
	                mark.clear();
	            });
	            span.addEventListener('mousedown', (e) => {
	                scrubdown(e, i, cm);
	            });
	        }
	        updating = false;
	    };
	    CodeHelper.scrubSetup = (cm, scrubber, old) => {
	        if (scrubber) {
	            cm.options.scrubber = scrubber;
	            CodeHelper.scrubMark(cm);
	        }
	    };
	    CodeHelper.sourceChanged = (cm, block) => {
	        const sedit = cm.options.scrubber.editor;
	        if (sedit.lock && sedit.blockId === block.id) {
	            return;
	        }
	        else {
	            sedit.blockId = block.id;
	            cm.setValue(block.source);
	            // clear marks until we get updated ones
	            const doc = cm.getDoc();
	            const marks = doc.getAllMarks();
	            for (const m of marks) {
	                m.clear();
	            }
	        }
	    };
	    let defaultEditor;
	    CodeHelper.getEditor = () => {
	        return defaultEditor;
	    };
	    const NoScrubToggle = (cm) => {
	        const sedit = cm.options.scrubber.editor;
	        sedit.noscrub = !sedit.noscrub;
	        if (sedit.noscrub) {
	            // clear marks
	            const doc = cm.getDoc();
	            const marks = doc.getAllMarks();
	            for (const m of marks) {
	                m.clear();
	            }
	        }
	        else {
	            CodeHelper.scrubMark(cm);
	        }
	    };
	    const isLiteral = /[0-9\.]/;
	    CodeHelper.editor = (elm, source = '', save = null) => {
	        // We copy in here the currently loaded block's scrubber so that
	        // we can access it from the editor.
	        const scrubber = { values: [], init() { }, literals: [], editor: {} };
	        const opts = { value: source,
	            indentUnit: 2,
	            lineWrapping: true,
	            theme: 'bespin',
	            mode: 'javascript',
	            keyMap: 'vim' // FIXME: should come from user prefs
	            ,
	            gutters: ['lucy-gutter'],
	            extraKeys: { Tab: 'indentMore',
	                ['Shift-Tab']: 'indentLess',
	                ['Alt-S']: NoScrubToggle
	            },
	            smartIndent: false
	        };
	        // addons
	        opts['scrollbarStyle'] = 'overlay';
	        opts['scrubber'] = scrubber;
	        const cm = CodeMirror(elm, opts);
	        defaultEditor = cm;
	        cm.on('focus', () => {
	            scrubber.editor.lock = 'focus'; // block.id
	        });
	        cm.on('blur', () => {
	            scrubber.editor.lock = null;
	        });
	        cm.on('cursorActivity', () => {
	            if (scrubber.editor.cursorMarkCleared) {
	                // Check cursor distance to literal number
	                const doc = cm.getDoc();
	                const loc = doc.getCursor();
	                const before = doc.getRange({ line: loc.line, ch: loc.ch - 1 }, loc);
	                const after = doc.getRange(loc, { line: loc.line, ch: loc.ch + 1 });
	                console.log(JSON.stringify([before, after, isLiteral.test(before), isLiteral.test(after)]));
	                if (isLiteral.test(before) || isLiteral.test(after)) {
	                }
	                else {
	                    // mark and clear
	                    console.log('mark');
	                    CodeHelper.scrubMark(cm);
	                }
	            }
	        });
	        if (save) {
	            cm.on('changes', save);
	        }
	        return cm;
	    };
	})(CodeHelper = exports.CodeHelper || (exports.CodeHelper = {}));
	CodeMirror.defineOption('scrubber', {}, CodeHelper.scrubSetup);


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const ts = __webpack_require__(32);
	const BASE_HOST = { getCompilationSettings() {
	        return { target: ts.ScriptTarget.ES6,
	            module: ts.ModuleKind.CommonJS
	        };
	    },
	    getNewLine() {
	        return '\n';
	    },
	    getCurrentDirectory() {
	        return 'LUCIDITY'; // ?
	    },
	    getDefaultLibFileName(options) {
	        return "lib.d.ts";
	    },
	    log(s) {
	        console.log('LOG', s);
	    },
	    trace(s) {
	        console.log('TRACE', s);
	    },
	    error(s) {
	        console.error('ERROR', s);
	    },
	    useCaseSensitiveFileNames() {
	        return true;
	    },
	    resolveModuleNames(moduleNames, containingFile) {
	        console.log(moduleNames);
	        return moduleNames.map(n => ({ resolvedFileName: n }));
	        // isExternalLibraryImport?: boolean
	    }
	};
	const LUCIDITY_D_TS_SOURCE = __webpack_require__(33);
	const LUCIDITY_D_TS = ts.ScriptSnapshot.fromString(LUCIDITY_D_TS_SOURCE);
	const LIB_D_TS_SOURCE = __webpack_require__(34);
	const LIB_D_TS = ts.ScriptSnapshot.fromString(LIB_D_TS_SOURCE);
	const D_TS = { ['lucidity']: LUCIDITY_D_TS,
	    ['lib.d.ts']: LIB_D_TS
	};
	console.log(D_TS);
	const libShot = (filename) => {
	    const s = D_TS[filename];
	    console.log(filename, s && s.getLength());
	    return s;
	};
	const mainFile = { source: '',
	    version: 1
	};
	// This is used by typesript checker. This provides the type checking environment for scripts.
	const LanguageHost = () => {
	    const lh = { getScriptFileNames() {
	            return ['main.ts'];
	        },
	        getScriptVersion(filename) {
	            if (filename === 'main.ts') {
	                return mainFile.version.toString();
	            }
	            else {
	                return '1.0';
	            }
	        },
	        getScriptSnapshot(filename) {
	            if (filename === 'main.ts') {
	                return ts.ScriptSnapshot.fromString(mainFile.source);
	            }
	            return libShot(filename);
	        }
	    };
	    return Object.assign(BASE_HOST, lh);
	};
	exports.create = () => {
	    // FIXME: Use a DocumentRegistry to at least store types for
	    // things like lib.d.ts, lucidity, THREE.js and share them.
	    const host = LanguageHost();
	    return ts.createLanguageService(host, ts.createDocumentRegistry());
	};
	const LS = exports.create();
	exports.compile = (source) => {
	    mainFile.source = source;
	    mainFile.version++;
	    const output = LS.getEmitOutput('main.ts');
	    if (!output.emitSkipped) {
	        // valid
	        const code = output.outputFiles[0].text;
	        return { code, errors: null };
	    }
	    else {
	        // errors
	        const diagnostics = [...LS.getCompilerOptionsDiagnostics(),
	            ...LS.getSyntacticDiagnostics('main.ts'),
	            ...LS.getSemanticDiagnostics('main.ts')
	        ];
	        if (diagnostics.length > 0) {
	            let errors = diagnostics.map(d => {
	                const message = ts.flattenDiagnosticMessageText(d.messageText, '\n');
	                if (d.file) {
	                    const loc = d.file.getLineAndCharacterOfPosition(d.start);
	                    console.log(d.file.fileName, message);
	                    return { loc, message };
	                }
	                else {
	                    console.log(`  Error: ${message}`);
	                    return { loc: { line: 0, ch: 0 }, message };
	                }
	            });
	            // throw errors
	            return { code: '', errors };
	        }
	    }
	};


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(73);

/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = "// This is for scrubbing. This variable is set by lucidity. Do not use it\n// directly.\ndeclare var $scrub$: any\n\ndeclare module 'lucidity' {\n\n  type ContextExtension = any\n\n  /* ********** CONTEXTUAL TYPES ********** */\n  export interface Time {\n    now: number // [s]\n    dt: number  // [s]\n  }\n\n  // velocity values from 0-127\n  type Note = number[]\n  // velocity values from 0-127\n  type Ctrl = number[]\n\n  export interface Midi {\n    note: Note[] // notes per channel 1-16\n    ctrl: Ctrl[] // ctrl per channel 1-16\n  }\n\n  export interface Screen {\n    width: number  // [px]\n    height: number // [px]\n    top: number    // [px]\n    bottom: number // [px]\n    left: number   // [px]\n    right: number  // [px]\n  }\n\n  /* ********* */\n\n  interface MainContext {\n    midi: Midi\n  }\n\n  type Cache = any\n\n  // TODO: Try to augment this contect during type checking of Block depending\n  // on context requirements, meta.expect field.\n  type Context = MainContext & ContextExtension\n\n  interface AllChildren {\n    (): void\n  }\n\n  interface Children {\n    [ key: number ]: Update\n    all?: AllChildren\n  }\n\n  interface Require {\n    ( libname: string ): any\n  }\n\n  export interface SliderCallback {\n    ( v: number ): void\n  }\n\n  export interface PadCallback {\n    ( x: number, y: number ): void\n  }\n\n  export interface Control {\n    Slider ( name: string, clbk: SliderCallback )\n    Pad ( namex: string, namey: string, clbk: PadCallback )\n  }\n\n  export interface Helpers {\n    // optional to ease testing\n    context?: Context\n    control?: Control\n    cache?: Cache\n    children?: Children\n    detached?: boolean\n    require?: Require\n  }\n\n  interface ContextType {\n    [ key: string ]: string\n  }\n\n  export interface Meta {\n    // only mandatory in the official library\n    description: string\n    tags: string[]\n    author: string\n    origin: string\n    version: string\n    // end mandatory\n    expect?: ContextType\n    provide?: ContextType\n    children?: string[] | 'all'\n    update?: string\n  }\n\n  export interface Init {\n    ( h: Helpers ): ContextExtension | void\n  }\n\n  export interface Update {\n    ( ... any ): any\n  }\n\n  export interface Block {\n    init?: Init\n    update?: Update\n    meta?: Meta\n  }\n}\n"

/***/ },
/* 34 */
/***/ function(module, exports) {

	module.exports = "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved. \r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \r\n \r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \r\nMERCHANTABLITY OR NON-INFRINGEMENT. \r\n \r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\n/// <reference no-default-lib=\"true\"/>\r\n/////////////////////////////\r\n/// ECMAScript APIs\r\n/////////////////////////////\r\n\r\ndeclare const NaN: number;\r\ndeclare const Infinity: number;\r\n\r\n/**\r\n  * Evaluates JavaScript code and executes it.\r\n  * @param x A String value that contains valid JavaScript code.\r\n  */\r\ndeclare function eval(x: string): any;\r\n\r\n/**\r\n  * Converts A string to an integer.\r\n  * @param s A string to convert into a number.\r\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString.\r\n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\r\n  * All other strings are considered decimal.\r\n  */\r\ndeclare function parseInt(s: string, radix?: number): number;\r\n\r\n/**\r\n  * Converts a string to a floating-point number.\r\n  * @param string A string that contains a floating-point number.\r\n  */\r\ndeclare function parseFloat(string: string): number;\r\n\r\n/**\r\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\r\n  * @param number A numeric value.\r\n  */\r\ndeclare function isNaN(number: number): boolean;\r\n\r\n/**\r\n  * Determines whether a supplied number is finite.\r\n  * @param number Any numeric value.\r\n  */\r\ndeclare function isFinite(number: number): boolean;\r\n\r\n/**\r\n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\r\n  * @param encodedURI A value representing an encoded URI.\r\n  */\r\ndeclare function decodeURI(encodedURI: string): string;\r\n\r\n/**\r\n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\r\n  * @param encodedURIComponent A value representing an encoded URI component.\r\n  */\r\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\r\n\r\n/**\r\n  * Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n  * @param uri A value representing an encoded URI.\r\n  */\r\ndeclare function encodeURI(uri: string): string;\r\n\r\n/**\r\n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\r\n  * @param uriComponent A value representing an encoded URI component.\r\n  */\r\ndeclare function encodeURIComponent(uriComponent: string): string;\r\n\r\ninterface PropertyDescriptor {\r\n    configurable?: boolean;\r\n    enumerable?: boolean;\r\n    value?: any;\r\n    writable?: boolean;\r\n    get? (): any;\r\n    set? (v: any): void;\r\n}\r\n\r\ninterface PropertyDescriptorMap {\r\n    [s: string]: PropertyDescriptor;\r\n}\r\n\r\ninterface Object {\r\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\r\n    constructor: Function;\r\n\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n\r\n    /** Returns a date converted to a string using the current locale. */\r\n    toLocaleString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Object;\r\n\r\n    /**\r\n      * Determines whether an object has a property with the specified name.\r\n      * @param v A property name.\r\n      */\r\n    hasOwnProperty(v: string): boolean;\r\n\r\n    /**\r\n      * Determines whether an object exists in another object's prototype chain.\r\n      * @param v Another object whose prototype chain is to be checked.\r\n      */\r\n    isPrototypeOf(v: Object): boolean;\r\n\r\n    /**\r\n      * Determines whether a specified property is enumerable.\r\n      * @param v A property name.\r\n      */\r\n    propertyIsEnumerable(v: string): boolean;\r\n}\r\n\r\ninterface ObjectConstructor {\r\n    new (value?: any): Object;\r\n    (): any;\r\n    (value: any): any;\r\n\r\n    /** A reference to the prototype for a class of objects. */\r\n    readonly prototype: Object;\r\n\r\n    /**\r\n      * Returns the prototype of an object.\r\n      * @param o The object that references the prototype.\r\n      */\r\n    getPrototypeOf(o: any): any;\r\n\r\n    /**\r\n      * Gets the own property descriptor of the specified object.\r\n      * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\r\n      * @param o Object that contains the property.\r\n      * @param p Name of the property.\r\n    */\r\n    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor;\r\n\r\n    /**\r\n      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\r\n      * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\r\n      * @param o Object that contains the own properties.\r\n      */\r\n    getOwnPropertyNames(o: any): string[];\r\n\r\n    /**\r\n      * Creates an object that has null prototype.\r\n      * @param o Object to use as a prototype. May be null\r\n      */\r\n    create(o: null): any;\r\n\r\n    /**\r\n      * Creates an object that has the specified prototype, and that optionally contains specified properties.\r\n      * @param o Object to use as a prototype. May be null\r\n      */\r\n    create<T>(o: T): T;\r\n\r\n    /**\r\n      * Creates an object that has the specified prototype, and that optionally contains specified properties.\r\n      * @param o Object to use as a prototype. May be null\r\n      * @param properties JavaScript object that contains one or more property descriptors.\r\n      */\r\n    create(o: any, properties: PropertyDescriptorMap): any;\r\n\r\n    /**\r\n      * Adds a property to an object, or modifies attributes of an existing property.\r\n      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\r\n      * @param p The property name.\r\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\r\n      */\r\n    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any;\r\n\r\n    /**\r\n      * Adds one or more properties to an object, and/or modifies attributes of existing properties.\r\n      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\r\n      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\r\n      */\r\n    defineProperties(o: any, properties: PropertyDescriptorMap): any;\r\n\r\n    /**\r\n      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\r\n      * @param o Object on which to lock the attributes.\r\n      */\r\n    seal<T>(o: T): T;\r\n\r\n    /**\r\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n      * @param o Object on which to lock the attributes.\r\n      */\r\n    freeze<T>(o: T): T;\r\n\r\n    /**\r\n      * Prevents the addition of new properties to an object.\r\n      * @param o Object to make non-extensible.\r\n      */\r\n    preventExtensions<T>(o: T): T;\r\n\r\n    /**\r\n      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\r\n      * @param o Object to test.\r\n      */\r\n    isSealed(o: any): boolean;\r\n\r\n    /**\r\n      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\r\n      * @param o Object to test.\r\n      */\r\n    isFrozen(o: any): boolean;\r\n\r\n    /**\r\n      * Returns a value that indicates whether new properties can be added to an object.\r\n      * @param o Object to test.\r\n      */\r\n    isExtensible(o: any): boolean;\r\n\r\n    /**\r\n      * Returns the names of the enumerable properties and methods of an object.\r\n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n      */\r\n    keys(o: any): string[];\r\n}\r\n\r\n/**\r\n  * Provides functionality common to all JavaScript objects.\r\n  */\r\ndeclare const Object: ObjectConstructor;\r\n\r\n/**\r\n  * Creates a new function.\r\n  */\r\ninterface Function {\r\n    /**\r\n      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\r\n      * @param thisArg The object to be used as the this object.\r\n      * @param argArray A set of arguments to be passed to the function.\r\n      */\r\n    apply(this: Function, thisArg: any, argArray?: any): any;\r\n\r\n    /**\r\n      * Calls a method of an object, substituting another object for the current object.\r\n      * @param thisArg The object to be used as the current object.\r\n      * @param argArray A list of arguments to be passed to the method.\r\n      */\r\n    call(this: Function, thisArg: any, ...argArray: any[]): any;\r\n\r\n    /**\r\n      * For a given function, creates a bound function that has the same body as the original function.\r\n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n      * @param thisArg An object to which the this keyword can refer inside the new function.\r\n      * @param argArray A list of arguments to be passed to the new function.\r\n      */\r\n    bind(this: Function, thisArg: any, ...argArray: any[]): any;\r\n\r\n    prototype: any;\r\n    readonly length: number;\r\n\r\n    // Non-standard extensions\r\n    arguments: any;\r\n    caller: Function;\r\n}\r\n\r\ninterface FunctionConstructor {\r\n    /**\r\n      * Creates a new function.\r\n      * @param args A list of arguments the function accepts.\r\n      */\r\n    new (...args: string[]): Function;\r\n    (...args: string[]): Function;\r\n    readonly prototype: Function;\r\n}\r\n\r\ndeclare const Function: FunctionConstructor;\r\n\r\ninterface IArguments {\r\n    [index: number]: any;\r\n    length: number;\r\n    callee: Function;\r\n}\r\n\r\ninterface String {\r\n    /** Returns a string representation of a string. */\r\n    toString(): string;\r\n\r\n    /**\r\n      * Returns the character at the specified index.\r\n      * @param pos The zero-based index of the desired character.\r\n      */\r\n    charAt(pos: number): string;\r\n\r\n    /**\r\n      * Returns the Unicode value of the character at the specified location.\r\n      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\r\n      */\r\n    charCodeAt(index: number): number;\r\n\r\n    /**\r\n      * Returns a string that contains the concatenation of two or more strings.\r\n      * @param strings The strings to append to the end of the string.\r\n      */\r\n    concat(...strings: string[]): string;\r\n\r\n    /**\r\n      * Returns the position of the first occurrence of a substring.\r\n      * @param searchString The substring to search for in the string\r\n      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n      */\r\n    indexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n      * Returns the last occurrence of a substring in the string.\r\n      * @param searchString The substring to search for.\r\n      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\r\n      */\r\n    lastIndexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n      * Determines whether two strings are equivalent in the current locale.\r\n      * @param that String to compare to target string\r\n      */\r\n    localeCompare(that: string): number;\r\n\r\n    /**\r\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n      * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n      */\r\n    match(regexp: string): RegExpMatchArray | null;\r\n\r\n    /**\r\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n      * @param regexp A regular expression object that contains the regular expression pattern and applicable flags.\r\n      */\r\n    match(regexp: RegExp): RegExpMatchArray | null;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A string that represents the regular expression.\r\n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n      */\r\n    replace(searchValue: string, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A string that represents the regular expression.\r\n      * @param replacer A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: string, replacer: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags.\r\n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n      */\r\n    replace(searchValue: RegExp, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\r\n      * @param replacer A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: RegExp, replacer: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param regexp The regular expression pattern and applicable flags.\r\n      */\r\n    search(regexp: string): number;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param regexp The regular expression pattern and applicable flags.\r\n      */\r\n    search(regexp: RegExp): number;\r\n\r\n    /**\r\n      * Returns a section of a string.\r\n      * @param start The index to the beginning of the specified portion of stringObj.\r\n      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\r\n      * If this value is not specified, the substring continues to the end of stringObj.\r\n      */\r\n    slice(start?: number, end?: number): string;\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(separator: string, limit?: number): string[];\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param separator A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(separator: RegExp, limit?: number): string[];\r\n\r\n    /**\r\n      * Returns the substring at the specified location within a String object.\r\n      * @param start The zero-based index number indicating the beginning of the substring.\r\n      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\n      * If end is omitted, the characters from start through the end of the original string are returned.\r\n      */\r\n    substring(start: number, end?: number): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to lowercase. */\r\n    toLowerCase(): string;\r\n\r\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\r\n    toLocaleLowerCase(): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to uppercase. */\r\n    toUpperCase(): string;\r\n\r\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\r\n    toLocaleUpperCase(): string;\r\n\r\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\r\n    trim(): string;\r\n\r\n    /** Returns the length of a String object. */\r\n    readonly length: number;\r\n\r\n    // IE extensions\r\n    /**\r\n      * Gets a substring beginning at the specified location and having the specified length.\r\n      * @param from The starting position of the desired substring. The index of the first character in the string is zero.\r\n      * @param length The number of characters to include in the returned substring.\r\n      */\r\n    substr(from: number, length?: number): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): string;\r\n\r\n    readonly [index: number]: string;\r\n}\r\n\r\ninterface StringConstructor {\r\n    new (value?: any): String;\r\n    (value?: any): string;\r\n    readonly prototype: String;\r\n    fromCharCode(...codes: number[]): string;\r\n}\r\n\r\n/**\r\n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\r\n  */\r\ndeclare const String: StringConstructor;\r\n\r\ninterface Boolean {\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): boolean;\r\n}\r\n\r\ninterface BooleanConstructor {\r\n    new (value?: any): Boolean;\r\n    (value?: any): boolean;\r\n    readonly prototype: Boolean;\r\n}\r\n\r\ndeclare const Boolean: BooleanConstructor;\r\n\r\ninterface Number {\r\n    /**\r\n      * Returns a string representation of an object.\r\n      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\r\n      */\r\n    toString(radix?: number): string;\r\n\r\n    /**\r\n      * Returns a string representing a number in fixed-point notation.\r\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n      */\r\n    toFixed(fractionDigits?: number): string;\r\n\r\n    /**\r\n      * Returns a string containing a number represented in exponential notation.\r\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n      */\r\n    toExponential(fractionDigits?: number): string;\r\n\r\n    /**\r\n      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\r\n      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\r\n      */\r\n    toPrecision(precision?: number): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): number;\r\n}\r\n\r\ninterface NumberConstructor {\r\n    new (value?: any): Number;\r\n    (value?: any): number;\r\n    readonly prototype: Number;\r\n\r\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\r\n    readonly MAX_VALUE: number;\r\n\r\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\r\n    readonly MIN_VALUE: number;\r\n\r\n    /**\r\n      * A value that is not a number.\r\n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\r\n      */\r\n    readonly NaN: number;\r\n\r\n    /**\r\n      * A value that is less than the largest negative number that can be represented in JavaScript.\r\n      * JavaScript displays NEGATIVE_INFINITY values as -infinity.\r\n      */\r\n    readonly NEGATIVE_INFINITY: number;\r\n\r\n    /**\r\n      * A value greater than the largest number that can be represented in JavaScript.\r\n      * JavaScript displays POSITIVE_INFINITY values as infinity.\r\n      */\r\n    readonly POSITIVE_INFINITY: number;\r\n}\r\n\r\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\r\ndeclare const Number: NumberConstructor;\r\n\r\ninterface TemplateStringsArray extends Array<string> {\r\n    readonly raw: string[];\r\n}\r\n\r\ninterface Math {\r\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\r\n    readonly E: number;\r\n    /** The natural logarithm of 10. */\r\n    readonly LN10: number;\r\n    /** The natural logarithm of 2. */\r\n    readonly LN2: number;\r\n    /** The base-2 logarithm of e. */\r\n    readonly LOG2E: number;\r\n    /** The base-10 logarithm of e. */\r\n    readonly LOG10E: number;\r\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\r\n    readonly PI: number;\r\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\r\n    readonly SQRT1_2: number;\r\n    /** The square root of 2. */\r\n    readonly SQRT2: number;\r\n    /**\r\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\r\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\r\n      * @param x A numeric expression for which the absolute value is needed.\r\n      */\r\n    abs(x: number): number;\r\n    /**\r\n      * Returns the arc cosine (or inverse cosine) of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    acos(x: number): number;\r\n    /**\r\n      * Returns the arcsine of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    asin(x: number): number;\r\n    /**\r\n      * Returns the arctangent of a number.\r\n      * @param x A numeric expression for which the arctangent is needed.\r\n      */\r\n    atan(x: number): number;\r\n    /**\r\n      * Returns the angle (in radians) from the X axis to a point.\r\n      * @param y A numeric expression representing the cartesian y-coordinate.\r\n      * @param x A numeric expression representing the cartesian x-coordinate.\r\n      */\r\n    atan2(y: number, x: number): number;\r\n    /**\r\n      * Returns the smallest number greater than or equal to its numeric argument.\r\n      * @param x A numeric expression.\r\n      */\r\n    ceil(x: number): number;\r\n    /**\r\n      * Returns the cosine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    cos(x: number): number;\r\n    /**\r\n      * Returns e (the base of natural logarithms) raised to a power.\r\n      * @param x A numeric expression representing the power of e.\r\n      */\r\n    exp(x: number): number;\r\n    /**\r\n      * Returns the greatest number less than or equal to its numeric argument.\r\n      * @param x A numeric expression.\r\n      */\r\n    floor(x: number): number;\r\n    /**\r\n      * Returns the natural logarithm (base e) of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    log(x: number): number;\r\n    /**\r\n      * Returns the larger of a set of supplied numeric expressions.\r\n      * @param values Numeric expressions to be evaluated.\r\n      */\r\n    max(...values: number[]): number;\r\n    /**\r\n      * Returns the smaller of a set of supplied numeric expressions.\r\n      * @param values Numeric expressions to be evaluated.\r\n      */\r\n    min(...values: number[]): number;\r\n    /**\r\n      * Returns the value of a base expression taken to a specified power.\r\n      * @param x The base value of the expression.\r\n      * @param y The exponent value of the expression.\r\n      */\r\n    pow(x: number, y: number): number;\r\n    /** Returns a pseudorandom number between 0 and 1. */\r\n    random(): number;\r\n    /**\r\n      * Returns a supplied numeric expression rounded to the nearest number.\r\n      * @param x The value to be rounded to the nearest number.\r\n      */\r\n    round(x: number): number;\r\n    /**\r\n      * Returns the sine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    sin(x: number): number;\r\n    /**\r\n      * Returns the square root of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    sqrt(x: number): number;\r\n    /**\r\n      * Returns the tangent of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    tan(x: number): number;\r\n}\r\n/** An intrinsic object that provides basic mathematics functionality and constants. */\r\ndeclare const Math: Math;\r\n\r\n/** Enables basic storage and retrieval of dates and times. */\r\ninterface Date {\r\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\r\n    toString(): string;\r\n    /** Returns a date as a string value. */\r\n    toDateString(): string;\r\n    /** Returns a time as a string value. */\r\n    toTimeString(): string;\r\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\r\n    toLocaleString(): string;\r\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\r\n    toLocaleDateString(): string;\r\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\r\n    toLocaleTimeString(): string;\r\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\r\n    valueOf(): number;\r\n    /** Gets the time value in milliseconds. */\r\n    getTime(): number;\r\n    /** Gets the year, using local time. */\r\n    getFullYear(): number;\r\n    /** Gets the year using Universal Coordinated Time (UTC). */\r\n    getUTCFullYear(): number;\r\n    /** Gets the month, using local time. */\r\n    getMonth(): number;\r\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMonth(): number;\r\n    /** Gets the day-of-the-month, using local time. */\r\n    getDate(): number;\r\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\r\n    getUTCDate(): number;\r\n    /** Gets the day of the week, using local time. */\r\n    getDay(): number;\r\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\r\n    getUTCDay(): number;\r\n    /** Gets the hours in a date, using local time. */\r\n    getHours(): number;\r\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCHours(): number;\r\n    /** Gets the minutes of a Date object, using local time. */\r\n    getMinutes(): number;\r\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMinutes(): number;\r\n    /** Gets the seconds of a Date object, using local time. */\r\n    getSeconds(): number;\r\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCSeconds(): number;\r\n    /** Gets the milliseconds of a Date, using local time. */\r\n    getMilliseconds(): number;\r\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMilliseconds(): number;\r\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\r\n    getTimezoneOffset(): number;\r\n    /**\r\n      * Sets the date and time value in the Date object.\r\n      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\r\n      */\r\n    setTime(time: number): number;\r\n    /**\r\n      * Sets the milliseconds value in the Date object using local time.\r\n      * @param ms A numeric value equal to the millisecond value.\r\n      */\r\n    setMilliseconds(ms: number): number;\r\n    /**\r\n      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param ms A numeric value equal to the millisecond value.\r\n      */\r\n    setUTCMilliseconds(ms: number): number;\r\n\r\n    /**\r\n      * Sets the seconds value in the Date object using local time.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setSeconds(sec: number, ms?: number): number;\r\n    /**\r\n      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCSeconds(sec: number, ms?: number): number;\r\n    /**\r\n      * Sets the minutes value in the Date object using local time.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the hour value in the Date object using local time.\r\n      * @param hours A numeric value equal to the hours value.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param hours A numeric value equal to the hours value.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the numeric day-of-the-month value of the Date object using local time.\r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setDate(date: number): number;\r\n    /**\r\n      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setUTCDate(date: number): number;\r\n    /**\r\n      * Sets the month value in the Date object using local time.\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\r\n      */\r\n    setMonth(month: number, date?: number): number;\r\n    /**\r\n      * Sets the month value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\r\n      */\r\n    setUTCMonth(month: number, date?: number): number;\r\n    /**\r\n      * Sets the year of the Date object using local time.\r\n      * @param year A numeric value for the year.\r\n      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\r\n      * @param date A numeric value equal for the day of the month.\r\n      */\r\n    setFullYear(year: number, month?: number, date?: number): number;\r\n    /**\r\n      * Sets the year value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param year A numeric value equal to the year.\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setUTCFullYear(year: number, month?: number, date?: number): number;\r\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\r\n    toUTCString(): string;\r\n    /** Returns a date as a string value in ISO format. */\r\n    toISOString(): string;\r\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\r\n    toJSON(key?: any): string;\r\n}\r\n\r\ninterface DateConstructor {\r\n    new (): Date;\r\n    new (value: number): Date;\r\n    new (value: string): Date;\r\n    new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\r\n    (): string;\r\n    readonly prototype: Date;\r\n    /**\r\n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\r\n      * @param s A date string\r\n      */\r\n    parse(s: string): number;\r\n    /**\r\n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\r\n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\r\n      * @param month The month as an number between 0 and 11 (January to December).\r\n      * @param date The date as an number between 1 and 31.\r\n      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.\r\n      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.\r\n      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.\r\n      * @param ms An number from 0 to 999 that specifies the milliseconds.\r\n      */\r\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\r\n    now(): number;\r\n}\r\n\r\ndeclare const Date: DateConstructor;\r\n\r\ninterface RegExpMatchArray extends Array<string> {\r\n    index?: number;\r\n    input?: string;\r\n}\r\n\r\ninterface RegExpExecArray extends Array<string> {\r\n    index: number;\r\n    input: string;\r\n}\r\n\r\ninterface RegExp {\r\n    /**\r\n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\r\n      * @param string The String object or string literal on which to perform the search.\r\n      */\r\n    exec(string: string): RegExpExecArray | null;\r\n\r\n    /**\r\n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\r\n      * @param string String on which to perform the search.\r\n      */\r\n    test(string: string): boolean;\r\n\r\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\r\n    readonly source: string;\r\n\r\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\r\n    readonly global: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\r\n    readonly ignoreCase: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\r\n    readonly multiline: boolean;\r\n\r\n    lastIndex: number;\r\n\r\n    // Non-standard extensions\r\n    compile(): this;\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    new (pattern: RegExp): RegExp;\r\n    new (pattern: string, flags?: string): RegExp;\r\n    (pattern: RegExp): RegExp;\r\n    (pattern: string, flags?: string): RegExp;\r\n    readonly prototype: RegExp;\r\n\r\n    // Non-standard extensions\r\n    $1: string;\r\n    $2: string;\r\n    $3: string;\r\n    $4: string;\r\n    $5: string;\r\n    $6: string;\r\n    $7: string;\r\n    $8: string;\r\n    $9: string;\r\n    lastMatch: string;\r\n}\r\n\r\ndeclare const RegExp: RegExpConstructor;\r\n\r\ninterface Error {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n}\r\n\r\ninterface ErrorConstructor {\r\n    new (message?: string): Error;\r\n    (message?: string): Error;\r\n    readonly prototype: Error;\r\n}\r\n\r\ndeclare const Error: ErrorConstructor;\r\n\r\ninterface EvalError extends Error {\r\n}\r\n\r\ninterface EvalErrorConstructor {\r\n    new (message?: string): EvalError;\r\n    (message?: string): EvalError;\r\n    readonly prototype: EvalError;\r\n}\r\n\r\ndeclare const EvalError: EvalErrorConstructor;\r\n\r\ninterface RangeError extends Error {\r\n}\r\n\r\ninterface RangeErrorConstructor {\r\n    new (message?: string): RangeError;\r\n    (message?: string): RangeError;\r\n    readonly prototype: RangeError;\r\n}\r\n\r\ndeclare const RangeError: RangeErrorConstructor;\r\n\r\ninterface ReferenceError extends Error {\r\n}\r\n\r\ninterface ReferenceErrorConstructor {\r\n    new (message?: string): ReferenceError;\r\n    (message?: string): ReferenceError;\r\n    readonly prototype: ReferenceError;\r\n}\r\n\r\ndeclare const ReferenceError: ReferenceErrorConstructor;\r\n\r\ninterface SyntaxError extends Error {\r\n}\r\n\r\ninterface SyntaxErrorConstructor {\r\n    new (message?: string): SyntaxError;\r\n    (message?: string): SyntaxError;\r\n    readonly prototype: SyntaxError;\r\n}\r\n\r\ndeclare const SyntaxError: SyntaxErrorConstructor;\r\n\r\ninterface TypeError extends Error {\r\n}\r\n\r\ninterface TypeErrorConstructor {\r\n    new (message?: string): TypeError;\r\n    (message?: string): TypeError;\r\n    readonly prototype: TypeError;\r\n}\r\n\r\ndeclare const TypeError: TypeErrorConstructor;\r\n\r\ninterface URIError extends Error {\r\n}\r\n\r\ninterface URIErrorConstructor {\r\n    new (message?: string): URIError;\r\n    (message?: string): URIError;\r\n    readonly prototype: URIError;\r\n}\r\n\r\ndeclare const URIError: URIErrorConstructor;\r\n\r\ninterface JSON {\r\n    /**\r\n      * Converts a JavaScript Object Notation (JSON) string into an object.\r\n      * @param text A valid JSON string.\r\n      * @param reviver A function that transforms the results. This function is called for each member of the object.\r\n      * If a member contains nested objects, the nested objects are transformed before the parent object is.\r\n      */\r\n    parse(text: string, reviver?: (key: any, value: any) => any): any;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n      */\r\n    stringify(value: any, replacer?: (key: string, value: any) => any, space?: string | number): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer An array of strings and numbers that acts as a white list for selecting the object properties that will be stringified.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n      */\r\n    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\r\n}\r\n\r\n/**\r\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\r\n  */\r\ndeclare const JSON: JSON;\r\n\r\n\r\n/////////////////////////////\r\n/// ECMAScript Array API (specially handled by compiler)\r\n/////////////////////////////\r\n\r\ninterface ReadonlyArray<T> {\r\n    /**\r\n      * Gets the length of the array. This is a number one higher than the highest element defined in an array.\r\n      */\r\n    readonly length: number;\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n    toLocaleString(): string;\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat<U extends ReadonlyArray<T>>(...items: U[]): T[];\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat(...items: T[]): T[];\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): T[];\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n      */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a specified value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n      */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => boolean, thisArg?: any): boolean;\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => boolean, thisArg?: any): boolean;\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => void, thisArg?: any): void;\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map<U>(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => U, thisArg?: any): U[];\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: T, index: number, array: ReadonlyArray<T>) => any, thisArg?: any): T[];\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue?: T): T;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => T, initialValue?: T): T;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: ReadonlyArray<T>) => U, initialValue: U): U;\r\n\r\n    readonly [n: number]: T;\r\n}\r\n\r\ninterface Array<T> {\r\n    /**\r\n      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n    toLocaleString(): string;\r\n    /**\r\n      * Appends new elements to an array, and returns the new length of the array.\r\n      * @param items New elements of the Array.\r\n      */\r\n    push(...items: T[]): number;\r\n    /**\r\n      * Removes the last element from an array and returns it.\r\n      */\r\n    pop(): T | undefined;\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat(...items: (T | T[])[]): T[];\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): T[];\r\n    /**\r\n      * Removes the first element from an array and returns it.\r\n      */\r\n    shift(): T | undefined;\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): T[];\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: T, b: T) => number): this;\r\n    /**\r\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n      * @param start The zero-based location in the array from which to start removing elements.\r\n      */\r\n    splice(start: number): T[];\r\n    /**\r\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n      * @param start The zero-based location in the array from which to start removing elements.\r\n      * @param deleteCount The number of elements to remove.\r\n      * @param items Elements to insert into the array in place of the deleted elements.\r\n      */\r\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n    /**\r\n      * Inserts new elements at the start of an array.\r\n      * @param items  Elements to insert at the start of the Array.\r\n      */\r\n    unshift(...items: T[]): number;\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n      */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n      * Returns the index of the last occurrence of a specified value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n      */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => any, thisArg?: any): T[];\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    [n: number]: T;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    new (arrayLength?: number): any[];\r\n    new <T>(arrayLength: number): T[];\r\n    new <T>(...items: T[]): T[];\r\n    (arrayLength?: number): any[];\r\n    <T>(arrayLength: number): T[];\r\n    <T>(...items: T[]): T[];\r\n    isArray(arg: any): arg is Array<any>;\r\n    readonly prototype: Array<any>;\r\n}\r\n\r\ndeclare const Array: ArrayConstructor;\r\n\r\ninterface TypedPropertyDescriptor<T> {\r\n    enumerable?: boolean;\r\n    configurable?: boolean;\r\n    writable?: boolean;\r\n    value?: T;\r\n    get?: () => T;\r\n    set?: (value: T) => void;\r\n}\r\n\r\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\r\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\r\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\r\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;\r\n\r\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\r\n\r\ninterface PromiseLike<T> {\r\n    /**\r\n    * Attaches callbacks for the resolution and/or rejection of the Promise.\r\n    * @param onfulfilled The callback to execute when the Promise is resolved.\r\n    * @param onrejected The callback to execute when the Promise is rejected.\r\n    * @returns A Promise for the completion of which ever callback is executed.\r\n    */\r\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): PromiseLike<TResult>;\r\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): PromiseLike<TResult>;\r\n}\r\n\r\ninterface ArrayLike<T> {\r\n    readonly length: number;\r\n    readonly [n: number]: T;\r\n}\r\n\r\n/**\r\n  * Represents a raw buffer of binary data, which is used to store data for the\r\n  * different typed arrays. ArrayBuffers cannot be read from or written to directly,\r\n  * but can be passed to a typed array or DataView Object to interpret the raw\r\n  * buffer as needed.\r\n  */\r\ninterface ArrayBuffer {\r\n    /**\r\n      * Read-only. The length of the ArrayBuffer (in bytes).\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * Returns a section of an ArrayBuffer.\r\n      */\r\n    slice(begin:number, end?:number): ArrayBuffer;\r\n}\r\n\r\ninterface ArrayBufferConstructor {\r\n    readonly prototype: ArrayBuffer;\r\n    new (byteLength: number): ArrayBuffer;\r\n    isView(arg: any): arg is ArrayBufferView;\r\n}\r\ndeclare const ArrayBuffer: ArrayBufferConstructor;\r\n\r\ninterface ArrayBufferView {\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n}\r\n\r\ninterface DataView {\r\n    readonly buffer: ArrayBuffer;\r\n    readonly byteLength: number;\r\n    readonly byteOffset: number;\r\n    /**\r\n      * Gets the Float32 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset.\r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Float64 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset.\r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Int8 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset.\r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt8(byteOffset: number): number;\r\n\r\n    /**\r\n      * Gets the Int16 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset.\r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\r\n    /**\r\n      * Gets the Int32 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset.\r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Uint8 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset.\r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint8(byteOffset: number): number;\r\n\r\n    /**\r\n      * Gets the Uint16 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset.\r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Gets the Uint32 value at the specified byte offset from the start of the view. There is\r\n      * no alignment constraint; multi-byte values may be fetched from any offset.\r\n      * @param byteOffset The place in the buffer at which the value should be retrieved.\r\n      */\r\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\r\n\r\n    /**\r\n      * Stores an Float32 value at the specified byte offset from the start of the view.\r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written,\r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Float64 value at the specified byte offset from the start of the view.\r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written,\r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Int8 value at the specified byte offset from the start of the view.\r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      */\r\n    setInt8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n      * Stores an Int16 value at the specified byte offset from the start of the view.\r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written,\r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Int32 value at the specified byte offset from the start of the view.\r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written,\r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Uint8 value at the specified byte offset from the start of the view.\r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      */\r\n    setUint8(byteOffset: number, value: number): void;\r\n\r\n    /**\r\n      * Stores an Uint16 value at the specified byte offset from the start of the view.\r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written,\r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n\r\n    /**\r\n      * Stores an Uint32 value at the specified byte offset from the start of the view.\r\n      * @param byteOffset The place in the buffer at which the value should be set.\r\n      * @param value The value to set.\r\n      * @param littleEndian If false or undefined, a big-endian value should be written,\r\n      * otherwise a little-endian value should be written.\r\n      */\r\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\r\n}\r\n\r\ninterface DataViewConstructor {\r\n    new (buffer: ArrayBuffer, byteOffset?: number, byteLength?: number): DataView;\r\n}\r\ndeclare const DataView: DataViewConstructor;\r\n\r\n/**\r\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\r\n  * number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int8Array {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Int8Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Int8Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int8Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\ninterface Int8ArrayConstructor {\r\n    readonly prototype: Int8Array;\r\n    new (length: number): Int8Array;\r\n    new (array: ArrayLike<number>): Int8Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int8Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Int8Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\r\n\r\n}\r\ndeclare const Int8Array: Int8ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint8Array {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Uint8Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint8Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint8ArrayConstructor {\r\n    readonly prototype: Uint8Array;\r\n    new (length: number): Uint8Array;\r\n    new (array: ArrayLike<number>): Uint8Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Uint8Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\r\n\r\n}\r\ndeclare const Uint8Array: Uint8ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\r\n  * If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint8ClampedArray {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Uint8ClampedArray;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: Uint8ClampedArray, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint8ClampedArrayConstructor {\r\n    readonly prototype: Uint8ClampedArray;\r\n    new (length: number): Uint8ClampedArray;\r\n    new (array: ArrayLike<number>): Uint8ClampedArray;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8ClampedArray;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Uint8ClampedArray;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\r\n}\r\ndeclare const Uint8ClampedArray: Uint8ClampedArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int16Array {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Int16Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Int16Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int16Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Int16ArrayConstructor {\r\n    readonly prototype: Int16Array;\r\n    new (length: number): Int16Array;\r\n    new (array: ArrayLike<number>): Int16Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int16Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Int16Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\r\n\r\n}\r\ndeclare const Int16Array: Int16ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint16Array {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Uint16Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint16Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint16ArrayConstructor {\r\n    readonly prototype: Uint16Array;\r\n    new (length: number): Uint16Array;\r\n    new (array: ArrayLike<number>): Uint16Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint16Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Uint16Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\r\n\r\n}\r\ndeclare const Uint16Array: Uint16ArrayConstructor;\r\n/**\r\n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int32Array {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Int32Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Int32Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Int32Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Int32ArrayConstructor {\r\n    readonly prototype: Int32Array;\r\n    new (length: number): Int32Array;\r\n    new (array: ArrayLike<number>): Int32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int32Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Int32Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\r\n}\r\ndeclare const Int32Array: Int32ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint32Array {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Uint32Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Uint32Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Uint32ArrayConstructor {\r\n    readonly prototype: Uint32Array;\r\n    new (length: number): Uint32Array;\r\n    new (array: ArrayLike<number>): Uint32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint32Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Uint32Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\r\n}\r\ndeclare const Uint32Array: Uint32ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\r\n  * of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float32Array {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Float32Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Float32Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Float32Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Float32ArrayConstructor {\r\n    readonly prototype: Float32Array;\r\n    new (length: number): Float32Array;\r\n    new (array: ArrayLike<number>): Float32Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float32Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Float32Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\r\n\r\n}\r\ndeclare const Float32Array: Float32ArrayConstructor;\r\n\r\n/**\r\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\r\n  * number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float64Array {\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    readonly buffer: ArrayBuffer;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    readonly byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    readonly byteOffset: number;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls\r\n      * the callbackfn function for each element in array1 until the callbackfn returns false,\r\n      * or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n        * Returns the this object after filling the section identified by start and end with value\r\n        * @param value value to fill array section with\r\n        * @param start index to start filling the array at. If start is negative, it is treated as\r\n        * length+start where length is the length of the array.\r\n        * @param end index to stop filling the array at. If end is negative, it is treated as\r\n        * length+end.\r\n        */\r\n    fill(value: number, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: number, index: number, array: Float64Array) => any, thisArg?: any): Float64Array;\r\n\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      *  search starts at index 0.\r\n      */\r\n    indexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the\r\n      * resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\r\n      * search starts at index 0.\r\n      */\r\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\r\n\r\n    /**\r\n      * The length of the array.\r\n      */\r\n    readonly length: number;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that\r\n      * contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of\r\n      * the callback function is the accumulated result, and is provided as an argument in the next\r\n      * call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\r\n      * callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an\r\n      * argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order.\r\n      * The return value of the callback function is the accumulated result, and is provided as an\r\n      * argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\r\n      * the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start\r\n      * the accumulation. The first call to the callbackfn function provides this value as an argument\r\n      * instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): Float64Array;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param index The index of the location to set.\r\n      * @param value The value to set.\r\n      */\r\n    set(index: number, value: number): void;\r\n\r\n    /**\r\n      * Sets a value or an array of values.\r\n      * @param array A typed or untyped array of values to set.\r\n      * @param offset The index in the current array at which the values are to be written.\r\n      */\r\n    set(array: ArrayLike<number>, offset?: number): void;\r\n\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): Float64Array;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the\r\n      * callbackfn function for each element in array1 until the callbackfn returns true, or until\r\n      * the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\r\n      * If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If\r\n      * omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: number, b: number) => number): this;\r\n\r\n    /**\r\n      * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements\r\n      * at begin, inclusive, up to end, exclusive.\r\n      * @param begin The index of the beginning of the array.\r\n      * @param end The index of the end of the array.\r\n      */\r\n    subarray(begin: number, end?: number): Float64Array;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current locale.\r\n      */\r\n    toLocaleString(): string;\r\n\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n\r\n    [index: number]: number;\r\n}\r\n\r\ninterface Float64ArrayConstructor {\r\n    readonly prototype: Float64Array;\r\n    new (length: number): Float64Array;\r\n    new (array: ArrayLike<number>): Float64Array;\r\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float64Array;\r\n\r\n    /**\r\n      * The size in bytes of each element in the array.\r\n      */\r\n    readonly BYTES_PER_ELEMENT: number;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of(...items: number[]): Float64Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\r\n}\r\ndeclare const Float64Array: Float64ArrayConstructor;\r\n\r\n/////////////////////////////\r\n/// ECMAScript Internationalization API\r\n/////////////////////////////\r\n\r\ndeclare module Intl {\r\n    interface CollatorOptions {\r\n        usage?: string;\r\n        localeMatcher?: string;\r\n        numeric?: boolean;\r\n        caseFirst?: string;\r\n        sensitivity?: string;\r\n        ignorePunctuation?: boolean;\r\n    }\r\n\r\n    interface ResolvedCollatorOptions {\r\n        locale: string;\r\n        usage: string;\r\n        sensitivity: string;\r\n        ignorePunctuation: boolean;\r\n        collation: string;\r\n        caseFirst: string;\r\n        numeric: boolean;\r\n    }\r\n\r\n    interface Collator {\r\n        compare(x: string, y: string): number;\r\n        resolvedOptions(): ResolvedCollatorOptions;\r\n    }\r\n    var Collator: {\r\n        new (locales?: string[], options?: CollatorOptions): Collator;\r\n        new (locale?: string, options?: CollatorOptions): Collator;\r\n        (locales?: string[], options?: CollatorOptions): Collator;\r\n        (locale?: string, options?: CollatorOptions): Collator;\r\n        supportedLocalesOf(locales: string[], options?: CollatorOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: CollatorOptions): string[];\r\n    }\r\n\r\n    interface NumberFormatOptions {\r\n        localeMatcher?: string;\r\n        style?: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        useGrouping?: boolean;\r\n        minimumIntegerDigits?: number;\r\n        minimumFractionDigits?: number;\r\n        maximumFractionDigits?: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n    }\r\n\r\n    interface ResolvedNumberFormatOptions {\r\n        locale: string;\r\n        numberingSystem: string;\r\n        style: string;\r\n        currency?: string;\r\n        currencyDisplay?: string;\r\n        minimumIntegerDigits: number;\r\n        minimumFractionDigits: number;\r\n        maximumFractionDigits: number;\r\n        minimumSignificantDigits?: number;\r\n        maximumSignificantDigits?: number;\r\n        useGrouping: boolean;\r\n    }\r\n\r\n    interface NumberFormat {\r\n        format(value: number): string;\r\n        resolvedOptions(): ResolvedNumberFormatOptions;\r\n    }\r\n    var NumberFormat: {\r\n        new (locales?: string[], options?: NumberFormatOptions): NumberFormat;\r\n        new (locale?: string, options?: NumberFormatOptions): NumberFormat;\r\n        (locales?: string[], options?: NumberFormatOptions): NumberFormat;\r\n        (locale?: string, options?: NumberFormatOptions): NumberFormat;\r\n        supportedLocalesOf(locales: string[], options?: NumberFormatOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: NumberFormatOptions): string[];\r\n    }\r\n\r\n    interface DateTimeFormatOptions {\r\n        localeMatcher?: string;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n        formatMatcher?: string;\r\n        hour12?: boolean;\r\n        timeZone?: string;\r\n    }\r\n\r\n    interface ResolvedDateTimeFormatOptions {\r\n        locale: string;\r\n        calendar: string;\r\n        numberingSystem: string;\r\n        timeZone: string;\r\n        hour12?: boolean;\r\n        weekday?: string;\r\n        era?: string;\r\n        year?: string;\r\n        month?: string;\r\n        day?: string;\r\n        hour?: string;\r\n        minute?: string;\r\n        second?: string;\r\n        timeZoneName?: string;\r\n    }\r\n\r\n    interface DateTimeFormat {\r\n        format(date?: Date | number): string;\r\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\r\n    }\r\n    var DateTimeFormat: {\r\n        new (locales?: string[], options?: DateTimeFormatOptions): DateTimeFormat;\r\n        new (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat;\r\n        (locales?: string[], options?: DateTimeFormatOptions): DateTimeFormat;\r\n        (locale?: string, options?: DateTimeFormatOptions): DateTimeFormat;\r\n        supportedLocalesOf(locales: string[], options?: DateTimeFormatOptions): string[];\r\n        supportedLocalesOf(locale: string, options?: DateTimeFormatOptions): string[];\r\n    }\r\n}\r\n\r\ninterface String {\r\n    /**\r\n      * Determines whether two strings are equivalent in the current locale.\r\n      * @param that String to compare to target string\r\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\r\n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\r\n      */\r\n    localeCompare(that: string, locales: string[], options?: Intl.CollatorOptions): number;\r\n\r\n    /**\r\n      * Determines whether two strings are equivalent in the current locale.\r\n      * @param that String to compare to target string\r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\r\n      * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\r\n      */\r\n    localeCompare(that: string, locale: string, options?: Intl.CollatorOptions): number;\r\n}\r\n\r\ninterface Number {\r\n    /**\r\n      * Converts a number to a string by using the current or specified locale.\r\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleString(locales?: string[], options?: Intl.NumberFormatOptions): string;\r\n\r\n    /**\r\n      * Converts a number to a string by using the current or specified locale.\r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleString(locale?: string, options?: Intl.NumberFormatOptions): string;\r\n}\r\n\r\ninterface Date {\r\n    /**\r\n      * Converts a date and time to a string by using the current or specified locale.\r\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleString(locales?: string[], options?: Intl.DateTimeFormatOptions): string;\r\n    /**\r\n      * Converts a date to a string by using the current or specified locale.\r\n      * @param locales An array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleDateString(locales?: string[], options?: Intl.DateTimeFormatOptions): string;\r\n\r\n    /**\r\n      * Converts a time to a string by using the current or specified locale.\r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleTimeString(locale?: string[], options?: Intl.DateTimeFormatOptions): string;\r\n\r\n    /**\r\n      * Converts a date and time to a string by using the current or specified locale.\r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleString(locale?: string, options?: Intl.DateTimeFormatOptions): string;\r\n\r\n    /**\r\n      * Converts a date to a string by using the current or specified locale.\r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleDateString(locale?: string, options?: Intl.DateTimeFormatOptions): string;\r\n\r\n    /**\r\n      * Converts a time to a string by using the current or specified locale.\r\n      * @param locale Locale tag. If you omit this parameter, the default locale of the JavaScript runtime is used.\r\n      * @param options An object that contains one or more properties that specify comparison options.\r\n      */\r\n    toLocaleTimeString(locale?: string, options?: Intl.DateTimeFormatOptions): string;\r\n}\r\ndeclare type PropertyKey = string | number | symbol;\r\n\r\ninterface Array<T> {\r\n    /**\r\n      * Returns the value of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, find\r\n      * immediately returns that element value. Otherwise, find returns undefined.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    find(predicate: (value: T, index: number, obj: Array<T>) => boolean, thisArg?: any): T | undefined;\r\n\r\n    /**\r\n      * Returns the index of the first element in the array where predicate is true, and undefined\r\n      * otherwise.\r\n      * @param predicate find calls predicate once for each element of the array, in ascending\r\n      * order, until it finds one where predicate returns true. If such an element is found, \r\n      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\r\n      * @param thisArg If provided, it will be used as the this value for each invocation of\r\n      * predicate. If it is not provided, undefined is used instead.\r\n      */\r\n    findIndex(predicate: (value: T) => boolean, thisArg?: any): number;\r\n\r\n    /**\r\n      * Returns the this object after filling the section identified by start and end with value\r\n      * @param value value to fill array section with\r\n      * @param start index to start filling the array at. If start is negative, it is treated as\r\n      * length+start where length is the length of the array.\r\n      * @param end index to stop filling the array at. If end is negative, it is treated as\r\n      * length+end.\r\n      */\r\n    fill(value: T, start?: number, end?: number): this;\r\n\r\n    /**\r\n      * Returns the this object after copying a section of the array identified by start and end\r\n      * to the same array starting at position target\r\n      * @param target If target is negative, it is treated as length+target where length is the\r\n      * length of the array.\r\n      * @param start If start is negative, it is treated as length+start. If end is negative, it\r\n      * is treated as length+end.\r\n      * @param end If not specified, length of the this object is used as its default value.\r\n      */\r\n    copyWithin(target: number, start: number, end?: number): this;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    /**\r\n      * Creates an array from an array-like object.\r\n      * @param arrayLike An array-like object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;\r\n\r\n\r\n    /**\r\n      * Creates an array from an array-like object.\r\n      * @param arrayLike An array-like object to convert to an array.\r\n      */\r\n    from<T>(arrayLike: ArrayLike<T>): Array<T>;\r\n\r\n    /**\r\n      * Returns a new array from a set of elements.\r\n      * @param items A set of elements to include in the new array object.\r\n      */\r\n    of<T>(...items: T[]): Array<T>;\r\n}\r\n\r\ninterface Function {\r\n    /**\r\n      * Returns the name of the function. Function names are read-only and can not be changed.\r\n      */\r\n    readonly name: string;\r\n}\r\n\r\ninterface Math {\r\n    /**\r\n      * Returns the number of leading zero bits in the 32-bit binary representation of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    clz32(x: number): number;\r\n\r\n    /**\r\n      * Returns the result of 32-bit multiplication of two numbers.\r\n      * @param x First number\r\n      * @param y Second number\r\n      */\r\n    imul(x: number, y: number): number;\r\n\r\n    /**\r\n      * Returns the sign of the x, indicating whether x is positive, negative or zero.\r\n      * @param x The numeric expression to test\r\n      */\r\n    sign(x: number): number;\r\n\r\n    /**\r\n      * Returns the base 10 logarithm of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    log10(x: number): number;\r\n\r\n    /**\r\n      * Returns the base 2 logarithm of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    log2(x: number): number;\r\n\r\n    /**\r\n      * Returns the natural logarithm of 1 + x.\r\n      * @param x A numeric expression.\r\n      */\r\n    log1p(x: number): number;\r\n\r\n    /**\r\n      * Returns the result of (e^x - 1) of x (e raised to the power of x, where e is the base of\r\n      * the natural logarithms).\r\n      * @param x A numeric expression.\r\n      */\r\n    expm1(x: number): number;\r\n\r\n    /**\r\n      * Returns the hyperbolic cosine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    cosh(x: number): number;\r\n\r\n    /**\r\n      * Returns the hyperbolic sine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    sinh(x: number): number;\r\n\r\n    /**\r\n      * Returns the hyperbolic tangent of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    tanh(x: number): number;\r\n\r\n    /**\r\n      * Returns the inverse hyperbolic cosine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    acosh(x: number): number;\r\n\r\n    /**\r\n      * Returns the inverse hyperbolic sine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    asinh(x: number): number;\r\n\r\n    /**\r\n      * Returns the inverse hyperbolic tangent of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    atanh(x: number): number;\r\n\r\n    /**\r\n      * Returns the square root of the sum of squares of its arguments.\r\n      * @param values Values to compute the square root for.\r\n      *     If no arguments are passed, the result is +0.\r\n      *     If there is only one argument, the result is the absolute value.\r\n      *     If any argument is +Infinity or -Infinity, the result is +Infinity.\r\n      *     If any argument is NaN, the result is NaN.\r\n      *     If all arguments are either +0 or −0, the result is +0.\r\n      */\r\n    hypot(...values: number[] ): number;\r\n\r\n    /**\r\n      * Returns the integral part of the a numeric expression, x, removing any fractional digits.\r\n      * If x is already an integer, the result is x.\r\n      * @param x A numeric expression.\r\n      */\r\n    trunc(x: number): number;\r\n\r\n    /**\r\n      * Returns the nearest single precision float representation of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    fround(x: number): number;\r\n\r\n    /**\r\n      * Returns an implementation-dependent approximation to the cube root of number.\r\n      * @param x A numeric expression.\r\n      */\r\n    cbrt(x: number): number;\r\n}\r\n\r\ninterface NumberConstructor {\r\n    /**\r\n      * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\r\n      * that is representable as a Number value, which is approximately:\r\n      * 2.2204460492503130808472633361816 x 10‍−‍16.\r\n      */\r\n    readonly EPSILON: number;\r\n\r\n    /**\r\n      * Returns true if passed value is finite.\r\n      * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a\r\n      * number. Only finite values of the type number, result in true.\r\n      * @param number A numeric value.\r\n      */\r\n    isFinite(number: number): boolean;\r\n\r\n    /**\r\n      * Returns true if the value passed is an integer, false otherwise.\r\n      * @param number A numeric value.\r\n      */\r\n    isInteger(number: number): boolean;\r\n\r\n    /**\r\n      * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\r\n      * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter\r\n      * to a number. Only values of the type number, that are also NaN, result in true.\r\n      * @param number A numeric value.\r\n      */\r\n    isNaN(number: number): boolean;\r\n\r\n    /**\r\n      * Returns true if the value passed is a safe integer.\r\n      * @param number A numeric value.\r\n      */\r\n    isSafeInteger(number: number): boolean;\r\n\r\n    /**\r\n      * The value of the largest integer n such that n and n + 1 are both exactly representable as\r\n      * a Number value.\r\n      * The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.\r\n      */\r\n    readonly MAX_SAFE_INTEGER: number;\r\n\r\n    /**\r\n      * The value of the smallest integer n such that n and n − 1 are both exactly representable as\r\n      * a Number value.\r\n      * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\r\n      */\r\n    readonly MIN_SAFE_INTEGER: number;\r\n\r\n    /**\r\n      * Converts a string to a floating-point number.\r\n      * @param string A string that contains a floating-point number.\r\n      */\r\n    parseFloat(string: string): number;\r\n\r\n    /**\r\n      * Converts A string to an integer.\r\n      * @param s A string to convert into a number.\r\n      * @param radix A value between 2 and 36 that specifies the base of the number in numString.\r\n      * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\r\n      * All other strings are considered decimal.\r\n      */\r\n    parseInt(string: string, radix?: number): number;\r\n}\r\n\r\ninterface Object {\r\n    /**\r\n      * Determines whether an object has a property with the specified name.\r\n      * @param v A property name.\r\n      */\r\n    hasOwnProperty(v: PropertyKey): boolean\r\n\r\n    /**\r\n      * Determines whether a specified property is enumerable.\r\n      * @param v A property name.\r\n      */\r\n    propertyIsEnumerable(v: PropertyKey): boolean;\r\n}\r\n\r\ninterface ObjectConstructor {\r\n    /**\r\n      * Copy the values of all of the enumerable own properties from one or more source objects to a\r\n      * target object. Returns the target object.\r\n      * @param target The target object to copy to.\r\n      * @param source The source object from which to copy properties.\r\n      */\r\n    assign<T, U>(target: T, source: U): T & U;\r\n\r\n    /**\r\n      * Copy the values of all of the enumerable own properties from one or more source objects to a\r\n      * target object. Returns the target object.\r\n      * @param target The target object to copy to.\r\n      * @param source1 The first source object from which to copy properties.\r\n      * @param source2 The second source object from which to copy properties.\r\n      */\r\n    assign<T, U, V>(target: T, source1: U, source2: V): T & U & V;\r\n\r\n    /**\r\n      * Copy the values of all of the enumerable own properties from one or more source objects to a\r\n      * target object. Returns the target object.\r\n      * @param target The target object to copy to.\r\n      * @param source1 The first source object from which to copy properties.\r\n      * @param source2 The second source object from which to copy properties.\r\n      * @param source3 The third source object from which to copy properties.\r\n      */\r\n    assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\r\n\r\n    /**\r\n      * Copy the values of all of the enumerable own properties from one or more source objects to a\r\n      * target object. Returns the target object.\r\n      * @param target The target object to copy to.\r\n      * @param sources One or more source objects from which to copy properties\r\n      */\r\n    assign(target: any, ...sources: any[]): any;\r\n\r\n    /**\r\n      * Returns an array of all symbol properties found directly on object o.\r\n      * @param o Object to retrieve the symbols from.\r\n      */\r\n    getOwnPropertySymbols(o: any): symbol[];\r\n\r\n    /**\r\n      * Returns true if the values are the same value, false otherwise.\r\n      * @param value1 The first value.\r\n      * @param value2 The second value.\r\n      */\r\n    is(value1: any, value2: any): boolean;\r\n\r\n    /**\r\n      * Sets the prototype of a specified object o to  object proto or null. Returns the object o.\r\n      * @param o The object to change its prototype.\r\n      * @param proto The value of the new prototype or null.\r\n      */\r\n    setPrototypeOf(o: any, proto: any): any;\r\n\r\n    /**\r\n      * Gets the own property descriptor of the specified object.\r\n      * An own property descriptor is one that is defined directly on the object and is not\r\n      * inherited from the object's prototype.\r\n      * @param o Object that contains the property.\r\n      * @param p Name of the property.\r\n    */\r\n    getOwnPropertyDescriptor(o: any, propertyKey: PropertyKey): PropertyDescriptor;\r\n\r\n    /**\r\n      * Adds a property to an object, or modifies attributes of an existing property.\r\n      * @param o Object on which to add or modify the property. This can be a native JavaScript\r\n      * object (that is, a user-defined object or a built in object) or a DOM object.\r\n      * @param p The property name.\r\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor\r\n      *  property.\r\n      */\r\n    defineProperty(o: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): any;\r\n}\r\n\r\ninterface RegExp {\r\n    /**\r\n      * Returns a string indicating the flags of the regular expression in question. This field is read-only.\r\n      * The characters in this string are sequenced and concatenated in the following order:\r\n      *\r\n      *    - \"g\" for global\r\n      *    - \"i\" for ignoreCase\r\n      *    - \"m\" for multiline\r\n      *    - \"u\" for unicode\r\n      *    - \"y\" for sticky\r\n      *\r\n      * If no flags are set, the value is the empty string.\r\n      */\r\n    readonly flags: string;\r\n\r\n    /**\r\n      * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\r\n      * expression. Default is false. Read-only.\r\n      */\r\n    readonly sticky: boolean;\r\n\r\n    /**\r\n      * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\r\n      * expression. Default is false. Read-only.\r\n      */\r\n    readonly unicode: boolean;\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    new (pattern: RegExp, flags?: string): RegExp;\r\n    (pattern: RegExp, flags?: string): RegExp;\r\n}\r\n\r\ninterface String {\r\n    /**\r\n      * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\r\n      * value of the UTF-16 encoded code point starting at the string element at position pos in\r\n      * the String resulting from converting this object to a String.\r\n      * If there is no element at that position, the result is undefined.\r\n      * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\r\n      */\r\n    codePointAt(pos: number): number | undefined;\r\n\r\n    /**\r\n      * Returns true if searchString appears as a substring of the result of converting this\r\n      * object to a String, at one or more positions that are\r\n      * greater than or equal to position; otherwise, returns false.\r\n      * @param searchString search string\r\n      * @param position If position is undefined, 0 is assumed, so as to search all of the String.\r\n      */\r\n    includes(searchString: string, position?: number): boolean;\r\n\r\n    /**\r\n      * Returns true if the sequence of elements of searchString converted to a String is the\r\n      * same as the corresponding elements of this object (converted to a String) starting at\r\n      * endPosition – length(this). Otherwise returns false.\r\n      */\r\n    endsWith(searchString: string, endPosition?: number): boolean;\r\n\r\n    /**\r\n      * Returns the String value result of normalizing the string into the normalization form\r\n      * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\r\n      * @param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\r\n      * is \"NFC\"\r\n      */\r\n    normalize(form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string;\r\n\r\n    /**\r\n      * Returns the String value result of normalizing the string into the normalization form\r\n      * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\r\n      * @param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\r\n      * is \"NFC\"\r\n      */\r\n    normalize(form?: string): string;\r\n\r\n    /**\r\n      * Returns a String value that is made from count copies appended together. If count is 0,\r\n      * T is the empty String is returned.\r\n      * @param count number of copies to append\r\n      */\r\n    repeat(count: number): string;\r\n\r\n    /**\r\n      * Returns true if the sequence of elements of searchString converted to a String is the\r\n      * same as the corresponding elements of this object (converted to a String) starting at\r\n      * position. Otherwise returns false.\r\n      */\r\n    startsWith(searchString: string, position?: number): boolean;\r\n\r\n    /**\r\n      * Returns an <a> HTML anchor element and sets the name attribute to the text value\r\n      * @param name\r\n      */\r\n    anchor(name: string): string;\r\n\r\n    /** Returns a <big> HTML element */\r\n    big(): string;\r\n\r\n    /** Returns a <blink> HTML element */\r\n    blink(): string;\r\n\r\n    /** Returns a <b> HTML element */\r\n    bold(): string;\r\n\r\n    /** Returns a <tt> HTML element */\r\n    fixed(): string\r\n\r\n    /** Returns a <font> HTML element and sets the color attribute value */\r\n    fontcolor(color: string): string\r\n\r\n    /** Returns a <font> HTML element and sets the size attribute value */\r\n    fontsize(size: number): string;\r\n\r\n    /** Returns a <font> HTML element and sets the size attribute value */\r\n    fontsize(size: string): string;\r\n\r\n    /** Returns an <i> HTML element */\r\n    italics(): string;\r\n\r\n    /** Returns an <a> HTML element and sets the href attribute value */\r\n    link(url: string): string;\r\n\r\n    /** Returns a <small> HTML element */\r\n    small(): string;\r\n\r\n    /** Returns a <strike> HTML element */\r\n    strike(): string;\r\n\r\n    /** Returns a <sub> HTML element */\r\n    sub(): string;\r\n\r\n    /** Returns a <sup> HTML element */\r\n    sup(): string;\r\n}\r\n\r\ninterface StringConstructor {\r\n    /**\r\n      * Return the String value whose elements are, in order, the elements in the List elements.\r\n      * If length is 0, the empty string is returned.\r\n      */\r\n    fromCodePoint(...codePoints: number[]): string;\r\n\r\n    /**\r\n      * String.raw is intended for use as a tag function of a Tagged Template String. When called\r\n      * as such the first argument will be a well formed template call site object and the rest\r\n      * parameter will contain the substitution values.\r\n      * @param template A well-formed template string call site representation.\r\n      * @param substitutions A set of substitution values.\r\n      */\r\n    raw(template: TemplateStringsArray, ...substitutions: any[]): string;\r\n}\r\ninterface Map<K, V> {\r\n    clear(): void;\r\n    delete(key: K): boolean;\r\n    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;\r\n    get(key: K): V | undefined;\r\n    has(key: K): boolean;\r\n    set(key: K, value?: V): this;\r\n    readonly size: number;\r\n}\r\n\r\ninterface MapConstructor {\r\n    new (): Map<any, any>;\r\n    new <K, V>(entries?: [K, V][]): Map<K, V>;\r\n    readonly prototype: Map<any, any>;\r\n}\r\ndeclare var Map: MapConstructor;\r\n\r\ninterface WeakMap<K, V> {\r\n    clear(): void;\r\n    delete(key: K): boolean;\r\n    get(key: K): V | undefined;\r\n    has(key: K): boolean;\r\n    set(key: K, value?: V): this;\r\n}\r\n\r\ninterface WeakMapConstructor {\r\n    new (): WeakMap<any, any>;\r\n    new <K, V>(entries?: [K, V][]): WeakMap<K, V>;\r\n    readonly prototype: WeakMap<any, any>;\r\n}\r\ndeclare var WeakMap: WeakMapConstructor;\r\n\r\ninterface Set<T> {\r\n    add(value: T): this;\r\n    clear(): void;\r\n    delete(value: T): boolean;\r\n    forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void;\r\n    has(value: T): boolean;\r\n    readonly size: number;\r\n}\r\n\r\ninterface SetConstructor {\r\n    new (): Set<any>;\r\n    new <T>(values?: T[]): Set<T>;\r\n    readonly prototype: Set<any>;\r\n}\r\ndeclare var Set: SetConstructor;\r\n\r\ninterface WeakSet<T> {\r\n    add(value: T): this;\r\n    clear(): void;\r\n    delete(value: T): boolean;\r\n    has(value: T): boolean;\r\n}\r\n\r\ninterface WeakSetConstructor {\r\n    new (): WeakSet<any>;\r\n    new <T>(values?: T[]): WeakSet<T>;\r\n    readonly prototype: WeakSet<any>;\r\n}\r\ndeclare var WeakSet: WeakSetConstructor;\r\ninterface GeneratorFunction extends Function { }\r\n\r\ninterface GeneratorFunctionConstructor {\r\n    /**\r\n      * Creates a new Generator function.\r\n      * @param args A list of arguments the function accepts.\r\n      */\r\n    new (...args: string[]): GeneratorFunction;\r\n    (...args: string[]): GeneratorFunction;\r\n    readonly prototype: GeneratorFunction;\r\n}\r\ndeclare var GeneratorFunction: GeneratorFunctionConstructor;\r\n/// <reference path=\"lib.es2015.symbol.d.ts\" />\r\n\r\ninterface SymbolConstructor {\r\n    /** \r\n      * A method that returns the default iterator for an object. Called by the semantics of the \r\n      * for-of statement.\r\n      */\r\n    readonly iterator: symbol;\r\n}\r\n\r\ninterface IteratorResult<T> {\r\n    done: boolean;\r\n    value: T;\r\n}\r\n\r\ninterface Iterator<T> {\r\n    next(value?: any): IteratorResult<T>;\r\n    return?(value?: any): IteratorResult<T>;\r\n    throw?(e?: any): IteratorResult<T>;\r\n}\r\n\r\ninterface Iterable<T> {\r\n    [Symbol.iterator](): Iterator<T>;\r\n}\r\n\r\ninterface IterableIterator<T> extends Iterator<T> {\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n}\r\n\r\ninterface Array<T> {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, T]>;\r\n\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    /**\r\n      * Creates an array from an iterable object.\r\n      * @param iterable An iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from<T, U>(iterable: Iterable<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;\r\n    \r\n    /**\r\n      * Creates an array from an iterable object.\r\n      * @param iterable An iterable object to convert to an array.\r\n      */\r\n    from<T>(iterable: Iterable<T>): Array<T>;\r\n}\r\n\r\ninterface IArguments {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<any>;\r\n}\r\n\r\ninterface Map<K, V> {\r\n    [Symbol.iterator](): IterableIterator<[K,V]>;\r\n    entries(): IterableIterator<[K, V]>;\r\n    keys(): IterableIterator<K>;\r\n    values(): IterableIterator<V>;\r\n}\r\n\r\ninterface MapConstructor {\r\n    new <K, V>(iterable: Iterable<[K, V]>): Map<K, V>;\r\n}\r\n\r\ninterface WeakMap<K, V> { }\r\n\r\ninterface WeakMapConstructor {\r\n    new <K, V>(iterable: Iterable<[K, V]>): WeakMap<K, V>;\r\n}\r\n\r\ninterface Set<T> {\r\n    [Symbol.iterator](): IterableIterator<T>;\r\n    entries(): IterableIterator<[T, T]>;\r\n    keys(): IterableIterator<T>;\r\n    values(): IterableIterator<T>;\r\n}\r\n\r\ninterface SetConstructor {\r\n    new <T>(iterable: Iterable<T>): Set<T>;\r\n}\r\n\r\ninterface WeakSet<T> { }\r\n\r\ninterface WeakSetConstructor {\r\n    new <T>(iterable: Iterable<T>): WeakSet<T>;\r\n}\r\n\r\ninterface Promise<T> { }\r\n\r\ninterface PromiseConstructor {\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises \r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<TAll>(values: Iterable<TAll | PromiseLike<TAll>>): Promise<TAll[]>;\r\n    \r\n    /**\r\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved \r\n     * or rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n}\r\n\r\ndeclare namespace Reflect {\r\n    function enumerate(target: any): IterableIterator<any>;\r\n}\r\n\r\ninterface String {\r\n    /** Iterator */\r\n    [Symbol.iterator](): IterableIterator<string>;\r\n}\r\n\r\n/**\r\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested \r\n  * number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int8Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int8ArrayConstructor {\r\n    new (elements: Iterable<number>): Int8Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\r\n}\r\n\r\n/**\r\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint8Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint8ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint8Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\r\n}\r\n\r\n/**\r\n  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0. \r\n  * If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint8ClampedArray {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint8ClampedArrayConstructor {\r\n    new (elements: Iterable<number>): Uint8ClampedArray;\r\n\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\r\n}\r\n\r\n/**\r\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int16Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int16ArrayConstructor {\r\n    new (elements: Iterable<number>): Int16Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int16Array;\r\n}\r\n\r\n/**\r\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint16Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint16ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint16Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Int32ArrayConstructor {\r\n    new (elements: Iterable<number>): Int32Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Uint32ArrayConstructor {\r\n    new (elements: Iterable<number>): Uint32Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\r\n  * of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float32Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Float32ArrayConstructor {\r\n    new (elements: Iterable<number>): Float32Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\r\n}\r\n\r\n/**\r\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested \r\n  * number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float64Array {\r\n    [Symbol.iterator](): IterableIterator<number>;\r\n    /** \r\n      * Returns an array of key, value pairs for every entry in the array\r\n      */\r\n    entries(): IterableIterator<[number, number]>;\r\n    /** \r\n      * Returns an list of keys in the array\r\n      */\r\n    keys(): IterableIterator<number>;\r\n    /** \r\n      * Returns an list of values in the array\r\n      */\r\n    values(): IterableIterator<number>;\r\n}\r\n\r\ninterface Float64ArrayConstructor {\r\n    new (elements: Iterable<number>): Float64Array;\r\n\r\n    /**\r\n      * Creates an array from an array-like or iterable object.\r\n      * @param arrayLike An array-like or iterable object to convert to an array.\r\n      * @param mapfn A mapping function to call on every element of the array.\r\n      * @param thisArg Value of 'this' used to invoke the mapfn.\r\n      */\r\n    from(arrayLike: Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\r\n}/**\r\n * Represents the completion of an asynchronous operation\r\n */\r\ninterface Promise<T> {\r\n    /**\r\n    * Attaches callbacks for the resolution and/or rejection of the Promise.\r\n    * @param onfulfilled The callback to execute when the Promise is resolved.\r\n    * @param onrejected The callback to execute when the Promise is rejected.\r\n    * @returns A Promise for the completion of which ever callback is executed.\r\n    */\r\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<TResult>;\r\n    then<TResult>(onfulfilled?: (value: T) => TResult | PromiseLike<TResult>, onrejected?: (reason: any) => void): Promise<TResult>;\r\n\r\n    /**\r\n     * Attaches a callback for only the rejection of the Promise.\r\n     * @param onrejected The callback to execute when the Promise is rejected.\r\n     * @returns A Promise for the completion of the callback.\r\n     */\r\n    catch(onrejected?: (reason: any) => T | PromiseLike<T>): Promise<T>;\r\n    catch(onrejected?: (reason: any) => void): Promise<T>;\r\n}\r\n\r\ninterface PromiseConstructor {\r\n    /** \r\n      * A reference to the prototype. \r\n      */\r\n    readonly prototype: Promise<any>;\r\n\r\n    /**\r\n     * Creates a new Promise.\r\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments: \r\n     * a resolve callback used resolve the promise with a value or the result of another promise, \r\n     * and a reject callback used to reject the promise with a provided reason or error.\r\n     */\r\n    new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\r\n\r\n    /**\r\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises \r\n     * resolve, or rejected when any Promise is rejected.\r\n     * @param values An array of Promises.\r\n     * @returns A new Promise.\r\n     */\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>, T10 | PromiseLike<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>, T9 | PromiseLike<T9>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\r\n    all<T1, T2, T3, T4, T5, T6, T7, T8>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>, T8 | PromiseLike<T8>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\r\n    all<T1, T2, T3, T4, T5, T6, T7>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>, T7 | PromiseLike<T7>]): Promise<[T1, T2, T3, T4, T5, T6, T7]>;\r\n    all<T1, T2, T3, T4, T5, T6>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>, T6 | PromiseLike<T6>]): Promise<[T1, T2, T3, T4, T5, T6]>;\r\n    all<T1, T2, T3, T4, T5>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>, T5 | PromiseLike<T5>]): Promise<[T1, T2, T3, T4, T5]>;\r\n    all<T1, T2, T3, T4>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike <T4>]): Promise<[T1, T2, T3, T4]>;\r\n    all<T1, T2, T3>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]): Promise<[T1, T2, T3]>;\r\n    all<T1, T2>(values: [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): Promise<[T1, T2]>;\r\n\r\n    /**\r\n     * Creates a new rejected promise for the provided reason.\r\n     * @param reason The reason the promise was rejected.\r\n     * @returns A new rejected Promise.\r\n     */\r\n    reject(reason: any): Promise<void>;\r\n\r\n    /**\r\n     * Creates a new rejected promise for the provided reason.\r\n     * @param reason The reason the promise was rejected.\r\n     * @returns A new rejected Promise.\r\n     */\r\n    reject<T>(reason: any): Promise<T>;\r\n\r\n    /**\r\n      * Creates a new resolved promise for the provided value.\r\n      * @param value A promise.\r\n      * @returns A promise whose internal state matches the provided promise.\r\n      */\r\n    resolve<T>(value: T | PromiseLike<T>): Promise<T>;\r\n\r\n    /**\r\n     * Creates a new resolved promise .\r\n     * @returns A resolved promise.\r\n     */\r\n    resolve(): Promise<void>;\r\n}\r\n\r\ndeclare var Promise: PromiseConstructor;interface ProxyHandler<T> {\r\n    getPrototypeOf? (target: T): any;\r\n    setPrototypeOf? (target: T, v: any): boolean;\r\n    isExtensible? (target: T): boolean;\r\n    preventExtensions? (target: T): boolean;\r\n    getOwnPropertyDescriptor? (target: T, p: PropertyKey): PropertyDescriptor;\r\n    has? (target: T, p: PropertyKey): boolean;\r\n    get? (target: T, p: PropertyKey, receiver: any): any;\r\n    set? (target: T, p: PropertyKey, value: any, receiver: any): boolean;\r\n    deleteProperty? (target: T, p: PropertyKey): boolean;\r\n    defineProperty? (target: T, p: PropertyKey, attributes: PropertyDescriptor): boolean;\r\n    enumerate? (target: T): PropertyKey[];\r\n    ownKeys? (target: T): PropertyKey[];\r\n    apply? (target: T, thisArg: any, argArray?: any): any;\r\n    construct? (target: T, thisArg: any, argArray?: any): any;\r\n}\r\n\r\ninterface ProxyConstructor {\r\n    revocable<T>(target: T, handler: ProxyHandler<T>): { proxy: T; revoke: () => void; };\r\n    new <T>(target: T, handler: ProxyHandler<T>): T\r\n}\r\ndeclare var Proxy: ProxyConstructor;declare namespace Reflect {\r\n    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;\r\n    function construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: any): any;\r\n    function defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;\r\n    function deleteProperty(target: any, propertyKey: PropertyKey): boolean;\r\n    function get(target: any, propertyKey: PropertyKey, receiver?: any): any;\r\n    function getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;\r\n    function getPrototypeOf(target: any): any;\r\n    function has(target: any, propertyKey: string): boolean;\r\n    function has(target: any, propertyKey: symbol): boolean;\r\n    function isExtensible(target: any): boolean;\r\n    function ownKeys(target: any): Array<PropertyKey>;\r\n    function preventExtensions(target: any): boolean;\r\n    function set(target: any, propertyKey: PropertyKey, value: any, receiver?: any): boolean;\r\n    function setPrototypeOf(target: any, proto: any): boolean;\r\n}interface Symbol {\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Object;\r\n}\r\n\r\ninterface SymbolConstructor {\r\n    /** \r\n      * A reference to the prototype. \r\n      */\r\n    readonly prototype: Symbol;\r\n\r\n    /**\r\n      * Returns a new unique Symbol value.\r\n      * @param  description Description of the new Symbol object.\r\n      */\r\n    (description?: string|number): symbol;\r\n\r\n    /**\r\n      * Returns a Symbol object from the global symbol registry matching the given key if found. \r\n      * Otherwise, returns a new symbol with this key.\r\n      * @param key key to search for.\r\n      */\r\n    for(key: string): symbol;\r\n\r\n    /**\r\n      * Returns a key from the global symbol registry matching the given Symbol if found. \r\n      * Otherwise, returns a undefined.\r\n      * @param sym Symbol to find the key for.\r\n      */\r\n    keyFor(sym: symbol): string | undefined;\r\n}\r\n\r\ndeclare var Symbol: SymbolConstructor;/// <reference path=\"lib.es2015.symbol.d.ts\" />\r\n\r\ninterface SymbolConstructor {\r\n    /** \r\n      * A method that determines if a constructor object recognizes an object as one of the \r\n      * constructor’s instances. Called by the semantics of the instanceof operator. \r\n      */\r\n    readonly hasInstance: symbol;\r\n\r\n    /** \r\n      * A Boolean value that if true indicates that an object should flatten to its array elements\r\n      * by Array.prototype.concat.\r\n      */\r\n    readonly isConcatSpreadable: symbol;\r\n\r\n    /**\r\n      * A regular expression method that matches the regular expression against a string. Called \r\n      * by the String.prototype.match method. \r\n      */\r\n    readonly match: symbol;\r\n\r\n    /** \r\n      * A regular expression method that replaces matched substrings of a string. Called by the \r\n      * String.prototype.replace method.\r\n      */\r\n    readonly replace: symbol;\r\n\r\n    /**\r\n      * A regular expression method that returns the index within a string that matches the \r\n      * regular expression. Called by the String.prototype.search method.\r\n      */\r\n    readonly search: symbol;\r\n\r\n    /** \r\n      * A function valued property that is the constructor function that is used to create \r\n      * derived objects.\r\n      */\r\n    readonly species: symbol;\r\n\r\n    /**\r\n      * A regular expression method that splits a string at the indices that match the regular \r\n      * expression. Called by the String.prototype.split method.\r\n      */\r\n    readonly split: symbol;\r\n\r\n    /** \r\n      * A method that converts an object to a corresponding primitive value.\r\n      * Called by the ToPrimitive abstract operation.\r\n      */\r\n    readonly toPrimitive: symbol;\r\n\r\n    /** \r\n      * A String value that is used in the creation of the default string description of an object.\r\n      * Called by the built-in method Object.prototype.toString.\r\n      */\r\n    readonly toStringTag: symbol;\r\n\r\n    /**\r\n      * An Object whose own property names are property names that are excluded from the 'with'\r\n      * environment bindings of the associated objects.\r\n      */\r\n    readonly unscopables: symbol;\r\n}\r\n\r\ninterface Symbol {\r\n    readonly [Symbol.toStringTag]: \"Symbol\";\r\n}\r\n\r\ninterface Array<T> {\r\n    /**\r\n     * Returns an object whose properties have the value 'true'\r\n     * when they will be absent when used in a 'with' statement.\r\n     */\r\n    [Symbol.unscopables](): {\r\n        copyWithin: boolean;\r\n        entries: boolean;\r\n        fill: boolean;\r\n        find: boolean;\r\n        findIndex: boolean;\r\n        keys: boolean;\r\n        values: boolean;\r\n    };\r\n}\r\n\r\ninterface Date {\r\n    /**\r\n     * Converts a Date object to a string.\r\n     */\r\n    [Symbol.toPrimitive](hint: \"default\"): string;\r\n    /**\r\n     * Converts a Date object to a string.\r\n     */\r\n    [Symbol.toPrimitive](hint: \"string\"): string;\r\n    /**\r\n     * Converts a Date object to a number.\r\n     */\r\n    [Symbol.toPrimitive](hint: \"number\"): number;\r\n    /**\r\n     * Converts a Date object to a string or number.\r\n     *\r\n     * @param hint The strings \"number\", \"string\", or \"default\" to specify what primitive to return.\r\n     *\r\n     * @throws {TypeError} If 'hint' was given something other than \"number\", \"string\", or \"default\".\r\n     * @returns A number if 'hint' was \"number\", a string if 'hint' was \"string\" or \"default\".\r\n     */\r\n    [Symbol.toPrimitive](hint: string): string | number;\r\n}\r\n\r\ninterface Map<K, V> {\r\n    readonly [Symbol.toStringTag]: \"Map\";\r\n}\r\n\r\ninterface WeakMap<K, V>{\r\n    readonly [Symbol.toStringTag]: \"WeakMap\";\r\n}\r\n\r\ninterface Set<T> {\r\n    readonly [Symbol.toStringTag]: \"Set\";\r\n}\r\n\r\ninterface WeakSet<T> {\r\n    readonly [Symbol.toStringTag]: \"WeakSet\";\r\n}\r\n\r\ninterface JSON {\r\n    readonly [Symbol.toStringTag]: \"JSON\";\r\n}\r\n\r\ninterface Function {\r\n    /**\r\n     * Determines whether the given value inherits from this function if this function was used\r\n     * as a constructor function.\r\n     *\r\n     * A constructor function can control which objects are recognized as its instances by\r\n     * 'instanceof' by overriding this method.\r\n     */\r\n    [Symbol.hasInstance](value: any): boolean;\r\n}\r\n\r\ninterface GeneratorFunction extends Function {\r\n    readonly [Symbol.toStringTag]: \"GeneratorFunction\";\r\n}\r\n\r\ninterface Math {\r\n    readonly [Symbol.toStringTag]: \"Math\";\r\n}\r\n\r\ninterface Promise<T> {\r\n    readonly [Symbol.toStringTag]: \"Promise\";\r\n}\r\n\r\ninterface PromiseConstructor {\r\n    readonly [Symbol.species]: Function;\r\n}\r\n\r\ninterface RegExp {\r\n        /**\r\n      * Matches a string with this regular expression, and returns an array containing the results of\r\n      * that search.\r\n      * @param string A string to search within.\r\n      */\r\n    [Symbol.match](string: string): RegExpMatchArray | null;\r\n\r\n    /**\r\n      * Replaces text in a string, using this regular expression.\r\n      * @param string A String object or string literal whose contents matching against\r\n      *               this regular expression will be replaced\r\n      * @param replaceValue A String object or string literal containing the text to replace for every \r\n      *                     successful match of this regular expression.\r\n      */\r\n    [Symbol.replace](string: string, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using this regular expression.\r\n      * @param string A String object or string literal whose contents matching against\r\n      *               this regular expression will be replaced\r\n      * @param replacer A function that returns the replacement text.\r\n      */\r\n    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Finds the position beginning first substring match in a regular expression search\r\n      * using this regular expression.\r\n      *\r\n      * @param string The string to search within.\r\n      */\r\n    [Symbol.search](string: string): number;\r\n\r\n    /**\r\n      * Returns an array of substrings that were delimited by strings in the original input that\r\n      * match against this regular expression.\r\n      *\r\n      * If the regular expression contains capturing parentheses, then each time this\r\n      * regular expression matches, the results (including any undefined results) of the\r\n      * capturing parentheses are spliced.\r\n      *\r\n      * @param string string value to split\r\n      * @param limit if not undefined, the output array is truncated so that it contains no more\r\n      * than 'limit' elements.\r\n      */\r\n    [Symbol.split](string: string, limit?: number): string[];\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    [Symbol.species](): RegExpConstructor;\r\n}\r\n\r\ninterface String {\r\n    /**\r\n      * Matches a string an object that supports being matched against, and returns an array containing the results of that search.\r\n      * @param matcher An object that supports being matched against.\r\n      */\r\n    match(matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null;\r\n\r\n    /**\r\n      * Replaces text in a string, using an object that supports replacement within a string.\r\n      * @param searchValue A object can search for and replace matches within a string.\r\n      * @param replaceValue A string containing the text to replace for every successful match of searchValue in this string.\r\n      */\r\n    replace(searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using an object that supports replacement within a string.\r\n      * @param searchValue A object can search for and replace matches within a string.\r\n      * @param replacer A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param searcher An object which supports searching within a string.\r\n      */\r\n    search(searcher: { [Symbol.search](string: string): number; }): number;\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param splitter An object that can split a string.\r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[];\r\n}\r\n\r\n/**\r\n  * Represents a raw buffer of binary data, which is used to store data for the \r\n  * different typed arrays. ArrayBuffers cannot be read from or written to directly, \r\n  * but can be passed to a typed array or DataView Object to interpret the raw \r\n  * buffer as needed. \r\n  */\r\ninterface ArrayBuffer {\r\n    readonly [Symbol.toStringTag]: \"ArrayBuffer\";\r\n}\r\n\r\ninterface DataView {\r\n    readonly [Symbol.toStringTag]: \"DataView\";\r\n}\r\n\r\n/**\r\n  * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested \r\n  * number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int8Array {\r\n    readonly [Symbol.toStringTag]: \"Int8Array\";\r\n}\r\n\r\n/**\r\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint8Array {\r\n    readonly [Symbol.toStringTag]: \"UInt8Array\";\r\n}\r\n\r\n/**\r\n  * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0. \r\n  * If the requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint8ClampedArray {\r\n    readonly [Symbol.toStringTag]: \"Uint8ClampedArray\";\r\n}\r\n\r\n/**\r\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int16Array {\r\n    readonly [Symbol.toStringTag]: \"Int16Array\";\r\n}\r\n\r\n/**\r\n  * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint16Array {\r\n    readonly [Symbol.toStringTag]: \"Uint16Array\";\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Int32Array {\r\n    readonly [Symbol.toStringTag]: \"Int32Array\";\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the \r\n  * requested number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Uint32Array {\r\n    readonly [Symbol.toStringTag]: \"Uint32Array\";\r\n}\r\n\r\n/**\r\n  * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\r\n  * of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float32Array {\r\n    readonly [Symbol.toStringTag]: \"Float32Array\";\r\n}\r\n\r\n/**\r\n  * A typed array of 64-bit float values. The contents are initialized to 0. If the requested \r\n  * number of bytes could not be allocated an exception is raised.\r\n  */\r\ninterface Float64Array {\r\n    readonly [Symbol.toStringTag]: \"Float64Array\";\r\n}\r\n/////////////////////////////\r\n/// IE DOM APIs\r\n/////////////////////////////\r\n\r\ninterface Algorithm {\r\n    name?: string;\r\n}\r\n\r\ninterface AriaRequestEventInit extends EventInit {\r\n    attributeName?: string;\r\n    attributeValue?: string;\r\n}\r\n\r\ninterface CommandEventInit extends EventInit {\r\n    commandName?: string;\r\n    detail?: string;\r\n}\r\n\r\ninterface CompositionEventInit extends UIEventInit {\r\n    data?: string;\r\n}\r\n\r\ninterface ConfirmSiteSpecificExceptionsInformation extends ExceptionInformation {\r\n    arrayOfDomainStrings?: string[];\r\n}\r\n\r\ninterface ConstrainBooleanParameters {\r\n    exact?: boolean;\r\n    ideal?: boolean;\r\n}\r\n\r\ninterface ConstrainDOMStringParameters {\r\n    exact?: string | string[];\r\n    ideal?: string | string[];\r\n}\r\n\r\ninterface ConstrainDoubleRange extends DoubleRange {\r\n    exact?: number;\r\n    ideal?: number;\r\n}\r\n\r\ninterface ConstrainLongRange extends LongRange {\r\n    exact?: number;\r\n    ideal?: number;\r\n}\r\n\r\ninterface ConstrainVideoFacingModeParameters {\r\n    exact?: string | string[];\r\n    ideal?: string | string[];\r\n}\r\n\r\ninterface CustomEventInit extends EventInit {\r\n    detail?: any;\r\n}\r\n\r\ninterface DeviceAccelerationDict {\r\n    x?: number;\r\n    y?: number;\r\n    z?: number;\r\n}\r\n\r\ninterface DeviceLightEventInit extends EventInit {\r\n    value?: number;\r\n}\r\n\r\ninterface DeviceRotationRateDict {\r\n    alpha?: number;\r\n    beta?: number;\r\n    gamma?: number;\r\n}\r\n\r\ninterface DoubleRange {\r\n    max?: number;\r\n    min?: number;\r\n}\r\n\r\ninterface EventInit {\r\n    bubbles?: boolean;\r\n    cancelable?: boolean;\r\n}\r\n\r\ninterface EventModifierInit extends UIEventInit {\r\n    ctrlKey?: boolean;\r\n    shiftKey?: boolean;\r\n    altKey?: boolean;\r\n    metaKey?: boolean;\r\n    modifierAltGraph?: boolean;\r\n    modifierCapsLock?: boolean;\r\n    modifierFn?: boolean;\r\n    modifierFnLock?: boolean;\r\n    modifierHyper?: boolean;\r\n    modifierNumLock?: boolean;\r\n    modifierOS?: boolean;\r\n    modifierScrollLock?: boolean;\r\n    modifierSuper?: boolean;\r\n    modifierSymbol?: boolean;\r\n    modifierSymbolLock?: boolean;\r\n}\r\n\r\ninterface ExceptionInformation {\r\n    domain?: string;\r\n}\r\n\r\ninterface FocusEventInit extends UIEventInit {\r\n    relatedTarget?: EventTarget;\r\n}\r\n\r\ninterface HashChangeEventInit extends EventInit {\r\n    newURL?: string;\r\n    oldURL?: string;\r\n}\r\n\r\ninterface IDBIndexParameters {\r\n    multiEntry?: boolean;\r\n    unique?: boolean;\r\n}\r\n\r\ninterface IDBObjectStoreParameters {\r\n    autoIncrement?: boolean;\r\n    keyPath?: IDBKeyPath;\r\n}\r\n\r\ninterface KeyAlgorithm {\r\n    name?: string;\r\n}\r\n\r\ninterface KeyboardEventInit extends EventModifierInit {\r\n    key?: string;\r\n    location?: number;\r\n    repeat?: boolean;\r\n}\r\n\r\ninterface LongRange {\r\n    max?: number;\r\n    min?: number;\r\n}\r\n\r\ninterface MSAccountInfo {\r\n    rpDisplayName?: string;\r\n    userDisplayName?: string;\r\n    accountName?: string;\r\n    userId?: string;\r\n    accountImageUri?: string;\r\n}\r\n\r\ninterface MSAudioLocalClientEvent extends MSLocalClientEventBase {\r\n    networkSendQualityEventRatio?: number;\r\n    networkDelayEventRatio?: number;\r\n    cpuInsufficientEventRatio?: number;\r\n    deviceHalfDuplexAECEventRatio?: number;\r\n    deviceRenderNotFunctioningEventRatio?: number;\r\n    deviceCaptureNotFunctioningEventRatio?: number;\r\n    deviceGlitchesEventRatio?: number;\r\n    deviceLowSNREventRatio?: number;\r\n    deviceLowSpeechLevelEventRatio?: number;\r\n    deviceClippingEventRatio?: number;\r\n    deviceEchoEventRatio?: number;\r\n    deviceNearEndToEchoRatioEventRatio?: number;\r\n    deviceRenderZeroVolumeEventRatio?: number;\r\n    deviceRenderMuteEventRatio?: number;\r\n    deviceMultipleEndpointsEventCount?: number;\r\n    deviceHowlingEventCount?: number;\r\n}\r\n\r\ninterface MSAudioRecvPayload extends MSPayloadBase {\r\n    samplingRate?: number;\r\n    signal?: MSAudioRecvSignal;\r\n    packetReorderRatio?: number;\r\n    packetReorderDepthAvg?: number;\r\n    packetReorderDepthMax?: number;\r\n    burstLossLength1?: number;\r\n    burstLossLength2?: number;\r\n    burstLossLength3?: number;\r\n    burstLossLength4?: number;\r\n    burstLossLength5?: number;\r\n    burstLossLength6?: number;\r\n    burstLossLength7?: number;\r\n    burstLossLength8OrHigher?: number;\r\n    fecRecvDistance1?: number;\r\n    fecRecvDistance2?: number;\r\n    fecRecvDistance3?: number;\r\n    ratioConcealedSamplesAvg?: number;\r\n    ratioStretchedSamplesAvg?: number;\r\n    ratioCompressedSamplesAvg?: number;\r\n}\r\n\r\ninterface MSAudioRecvSignal {\r\n    initialSignalLevelRMS?: number;\r\n    recvSignalLevelCh1?: number;\r\n    recvNoiseLevelCh1?: number;\r\n    renderSignalLevel?: number;\r\n    renderNoiseLevel?: number;\r\n    renderLoopbackSignalLevel?: number;\r\n}\r\n\r\ninterface MSAudioSendPayload extends MSPayloadBase {\r\n    samplingRate?: number;\r\n    signal?: MSAudioSendSignal;\r\n    audioFECUsed?: boolean;\r\n    sendMutePercent?: number;\r\n}\r\n\r\ninterface MSAudioSendSignal {\r\n    noiseLevel?: number;\r\n    sendSignalLevelCh1?: number;\r\n    sendNoiseLevelCh1?: number;\r\n}\r\n\r\ninterface MSConnectivity {\r\n    iceType?: string;\r\n    iceWarningFlags?: MSIceWarningFlags;\r\n    relayAddress?: MSRelayAddress;\r\n}\r\n\r\ninterface MSCredentialFilter {\r\n    accept?: MSCredentialSpec[];\r\n}\r\n\r\ninterface MSCredentialParameters {\r\n    type?: string;\r\n}\r\n\r\ninterface MSCredentialSpec {\r\n    type?: string;\r\n    id?: string;\r\n}\r\n\r\ninterface MSDelay {\r\n    roundTrip?: number;\r\n    roundTripMax?: number;\r\n}\r\n\r\ninterface MSDescription extends RTCStats {\r\n    connectivity?: MSConnectivity;\r\n    transport?: string;\r\n    networkconnectivity?: MSNetworkConnectivityInfo;\r\n    localAddr?: MSIPAddressInfo;\r\n    remoteAddr?: MSIPAddressInfo;\r\n    deviceDevName?: string;\r\n    reflexiveLocalIPAddr?: MSIPAddressInfo;\r\n}\r\n\r\ninterface MSFIDOCredentialParameters extends MSCredentialParameters {\r\n    algorithm?: string | Algorithm;\r\n    authenticators?: AAGUID[];\r\n}\r\n\r\ninterface MSIPAddressInfo {\r\n    ipAddr?: string;\r\n    port?: number;\r\n    manufacturerMacAddrMask?: string;\r\n}\r\n\r\ninterface MSIceWarningFlags {\r\n    turnTcpTimedOut?: boolean;\r\n    turnUdpAllocateFailed?: boolean;\r\n    turnUdpSendFailed?: boolean;\r\n    turnTcpAllocateFailed?: boolean;\r\n    turnTcpSendFailed?: boolean;\r\n    udpLocalConnectivityFailed?: boolean;\r\n    udpNatConnectivityFailed?: boolean;\r\n    udpRelayConnectivityFailed?: boolean;\r\n    tcpNatConnectivityFailed?: boolean;\r\n    tcpRelayConnectivityFailed?: boolean;\r\n    connCheckMessageIntegrityFailed?: boolean;\r\n    allocationMessageIntegrityFailed?: boolean;\r\n    connCheckOtherError?: boolean;\r\n    turnAuthUnknownUsernameError?: boolean;\r\n    noRelayServersConfigured?: boolean;\r\n    multipleRelayServersAttempted?: boolean;\r\n    portRangeExhausted?: boolean;\r\n    alternateServerReceived?: boolean;\r\n    pseudoTLSFailure?: boolean;\r\n    turnTurnTcpConnectivityFailed?: boolean;\r\n    useCandidateChecksFailed?: boolean;\r\n    fipsAllocationFailure?: boolean;\r\n}\r\n\r\ninterface MSJitter {\r\n    interArrival?: number;\r\n    interArrivalMax?: number;\r\n    interArrivalSD?: number;\r\n}\r\n\r\ninterface MSLocalClientEventBase extends RTCStats {\r\n    networkReceiveQualityEventRatio?: number;\r\n    networkBandwidthLowEventRatio?: number;\r\n}\r\n\r\ninterface MSNetwork extends RTCStats {\r\n    jitter?: MSJitter;\r\n    delay?: MSDelay;\r\n    packetLoss?: MSPacketLoss;\r\n    utilization?: MSUtilization;\r\n}\r\n\r\ninterface MSNetworkConnectivityInfo {\r\n    vpn?: boolean;\r\n    linkspeed?: number;\r\n    networkConnectionDetails?: string;\r\n}\r\n\r\ninterface MSNetworkInterfaceType {\r\n    interfaceTypeEthernet?: boolean;\r\n    interfaceTypeWireless?: boolean;\r\n    interfaceTypePPP?: boolean;\r\n    interfaceTypeTunnel?: boolean;\r\n    interfaceTypeWWAN?: boolean;\r\n}\r\n\r\ninterface MSOutboundNetwork extends MSNetwork {\r\n    appliedBandwidthLimit?: number;\r\n}\r\n\r\ninterface MSPacketLoss {\r\n    lossRate?: number;\r\n    lossRateMax?: number;\r\n}\r\n\r\ninterface MSPayloadBase extends RTCStats {\r\n    payloadDescription?: string;\r\n}\r\n\r\ninterface MSRelayAddress {\r\n    relayAddress?: string;\r\n    port?: number;\r\n}\r\n\r\ninterface MSSignatureParameters {\r\n    userPrompt?: string;\r\n}\r\n\r\ninterface MSTransportDiagnosticsStats extends RTCStats {\r\n    baseAddress?: string;\r\n    localAddress?: string;\r\n    localSite?: string;\r\n    networkName?: string;\r\n    remoteAddress?: string;\r\n    remoteSite?: string;\r\n    localMR?: string;\r\n    remoteMR?: string;\r\n    iceWarningFlags?: MSIceWarningFlags;\r\n    portRangeMin?: number;\r\n    portRangeMax?: number;\r\n    localMRTCPPort?: number;\r\n    remoteMRTCPPort?: number;\r\n    stunVer?: number;\r\n    numConsentReqSent?: number;\r\n    numConsentReqReceived?: number;\r\n    numConsentRespSent?: number;\r\n    numConsentRespReceived?: number;\r\n    interfaces?: MSNetworkInterfaceType;\r\n    baseInterface?: MSNetworkInterfaceType;\r\n    protocol?: string;\r\n    localInterface?: MSNetworkInterfaceType;\r\n    localAddrType?: string;\r\n    remoteAddrType?: string;\r\n    iceRole?: string;\r\n    rtpRtcpMux?: boolean;\r\n    allocationTimeInMs?: number;\r\n    msRtcEngineVersion?: string;\r\n}\r\n\r\ninterface MSUtilization {\r\n    packets?: number;\r\n    bandwidthEstimation?: number;\r\n    bandwidthEstimationMin?: number;\r\n    bandwidthEstimationMax?: number;\r\n    bandwidthEstimationStdDev?: number;\r\n    bandwidthEstimationAvg?: number;\r\n}\r\n\r\ninterface MSVideoPayload extends MSPayloadBase {\r\n    resoluton?: string;\r\n    videoBitRateAvg?: number;\r\n    videoBitRateMax?: number;\r\n    videoFrameRateAvg?: number;\r\n    videoPacketLossRate?: number;\r\n    durationSeconds?: number;\r\n}\r\n\r\ninterface MSVideoRecvPayload extends MSVideoPayload {\r\n    videoFrameLossRate?: number;\r\n    recvCodecType?: string;\r\n    recvResolutionWidth?: number;\r\n    recvResolutionHeight?: number;\r\n    videoResolutions?: MSVideoResolutionDistribution;\r\n    recvFrameRateAverage?: number;\r\n    recvBitRateMaximum?: number;\r\n    recvBitRateAverage?: number;\r\n    recvVideoStreamsMax?: number;\r\n    recvVideoStreamsMin?: number;\r\n    recvVideoStreamsMode?: number;\r\n    videoPostFECPLR?: number;\r\n    lowBitRateCallPercent?: number;\r\n    lowFrameRateCallPercent?: number;\r\n    reorderBufferTotalPackets?: number;\r\n    recvReorderBufferReorderedPackets?: number;\r\n    recvReorderBufferPacketsDroppedDueToBufferExhaustion?: number;\r\n    recvReorderBufferMaxSuccessfullyOrderedExtent?: number;\r\n    recvReorderBufferMaxSuccessfullyOrderedLateTime?: number;\r\n    recvReorderBufferPacketsDroppedDueToTimeout?: number;\r\n    recvFpsHarmonicAverage?: number;\r\n    recvNumResSwitches?: number;\r\n}\r\n\r\ninterface MSVideoResolutionDistribution {\r\n    cifQuality?: number;\r\n    vgaQuality?: number;\r\n    h720Quality?: number;\r\n    h1080Quality?: number;\r\n    h1440Quality?: number;\r\n    h2160Quality?: number;\r\n}\r\n\r\ninterface MSVideoSendPayload extends MSVideoPayload {\r\n    sendFrameRateAverage?: number;\r\n    sendBitRateMaximum?: number;\r\n    sendBitRateAverage?: number;\r\n    sendVideoStreamsMax?: number;\r\n    sendResolutionWidth?: number;\r\n    sendResolutionHeight?: number;\r\n}\r\n\r\ninterface MediaEncryptedEventInit extends EventInit {\r\n    initDataType?: string;\r\n    initData?: ArrayBuffer;\r\n}\r\n\r\ninterface MediaKeyMessageEventInit extends EventInit {\r\n    messageType?: string;\r\n    message?: ArrayBuffer;\r\n}\r\n\r\ninterface MediaKeySystemConfiguration {\r\n    initDataTypes?: string[];\r\n    audioCapabilities?: MediaKeySystemMediaCapability[];\r\n    videoCapabilities?: MediaKeySystemMediaCapability[];\r\n    distinctiveIdentifier?: string;\r\n    persistentState?: string;\r\n}\r\n\r\ninterface MediaKeySystemMediaCapability {\r\n    contentType?: string;\r\n    robustness?: string;\r\n}\r\n\r\ninterface MediaStreamConstraints {\r\n    video?: boolean | MediaTrackConstraints;\r\n    audio?: boolean | MediaTrackConstraints;\r\n}\r\n\r\ninterface MediaStreamErrorEventInit extends EventInit {\r\n    error?: MediaStreamError;\r\n}\r\n\r\ninterface MediaStreamTrackEventInit extends EventInit {\r\n    track?: MediaStreamTrack;\r\n}\r\n\r\ninterface MediaTrackCapabilities {\r\n    width?: number | LongRange;\r\n    height?: number | LongRange;\r\n    aspectRatio?: number | DoubleRange;\r\n    frameRate?: number | DoubleRange;\r\n    facingMode?: string;\r\n    volume?: number | DoubleRange;\r\n    sampleRate?: number | LongRange;\r\n    sampleSize?: number | LongRange;\r\n    echoCancellation?: boolean[];\r\n    deviceId?: string;\r\n    groupId?: string;\r\n}\r\n\r\ninterface MediaTrackConstraintSet {\r\n    width?: number | ConstrainLongRange;\r\n    height?: number | ConstrainLongRange;\r\n    aspectRatio?: number | ConstrainDoubleRange;\r\n    frameRate?: number | ConstrainDoubleRange;\r\n    facingMode?: string | string[] | ConstrainDOMStringParameters;\r\n    volume?: number | ConstrainDoubleRange;\r\n    sampleRate?: number | ConstrainLongRange;\r\n    sampleSize?: number | ConstrainLongRange;\r\n    echoCancelation?: boolean | ConstrainBooleanParameters;\r\n    deviceId?: string | string[] | ConstrainDOMStringParameters;\r\n    groupId?: string | string[] | ConstrainDOMStringParameters;\r\n}\r\n\r\ninterface MediaTrackConstraints extends MediaTrackConstraintSet {\r\n    advanced?: MediaTrackConstraintSet[];\r\n}\r\n\r\ninterface MediaTrackSettings {\r\n    width?: number;\r\n    height?: number;\r\n    aspectRatio?: number;\r\n    frameRate?: number;\r\n    facingMode?: string;\r\n    volume?: number;\r\n    sampleRate?: number;\r\n    sampleSize?: number;\r\n    echoCancellation?: boolean;\r\n    deviceId?: string;\r\n    groupId?: string;\r\n}\r\n\r\ninterface MediaTrackSupportedConstraints {\r\n    width?: boolean;\r\n    height?: boolean;\r\n    aspectRatio?: boolean;\r\n    frameRate?: boolean;\r\n    facingMode?: boolean;\r\n    volume?: boolean;\r\n    sampleRate?: boolean;\r\n    sampleSize?: boolean;\r\n    echoCancellation?: boolean;\r\n    deviceId?: boolean;\r\n    groupId?: boolean;\r\n}\r\n\r\ninterface MouseEventInit extends EventModifierInit {\r\n    screenX?: number;\r\n    screenY?: number;\r\n    clientX?: number;\r\n    clientY?: number;\r\n    button?: number;\r\n    buttons?: number;\r\n    relatedTarget?: EventTarget;\r\n}\r\n\r\ninterface MsZoomToOptions {\r\n    contentX?: number;\r\n    contentY?: number;\r\n    viewportX?: string;\r\n    viewportY?: string;\r\n    scaleFactor?: number;\r\n    animate?: string;\r\n}\r\n\r\ninterface MutationObserverInit {\r\n    childList?: boolean;\r\n    attributes?: boolean;\r\n    characterData?: boolean;\r\n    subtree?: boolean;\r\n    attributeOldValue?: boolean;\r\n    characterDataOldValue?: boolean;\r\n    attributeFilter?: string[];\r\n}\r\n\r\ninterface ObjectURLOptions {\r\n    oneTimeOnly?: boolean;\r\n}\r\n\r\ninterface PeriodicWaveConstraints {\r\n    disableNormalization?: boolean;\r\n}\r\n\r\ninterface PointerEventInit extends MouseEventInit {\r\n    pointerId?: number;\r\n    width?: number;\r\n    height?: number;\r\n    pressure?: number;\r\n    tiltX?: number;\r\n    tiltY?: number;\r\n    pointerType?: string;\r\n    isPrimary?: boolean;\r\n}\r\n\r\ninterface PositionOptions {\r\n    enableHighAccuracy?: boolean;\r\n    timeout?: number;\r\n    maximumAge?: number;\r\n}\r\n\r\ninterface RTCDTMFToneChangeEventInit extends EventInit {\r\n    tone?: string;\r\n}\r\n\r\ninterface RTCDtlsFingerprint {\r\n    algorithm?: string;\r\n    value?: string;\r\n}\r\n\r\ninterface RTCDtlsParameters {\r\n    role?: string;\r\n    fingerprints?: RTCDtlsFingerprint[];\r\n}\r\n\r\ninterface RTCIceCandidate {\r\n    foundation?: string;\r\n    priority?: number;\r\n    ip?: string;\r\n    protocol?: string;\r\n    port?: number;\r\n    type?: string;\r\n    tcpType?: string;\r\n    relatedAddress?: string;\r\n    relatedPort?: number;\r\n}\r\n\r\ninterface RTCIceCandidateAttributes extends RTCStats {\r\n    ipAddress?: string;\r\n    portNumber?: number;\r\n    transport?: string;\r\n    candidateType?: string;\r\n    priority?: number;\r\n    addressSourceUrl?: string;\r\n}\r\n\r\ninterface RTCIceCandidateComplete {\r\n}\r\n\r\ninterface RTCIceCandidatePair {\r\n    local?: RTCIceCandidate;\r\n    remote?: RTCIceCandidate;\r\n}\r\n\r\ninterface RTCIceCandidatePairStats extends RTCStats {\r\n    transportId?: string;\r\n    localCandidateId?: string;\r\n    remoteCandidateId?: string;\r\n    state?: string;\r\n    priority?: number;\r\n    nominated?: boolean;\r\n    writable?: boolean;\r\n    readable?: boolean;\r\n    bytesSent?: number;\r\n    bytesReceived?: number;\r\n    roundTripTime?: number;\r\n    availableOutgoingBitrate?: number;\r\n    availableIncomingBitrate?: number;\r\n}\r\n\r\ninterface RTCIceGatherOptions {\r\n    gatherPolicy?: string;\r\n    iceservers?: RTCIceServer[];\r\n}\r\n\r\ninterface RTCIceParameters {\r\n    usernameFragment?: string;\r\n    password?: string;\r\n}\r\n\r\ninterface RTCIceServer {\r\n    urls?: any;\r\n    username?: string;\r\n    credential?: string;\r\n}\r\n\r\ninterface RTCInboundRTPStreamStats extends RTCRTPStreamStats {\r\n    packetsReceived?: number;\r\n    bytesReceived?: number;\r\n    packetsLost?: number;\r\n    jitter?: number;\r\n    fractionLost?: number;\r\n}\r\n\r\ninterface RTCMediaStreamTrackStats extends RTCStats {\r\n    trackIdentifier?: string;\r\n    remoteSource?: boolean;\r\n    ssrcIds?: string[];\r\n    frameWidth?: number;\r\n    frameHeight?: number;\r\n    framesPerSecond?: number;\r\n    framesSent?: number;\r\n    framesReceived?: number;\r\n    framesDecoded?: number;\r\n    framesDropped?: number;\r\n    framesCorrupted?: number;\r\n    audioLevel?: number;\r\n    echoReturnLoss?: number;\r\n    echoReturnLossEnhancement?: number;\r\n}\r\n\r\ninterface RTCOutboundRTPStreamStats extends RTCRTPStreamStats {\r\n    packetsSent?: number;\r\n    bytesSent?: number;\r\n    targetBitrate?: number;\r\n    roundTripTime?: number;\r\n}\r\n\r\ninterface RTCRTPStreamStats extends RTCStats {\r\n    ssrc?: string;\r\n    associateStatsId?: string;\r\n    isRemote?: boolean;\r\n    mediaTrackId?: string;\r\n    transportId?: string;\r\n    codecId?: string;\r\n    firCount?: number;\r\n    pliCount?: number;\r\n    nackCount?: number;\r\n    sliCount?: number;\r\n}\r\n\r\ninterface RTCRtcpFeedback {\r\n    type?: string;\r\n    parameter?: string;\r\n}\r\n\r\ninterface RTCRtcpParameters {\r\n    ssrc?: number;\r\n    cname?: string;\r\n    reducedSize?: boolean;\r\n    mux?: boolean;\r\n}\r\n\r\ninterface RTCRtpCapabilities {\r\n    codecs?: RTCRtpCodecCapability[];\r\n    headerExtensions?: RTCRtpHeaderExtension[];\r\n    fecMechanisms?: string[];\r\n}\r\n\r\ninterface RTCRtpCodecCapability {\r\n    name?: string;\r\n    kind?: string;\r\n    clockRate?: number;\r\n    preferredPayloadType?: number;\r\n    maxptime?: number;\r\n    numChannels?: number;\r\n    rtcpFeedback?: RTCRtcpFeedback[];\r\n    parameters?: any;\r\n    options?: any;\r\n    maxTemporalLayers?: number;\r\n    maxSpatialLayers?: number;\r\n    svcMultiStreamSupport?: boolean;\r\n}\r\n\r\ninterface RTCRtpCodecParameters {\r\n    name?: string;\r\n    payloadType?: any;\r\n    clockRate?: number;\r\n    maxptime?: number;\r\n    numChannels?: number;\r\n    rtcpFeedback?: RTCRtcpFeedback[];\r\n    parameters?: any;\r\n}\r\n\r\ninterface RTCRtpContributingSource {\r\n    timestamp?: number;\r\n    csrc?: number;\r\n    audioLevel?: number;\r\n}\r\n\r\ninterface RTCRtpEncodingParameters {\r\n    ssrc?: number;\r\n    codecPayloadType?: number;\r\n    fec?: RTCRtpFecParameters;\r\n    rtx?: RTCRtpRtxParameters;\r\n    priority?: number;\r\n    maxBitrate?: number;\r\n    minQuality?: number;\r\n    framerateBias?: number;\r\n    resolutionScale?: number;\r\n    framerateScale?: number;\r\n    active?: boolean;\r\n    encodingId?: string;\r\n    dependencyEncodingIds?: string[];\r\n    ssrcRange?: RTCSsrcRange;\r\n}\r\n\r\ninterface RTCRtpFecParameters {\r\n    ssrc?: number;\r\n    mechanism?: string;\r\n}\r\n\r\ninterface RTCRtpHeaderExtension {\r\n    kind?: string;\r\n    uri?: string;\r\n    preferredId?: number;\r\n    preferredEncrypt?: boolean;\r\n}\r\n\r\ninterface RTCRtpHeaderExtensionParameters {\r\n    uri?: string;\r\n    id?: number;\r\n    encrypt?: boolean;\r\n}\r\n\r\ninterface RTCRtpParameters {\r\n    muxId?: string;\r\n    codecs?: RTCRtpCodecParameters[];\r\n    headerExtensions?: RTCRtpHeaderExtensionParameters[];\r\n    encodings?: RTCRtpEncodingParameters[];\r\n    rtcp?: RTCRtcpParameters;\r\n}\r\n\r\ninterface RTCRtpRtxParameters {\r\n    ssrc?: number;\r\n}\r\n\r\ninterface RTCRtpUnhandled {\r\n    ssrc?: number;\r\n    payloadType?: number;\r\n    muxId?: string;\r\n}\r\n\r\ninterface RTCSrtpKeyParam {\r\n    keyMethod?: string;\r\n    keySalt?: string;\r\n    lifetime?: string;\r\n    mkiValue?: number;\r\n    mkiLength?: number;\r\n}\r\n\r\ninterface RTCSrtpSdesParameters {\r\n    tag?: number;\r\n    cryptoSuite?: string;\r\n    keyParams?: RTCSrtpKeyParam[];\r\n    sessionParams?: string[];\r\n}\r\n\r\ninterface RTCSsrcRange {\r\n    min?: number;\r\n    max?: number;\r\n}\r\n\r\ninterface RTCStats {\r\n    timestamp?: number;\r\n    type?: string;\r\n    id?: string;\r\n    msType?: string;\r\n}\r\n\r\ninterface RTCStatsReport {\r\n}\r\n\r\ninterface RTCTransportStats extends RTCStats {\r\n    bytesSent?: number;\r\n    bytesReceived?: number;\r\n    rtcpTransportStatsId?: string;\r\n    activeConnection?: boolean;\r\n    selectedCandidatePairId?: string;\r\n    localCertificateId?: string;\r\n    remoteCertificateId?: string;\r\n}\r\n\r\ninterface StoreExceptionsInformation extends ExceptionInformation {\r\n    siteName?: string;\r\n    explanationString?: string;\r\n    detailURI?: string;\r\n}\r\n\r\ninterface StoreSiteSpecificExceptionsInformation extends StoreExceptionsInformation {\r\n    arrayOfDomainStrings?: string[];\r\n}\r\n\r\ninterface UIEventInit extends EventInit {\r\n    view?: Window;\r\n    detail?: number;\r\n}\r\n\r\ninterface WebGLContextAttributes {\r\n    alpha?: boolean;\r\n    depth?: boolean;\r\n    stencil?: boolean;\r\n    antialias?: boolean;\r\n    premultipliedAlpha?: boolean;\r\n    preserveDrawingBuffer?: boolean;\r\n}\r\n\r\ninterface WebGLContextEventInit extends EventInit {\r\n    statusMessage?: string;\r\n}\r\n\r\ninterface WheelEventInit extends MouseEventInit {\r\n    deltaX?: number;\r\n    deltaY?: number;\r\n    deltaZ?: number;\r\n    deltaMode?: number;\r\n}\r\n\r\ninterface EventListener {\r\n    (evt: Event): void;\r\n}\r\n\r\ninterface ANGLE_instanced_arrays {\r\n    drawArraysInstancedANGLE(mode: number, first: number, count: number, primcount: number): void;\r\n    drawElementsInstancedANGLE(mode: number, count: number, type: number, offset: number, primcount: number): void;\r\n    vertexAttribDivisorANGLE(index: number, divisor: number): void;\r\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;\r\n}\r\n\r\ndeclare var ANGLE_instanced_arrays: {\r\n    prototype: ANGLE_instanced_arrays;\r\n    new(): ANGLE_instanced_arrays;\r\n    readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: number;\r\n}\r\n\r\ninterface AnalyserNode extends AudioNode {\r\n    fftSize: number;\r\n    readonly frequencyBinCount: number;\r\n    maxDecibels: number;\r\n    minDecibels: number;\r\n    smoothingTimeConstant: number;\r\n    getByteFrequencyData(array: Uint8Array): void;\r\n    getByteTimeDomainData(array: Uint8Array): void;\r\n    getFloatFrequencyData(array: Float32Array): void;\r\n    getFloatTimeDomainData(array: Float32Array): void;\r\n}\r\n\r\ndeclare var AnalyserNode: {\r\n    prototype: AnalyserNode;\r\n    new(): AnalyserNode;\r\n}\r\n\r\ninterface AnimationEvent extends Event {\r\n    readonly animationName: string;\r\n    readonly elapsedTime: number;\r\n    initAnimationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, animationNameArg: string, elapsedTimeArg: number): void;\r\n}\r\n\r\ndeclare var AnimationEvent: {\r\n    prototype: AnimationEvent;\r\n    new(): AnimationEvent;\r\n}\r\n\r\ninterface ApplicationCache extends EventTarget {\r\n    oncached: (ev: Event) => any;\r\n    onchecking: (ev: Event) => any;\r\n    ondownloading: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onnoupdate: (ev: Event) => any;\r\n    onobsolete: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onupdateready: (ev: Event) => any;\r\n    readonly status: number;\r\n    abort(): void;\r\n    swapCache(): void;\r\n    update(): void;\r\n    readonly CHECKING: number;\r\n    readonly DOWNLOADING: number;\r\n    readonly IDLE: number;\r\n    readonly OBSOLETE: number;\r\n    readonly UNCACHED: number;\r\n    readonly UPDATEREADY: number;\r\n    addEventListener(type: \"cached\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"checking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"downloading\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"noupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"obsolete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"updateready\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var ApplicationCache: {\r\n    prototype: ApplicationCache;\r\n    new(): ApplicationCache;\r\n    readonly CHECKING: number;\r\n    readonly DOWNLOADING: number;\r\n    readonly IDLE: number;\r\n    readonly OBSOLETE: number;\r\n    readonly UNCACHED: number;\r\n    readonly UPDATEREADY: number;\r\n}\r\n\r\ninterface AriaRequestEvent extends Event {\r\n    readonly attributeName: string;\r\n    attributeValue: string | null;\r\n}\r\n\r\ndeclare var AriaRequestEvent: {\r\n    prototype: AriaRequestEvent;\r\n    new(type: string, eventInitDict?: AriaRequestEventInit): AriaRequestEvent;\r\n}\r\n\r\ninterface Attr extends Node {\r\n    readonly name: string;\r\n    readonly ownerElement: Element;\r\n    readonly prefix: string | null;\r\n    readonly specified: boolean;\r\n    value: string;\r\n}\r\n\r\ndeclare var Attr: {\r\n    prototype: Attr;\r\n    new(): Attr;\r\n}\r\n\r\ninterface AudioBuffer {\r\n    readonly duration: number;\r\n    readonly length: number;\r\n    readonly numberOfChannels: number;\r\n    readonly sampleRate: number;\r\n    copyFromChannel(destination: Float32Array, channelNumber: number, startInChannel?: number): void;\r\n    copyToChannel(source: Float32Array, channelNumber: number, startInChannel?: number): void;\r\n    getChannelData(channel: number): Float32Array;\r\n}\r\n\r\ndeclare var AudioBuffer: {\r\n    prototype: AudioBuffer;\r\n    new(): AudioBuffer;\r\n}\r\n\r\ninterface AudioBufferSourceNode extends AudioNode {\r\n    buffer: AudioBuffer | null;\r\n    readonly detune: AudioParam;\r\n    loop: boolean;\r\n    loopEnd: number;\r\n    loopStart: number;\r\n    onended: (ev: MediaStreamErrorEvent) => any;\r\n    readonly playbackRate: AudioParam;\r\n    start(when?: number, offset?: number, duration?: number): void;\r\n    stop(when?: number): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var AudioBufferSourceNode: {\r\n    prototype: AudioBufferSourceNode;\r\n    new(): AudioBufferSourceNode;\r\n}\r\n\r\ninterface AudioContext extends EventTarget {\r\n    readonly currentTime: number;\r\n    readonly destination: AudioDestinationNode;\r\n    readonly listener: AudioListener;\r\n    readonly sampleRate: number;\r\n    state: string;\r\n    createAnalyser(): AnalyserNode;\r\n    createBiquadFilter(): BiquadFilterNode;\r\n    createBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer;\r\n    createBufferSource(): AudioBufferSourceNode;\r\n    createChannelMerger(numberOfInputs?: number): ChannelMergerNode;\r\n    createChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode;\r\n    createConvolver(): ConvolverNode;\r\n    createDelay(maxDelayTime?: number): DelayNode;\r\n    createDynamicsCompressor(): DynamicsCompressorNode;\r\n    createGain(): GainNode;\r\n    createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode;\r\n    createMediaStreamSource(mediaStream: MediaStream): MediaStreamAudioSourceNode;\r\n    createOscillator(): OscillatorNode;\r\n    createPanner(): PannerNode;\r\n    createPeriodicWave(real: Float32Array, imag: Float32Array, constraints?: PeriodicWaveConstraints): PeriodicWave;\r\n    createScriptProcessor(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode;\r\n    createStereoPanner(): StereoPannerNode;\r\n    createWaveShaper(): WaveShaperNode;\r\n    decodeAudioData(audioData: ArrayBuffer, successCallback?: DecodeSuccessCallback, errorCallback?: DecodeErrorCallback): PromiseLike<AudioBuffer>;\r\n}\r\n\r\ndeclare var AudioContext: {\r\n    prototype: AudioContext;\r\n    new(): AudioContext;\r\n}\r\n\r\ninterface AudioDestinationNode extends AudioNode {\r\n    readonly maxChannelCount: number;\r\n}\r\n\r\ndeclare var AudioDestinationNode: {\r\n    prototype: AudioDestinationNode;\r\n    new(): AudioDestinationNode;\r\n}\r\n\r\ninterface AudioListener {\r\n    dopplerFactor: number;\r\n    speedOfSound: number;\r\n    setOrientation(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number): void;\r\n    setPosition(x: number, y: number, z: number): void;\r\n    setVelocity(x: number, y: number, z: number): void;\r\n}\r\n\r\ndeclare var AudioListener: {\r\n    prototype: AudioListener;\r\n    new(): AudioListener;\r\n}\r\n\r\ninterface AudioNode extends EventTarget {\r\n    channelCount: number;\r\n    channelCountMode: string;\r\n    channelInterpretation: string;\r\n    readonly context: AudioContext;\r\n    readonly numberOfInputs: number;\r\n    readonly numberOfOutputs: number;\r\n    connect(destination: AudioNode, output?: number, input?: number): void;\r\n    disconnect(output?: number): void;\r\n    disconnect(destination: AudioNode, output?: number, input?: number): void;\r\n    disconnect(destination: AudioParam, output?: number): void;\r\n}\r\n\r\ndeclare var AudioNode: {\r\n    prototype: AudioNode;\r\n    new(): AudioNode;\r\n}\r\n\r\ninterface AudioParam {\r\n    readonly defaultValue: number;\r\n    value: number;\r\n    cancelScheduledValues(startTime: number): void;\r\n    exponentialRampToValueAtTime(value: number, endTime: number): void;\r\n    linearRampToValueAtTime(value: number, endTime: number): void;\r\n    setTargetAtTime(target: number, startTime: number, timeConstant: number): void;\r\n    setValueAtTime(value: number, startTime: number): void;\r\n    setValueCurveAtTime(values: Float32Array, startTime: number, duration: number): void;\r\n}\r\n\r\ndeclare var AudioParam: {\r\n    prototype: AudioParam;\r\n    new(): AudioParam;\r\n}\r\n\r\ninterface AudioProcessingEvent extends Event {\r\n    readonly inputBuffer: AudioBuffer;\r\n    readonly outputBuffer: AudioBuffer;\r\n    readonly playbackTime: number;\r\n}\r\n\r\ndeclare var AudioProcessingEvent: {\r\n    prototype: AudioProcessingEvent;\r\n    new(): AudioProcessingEvent;\r\n}\r\n\r\ninterface AudioTrack {\r\n    enabled: boolean;\r\n    readonly id: string;\r\n    kind: string;\r\n    readonly label: string;\r\n    language: string;\r\n    readonly sourceBuffer: SourceBuffer;\r\n}\r\n\r\ndeclare var AudioTrack: {\r\n    prototype: AudioTrack;\r\n    new(): AudioTrack;\r\n}\r\n\r\ninterface AudioTrackList extends EventTarget {\r\n    readonly length: number;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    onchange: (ev: Event) => any;\r\n    onremovetrack: (ev: TrackEvent) => any;\r\n    getTrackById(id: string): AudioTrack | null;\r\n    item(index: number): AudioTrack;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"removetrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    [index: number]: AudioTrack;\r\n}\r\n\r\ndeclare var AudioTrackList: {\r\n    prototype: AudioTrackList;\r\n    new(): AudioTrackList;\r\n}\r\n\r\ninterface BarProp {\r\n    readonly visible: boolean;\r\n}\r\n\r\ndeclare var BarProp: {\r\n    prototype: BarProp;\r\n    new(): BarProp;\r\n}\r\n\r\ninterface BeforeUnloadEvent extends Event {\r\n    returnValue: any;\r\n}\r\n\r\ndeclare var BeforeUnloadEvent: {\r\n    prototype: BeforeUnloadEvent;\r\n    new(): BeforeUnloadEvent;\r\n}\r\n\r\ninterface BiquadFilterNode extends AudioNode {\r\n    readonly Q: AudioParam;\r\n    readonly detune: AudioParam;\r\n    readonly frequency: AudioParam;\r\n    readonly gain: AudioParam;\r\n    type: string;\r\n    getFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void;\r\n}\r\n\r\ndeclare var BiquadFilterNode: {\r\n    prototype: BiquadFilterNode;\r\n    new(): BiquadFilterNode;\r\n}\r\n\r\ninterface Blob {\r\n    readonly size: number;\r\n    readonly type: string;\r\n    msClose(): void;\r\n    msDetachStream(): any;\r\n    slice(start?: number, end?: number, contentType?: string): Blob;\r\n}\r\n\r\ndeclare var Blob: {\r\n    prototype: Blob;\r\n    new (blobParts?: any[], options?: BlobPropertyBag): Blob;\r\n}\r\n\r\ninterface CDATASection extends Text {\r\n}\r\n\r\ndeclare var CDATASection: {\r\n    prototype: CDATASection;\r\n    new(): CDATASection;\r\n}\r\n\r\ninterface CSS {\r\n    supports(property: string, value?: string): boolean;\r\n}\r\ndeclare var CSS: CSS;\r\n\r\ninterface CSSConditionRule extends CSSGroupingRule {\r\n    conditionText: string;\r\n}\r\n\r\ndeclare var CSSConditionRule: {\r\n    prototype: CSSConditionRule;\r\n    new(): CSSConditionRule;\r\n}\r\n\r\ninterface CSSFontFaceRule extends CSSRule {\r\n    readonly style: CSSStyleDeclaration;\r\n}\r\n\r\ndeclare var CSSFontFaceRule: {\r\n    prototype: CSSFontFaceRule;\r\n    new(): CSSFontFaceRule;\r\n}\r\n\r\ninterface CSSGroupingRule extends CSSRule {\r\n    readonly cssRules: CSSRuleList;\r\n    deleteRule(index: number): void;\r\n    insertRule(rule: string, index: number): number;\r\n}\r\n\r\ndeclare var CSSGroupingRule: {\r\n    prototype: CSSGroupingRule;\r\n    new(): CSSGroupingRule;\r\n}\r\n\r\ninterface CSSImportRule extends CSSRule {\r\n    readonly href: string;\r\n    readonly media: MediaList;\r\n    readonly styleSheet: CSSStyleSheet;\r\n}\r\n\r\ndeclare var CSSImportRule: {\r\n    prototype: CSSImportRule;\r\n    new(): CSSImportRule;\r\n}\r\n\r\ninterface CSSKeyframeRule extends CSSRule {\r\n    keyText: string;\r\n    readonly style: CSSStyleDeclaration;\r\n}\r\n\r\ndeclare var CSSKeyframeRule: {\r\n    prototype: CSSKeyframeRule;\r\n    new(): CSSKeyframeRule;\r\n}\r\n\r\ninterface CSSKeyframesRule extends CSSRule {\r\n    readonly cssRules: CSSRuleList;\r\n    name: string;\r\n    appendRule(rule: string): void;\r\n    deleteRule(rule: string): void;\r\n    findRule(rule: string): CSSKeyframeRule;\r\n}\r\n\r\ndeclare var CSSKeyframesRule: {\r\n    prototype: CSSKeyframesRule;\r\n    new(): CSSKeyframesRule;\r\n}\r\n\r\ninterface CSSMediaRule extends CSSConditionRule {\r\n    readonly media: MediaList;\r\n}\r\n\r\ndeclare var CSSMediaRule: {\r\n    prototype: CSSMediaRule;\r\n    new(): CSSMediaRule;\r\n}\r\n\r\ninterface CSSNamespaceRule extends CSSRule {\r\n    readonly namespaceURI: string;\r\n    readonly prefix: string;\r\n}\r\n\r\ndeclare var CSSNamespaceRule: {\r\n    prototype: CSSNamespaceRule;\r\n    new(): CSSNamespaceRule;\r\n}\r\n\r\ninterface CSSPageRule extends CSSRule {\r\n    readonly pseudoClass: string;\r\n    readonly selector: string;\r\n    selectorText: string;\r\n    readonly style: CSSStyleDeclaration;\r\n}\r\n\r\ndeclare var CSSPageRule: {\r\n    prototype: CSSPageRule;\r\n    new(): CSSPageRule;\r\n}\r\n\r\ninterface CSSRule {\r\n    cssText: string;\r\n    readonly parentRule: CSSRule;\r\n    readonly parentStyleSheet: CSSStyleSheet;\r\n    readonly type: number;\r\n    readonly CHARSET_RULE: number;\r\n    readonly FONT_FACE_RULE: number;\r\n    readonly IMPORT_RULE: number;\r\n    readonly KEYFRAMES_RULE: number;\r\n    readonly KEYFRAME_RULE: number;\r\n    readonly MEDIA_RULE: number;\r\n    readonly NAMESPACE_RULE: number;\r\n    readonly PAGE_RULE: number;\r\n    readonly STYLE_RULE: number;\r\n    readonly SUPPORTS_RULE: number;\r\n    readonly UNKNOWN_RULE: number;\r\n    readonly VIEWPORT_RULE: number;\r\n}\r\n\r\ndeclare var CSSRule: {\r\n    prototype: CSSRule;\r\n    new(): CSSRule;\r\n    readonly CHARSET_RULE: number;\r\n    readonly FONT_FACE_RULE: number;\r\n    readonly IMPORT_RULE: number;\r\n    readonly KEYFRAMES_RULE: number;\r\n    readonly KEYFRAME_RULE: number;\r\n    readonly MEDIA_RULE: number;\r\n    readonly NAMESPACE_RULE: number;\r\n    readonly PAGE_RULE: number;\r\n    readonly STYLE_RULE: number;\r\n    readonly SUPPORTS_RULE: number;\r\n    readonly UNKNOWN_RULE: number;\r\n    readonly VIEWPORT_RULE: number;\r\n}\r\n\r\ninterface CSSRuleList {\r\n    readonly length: number;\r\n    item(index: number): CSSRule;\r\n    [index: number]: CSSRule;\r\n}\r\n\r\ndeclare var CSSRuleList: {\r\n    prototype: CSSRuleList;\r\n    new(): CSSRuleList;\r\n}\r\n\r\ninterface CSSStyleDeclaration {\r\n    alignContent: string | null;\r\n    alignItems: string | null;\r\n    alignSelf: string | null;\r\n    alignmentBaseline: string | null;\r\n    animation: string | null;\r\n    animationDelay: string | null;\r\n    animationDirection: string | null;\r\n    animationDuration: string | null;\r\n    animationFillMode: string | null;\r\n    animationIterationCount: string | null;\r\n    animationName: string | null;\r\n    animationPlayState: string | null;\r\n    animationTimingFunction: string | null;\r\n    backfaceVisibility: string | null;\r\n    background: string | null;\r\n    backgroundAttachment: string | null;\r\n    backgroundClip: string | null;\r\n    backgroundColor: string | null;\r\n    backgroundImage: string | null;\r\n    backgroundOrigin: string | null;\r\n    backgroundPosition: string | null;\r\n    backgroundPositionX: string | null;\r\n    backgroundPositionY: string | null;\r\n    backgroundRepeat: string | null;\r\n    backgroundSize: string | null;\r\n    baselineShift: string | null;\r\n    border: string | null;\r\n    borderBottom: string | null;\r\n    borderBottomColor: string | null;\r\n    borderBottomLeftRadius: string | null;\r\n    borderBottomRightRadius: string | null;\r\n    borderBottomStyle: string | null;\r\n    borderBottomWidth: string | null;\r\n    borderCollapse: string | null;\r\n    borderColor: string | null;\r\n    borderImage: string | null;\r\n    borderImageOutset: string | null;\r\n    borderImageRepeat: string | null;\r\n    borderImageSlice: string | null;\r\n    borderImageSource: string | null;\r\n    borderImageWidth: string | null;\r\n    borderLeft: string | null;\r\n    borderLeftColor: string | null;\r\n    borderLeftStyle: string | null;\r\n    borderLeftWidth: string | null;\r\n    borderRadius: string | null;\r\n    borderRight: string | null;\r\n    borderRightColor: string | null;\r\n    borderRightStyle: string | null;\r\n    borderRightWidth: string | null;\r\n    borderSpacing: string | null;\r\n    borderStyle: string | null;\r\n    borderTop: string | null;\r\n    borderTopColor: string | null;\r\n    borderTopLeftRadius: string | null;\r\n    borderTopRightRadius: string | null;\r\n    borderTopStyle: string | null;\r\n    borderTopWidth: string | null;\r\n    borderWidth: string | null;\r\n    bottom: string | null;\r\n    boxShadow: string | null;\r\n    boxSizing: string | null;\r\n    breakAfter: string | null;\r\n    breakBefore: string | null;\r\n    breakInside: string | null;\r\n    captionSide: string | null;\r\n    clear: string | null;\r\n    clip: string | null;\r\n    clipPath: string | null;\r\n    clipRule: string | null;\r\n    color: string | null;\r\n    colorInterpolationFilters: string | null;\r\n    columnCount: any;\r\n    columnFill: string | null;\r\n    columnGap: any;\r\n    columnRule: string | null;\r\n    columnRuleColor: any;\r\n    columnRuleStyle: string | null;\r\n    columnRuleWidth: any;\r\n    columnSpan: string | null;\r\n    columnWidth: any;\r\n    columns: string | null;\r\n    content: string | null;\r\n    counterIncrement: string | null;\r\n    counterReset: string | null;\r\n    cssFloat: string | null;\r\n    cssText: string;\r\n    cursor: string | null;\r\n    direction: string | null;\r\n    display: string | null;\r\n    dominantBaseline: string | null;\r\n    emptyCells: string | null;\r\n    enableBackground: string | null;\r\n    fill: string | null;\r\n    fillOpacity: string | null;\r\n    fillRule: string | null;\r\n    filter: string | null;\r\n    flex: string | null;\r\n    flexBasis: string | null;\r\n    flexDirection: string | null;\r\n    flexFlow: string | null;\r\n    flexGrow: string | null;\r\n    flexShrink: string | null;\r\n    flexWrap: string | null;\r\n    floodColor: string | null;\r\n    floodOpacity: string | null;\r\n    font: string | null;\r\n    fontFamily: string | null;\r\n    fontFeatureSettings: string | null;\r\n    fontSize: string | null;\r\n    fontSizeAdjust: string | null;\r\n    fontStretch: string | null;\r\n    fontStyle: string | null;\r\n    fontVariant: string | null;\r\n    fontWeight: string | null;\r\n    glyphOrientationHorizontal: string | null;\r\n    glyphOrientationVertical: string | null;\r\n    height: string | null;\r\n    imeMode: string | null;\r\n    justifyContent: string | null;\r\n    kerning: string | null;\r\n    left: string | null;\r\n    readonly length: number;\r\n    letterSpacing: string | null;\r\n    lightingColor: string | null;\r\n    lineHeight: string | null;\r\n    listStyle: string | null;\r\n    listStyleImage: string | null;\r\n    listStylePosition: string | null;\r\n    listStyleType: string | null;\r\n    margin: string | null;\r\n    marginBottom: string | null;\r\n    marginLeft: string | null;\r\n    marginRight: string | null;\r\n    marginTop: string | null;\r\n    marker: string | null;\r\n    markerEnd: string | null;\r\n    markerMid: string | null;\r\n    markerStart: string | null;\r\n    mask: string | null;\r\n    maxHeight: string | null;\r\n    maxWidth: string | null;\r\n    minHeight: string | null;\r\n    minWidth: string | null;\r\n    msContentZoomChaining: string | null;\r\n    msContentZoomLimit: string | null;\r\n    msContentZoomLimitMax: any;\r\n    msContentZoomLimitMin: any;\r\n    msContentZoomSnap: string | null;\r\n    msContentZoomSnapPoints: string | null;\r\n    msContentZoomSnapType: string | null;\r\n    msContentZooming: string | null;\r\n    msFlowFrom: string | null;\r\n    msFlowInto: string | null;\r\n    msFontFeatureSettings: string | null;\r\n    msGridColumn: any;\r\n    msGridColumnAlign: string | null;\r\n    msGridColumnSpan: any;\r\n    msGridColumns: string | null;\r\n    msGridRow: any;\r\n    msGridRowAlign: string | null;\r\n    msGridRowSpan: any;\r\n    msGridRows: string | null;\r\n    msHighContrastAdjust: string | null;\r\n    msHyphenateLimitChars: string | null;\r\n    msHyphenateLimitLines: any;\r\n    msHyphenateLimitZone: any;\r\n    msHyphens: string | null;\r\n    msImeAlign: string | null;\r\n    msOverflowStyle: string | null;\r\n    msScrollChaining: string | null;\r\n    msScrollLimit: string | null;\r\n    msScrollLimitXMax: any;\r\n    msScrollLimitXMin: any;\r\n    msScrollLimitYMax: any;\r\n    msScrollLimitYMin: any;\r\n    msScrollRails: string | null;\r\n    msScrollSnapPointsX: string | null;\r\n    msScrollSnapPointsY: string | null;\r\n    msScrollSnapType: string | null;\r\n    msScrollSnapX: string | null;\r\n    msScrollSnapY: string | null;\r\n    msScrollTranslation: string | null;\r\n    msTextCombineHorizontal: string | null;\r\n    msTextSizeAdjust: any;\r\n    msTouchAction: string | null;\r\n    msTouchSelect: string | null;\r\n    msUserSelect: string | null;\r\n    msWrapFlow: string;\r\n    msWrapMargin: any;\r\n    msWrapThrough: string;\r\n    opacity: string | null;\r\n    order: string | null;\r\n    orphans: string | null;\r\n    outline: string | null;\r\n    outlineColor: string | null;\r\n    outlineStyle: string | null;\r\n    outlineWidth: string | null;\r\n    overflow: string | null;\r\n    overflowX: string | null;\r\n    overflowY: string | null;\r\n    padding: string | null;\r\n    paddingBottom: string | null;\r\n    paddingLeft: string | null;\r\n    paddingRight: string | null;\r\n    paddingTop: string | null;\r\n    pageBreakAfter: string | null;\r\n    pageBreakBefore: string | null;\r\n    pageBreakInside: string | null;\r\n    readonly parentRule: CSSRule;\r\n    perspective: string | null;\r\n    perspectiveOrigin: string | null;\r\n    pointerEvents: string | null;\r\n    position: string | null;\r\n    quotes: string | null;\r\n    right: string | null;\r\n    rubyAlign: string | null;\r\n    rubyOverhang: string | null;\r\n    rubyPosition: string | null;\r\n    stopColor: string | null;\r\n    stopOpacity: string | null;\r\n    stroke: string | null;\r\n    strokeDasharray: string | null;\r\n    strokeDashoffset: string | null;\r\n    strokeLinecap: string | null;\r\n    strokeLinejoin: string | null;\r\n    strokeMiterlimit: string | null;\r\n    strokeOpacity: string | null;\r\n    strokeWidth: string | null;\r\n    tableLayout: string | null;\r\n    textAlign: string | null;\r\n    textAlignLast: string | null;\r\n    textAnchor: string | null;\r\n    textDecoration: string | null;\r\n    textIndent: string | null;\r\n    textJustify: string | null;\r\n    textKashida: string | null;\r\n    textKashidaSpace: string | null;\r\n    textOverflow: string | null;\r\n    textShadow: string | null;\r\n    textTransform: string | null;\r\n    textUnderlinePosition: string | null;\r\n    top: string | null;\r\n    touchAction: string | null;\r\n    transform: string | null;\r\n    transformOrigin: string | null;\r\n    transformStyle: string | null;\r\n    transition: string | null;\r\n    transitionDelay: string | null;\r\n    transitionDuration: string | null;\r\n    transitionProperty: string | null;\r\n    transitionTimingFunction: string | null;\r\n    unicodeBidi: string | null;\r\n    verticalAlign: string | null;\r\n    visibility: string | null;\r\n    webkitAlignContent: string | null;\r\n    webkitAlignItems: string | null;\r\n    webkitAlignSelf: string | null;\r\n    webkitAnimation: string | null;\r\n    webkitAnimationDelay: string | null;\r\n    webkitAnimationDirection: string | null;\r\n    webkitAnimationDuration: string | null;\r\n    webkitAnimationFillMode: string | null;\r\n    webkitAnimationIterationCount: string | null;\r\n    webkitAnimationName: string | null;\r\n    webkitAnimationPlayState: string | null;\r\n    webkitAnimationTimingFunction: string | null;\r\n    webkitAppearance: string | null;\r\n    webkitBackfaceVisibility: string | null;\r\n    webkitBackgroundClip: string | null;\r\n    webkitBackgroundOrigin: string | null;\r\n    webkitBackgroundSize: string | null;\r\n    webkitBorderBottomLeftRadius: string | null;\r\n    webkitBorderBottomRightRadius: string | null;\r\n    webkitBorderImage: string | null;\r\n    webkitBorderRadius: string | null;\r\n    webkitBorderTopLeftRadius: string | null;\r\n    webkitBorderTopRightRadius: string | null;\r\n    webkitBoxAlign: string | null;\r\n    webkitBoxDirection: string | null;\r\n    webkitBoxFlex: string | null;\r\n    webkitBoxOrdinalGroup: string | null;\r\n    webkitBoxOrient: string | null;\r\n    webkitBoxPack: string | null;\r\n    webkitBoxSizing: string | null;\r\n    webkitColumnBreakAfter: string | null;\r\n    webkitColumnBreakBefore: string | null;\r\n    webkitColumnBreakInside: string | null;\r\n    webkitColumnCount: any;\r\n    webkitColumnGap: any;\r\n    webkitColumnRule: string | null;\r\n    webkitColumnRuleColor: any;\r\n    webkitColumnRuleStyle: string | null;\r\n    webkitColumnRuleWidth: any;\r\n    webkitColumnSpan: string | null;\r\n    webkitColumnWidth: any;\r\n    webkitColumns: string | null;\r\n    webkitFilter: string | null;\r\n    webkitFlex: string | null;\r\n    webkitFlexBasis: string | null;\r\n    webkitFlexDirection: string | null;\r\n    webkitFlexFlow: string | null;\r\n    webkitFlexGrow: string | null;\r\n    webkitFlexShrink: string | null;\r\n    webkitFlexWrap: string | null;\r\n    webkitJustifyContent: string | null;\r\n    webkitOrder: string | null;\r\n    webkitPerspective: string | null;\r\n    webkitPerspectiveOrigin: string | null;\r\n    webkitTapHighlightColor: string | null;\r\n    webkitTextFillColor: string | null;\r\n    webkitTextSizeAdjust: any;\r\n    webkitTransform: string | null;\r\n    webkitTransformOrigin: string | null;\r\n    webkitTransformStyle: string | null;\r\n    webkitTransition: string | null;\r\n    webkitTransitionDelay: string | null;\r\n    webkitTransitionDuration: string | null;\r\n    webkitTransitionProperty: string | null;\r\n    webkitTransitionTimingFunction: string | null;\r\n    webkitUserModify: string | null;\r\n    webkitUserSelect: string | null;\r\n    webkitWritingMode: string | null;\r\n    whiteSpace: string | null;\r\n    widows: string | null;\r\n    width: string | null;\r\n    wordBreak: string | null;\r\n    wordSpacing: string | null;\r\n    wordWrap: string | null;\r\n    writingMode: string | null;\r\n    zIndex: string | null;\r\n    zoom: string | null;\r\n    getPropertyPriority(propertyName: string): string;\r\n    getPropertyValue(propertyName: string): string;\r\n    item(index: number): string;\r\n    removeProperty(propertyName: string): string;\r\n    setProperty(propertyName: string, value: string | null, priority?: string): void;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var CSSStyleDeclaration: {\r\n    prototype: CSSStyleDeclaration;\r\n    new(): CSSStyleDeclaration;\r\n}\r\n\r\ninterface CSSStyleRule extends CSSRule {\r\n    readonly readOnly: boolean;\r\n    selectorText: string;\r\n    readonly style: CSSStyleDeclaration;\r\n}\r\n\r\ndeclare var CSSStyleRule: {\r\n    prototype: CSSStyleRule;\r\n    new(): CSSStyleRule;\r\n}\r\n\r\ninterface CSSStyleSheet extends StyleSheet {\r\n    readonly cssRules: CSSRuleList;\r\n    cssText: string;\r\n    readonly href: string;\r\n    readonly id: string;\r\n    readonly imports: StyleSheetList;\r\n    readonly isAlternate: boolean;\r\n    readonly isPrefAlternate: boolean;\r\n    readonly ownerRule: CSSRule;\r\n    readonly owningElement: Element;\r\n    readonly pages: StyleSheetPageList;\r\n    readonly readOnly: boolean;\r\n    readonly rules: CSSRuleList;\r\n    addImport(bstrURL: string, lIndex?: number): number;\r\n    addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;\r\n    addRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number;\r\n    deleteRule(index?: number): void;\r\n    insertRule(rule: string, index?: number): number;\r\n    removeImport(lIndex: number): void;\r\n    removeRule(lIndex: number): void;\r\n}\r\n\r\ndeclare var CSSStyleSheet: {\r\n    prototype: CSSStyleSheet;\r\n    new(): CSSStyleSheet;\r\n}\r\n\r\ninterface CSSSupportsRule extends CSSConditionRule {\r\n}\r\n\r\ndeclare var CSSSupportsRule: {\r\n    prototype: CSSSupportsRule;\r\n    new(): CSSSupportsRule;\r\n}\r\n\r\ninterface CanvasGradient {\r\n    addColorStop(offset: number, color: string): void;\r\n}\r\n\r\ndeclare var CanvasGradient: {\r\n    prototype: CanvasGradient;\r\n    new(): CanvasGradient;\r\n}\r\n\r\ninterface CanvasPattern {\r\n}\r\n\r\ndeclare var CanvasPattern: {\r\n    prototype: CanvasPattern;\r\n    new(): CanvasPattern;\r\n}\r\n\r\ninterface CanvasRenderingContext2D extends Object, CanvasPathMethods {\r\n    readonly canvas: HTMLCanvasElement;\r\n    fillStyle: string | CanvasGradient | CanvasPattern;\r\n    font: string;\r\n    globalAlpha: number;\r\n    globalCompositeOperation: string;\r\n    lineCap: string;\r\n    lineDashOffset: number;\r\n    lineJoin: string;\r\n    lineWidth: number;\r\n    miterLimit: number;\r\n    msFillRule: string;\r\n    msImageSmoothingEnabled: boolean;\r\n    shadowBlur: number;\r\n    shadowColor: string;\r\n    shadowOffsetX: number;\r\n    shadowOffsetY: number;\r\n    strokeStyle: string | CanvasGradient | CanvasPattern;\r\n    textAlign: string;\r\n    textBaseline: string;\r\n    mozImageSmoothingEnabled: boolean;\r\n    webkitImageSmoothingEnabled: boolean;\r\n    oImageSmoothingEnabled: boolean;\r\n    beginPath(): void;\r\n    clearRect(x: number, y: number, w: number, h: number): void;\r\n    clip(fillRule?: string): void;\r\n    createImageData(imageDataOrSw: number | ImageData, sh?: number): ImageData;\r\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\r\n    createPattern(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, repetition: string): CanvasPattern;\r\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\r\n    drawImage(image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void;\r\n    fill(fillRule?: string): void;\r\n    fillRect(x: number, y: number, w: number, h: number): void;\r\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\r\n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\r\n    getLineDash(): number[];\r\n    isPointInPath(x: number, y: number, fillRule?: string): boolean;\r\n    measureText(text: string): TextMetrics;\r\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void;\r\n    restore(): void;\r\n    rotate(angle: number): void;\r\n    save(): void;\r\n    scale(x: number, y: number): void;\r\n    setLineDash(segments: number[]): void;\r\n    setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\r\n    stroke(): void;\r\n    strokeRect(x: number, y: number, w: number, h: number): void;\r\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\r\n    transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\r\n    translate(x: number, y: number): void;\r\n}\r\n\r\ndeclare var CanvasRenderingContext2D: {\r\n    prototype: CanvasRenderingContext2D;\r\n    new(): CanvasRenderingContext2D;\r\n}\r\n\r\ninterface ChannelMergerNode extends AudioNode {\r\n}\r\n\r\ndeclare var ChannelMergerNode: {\r\n    prototype: ChannelMergerNode;\r\n    new(): ChannelMergerNode;\r\n}\r\n\r\ninterface ChannelSplitterNode extends AudioNode {\r\n}\r\n\r\ndeclare var ChannelSplitterNode: {\r\n    prototype: ChannelSplitterNode;\r\n    new(): ChannelSplitterNode;\r\n}\r\n\r\ninterface CharacterData extends Node, ChildNode {\r\n    data: string;\r\n    readonly length: number;\r\n    appendData(arg: string): void;\r\n    deleteData(offset: number, count: number): void;\r\n    insertData(offset: number, arg: string): void;\r\n    replaceData(offset: number, count: number, arg: string): void;\r\n    substringData(offset: number, count: number): string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var CharacterData: {\r\n    prototype: CharacterData;\r\n    new(): CharacterData;\r\n}\r\n\r\ninterface ClientRect {\r\n    bottom: number;\r\n    readonly height: number;\r\n    left: number;\r\n    right: number;\r\n    top: number;\r\n    readonly width: number;\r\n}\r\n\r\ndeclare var ClientRect: {\r\n    prototype: ClientRect;\r\n    new(): ClientRect;\r\n}\r\n\r\ninterface ClientRectList {\r\n    readonly length: number;\r\n    item(index: number): ClientRect;\r\n    [index: number]: ClientRect;\r\n}\r\n\r\ndeclare var ClientRectList: {\r\n    prototype: ClientRectList;\r\n    new(): ClientRectList;\r\n}\r\n\r\ninterface ClipboardEvent extends Event {\r\n    readonly clipboardData: DataTransfer;\r\n}\r\n\r\ndeclare var ClipboardEvent: {\r\n    prototype: ClipboardEvent;\r\n    new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent;\r\n}\r\n\r\ninterface CloseEvent extends Event {\r\n    readonly code: number;\r\n    readonly reason: string;\r\n    readonly wasClean: boolean;\r\n    initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;\r\n}\r\n\r\ndeclare var CloseEvent: {\r\n    prototype: CloseEvent;\r\n    new(): CloseEvent;\r\n}\r\n\r\ninterface CommandEvent extends Event {\r\n    readonly commandName: string;\r\n    readonly detail: string | null;\r\n}\r\n\r\ndeclare var CommandEvent: {\r\n    prototype: CommandEvent;\r\n    new(type: string, eventInitDict?: CommandEventInit): CommandEvent;\r\n}\r\n\r\ninterface Comment extends CharacterData {\r\n    text: string;\r\n}\r\n\r\ndeclare var Comment: {\r\n    prototype: Comment;\r\n    new(): Comment;\r\n}\r\n\r\ninterface CompositionEvent extends UIEvent {\r\n    readonly data: string;\r\n    readonly locale: string;\r\n    initCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, locale: string): void;\r\n}\r\n\r\ndeclare var CompositionEvent: {\r\n    prototype: CompositionEvent;\r\n    new(typeArg: string, eventInitDict?: CompositionEventInit): CompositionEvent;\r\n}\r\n\r\ninterface Console {\r\n    assert(test?: boolean, message?: string, ...optionalParams: any[]): void;\r\n    clear(): void;\r\n    count(countTitle?: string): void;\r\n    debug(message?: string, ...optionalParams: any[]): void;\r\n    dir(value?: any, ...optionalParams: any[]): void;\r\n    dirxml(value: any): void;\r\n    error(message?: any, ...optionalParams: any[]): void;\r\n    exception(message?: string, ...optionalParams: any[]): void;\r\n    group(groupTitle?: string): void;\r\n    groupCollapsed(groupTitle?: string): void;\r\n    groupEnd(): void;\r\n    info(message?: any, ...optionalParams: any[]): void;\r\n    log(message?: any, ...optionalParams: any[]): void;\r\n    msIsIndependentlyComposed(element: Element): boolean;\r\n    profile(reportName?: string): void;\r\n    profileEnd(): void;\r\n    select(element: Element): void;\r\n    table(...data: any[]): void;\r\n    time(timerName?: string): void;\r\n    timeEnd(timerName?: string): void;\r\n    trace(message?: any, ...optionalParams: any[]): void;\r\n    warn(message?: any, ...optionalParams: any[]): void;\r\n}\r\n\r\ndeclare var Console: {\r\n    prototype: Console;\r\n    new(): Console;\r\n}\r\n\r\ninterface ConvolverNode extends AudioNode {\r\n    buffer: AudioBuffer | null;\r\n    normalize: boolean;\r\n}\r\n\r\ndeclare var ConvolverNode: {\r\n    prototype: ConvolverNode;\r\n    new(): ConvolverNode;\r\n}\r\n\r\ninterface Coordinates {\r\n    readonly accuracy: number;\r\n    readonly altitude: number | null;\r\n    readonly altitudeAccuracy: number | null;\r\n    readonly heading: number | null;\r\n    readonly latitude: number;\r\n    readonly longitude: number;\r\n    readonly speed: number | null;\r\n}\r\n\r\ndeclare var Coordinates: {\r\n    prototype: Coordinates;\r\n    new(): Coordinates;\r\n}\r\n\r\ninterface Crypto extends Object, RandomSource {\r\n    readonly subtle: SubtleCrypto;\r\n}\r\n\r\ndeclare var Crypto: {\r\n    prototype: Crypto;\r\n    new(): Crypto;\r\n}\r\n\r\ninterface CryptoKey {\r\n    readonly algorithm: KeyAlgorithm;\r\n    readonly extractable: boolean;\r\n    readonly type: string;\r\n    readonly usages: string[];\r\n}\r\n\r\ndeclare var CryptoKey: {\r\n    prototype: CryptoKey;\r\n    new(): CryptoKey;\r\n}\r\n\r\ninterface CryptoKeyPair {\r\n    privateKey: CryptoKey;\r\n    publicKey: CryptoKey;\r\n}\r\n\r\ndeclare var CryptoKeyPair: {\r\n    prototype: CryptoKeyPair;\r\n    new(): CryptoKeyPair;\r\n}\r\n\r\ninterface CustomEvent extends Event {\r\n    readonly detail: any;\r\n    initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: any): void;\r\n}\r\n\r\ndeclare var CustomEvent: {\r\n    prototype: CustomEvent;\r\n    new(typeArg: string, eventInitDict?: CustomEventInit): CustomEvent;\r\n}\r\n\r\ninterface DOMError {\r\n    readonly name: string;\r\n    toString(): string;\r\n}\r\n\r\ndeclare var DOMError: {\r\n    prototype: DOMError;\r\n    new(): DOMError;\r\n}\r\n\r\ninterface DOMException {\r\n    readonly code: number;\r\n    readonly message: string;\r\n    readonly name: string;\r\n    toString(): string;\r\n    readonly ABORT_ERR: number;\r\n    readonly DATA_CLONE_ERR: number;\r\n    readonly DOMSTRING_SIZE_ERR: number;\r\n    readonly HIERARCHY_REQUEST_ERR: number;\r\n    readonly INDEX_SIZE_ERR: number;\r\n    readonly INUSE_ATTRIBUTE_ERR: number;\r\n    readonly INVALID_ACCESS_ERR: number;\r\n    readonly INVALID_CHARACTER_ERR: number;\r\n    readonly INVALID_MODIFICATION_ERR: number;\r\n    readonly INVALID_NODE_TYPE_ERR: number;\r\n    readonly INVALID_STATE_ERR: number;\r\n    readonly NAMESPACE_ERR: number;\r\n    readonly NETWORK_ERR: number;\r\n    readonly NOT_FOUND_ERR: number;\r\n    readonly NOT_SUPPORTED_ERR: number;\r\n    readonly NO_DATA_ALLOWED_ERR: number;\r\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\r\n    readonly PARSE_ERR: number;\r\n    readonly QUOTA_EXCEEDED_ERR: number;\r\n    readonly SECURITY_ERR: number;\r\n    readonly SERIALIZE_ERR: number;\r\n    readonly SYNTAX_ERR: number;\r\n    readonly TIMEOUT_ERR: number;\r\n    readonly TYPE_MISMATCH_ERR: number;\r\n    readonly URL_MISMATCH_ERR: number;\r\n    readonly VALIDATION_ERR: number;\r\n    readonly WRONG_DOCUMENT_ERR: number;\r\n}\r\n\r\ndeclare var DOMException: {\r\n    prototype: DOMException;\r\n    new(): DOMException;\r\n    readonly ABORT_ERR: number;\r\n    readonly DATA_CLONE_ERR: number;\r\n    readonly DOMSTRING_SIZE_ERR: number;\r\n    readonly HIERARCHY_REQUEST_ERR: number;\r\n    readonly INDEX_SIZE_ERR: number;\r\n    readonly INUSE_ATTRIBUTE_ERR: number;\r\n    readonly INVALID_ACCESS_ERR: number;\r\n    readonly INVALID_CHARACTER_ERR: number;\r\n    readonly INVALID_MODIFICATION_ERR: number;\r\n    readonly INVALID_NODE_TYPE_ERR: number;\r\n    readonly INVALID_STATE_ERR: number;\r\n    readonly NAMESPACE_ERR: number;\r\n    readonly NETWORK_ERR: number;\r\n    readonly NOT_FOUND_ERR: number;\r\n    readonly NOT_SUPPORTED_ERR: number;\r\n    readonly NO_DATA_ALLOWED_ERR: number;\r\n    readonly NO_MODIFICATION_ALLOWED_ERR: number;\r\n    readonly PARSE_ERR: number;\r\n    readonly QUOTA_EXCEEDED_ERR: number;\r\n    readonly SECURITY_ERR: number;\r\n    readonly SERIALIZE_ERR: number;\r\n    readonly SYNTAX_ERR: number;\r\n    readonly TIMEOUT_ERR: number;\r\n    readonly TYPE_MISMATCH_ERR: number;\r\n    readonly URL_MISMATCH_ERR: number;\r\n    readonly VALIDATION_ERR: number;\r\n    readonly WRONG_DOCUMENT_ERR: number;\r\n}\r\n\r\ninterface DOMImplementation {\r\n    createDocument(namespaceURI: string | null, qualifiedName: string | null, doctype: DocumentType): Document;\r\n    createDocumentType(qualifiedName: string, publicId: string | null, systemId: string | null): DocumentType;\r\n    createHTMLDocument(title: string): Document;\r\n    hasFeature(feature: string | null, version: string | null): boolean;\r\n}\r\n\r\ndeclare var DOMImplementation: {\r\n    prototype: DOMImplementation;\r\n    new(): DOMImplementation;\r\n}\r\n\r\ninterface DOMParser {\r\n    parseFromString(source: string, mimeType: string): Document;\r\n}\r\n\r\ndeclare var DOMParser: {\r\n    prototype: DOMParser;\r\n    new(): DOMParser;\r\n}\r\n\r\ninterface DOMSettableTokenList extends DOMTokenList {\r\n    value: string;\r\n}\r\n\r\ndeclare var DOMSettableTokenList: {\r\n    prototype: DOMSettableTokenList;\r\n    new(): DOMSettableTokenList;\r\n}\r\n\r\ninterface DOMStringList {\r\n    readonly length: number;\r\n    contains(str: string): boolean;\r\n    item(index: number): string | null;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var DOMStringList: {\r\n    prototype: DOMStringList;\r\n    new(): DOMStringList;\r\n}\r\n\r\ninterface DOMStringMap {\r\n    [name: string]: string;\r\n}\r\n\r\ndeclare var DOMStringMap: {\r\n    prototype: DOMStringMap;\r\n    new(): DOMStringMap;\r\n}\r\n\r\ninterface DOMTokenList {\r\n    readonly length: number;\r\n    add(...token: string[]): void;\r\n    contains(token: string): boolean;\r\n    item(index: number): string;\r\n    remove(...token: string[]): void;\r\n    toString(): string;\r\n    toggle(token: string, force?: boolean): boolean;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var DOMTokenList: {\r\n    prototype: DOMTokenList;\r\n    new(): DOMTokenList;\r\n}\r\n\r\ninterface DataCue extends TextTrackCue {\r\n    data: ArrayBuffer;\r\n}\r\n\r\ndeclare var DataCue: {\r\n    prototype: DataCue;\r\n    new(): DataCue;\r\n}\r\n\r\ninterface DataTransfer {\r\n    dropEffect: string;\r\n    effectAllowed: string;\r\n    readonly files: FileList;\r\n    readonly items: DataTransferItemList;\r\n    readonly types: DOMStringList;\r\n    clearData(format?: string): boolean;\r\n    getData(format: string): string;\r\n    setData(format: string, data: string): boolean;\r\n}\r\n\r\ndeclare var DataTransfer: {\r\n    prototype: DataTransfer;\r\n    new(): DataTransfer;\r\n}\r\n\r\ninterface DataTransferItem {\r\n    readonly kind: string;\r\n    readonly type: string;\r\n    getAsFile(): File | null;\r\n    getAsString(_callback: FunctionStringCallback | null): void;\r\n}\r\n\r\ndeclare var DataTransferItem: {\r\n    prototype: DataTransferItem;\r\n    new(): DataTransferItem;\r\n}\r\n\r\ninterface DataTransferItemList {\r\n    readonly length: number;\r\n    add(data: File): DataTransferItem | null;\r\n    clear(): void;\r\n    item(index: number): DataTransferItem;\r\n    remove(index: number): void;\r\n    [index: number]: DataTransferItem;\r\n}\r\n\r\ndeclare var DataTransferItemList: {\r\n    prototype: DataTransferItemList;\r\n    new(): DataTransferItemList;\r\n}\r\n\r\ninterface DeferredPermissionRequest {\r\n    readonly id: number;\r\n    readonly type: string;\r\n    readonly uri: string;\r\n    allow(): void;\r\n    deny(): void;\r\n}\r\n\r\ndeclare var DeferredPermissionRequest: {\r\n    prototype: DeferredPermissionRequest;\r\n    new(): DeferredPermissionRequest;\r\n}\r\n\r\ninterface DelayNode extends AudioNode {\r\n    readonly delayTime: AudioParam;\r\n}\r\n\r\ndeclare var DelayNode: {\r\n    prototype: DelayNode;\r\n    new(): DelayNode;\r\n}\r\n\r\ninterface DeviceAcceleration {\r\n    readonly x: number | null;\r\n    readonly y: number | null;\r\n    readonly z: number | null;\r\n}\r\n\r\ndeclare var DeviceAcceleration: {\r\n    prototype: DeviceAcceleration;\r\n    new(): DeviceAcceleration;\r\n}\r\n\r\ninterface DeviceLightEvent extends Event {\r\n    readonly value: number;\r\n}\r\n\r\ndeclare var DeviceLightEvent: {\r\n    prototype: DeviceLightEvent;\r\n    new(type: string, eventInitDict?: DeviceLightEventInit): DeviceLightEvent;\r\n}\r\n\r\ninterface DeviceMotionEvent extends Event {\r\n    readonly acceleration: DeviceAcceleration | null;\r\n    readonly accelerationIncludingGravity: DeviceAcceleration | null;\r\n    readonly interval: number | null;\r\n    readonly rotationRate: DeviceRotationRate | null;\r\n    initDeviceMotionEvent(type: string, bubbles: boolean, cancelable: boolean, acceleration: DeviceAccelerationDict | null, accelerationIncludingGravity: DeviceAccelerationDict | null, rotationRate: DeviceRotationRateDict | null, interval: number | null): void;\r\n}\r\n\r\ndeclare var DeviceMotionEvent: {\r\n    prototype: DeviceMotionEvent;\r\n    new(): DeviceMotionEvent;\r\n}\r\n\r\ninterface DeviceOrientationEvent extends Event {\r\n    readonly absolute: boolean;\r\n    readonly alpha: number | null;\r\n    readonly beta: number | null;\r\n    readonly gamma: number | null;\r\n    initDeviceOrientationEvent(type: string, bubbles: boolean, cancelable: boolean, alpha: number | null, beta: number | null, gamma: number | null, absolute: boolean): void;\r\n}\r\n\r\ndeclare var DeviceOrientationEvent: {\r\n    prototype: DeviceOrientationEvent;\r\n    new(): DeviceOrientationEvent;\r\n}\r\n\r\ninterface DeviceRotationRate {\r\n    readonly alpha: number | null;\r\n    readonly beta: number | null;\r\n    readonly gamma: number | null;\r\n}\r\n\r\ndeclare var DeviceRotationRate: {\r\n    prototype: DeviceRotationRate;\r\n    new(): DeviceRotationRate;\r\n}\r\n\r\ninterface Document extends Node, GlobalEventHandlers, NodeSelector, DocumentEvent {\r\n    /**\r\n      * Sets or gets the URL for the current document. \r\n      */\r\n    readonly URL: string;\r\n    /**\r\n      * Gets the URL for the document, stripped of any character encoding.\r\n      */\r\n    readonly URLUnencoded: string;\r\n    /**\r\n      * Gets the object that has the focus when the parent document has focus.\r\n      */\r\n    readonly activeElement: Element;\r\n    /**\r\n      * Sets or gets the color of all active links in the document.\r\n      */\r\n    alinkColor: string;\r\n    /**\r\n      * Returns a reference to the collection of elements contained by the object.\r\n      */\r\n    readonly all: HTMLAllCollection;\r\n    /**\r\n      * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\r\n      */\r\n    anchors: HTMLCollectionOf<HTMLAnchorElement>;\r\n    /**\r\n      * Retrieves a collection of all applet objects in the document.\r\n      */\r\n    applets: HTMLCollectionOf<HTMLAppletElement>;\r\n    /**\r\n      * Deprecated. Sets or retrieves a value that indicates the background color behind the object. \r\n      */\r\n    bgColor: string;\r\n    /**\r\n      * Specifies the beginning and end of the document body.\r\n      */\r\n    body: HTMLElement;\r\n    readonly characterSet: string;\r\n    /**\r\n      * Gets or sets the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Gets a value that indicates whether standards-compliant mode is switched on for the object.\r\n      */\r\n    readonly compatMode: string;\r\n    cookie: string;\r\n    readonly currentScript: HTMLScriptElement | SVGScriptElement;\r\n    /**\r\n      * Gets the default character set from the current regional language settings.\r\n      */\r\n    readonly defaultCharset: string;\r\n    readonly defaultView: Window;\r\n    /**\r\n      * Sets or gets a value that indicates whether the document can be edited.\r\n      */\r\n    designMode: string;\r\n    /**\r\n      * Sets or retrieves a value that indicates the reading order of the object. \r\n      */\r\n    dir: string;\r\n    /**\r\n      * Gets an object representing the document type declaration associated with the current document. \r\n      */\r\n    readonly doctype: DocumentType;\r\n    /**\r\n      * Gets a reference to the root node of the document. \r\n      */\r\n    documentElement: HTMLElement;\r\n    /**\r\n      * Sets or gets the security domain of the document. \r\n      */\r\n    domain: string;\r\n    /**\r\n      * Retrieves a collection of all embed objects in the document.\r\n      */\r\n    embeds: HTMLCollectionOf<HTMLEmbedElement>;\r\n    /**\r\n      * Sets or gets the foreground (text) color of the document.\r\n      */\r\n    fgColor: string;\r\n    /**\r\n      * Retrieves a collection, in source order, of all form objects in the document.\r\n      */\r\n    forms: HTMLCollectionOf<HTMLFormElement>;\r\n    readonly fullscreenElement: Element | null;\r\n    readonly fullscreenEnabled: boolean;\r\n    readonly head: HTMLHeadElement;\r\n    readonly hidden: boolean;\r\n    /**\r\n      * Retrieves a collection, in source order, of img objects in the document.\r\n      */\r\n    images: HTMLCollectionOf<HTMLImageElement>;\r\n    /**\r\n      * Gets the implementation object of the current document. \r\n      */\r\n    readonly implementation: DOMImplementation;\r\n    /**\r\n      * Returns the character encoding used to create the webpage that is loaded into the document object.\r\n      */\r\n    readonly inputEncoding: string | null;\r\n    /**\r\n      * Gets the date that the page was last modified, if the page supplies one. \r\n      */\r\n    readonly lastModified: string;\r\n    /**\r\n      * Sets or gets the color of the document links. \r\n      */\r\n    linkColor: string;\r\n    /**\r\n      * Retrieves a collection of all a objects that specify the href property and all area objects in the document.\r\n      */\r\n    links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;\r\n    /**\r\n      * Contains information about the current URL. \r\n      */\r\n    readonly location: Location;\r\n    msCSSOMElementFloatMetrics: boolean;\r\n    msCapsLockWarningOff: boolean;\r\n    /**\r\n      * Fires when the user aborts the download.\r\n      * @param ev The event.\r\n      */\r\n    onabort: (ev: Event) => any;\r\n    /**\r\n      * Fires when the object is set as the active element.\r\n      * @param ev The event.\r\n      */\r\n    onactivate: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires immediately before the object is set as the active element.\r\n      * @param ev The event.\r\n      */\r\n    onbeforeactivate: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires immediately before the activeElement is changed from the current object to another object in the parent document.\r\n      * @param ev The event.\r\n      */\r\n    onbeforedeactivate: (ev: UIEvent) => any;\r\n    /** \r\n      * Fires when the object loses the input focus. \r\n      * @param ev The focus event.\r\n      */\r\n    onblur: (ev: FocusEvent) => any;\r\n    /**\r\n      * Occurs when playback is possible, but would require further buffering. \r\n      * @param ev The event.\r\n      */\r\n    oncanplay: (ev: Event) => any;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    /**\r\n      * Fires when the contents of the object or selection have changed. \r\n      * @param ev The event.\r\n      */\r\n    onchange: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user clicks the left mouse button on the object\r\n      * @param ev The mouse event.\r\n      */\r\n    onclick: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user clicks the right mouse button in the client area, opening the context menu. \r\n      * @param ev The mouse event.\r\n      */\r\n    oncontextmenu: (ev: PointerEvent) => any;\r\n    /**\r\n      * Fires when the user double-clicks the object.\r\n      * @param ev The mouse event.\r\n      */\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the activeElement is changed from the current object to another object in the parent document.\r\n      * @param ev The UI Event\r\n      */\r\n    ondeactivate: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires on the source object continuously during a drag operation.\r\n      * @param ev The event.\r\n      */\r\n    ondrag: (ev: DragEvent) => any;\r\n    /**\r\n      * Fires on the source object when the user releases the mouse at the close of a drag operation.\r\n      * @param ev The event.\r\n      */\r\n    ondragend: (ev: DragEvent) => any;\r\n    /** \r\n      * Fires on the target element when the user drags the object to a valid drop target.\r\n      * @param ev The drag event.\r\n      */\r\n    ondragenter: (ev: DragEvent) => any;\r\n    /** \r\n      * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\r\n      * @param ev The drag event.\r\n      */\r\n    ondragleave: (ev: DragEvent) => any;\r\n    /**\r\n      * Fires on the target element continuously while the user drags the object over a valid drop target.\r\n      * @param ev The event.\r\n      */\r\n    ondragover: (ev: DragEvent) => any;\r\n    /**\r\n      * Fires on the source object when the user starts to drag a text selection or selected object. \r\n      * @param ev The event.\r\n      */\r\n    ondragstart: (ev: DragEvent) => any;\r\n    ondrop: (ev: DragEvent) => any;\r\n    /**\r\n      * Occurs when the duration attribute is updated. \r\n      * @param ev The event.\r\n      */\r\n    ondurationchange: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the media element is reset to its initial state. \r\n      * @param ev The event.\r\n      */\r\n    onemptied: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the end of playback is reached. \r\n      * @param ev The event\r\n      */\r\n    onended: (ev: MediaStreamErrorEvent) => any;\r\n    /**\r\n      * Fires when an error occurs during object loading.\r\n      * @param ev The event.\r\n      */\r\n    onerror: (ev: Event) => any;\r\n    /**\r\n      * Fires when the object receives focus. \r\n      * @param ev The event.\r\n      */\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onfullscreenchange: (ev: Event) => any;\r\n    onfullscreenerror: (ev: Event) => any;\r\n    oninput: (ev: Event) => any;\r\n    oninvalid: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user presses a key.\r\n      * @param ev The keyboard event\r\n      */\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Fires when the user presses an alphanumeric key.\r\n      * @param ev The event.\r\n      */\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Fires when the user releases a key.\r\n      * @param ev The keyboard event\r\n      */\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Fires immediately after the browser loads the object. \r\n      * @param ev The event.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    /**\r\n      * Occurs when media data is loaded at the current playback position. \r\n      * @param ev The event.\r\n      */\r\n    onloadeddata: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the duration and dimensions of the media have been determined.\r\n      * @param ev The event.\r\n      */\r\n    onloadedmetadata: (ev: Event) => any;\r\n    /**\r\n      * Occurs when Internet Explorer begins looking for media data. \r\n      * @param ev The event.\r\n      */\r\n    onloadstart: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user clicks the object with either mouse button. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user moves the mouse over the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user moves the mouse pointer outside the boundaries of the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user moves the mouse pointer into the object.\r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user releases a mouse button while the mouse is over the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the wheel button is rotated. \r\n      * @param ev The mouse event\r\n      */\r\n    onmousewheel: (ev: WheelEvent) => any;\r\n    onmscontentzoom: (ev: UIEvent) => any;\r\n    onmsgesturechange: (ev: MSGestureEvent) => any;\r\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\r\n    onmsgestureend: (ev: MSGestureEvent) => any;\r\n    onmsgesturehold: (ev: MSGestureEvent) => any;\r\n    onmsgesturestart: (ev: MSGestureEvent) => any;\r\n    onmsgesturetap: (ev: MSGestureEvent) => any;\r\n    onmsinertiastart: (ev: MSGestureEvent) => any;\r\n    onmsmanipulationstatechanged: (ev: MSManipulationEvent) => any;\r\n    onmspointercancel: (ev: MSPointerEvent) => any;\r\n    onmspointerdown: (ev: MSPointerEvent) => any;\r\n    onmspointerenter: (ev: MSPointerEvent) => any;\r\n    onmspointerleave: (ev: MSPointerEvent) => any;\r\n    onmspointermove: (ev: MSPointerEvent) => any;\r\n    onmspointerout: (ev: MSPointerEvent) => any;\r\n    onmspointerover: (ev: MSPointerEvent) => any;\r\n    onmspointerup: (ev: MSPointerEvent) => any;\r\n    /**\r\n      * Occurs when an item is removed from a Jump List of a webpage running in Site Mode. \r\n      * @param ev The event.\r\n      */\r\n    onmssitemodejumplistitemremoved: (ev: MSSiteModeEvent) => any;\r\n    /**\r\n      * Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode.\r\n      * @param ev The event.\r\n      */\r\n    onmsthumbnailclick: (ev: MSSiteModeEvent) => any;\r\n    /**\r\n      * Occurs when playback is paused.\r\n      * @param ev The event.\r\n      */\r\n    onpause: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the play method is requested. \r\n      * @param ev The event.\r\n      */\r\n    onplay: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the audio or video has started playing. \r\n      * @param ev The event.\r\n      */\r\n    onplaying: (ev: Event) => any;\r\n    onpointerlockchange: (ev: Event) => any;\r\n    onpointerlockerror: (ev: Event) => any;\r\n    /**\r\n      * Occurs to indicate progress while downloading media data. \r\n      * @param ev The event.\r\n      */\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    /**\r\n      * Occurs when the playback rate is increased or decreased. \r\n      * @param ev The event.\r\n      */\r\n    onratechange: (ev: Event) => any;\r\n    /**\r\n      * Fires when the state of the object has changed.\r\n      * @param ev The event\r\n      */\r\n    onreadystatechange: (ev: ProgressEvent) => any;\r\n    /**\r\n      * Fires when the user resets a form. \r\n      * @param ev The event.\r\n      */\r\n    onreset: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user repositions the scroll box in the scroll bar on the object. \r\n      * @param ev The event.\r\n      */\r\n    onscroll: (ev: UIEvent) => any;\r\n    /**\r\n      * Occurs when the seek operation ends. \r\n      * @param ev The event.\r\n      */\r\n    onseeked: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the current playback position is moved. \r\n      * @param ev The event.\r\n      */\r\n    onseeking: (ev: Event) => any;\r\n    /**\r\n      * Fires when the current selection changes.\r\n      * @param ev The event.\r\n      */\r\n    onselect: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires when the selection state of a document changes.\r\n      * @param ev The event.\r\n      */\r\n    onselectionchange: (ev: Event) => any;\r\n    onselectstart: (ev: Event) => any;\r\n    /**\r\n      * Occurs when the download has stopped. \r\n      * @param ev The event.\r\n      */\r\n    onstalled: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user clicks the Stop button or leaves the Web page.\r\n      * @param ev The event.\r\n      */\r\n    onstop: (ev: Event) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    /**\r\n      * Occurs if the load operation has been intentionally halted. \r\n      * @param ev The event.\r\n      */\r\n    onsuspend: (ev: Event) => any;\r\n    /**\r\n      * Occurs to indicate the current playback position.\r\n      * @param ev The event.\r\n      */\r\n    ontimeupdate: (ev: Event) => any;\r\n    ontouchcancel: (ev: TouchEvent) => any;\r\n    ontouchend: (ev: TouchEvent) => any;\r\n    ontouchmove: (ev: TouchEvent) => any;\r\n    ontouchstart: (ev: TouchEvent) => any;\r\n    /**\r\n      * Occurs when the volume is changed, or playback is muted or unmuted.\r\n      * @param ev The event.\r\n      */\r\n    onvolumechange: (ev: Event) => any;\r\n    /**\r\n      * Occurs when playback stops because the next frame of a video resource is not available. \r\n      * @param ev The event.\r\n      */\r\n    onwaiting: (ev: Event) => any;\r\n    onwebkitfullscreenchange: (ev: Event) => any;\r\n    onwebkitfullscreenerror: (ev: Event) => any;\r\n    plugins: HTMLCollectionOf<HTMLEmbedElement>;\r\n    readonly pointerLockElement: Element;\r\n    /**\r\n      * Retrieves a value that indicates the current state of the object.\r\n      */\r\n    readonly readyState: string;\r\n    /**\r\n      * Gets the URL of the location that referred the user to the current page.\r\n      */\r\n    readonly referrer: string;\r\n    /**\r\n      * Gets the root svg element in the document hierarchy.\r\n      */\r\n    readonly rootElement: SVGSVGElement;\r\n    /**\r\n      * Retrieves a collection of all script objects in the document.\r\n      */\r\n    scripts: HTMLCollectionOf<HTMLScriptElement>;\r\n    readonly scrollingElement: Element | null;\r\n    /**\r\n      * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.\r\n      */\r\n    readonly styleSheets: StyleSheetList;\r\n    /**\r\n      * Contains the title of the document.\r\n      */\r\n    title: string;\r\n    readonly visibilityState: string;\r\n    /** \r\n      * Sets or gets the color of the links that the user has visited.\r\n      */\r\n    vlinkColor: string;\r\n    readonly webkitCurrentFullScreenElement: Element | null;\r\n    readonly webkitFullscreenElement: Element | null;\r\n    readonly webkitFullscreenEnabled: boolean;\r\n    readonly webkitIsFullScreen: boolean;\r\n    readonly xmlEncoding: string | null;\r\n    xmlStandalone: boolean;\r\n    /**\r\n      * Gets or sets the version attribute specified in the declaration of an XML document.\r\n      */\r\n    xmlVersion: string | null;\r\n    adoptNode(source: Node): Node;\r\n    captureEvents(): void;\r\n    caretRangeFromPoint(x: number, y: number): Range;\r\n    clear(): void;\r\n    /**\r\n      * Closes an output stream and forces the sent data to display.\r\n      */\r\n    close(): void;\r\n    /**\r\n      * Creates an attribute object with a specified name.\r\n      * @param name String that sets the attribute object's name.\r\n      */\r\n    createAttribute(name: string): Attr;\r\n    createAttributeNS(namespaceURI: string | null, qualifiedName: string): Attr;\r\n    createCDATASection(data: string): CDATASection;\r\n    /**\r\n      * Creates a comment object with the specified data.\r\n      * @param data Sets the comment object's data.\r\n      */\r\n    createComment(data: string): Comment;\r\n    /**\r\n      * Creates a new document.\r\n      */\r\n    createDocumentFragment(): DocumentFragment;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: \"a\"): HTMLAnchorElement;\r\n    createElement(tagName: \"applet\"): HTMLAppletElement;\r\n    createElement(tagName: \"area\"): HTMLAreaElement;\r\n    createElement(tagName: \"audio\"): HTMLAudioElement;\r\n    createElement(tagName: \"base\"): HTMLBaseElement;\r\n    createElement(tagName: \"basefont\"): HTMLBaseFontElement;\r\n    createElement(tagName: \"blockquote\"): HTMLQuoteElement;\r\n    createElement(tagName: \"body\"): HTMLBodyElement;\r\n    createElement(tagName: \"br\"): HTMLBRElement;\r\n    createElement(tagName: \"button\"): HTMLButtonElement;\r\n    createElement(tagName: \"canvas\"): HTMLCanvasElement;\r\n    createElement(tagName: \"caption\"): HTMLTableCaptionElement;\r\n    createElement(tagName: \"col\"): HTMLTableColElement;\r\n    createElement(tagName: \"colgroup\"): HTMLTableColElement;\r\n    createElement(tagName: \"datalist\"): HTMLDataListElement;\r\n    createElement(tagName: \"del\"): HTMLModElement;\r\n    createElement(tagName: \"dir\"): HTMLDirectoryElement;\r\n    createElement(tagName: \"div\"): HTMLDivElement;\r\n    createElement(tagName: \"dl\"): HTMLDListElement;\r\n    createElement(tagName: \"embed\"): HTMLEmbedElement;\r\n    createElement(tagName: \"fieldset\"): HTMLFieldSetElement;\r\n    createElement(tagName: \"font\"): HTMLFontElement;\r\n    createElement(tagName: \"form\"): HTMLFormElement;\r\n    createElement(tagName: \"frame\"): HTMLFrameElement;\r\n    createElement(tagName: \"frameset\"): HTMLFrameSetElement;\r\n    createElement(tagName: \"h1\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h2\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h3\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h4\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h5\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h6\"): HTMLHeadingElement;\r\n    createElement(tagName: \"head\"): HTMLHeadElement;\r\n    createElement(tagName: \"hr\"): HTMLHRElement;\r\n    createElement(tagName: \"html\"): HTMLHtmlElement;\r\n    createElement(tagName: \"iframe\"): HTMLIFrameElement;\r\n    createElement(tagName: \"img\"): HTMLImageElement;\r\n    createElement(tagName: \"input\"): HTMLInputElement;\r\n    createElement(tagName: \"ins\"): HTMLModElement;\r\n    createElement(tagName: \"isindex\"): HTMLUnknownElement;\r\n    createElement(tagName: \"label\"): HTMLLabelElement;\r\n    createElement(tagName: \"legend\"): HTMLLegendElement;\r\n    createElement(tagName: \"li\"): HTMLLIElement;\r\n    createElement(tagName: \"link\"): HTMLLinkElement;\r\n    createElement(tagName: \"listing\"): HTMLPreElement;\r\n    createElement(tagName: \"map\"): HTMLMapElement;\r\n    createElement(tagName: \"marquee\"): HTMLMarqueeElement;\r\n    createElement(tagName: \"menu\"): HTMLMenuElement;\r\n    createElement(tagName: \"meta\"): HTMLMetaElement;\r\n    createElement(tagName: \"meter\"): HTMLMeterElement;\r\n    createElement(tagName: \"nextid\"): HTMLUnknownElement;\r\n    createElement(tagName: \"object\"): HTMLObjectElement;\r\n    createElement(tagName: \"ol\"): HTMLOListElement;\r\n    createElement(tagName: \"optgroup\"): HTMLOptGroupElement;\r\n    createElement(tagName: \"option\"): HTMLOptionElement;\r\n    createElement(tagName: \"p\"): HTMLParagraphElement;\r\n    createElement(tagName: \"param\"): HTMLParamElement;\r\n    createElement(tagName: \"picture\"): HTMLPictureElement;\r\n    createElement(tagName: \"pre\"): HTMLPreElement;\r\n    createElement(tagName: \"progress\"): HTMLProgressElement;\r\n    createElement(tagName: \"q\"): HTMLQuoteElement;\r\n    createElement(tagName: \"script\"): HTMLScriptElement;\r\n    createElement(tagName: \"select\"): HTMLSelectElement;\r\n    createElement(tagName: \"source\"): HTMLSourceElement;\r\n    createElement(tagName: \"span\"): HTMLSpanElement;\r\n    createElement(tagName: \"style\"): HTMLStyleElement;\r\n    createElement(tagName: \"table\"): HTMLTableElement;\r\n    createElement(tagName: \"tbody\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"td\"): HTMLTableDataCellElement;\r\n    createElement(tagName: \"template\"): HTMLTemplateElement;\r\n    createElement(tagName: \"textarea\"): HTMLTextAreaElement;\r\n    createElement(tagName: \"tfoot\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"th\"): HTMLTableHeaderCellElement;\r\n    createElement(tagName: \"thead\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"title\"): HTMLTitleElement;\r\n    createElement(tagName: \"tr\"): HTMLTableRowElement;\r\n    createElement(tagName: \"track\"): HTMLTrackElement;\r\n    createElement(tagName: \"ul\"): HTMLUListElement;\r\n    createElement(tagName: \"video\"): HTMLVideoElement;\r\n    createElement(tagName: \"x-ms-webview\"): MSHTMLWebViewElement;\r\n    createElement(tagName: \"xmp\"): HTMLPreElement;\r\n    createElement(tagName: string): HTMLElement;\r\n    createElementNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", qualifiedName: string): HTMLElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"a\"): SVGAElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"circle\"): SVGCircleElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"clipPath\"): SVGClipPathElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"componentTransferFunction\"): SVGComponentTransferFunctionElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"defs\"): SVGDefsElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"desc\"): SVGDescElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"ellipse\"): SVGEllipseElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feBlend\"): SVGFEBlendElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feColorMatrix\"): SVGFEColorMatrixElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feComponentTransfer\"): SVGFEComponentTransferElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feComposite\"): SVGFECompositeElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feConvolveMatrix\"): SVGFEConvolveMatrixElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDiffuseLighting\"): SVGFEDiffuseLightingElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDisplacementMap\"): SVGFEDisplacementMapElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDistantLight\"): SVGFEDistantLightElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFlood\"): SVGFEFloodElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncA\"): SVGFEFuncAElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncB\"): SVGFEFuncBElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncG\"): SVGFEFuncGElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncR\"): SVGFEFuncRElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feGaussianBlur\"): SVGFEGaussianBlurElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feImage\"): SVGFEImageElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMerge\"): SVGFEMergeElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMergeNode\"): SVGFEMergeNodeElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMorphology\"): SVGFEMorphologyElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feOffset\"): SVGFEOffsetElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"fePointLight\"): SVGFEPointLightElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feSpecularLighting\"): SVGFESpecularLightingElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feSpotLight\"): SVGFESpotLightElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feTile\"): SVGFETileElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feTurbulence\"): SVGFETurbulenceElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"filter\"): SVGFilterElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"foreignObject\"): SVGForeignObjectElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"g\"): SVGGElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"image\"): SVGImageElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"gradient\"): SVGGradientElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"line\"): SVGLineElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"linearGradient\"): SVGLinearGradientElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"marker\"): SVGMarkerElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"mask\"): SVGMaskElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"path\"): SVGPathElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"metadata\"): SVGMetadataElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"pattern\"): SVGPatternElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"polygon\"): SVGPolygonElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"polyline\"): SVGPolylineElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"radialGradient\"): SVGRadialGradientElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"rect\"): SVGRectElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"svg\"): SVGSVGElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"script\"): SVGScriptElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"stop\"): SVGStopElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"style\"): SVGStyleElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"switch\"): SVGSwitchElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"symbol\"): SVGSymbolElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"tspan\"): SVGTSpanElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textContent\"): SVGTextContentElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"text\"): SVGTextElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textPath\"): SVGTextPathElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textPositioning\"): SVGTextPositioningElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"title\"): SVGTitleElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"use\"): SVGUseElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"view\"): SVGViewElement\r\n    createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: string): SVGElement\r\n    createElementNS(namespaceURI: string | null, qualifiedName: string): Element;\r\n    createExpression(expression: string, resolver: XPathNSResolver): XPathExpression;\r\n    createNSResolver(nodeResolver: Node): XPathNSResolver;\r\n    /**\r\n      * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document. \r\n      * @param root The root element or node to start traversing on.\r\n      * @param whatToShow The type of nodes or elements to appear in the node list\r\n      * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\r\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\r\n      */\r\n    createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): NodeIterator;\r\n    createProcessingInstruction(target: string, data: string): ProcessingInstruction;\r\n    /**\r\n      *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document. \r\n      */\r\n    createRange(): Range;\r\n    /**\r\n      * Creates a text string from the specified value. \r\n      * @param data String that specifies the nodeValue property of the text node.\r\n      */\r\n    createTextNode(data: string): Text;\r\n    createTouch(view: Window, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch;\r\n    createTouchList(...touches: Touch[]): TouchList;\r\n    /**\r\n      * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\r\n      * @param root The root element or node to start traversing on.\r\n      * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\r\n      * @param filter A custom NodeFilter function to use.\r\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\r\n      */\r\n    createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter, entityReferenceExpansion?: boolean): TreeWalker;\r\n    /**\r\n      * Returns the element for the specified x coordinate and the specified y coordinate. \r\n      * @param x The x-offset\r\n      * @param y The y-offset\r\n      */\r\n    elementFromPoint(x: number, y: number): Element;\r\n    evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult;\r\n    /**\r\n      * Executes a command on the current document, current selection, or the given range.\r\n      * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\r\n      * @param showUI Display the user interface, defaults to false.\r\n      * @param value Value to assign.\r\n      */\r\n    execCommand(commandId: string, showUI?: boolean, value?: any): boolean;\r\n    /**\r\n      * Displays help information for the given command identifier.\r\n      * @param commandId Displays help information for the given command identifier.\r\n      */\r\n    execCommandShowHelp(commandId: string): boolean;\r\n    exitFullscreen(): void;\r\n    exitPointerLock(): void;\r\n    /**\r\n      * Causes the element to receive the focus and executes the code specified by the onfocus event.\r\n      */\r\n    focus(): void;\r\n    /**\r\n      * Returns a reference to the first object with the specified value of the ID or NAME attribute.\r\n      * @param elementId String that specifies the ID value. Case-insensitive.\r\n      */\r\n    getElementById(elementId: string): HTMLElement;\r\n    getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;\r\n    /**\r\n      * Gets a collection of objects based on the value of the NAME or ID attribute.\r\n      * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\r\n      */\r\n    getElementsByName(elementName: string): NodeListOf<HTMLElement>;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(tagname: \"a\"): NodeListOf<HTMLAnchorElement>;\r\n    getElementsByTagName(tagname: \"abbr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"acronym\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"address\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"applet\"): NodeListOf<HTMLAppletElement>;\r\n    getElementsByTagName(tagname: \"area\"): NodeListOf<HTMLAreaElement>;\r\n    getElementsByTagName(tagname: \"article\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"aside\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"audio\"): NodeListOf<HTMLAudioElement>;\r\n    getElementsByTagName(tagname: \"b\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"base\"): NodeListOf<HTMLBaseElement>;\r\n    getElementsByTagName(tagname: \"basefont\"): NodeListOf<HTMLBaseFontElement>;\r\n    getElementsByTagName(tagname: \"bdo\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"big\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"blockquote\"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(tagname: \"body\"): NodeListOf<HTMLBodyElement>;\r\n    getElementsByTagName(tagname: \"br\"): NodeListOf<HTMLBRElement>;\r\n    getElementsByTagName(tagname: \"button\"): NodeListOf<HTMLButtonElement>;\r\n    getElementsByTagName(tagname: \"canvas\"): NodeListOf<HTMLCanvasElement>;\r\n    getElementsByTagName(tagname: \"caption\"): NodeListOf<HTMLTableCaptionElement>;\r\n    getElementsByTagName(tagname: \"center\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"circle\"): NodeListOf<SVGCircleElement>;\r\n    getElementsByTagName(tagname: \"cite\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"clippath\"): NodeListOf<SVGClipPathElement>;\r\n    getElementsByTagName(tagname: \"code\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"col\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(tagname: \"colgroup\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(tagname: \"datalist\"): NodeListOf<HTMLDataListElement>;\r\n    getElementsByTagName(tagname: \"dd\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"defs\"): NodeListOf<SVGDefsElement>;\r\n    getElementsByTagName(tagname: \"del\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(tagname: \"desc\"): NodeListOf<SVGDescElement>;\r\n    getElementsByTagName(tagname: \"dfn\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"dir\"): NodeListOf<HTMLDirectoryElement>;\r\n    getElementsByTagName(tagname: \"div\"): NodeListOf<HTMLDivElement>;\r\n    getElementsByTagName(tagname: \"dl\"): NodeListOf<HTMLDListElement>;\r\n    getElementsByTagName(tagname: \"dt\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"ellipse\"): NodeListOf<SVGEllipseElement>;\r\n    getElementsByTagName(tagname: \"em\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"embed\"): NodeListOf<HTMLEmbedElement>;\r\n    getElementsByTagName(tagname: \"feblend\"): NodeListOf<SVGFEBlendElement>;\r\n    getElementsByTagName(tagname: \"fecolormatrix\"): NodeListOf<SVGFEColorMatrixElement>;\r\n    getElementsByTagName(tagname: \"fecomponenttransfer\"): NodeListOf<SVGFEComponentTransferElement>;\r\n    getElementsByTagName(tagname: \"fecomposite\"): NodeListOf<SVGFECompositeElement>;\r\n    getElementsByTagName(tagname: \"feconvolvematrix\"): NodeListOf<SVGFEConvolveMatrixElement>;\r\n    getElementsByTagName(tagname: \"fediffuselighting\"): NodeListOf<SVGFEDiffuseLightingElement>;\r\n    getElementsByTagName(tagname: \"fedisplacementmap\"): NodeListOf<SVGFEDisplacementMapElement>;\r\n    getElementsByTagName(tagname: \"fedistantlight\"): NodeListOf<SVGFEDistantLightElement>;\r\n    getElementsByTagName(tagname: \"feflood\"): NodeListOf<SVGFEFloodElement>;\r\n    getElementsByTagName(tagname: \"fefunca\"): NodeListOf<SVGFEFuncAElement>;\r\n    getElementsByTagName(tagname: \"fefuncb\"): NodeListOf<SVGFEFuncBElement>;\r\n    getElementsByTagName(tagname: \"fefuncg\"): NodeListOf<SVGFEFuncGElement>;\r\n    getElementsByTagName(tagname: \"fefuncr\"): NodeListOf<SVGFEFuncRElement>;\r\n    getElementsByTagName(tagname: \"fegaussianblur\"): NodeListOf<SVGFEGaussianBlurElement>;\r\n    getElementsByTagName(tagname: \"feimage\"): NodeListOf<SVGFEImageElement>;\r\n    getElementsByTagName(tagname: \"femerge\"): NodeListOf<SVGFEMergeElement>;\r\n    getElementsByTagName(tagname: \"femergenode\"): NodeListOf<SVGFEMergeNodeElement>;\r\n    getElementsByTagName(tagname: \"femorphology\"): NodeListOf<SVGFEMorphologyElement>;\r\n    getElementsByTagName(tagname: \"feoffset\"): NodeListOf<SVGFEOffsetElement>;\r\n    getElementsByTagName(tagname: \"fepointlight\"): NodeListOf<SVGFEPointLightElement>;\r\n    getElementsByTagName(tagname: \"fespecularlighting\"): NodeListOf<SVGFESpecularLightingElement>;\r\n    getElementsByTagName(tagname: \"fespotlight\"): NodeListOf<SVGFESpotLightElement>;\r\n    getElementsByTagName(tagname: \"fetile\"): NodeListOf<SVGFETileElement>;\r\n    getElementsByTagName(tagname: \"feturbulence\"): NodeListOf<SVGFETurbulenceElement>;\r\n    getElementsByTagName(tagname: \"fieldset\"): NodeListOf<HTMLFieldSetElement>;\r\n    getElementsByTagName(tagname: \"figcaption\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"figure\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"filter\"): NodeListOf<SVGFilterElement>;\r\n    getElementsByTagName(tagname: \"font\"): NodeListOf<HTMLFontElement>;\r\n    getElementsByTagName(tagname: \"footer\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"foreignobject\"): NodeListOf<SVGForeignObjectElement>;\r\n    getElementsByTagName(tagname: \"form\"): NodeListOf<HTMLFormElement>;\r\n    getElementsByTagName(tagname: \"frame\"): NodeListOf<HTMLFrameElement>;\r\n    getElementsByTagName(tagname: \"frameset\"): NodeListOf<HTMLFrameSetElement>;\r\n    getElementsByTagName(tagname: \"g\"): NodeListOf<SVGGElement>;\r\n    getElementsByTagName(tagname: \"h1\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h2\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h3\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h4\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h5\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"h6\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(tagname: \"head\"): NodeListOf<HTMLHeadElement>;\r\n    getElementsByTagName(tagname: \"header\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"hgroup\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"hr\"): NodeListOf<HTMLHRElement>;\r\n    getElementsByTagName(tagname: \"html\"): NodeListOf<HTMLHtmlElement>;\r\n    getElementsByTagName(tagname: \"i\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"iframe\"): NodeListOf<HTMLIFrameElement>;\r\n    getElementsByTagName(tagname: \"image\"): NodeListOf<SVGImageElement>;\r\n    getElementsByTagName(tagname: \"img\"): NodeListOf<HTMLImageElement>;\r\n    getElementsByTagName(tagname: \"input\"): NodeListOf<HTMLInputElement>;\r\n    getElementsByTagName(tagname: \"ins\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(tagname: \"isindex\"): NodeListOf<HTMLUnknownElement>;\r\n    getElementsByTagName(tagname: \"kbd\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"keygen\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"label\"): NodeListOf<HTMLLabelElement>;\r\n    getElementsByTagName(tagname: \"legend\"): NodeListOf<HTMLLegendElement>;\r\n    getElementsByTagName(tagname: \"li\"): NodeListOf<HTMLLIElement>;\r\n    getElementsByTagName(tagname: \"line\"): NodeListOf<SVGLineElement>;\r\n    getElementsByTagName(tagname: \"lineargradient\"): NodeListOf<SVGLinearGradientElement>;\r\n    getElementsByTagName(tagname: \"link\"): NodeListOf<HTMLLinkElement>;\r\n    getElementsByTagName(tagname: \"listing\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(tagname: \"map\"): NodeListOf<HTMLMapElement>;\r\n    getElementsByTagName(tagname: \"mark\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"marker\"): NodeListOf<SVGMarkerElement>;\r\n    getElementsByTagName(tagname: \"marquee\"): NodeListOf<HTMLMarqueeElement>;\r\n    getElementsByTagName(tagname: \"mask\"): NodeListOf<SVGMaskElement>;\r\n    getElementsByTagName(tagname: \"menu\"): NodeListOf<HTMLMenuElement>;\r\n    getElementsByTagName(tagname: \"meta\"): NodeListOf<HTMLMetaElement>;\r\n    getElementsByTagName(tagname: \"metadata\"): NodeListOf<SVGMetadataElement>;\r\n    getElementsByTagName(tagname: \"meter\"): NodeListOf<HTMLMeterElement>;\r\n    getElementsByTagName(tagname: \"nav\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"nextid\"): NodeListOf<HTMLUnknownElement>;\r\n    getElementsByTagName(tagname: \"nobr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"noframes\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"noscript\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"object\"): NodeListOf<HTMLObjectElement>;\r\n    getElementsByTagName(tagname: \"ol\"): NodeListOf<HTMLOListElement>;\r\n    getElementsByTagName(tagname: \"optgroup\"): NodeListOf<HTMLOptGroupElement>;\r\n    getElementsByTagName(tagname: \"option\"): NodeListOf<HTMLOptionElement>;\r\n    getElementsByTagName(tagname: \"p\"): NodeListOf<HTMLParagraphElement>;\r\n    getElementsByTagName(tagname: \"param\"): NodeListOf<HTMLParamElement>;\r\n    getElementsByTagName(tagname: \"path\"): NodeListOf<SVGPathElement>;\r\n    getElementsByTagName(tagname: \"pattern\"): NodeListOf<SVGPatternElement>;\r\n    getElementsByTagName(tagname: \"picture\"): NodeListOf<HTMLPictureElement>;\r\n    getElementsByTagName(tagname: \"plaintext\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"polygon\"): NodeListOf<SVGPolygonElement>;\r\n    getElementsByTagName(tagname: \"polyline\"): NodeListOf<SVGPolylineElement>;\r\n    getElementsByTagName(tagname: \"pre\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(tagname: \"progress\"): NodeListOf<HTMLProgressElement>;\r\n    getElementsByTagName(tagname: \"q\"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(tagname: \"radialgradient\"): NodeListOf<SVGRadialGradientElement>;\r\n    getElementsByTagName(tagname: \"rect\"): NodeListOf<SVGRectElement>;\r\n    getElementsByTagName(tagname: \"rt\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"ruby\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"s\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"samp\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"script\"): NodeListOf<HTMLScriptElement>;\r\n    getElementsByTagName(tagname: \"section\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"select\"): NodeListOf<HTMLSelectElement>;\r\n    getElementsByTagName(tagname: \"small\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"source\"): NodeListOf<HTMLSourceElement>;\r\n    getElementsByTagName(tagname: \"span\"): NodeListOf<HTMLSpanElement>;\r\n    getElementsByTagName(tagname: \"stop\"): NodeListOf<SVGStopElement>;\r\n    getElementsByTagName(tagname: \"strike\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"strong\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"style\"): NodeListOf<HTMLStyleElement>;\r\n    getElementsByTagName(tagname: \"sub\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"sup\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"svg\"): NodeListOf<SVGSVGElement>;\r\n    getElementsByTagName(tagname: \"switch\"): NodeListOf<SVGSwitchElement>;\r\n    getElementsByTagName(tagname: \"symbol\"): NodeListOf<SVGSymbolElement>;\r\n    getElementsByTagName(tagname: \"table\"): NodeListOf<HTMLTableElement>;\r\n    getElementsByTagName(tagname: \"tbody\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(tagname: \"td\"): NodeListOf<HTMLTableDataCellElement>;\r\n    getElementsByTagName(tagname: \"template\"): NodeListOf<HTMLTemplateElement>;\r\n    getElementsByTagName(tagname: \"text\"): NodeListOf<SVGTextElement>;\r\n    getElementsByTagName(tagname: \"textpath\"): NodeListOf<SVGTextPathElement>;\r\n    getElementsByTagName(tagname: \"textarea\"): NodeListOf<HTMLTextAreaElement>;\r\n    getElementsByTagName(tagname: \"tfoot\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(tagname: \"th\"): NodeListOf<HTMLTableHeaderCellElement>;\r\n    getElementsByTagName(tagname: \"thead\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(tagname: \"title\"): NodeListOf<HTMLTitleElement>;\r\n    getElementsByTagName(tagname: \"tr\"): NodeListOf<HTMLTableRowElement>;\r\n    getElementsByTagName(tagname: \"track\"): NodeListOf<HTMLTrackElement>;\r\n    getElementsByTagName(tagname: \"tspan\"): NodeListOf<SVGTSpanElement>;\r\n    getElementsByTagName(tagname: \"tt\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"u\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"ul\"): NodeListOf<HTMLUListElement>;\r\n    getElementsByTagName(tagname: \"use\"): NodeListOf<SVGUseElement>;\r\n    getElementsByTagName(tagname: \"var\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"video\"): NodeListOf<HTMLVideoElement>;\r\n    getElementsByTagName(tagname: \"view\"): NodeListOf<SVGViewElement>;\r\n    getElementsByTagName(tagname: \"wbr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(tagname: \"x-ms-webview\"): NodeListOf<MSHTMLWebViewElement>;\r\n    getElementsByTagName(tagname: \"xmp\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(tagname: string): NodeListOf<Element>;\r\n    getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>;\r\n    getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>;\r\n    getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;\r\n    /**\r\n      * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.\r\n      */\r\n    getSelection(): Selection;\r\n    /**\r\n      * Gets a value indicating whether the object currently has focus.\r\n      */\r\n    hasFocus(): boolean;\r\n    importNode(importedNode: Node, deep: boolean): Node;\r\n    msElementsFromPoint(x: number, y: number): NodeListOf<Element>;\r\n    msElementsFromRect(left: number, top: number, width: number, height: number): NodeListOf<Element>;\r\n    /**\r\n      * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\r\n      * @param url Specifies a MIME type for the document.\r\n      * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\r\n      * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, \"fullscreen=yes, toolbar=yes\"). The following values are supported.\r\n      * @param replace Specifies whether the existing entry for the document is replaced in the history list.\r\n      */\r\n    open(url?: string, name?: string, features?: string, replace?: boolean): Document;\r\n    /** \r\n      * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\r\n      * @param commandId Specifies a command identifier.\r\n      */\r\n    queryCommandEnabled(commandId: string): boolean;\r\n    /**\r\n      * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandIndeterm(commandId: string): boolean;\r\n    /**\r\n      * Returns a Boolean value that indicates the current state of the command.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandState(commandId: string): boolean;\r\n    /**\r\n      * Returns a Boolean value that indicates whether the current command is supported on the current range.\r\n      * @param commandId Specifies a command identifier.\r\n      */\r\n    queryCommandSupported(commandId: string): boolean;\r\n    /**\r\n      * Retrieves the string associated with a command.\r\n      * @param commandId String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers. \r\n      */\r\n    queryCommandText(commandId: string): string;\r\n    /**\r\n      * Returns the current value of the document, range, or current selection for the given command.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandValue(commandId: string): string;\r\n    releaseEvents(): void;\r\n    /**\r\n      * Allows updating the print settings for the page.\r\n      */\r\n    updateSettings(): void;\r\n    webkitCancelFullScreen(): void;\r\n    webkitExitFullscreen(): void;\r\n    /**\r\n      * Writes one or more HTML expressions to a document in the specified window. \r\n      * @param content Specifies the text and HTML tags to write.\r\n      */\r\n    write(...content: string[]): void;\r\n    /**\r\n      * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window. \r\n      * @param content The text and HTML tags to write.\r\n      */\r\n    writeln(...content: string[]): void;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"fullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"fullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mssitemodejumplistitemremoved\", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msthumbnailclick\", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerlockchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerlockerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectionchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stop\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Document: {\r\n    prototype: Document;\r\n    new(): Document;\r\n}\r\n\r\ninterface DocumentFragment extends Node, NodeSelector {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var DocumentFragment: {\r\n    prototype: DocumentFragment;\r\n    new(): DocumentFragment;\r\n}\r\n\r\ninterface DocumentType extends Node, ChildNode {\r\n    readonly entities: NamedNodeMap;\r\n    readonly internalSubset: string | null;\r\n    readonly name: string;\r\n    readonly notations: NamedNodeMap;\r\n    readonly publicId: string | null;\r\n    readonly systemId: string | null;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var DocumentType: {\r\n    prototype: DocumentType;\r\n    new(): DocumentType;\r\n}\r\n\r\ninterface DragEvent extends MouseEvent {\r\n    readonly dataTransfer: DataTransfer;\r\n    initDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;\r\n    msConvertURL(file: File, targetType: string, targetURL?: string): void;\r\n}\r\n\r\ndeclare var DragEvent: {\r\n    prototype: DragEvent;\r\n    new(): DragEvent;\r\n}\r\n\r\ninterface DynamicsCompressorNode extends AudioNode {\r\n    readonly attack: AudioParam;\r\n    readonly knee: AudioParam;\r\n    readonly ratio: AudioParam;\r\n    readonly reduction: AudioParam;\r\n    readonly release: AudioParam;\r\n    readonly threshold: AudioParam;\r\n}\r\n\r\ndeclare var DynamicsCompressorNode: {\r\n    prototype: DynamicsCompressorNode;\r\n    new(): DynamicsCompressorNode;\r\n}\r\n\r\ninterface EXT_frag_depth {\r\n}\r\n\r\ndeclare var EXT_frag_depth: {\r\n    prototype: EXT_frag_depth;\r\n    new(): EXT_frag_depth;\r\n}\r\n\r\ninterface EXT_texture_filter_anisotropic {\r\n    readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n    readonly TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n}\r\n\r\ndeclare var EXT_texture_filter_anisotropic: {\r\n    prototype: EXT_texture_filter_anisotropic;\r\n    new(): EXT_texture_filter_anisotropic;\r\n    readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n    readonly TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n}\r\n\r\ninterface Element extends Node, GlobalEventHandlers, ElementTraversal, NodeSelector, ChildNode {\r\n    readonly classList: DOMTokenList;\r\n    className: string;\r\n    readonly clientHeight: number;\r\n    readonly clientLeft: number;\r\n    readonly clientTop: number;\r\n    readonly clientWidth: number;\r\n    id: string;\r\n    msContentZoomFactor: number;\r\n    readonly msRegionOverflow: string;\r\n    onariarequest: (ev: AriaRequestEvent) => any;\r\n    oncommand: (ev: CommandEvent) => any;\r\n    ongotpointercapture: (ev: PointerEvent) => any;\r\n    onlostpointercapture: (ev: PointerEvent) => any;\r\n    onmsgesturechange: (ev: MSGestureEvent) => any;\r\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\r\n    onmsgestureend: (ev: MSGestureEvent) => any;\r\n    onmsgesturehold: (ev: MSGestureEvent) => any;\r\n    onmsgesturestart: (ev: MSGestureEvent) => any;\r\n    onmsgesturetap: (ev: MSGestureEvent) => any;\r\n    onmsgotpointercapture: (ev: MSPointerEvent) => any;\r\n    onmsinertiastart: (ev: MSGestureEvent) => any;\r\n    onmslostpointercapture: (ev: MSPointerEvent) => any;\r\n    onmspointercancel: (ev: MSPointerEvent) => any;\r\n    onmspointerdown: (ev: MSPointerEvent) => any;\r\n    onmspointerenter: (ev: MSPointerEvent) => any;\r\n    onmspointerleave: (ev: MSPointerEvent) => any;\r\n    onmspointermove: (ev: MSPointerEvent) => any;\r\n    onmspointerout: (ev: MSPointerEvent) => any;\r\n    onmspointerover: (ev: MSPointerEvent) => any;\r\n    onmspointerup: (ev: MSPointerEvent) => any;\r\n    ontouchcancel: (ev: TouchEvent) => any;\r\n    ontouchend: (ev: TouchEvent) => any;\r\n    ontouchmove: (ev: TouchEvent) => any;\r\n    ontouchstart: (ev: TouchEvent) => any;\r\n    onwebkitfullscreenchange: (ev: Event) => any;\r\n    onwebkitfullscreenerror: (ev: Event) => any;\r\n    readonly prefix: string | null;\r\n    readonly scrollHeight: number;\r\n    scrollLeft: number;\r\n    scrollTop: number;\r\n    readonly scrollWidth: number;\r\n    readonly tagName: string;\r\n    innerHTML: string;\r\n    getAttribute(name?: string): string | null;\r\n    getAttributeNS(namespaceURI: string, localName: string): string;\r\n    getAttributeNode(name: string): Attr;\r\n    getAttributeNodeNS(namespaceURI: string, localName: string): Attr;\r\n    getBoundingClientRect(): ClientRect;\r\n    getClientRects(): ClientRectList;\r\n    getElementsByTagName(name: \"a\"): NodeListOf<HTMLAnchorElement>;\r\n    getElementsByTagName(name: \"abbr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"acronym\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"address\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"applet\"): NodeListOf<HTMLAppletElement>;\r\n    getElementsByTagName(name: \"area\"): NodeListOf<HTMLAreaElement>;\r\n    getElementsByTagName(name: \"article\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"aside\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"audio\"): NodeListOf<HTMLAudioElement>;\r\n    getElementsByTagName(name: \"b\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"base\"): NodeListOf<HTMLBaseElement>;\r\n    getElementsByTagName(name: \"basefont\"): NodeListOf<HTMLBaseFontElement>;\r\n    getElementsByTagName(name: \"bdo\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"big\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"blockquote\"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(name: \"body\"): NodeListOf<HTMLBodyElement>;\r\n    getElementsByTagName(name: \"br\"): NodeListOf<HTMLBRElement>;\r\n    getElementsByTagName(name: \"button\"): NodeListOf<HTMLButtonElement>;\r\n    getElementsByTagName(name: \"canvas\"): NodeListOf<HTMLCanvasElement>;\r\n    getElementsByTagName(name: \"caption\"): NodeListOf<HTMLTableCaptionElement>;\r\n    getElementsByTagName(name: \"center\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"circle\"): NodeListOf<SVGCircleElement>;\r\n    getElementsByTagName(name: \"cite\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"clippath\"): NodeListOf<SVGClipPathElement>;\r\n    getElementsByTagName(name: \"code\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"col\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: \"colgroup\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: \"datalist\"): NodeListOf<HTMLDataListElement>;\r\n    getElementsByTagName(name: \"dd\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"defs\"): NodeListOf<SVGDefsElement>;\r\n    getElementsByTagName(name: \"del\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: \"desc\"): NodeListOf<SVGDescElement>;\r\n    getElementsByTagName(name: \"dfn\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"dir\"): NodeListOf<HTMLDirectoryElement>;\r\n    getElementsByTagName(name: \"div\"): NodeListOf<HTMLDivElement>;\r\n    getElementsByTagName(name: \"dl\"): NodeListOf<HTMLDListElement>;\r\n    getElementsByTagName(name: \"dt\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"ellipse\"): NodeListOf<SVGEllipseElement>;\r\n    getElementsByTagName(name: \"em\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"embed\"): NodeListOf<HTMLEmbedElement>;\r\n    getElementsByTagName(name: \"feblend\"): NodeListOf<SVGFEBlendElement>;\r\n    getElementsByTagName(name: \"fecolormatrix\"): NodeListOf<SVGFEColorMatrixElement>;\r\n    getElementsByTagName(name: \"fecomponenttransfer\"): NodeListOf<SVGFEComponentTransferElement>;\r\n    getElementsByTagName(name: \"fecomposite\"): NodeListOf<SVGFECompositeElement>;\r\n    getElementsByTagName(name: \"feconvolvematrix\"): NodeListOf<SVGFEConvolveMatrixElement>;\r\n    getElementsByTagName(name: \"fediffuselighting\"): NodeListOf<SVGFEDiffuseLightingElement>;\r\n    getElementsByTagName(name: \"fedisplacementmap\"): NodeListOf<SVGFEDisplacementMapElement>;\r\n    getElementsByTagName(name: \"fedistantlight\"): NodeListOf<SVGFEDistantLightElement>;\r\n    getElementsByTagName(name: \"feflood\"): NodeListOf<SVGFEFloodElement>;\r\n    getElementsByTagName(name: \"fefunca\"): NodeListOf<SVGFEFuncAElement>;\r\n    getElementsByTagName(name: \"fefuncb\"): NodeListOf<SVGFEFuncBElement>;\r\n    getElementsByTagName(name: \"fefuncg\"): NodeListOf<SVGFEFuncGElement>;\r\n    getElementsByTagName(name: \"fefuncr\"): NodeListOf<SVGFEFuncRElement>;\r\n    getElementsByTagName(name: \"fegaussianblur\"): NodeListOf<SVGFEGaussianBlurElement>;\r\n    getElementsByTagName(name: \"feimage\"): NodeListOf<SVGFEImageElement>;\r\n    getElementsByTagName(name: \"femerge\"): NodeListOf<SVGFEMergeElement>;\r\n    getElementsByTagName(name: \"femergenode\"): NodeListOf<SVGFEMergeNodeElement>;\r\n    getElementsByTagName(name: \"femorphology\"): NodeListOf<SVGFEMorphologyElement>;\r\n    getElementsByTagName(name: \"feoffset\"): NodeListOf<SVGFEOffsetElement>;\r\n    getElementsByTagName(name: \"fepointlight\"): NodeListOf<SVGFEPointLightElement>;\r\n    getElementsByTagName(name: \"fespecularlighting\"): NodeListOf<SVGFESpecularLightingElement>;\r\n    getElementsByTagName(name: \"fespotlight\"): NodeListOf<SVGFESpotLightElement>;\r\n    getElementsByTagName(name: \"fetile\"): NodeListOf<SVGFETileElement>;\r\n    getElementsByTagName(name: \"feturbulence\"): NodeListOf<SVGFETurbulenceElement>;\r\n    getElementsByTagName(name: \"fieldset\"): NodeListOf<HTMLFieldSetElement>;\r\n    getElementsByTagName(name: \"figcaption\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"figure\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"filter\"): NodeListOf<SVGFilterElement>;\r\n    getElementsByTagName(name: \"font\"): NodeListOf<HTMLFontElement>;\r\n    getElementsByTagName(name: \"footer\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"foreignobject\"): NodeListOf<SVGForeignObjectElement>;\r\n    getElementsByTagName(name: \"form\"): NodeListOf<HTMLFormElement>;\r\n    getElementsByTagName(name: \"frame\"): NodeListOf<HTMLFrameElement>;\r\n    getElementsByTagName(name: \"frameset\"): NodeListOf<HTMLFrameSetElement>;\r\n    getElementsByTagName(name: \"g\"): NodeListOf<SVGGElement>;\r\n    getElementsByTagName(name: \"h1\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h2\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h3\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h4\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h5\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h6\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"head\"): NodeListOf<HTMLHeadElement>;\r\n    getElementsByTagName(name: \"header\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"hgroup\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"hr\"): NodeListOf<HTMLHRElement>;\r\n    getElementsByTagName(name: \"html\"): NodeListOf<HTMLHtmlElement>;\r\n    getElementsByTagName(name: \"i\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"iframe\"): NodeListOf<HTMLIFrameElement>;\r\n    getElementsByTagName(name: \"image\"): NodeListOf<SVGImageElement>;\r\n    getElementsByTagName(name: \"img\"): NodeListOf<HTMLImageElement>;\r\n    getElementsByTagName(name: \"input\"): NodeListOf<HTMLInputElement>;\r\n    getElementsByTagName(name: \"ins\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: \"isindex\"): NodeListOf<HTMLUnknownElement>;\r\n    getElementsByTagName(name: \"kbd\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"keygen\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"label\"): NodeListOf<HTMLLabelElement>;\r\n    getElementsByTagName(name: \"legend\"): NodeListOf<HTMLLegendElement>;\r\n    getElementsByTagName(name: \"li\"): NodeListOf<HTMLLIElement>;\r\n    getElementsByTagName(name: \"line\"): NodeListOf<SVGLineElement>;\r\n    getElementsByTagName(name: \"lineargradient\"): NodeListOf<SVGLinearGradientElement>;\r\n    getElementsByTagName(name: \"link\"): NodeListOf<HTMLLinkElement>;\r\n    getElementsByTagName(name: \"listing\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(name: \"map\"): NodeListOf<HTMLMapElement>;\r\n    getElementsByTagName(name: \"mark\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"marker\"): NodeListOf<SVGMarkerElement>;\r\n    getElementsByTagName(name: \"marquee\"): NodeListOf<HTMLMarqueeElement>;\r\n    getElementsByTagName(name: \"mask\"): NodeListOf<SVGMaskElement>;\r\n    getElementsByTagName(name: \"menu\"): NodeListOf<HTMLMenuElement>;\r\n    getElementsByTagName(name: \"meta\"): NodeListOf<HTMLMetaElement>;\r\n    getElementsByTagName(name: \"metadata\"): NodeListOf<SVGMetadataElement>;\r\n    getElementsByTagName(name: \"meter\"): NodeListOf<HTMLMeterElement>;\r\n    getElementsByTagName(name: \"nav\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"nextid\"): NodeListOf<HTMLUnknownElement>;\r\n    getElementsByTagName(name: \"nobr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"noframes\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"noscript\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"object\"): NodeListOf<HTMLObjectElement>;\r\n    getElementsByTagName(name: \"ol\"): NodeListOf<HTMLOListElement>;\r\n    getElementsByTagName(name: \"optgroup\"): NodeListOf<HTMLOptGroupElement>;\r\n    getElementsByTagName(name: \"option\"): NodeListOf<HTMLOptionElement>;\r\n    getElementsByTagName(name: \"p\"): NodeListOf<HTMLParagraphElement>;\r\n    getElementsByTagName(name: \"param\"): NodeListOf<HTMLParamElement>;\r\n    getElementsByTagName(name: \"path\"): NodeListOf<SVGPathElement>;\r\n    getElementsByTagName(name: \"pattern\"): NodeListOf<SVGPatternElement>;\r\n    getElementsByTagName(name: \"picture\"): NodeListOf<HTMLPictureElement>;\r\n    getElementsByTagName(name: \"plaintext\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"polygon\"): NodeListOf<SVGPolygonElement>;\r\n    getElementsByTagName(name: \"polyline\"): NodeListOf<SVGPolylineElement>;\r\n    getElementsByTagName(name: \"pre\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(name: \"progress\"): NodeListOf<HTMLProgressElement>;\r\n    getElementsByTagName(name: \"q\"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(name: \"radialgradient\"): NodeListOf<SVGRadialGradientElement>;\r\n    getElementsByTagName(name: \"rect\"): NodeListOf<SVGRectElement>;\r\n    getElementsByTagName(name: \"rt\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"ruby\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"s\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"samp\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"script\"): NodeListOf<HTMLScriptElement>;\r\n    getElementsByTagName(name: \"section\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"select\"): NodeListOf<HTMLSelectElement>;\r\n    getElementsByTagName(name: \"small\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"source\"): NodeListOf<HTMLSourceElement>;\r\n    getElementsByTagName(name: \"span\"): NodeListOf<HTMLSpanElement>;\r\n    getElementsByTagName(name: \"stop\"): NodeListOf<SVGStopElement>;\r\n    getElementsByTagName(name: \"strike\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"strong\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"style\"): NodeListOf<HTMLStyleElement>;\r\n    getElementsByTagName(name: \"sub\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"sup\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"svg\"): NodeListOf<SVGSVGElement>;\r\n    getElementsByTagName(name: \"switch\"): NodeListOf<SVGSwitchElement>;\r\n    getElementsByTagName(name: \"symbol\"): NodeListOf<SVGSymbolElement>;\r\n    getElementsByTagName(name: \"table\"): NodeListOf<HTMLTableElement>;\r\n    getElementsByTagName(name: \"tbody\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"td\"): NodeListOf<HTMLTableDataCellElement>;\r\n    getElementsByTagName(name: \"template\"): NodeListOf<HTMLTemplateElement>;\r\n    getElementsByTagName(name: \"text\"): NodeListOf<SVGTextElement>;\r\n    getElementsByTagName(name: \"textpath\"): NodeListOf<SVGTextPathElement>;\r\n    getElementsByTagName(name: \"textarea\"): NodeListOf<HTMLTextAreaElement>;\r\n    getElementsByTagName(name: \"tfoot\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"th\"): NodeListOf<HTMLTableHeaderCellElement>;\r\n    getElementsByTagName(name: \"thead\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"title\"): NodeListOf<HTMLTitleElement>;\r\n    getElementsByTagName(name: \"tr\"): NodeListOf<HTMLTableRowElement>;\r\n    getElementsByTagName(name: \"track\"): NodeListOf<HTMLTrackElement>;\r\n    getElementsByTagName(name: \"tspan\"): NodeListOf<SVGTSpanElement>;\r\n    getElementsByTagName(name: \"tt\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"u\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"ul\"): NodeListOf<HTMLUListElement>;\r\n    getElementsByTagName(name: \"use\"): NodeListOf<SVGUseElement>;\r\n    getElementsByTagName(name: \"var\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"video\"): NodeListOf<HTMLVideoElement>;\r\n    getElementsByTagName(name: \"view\"): NodeListOf<SVGViewElement>;\r\n    getElementsByTagName(name: \"wbr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"x-ms-webview\"): NodeListOf<MSHTMLWebViewElement>;\r\n    getElementsByTagName(name: \"xmp\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(name: string): NodeListOf<Element>;\r\n    getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>;\r\n    getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>;\r\n    getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>;\r\n    hasAttribute(name: string): boolean;\r\n    hasAttributeNS(namespaceURI: string, localName: string): boolean;\r\n    msGetRegionContent(): MSRangeCollection;\r\n    msGetUntransformedBounds(): ClientRect;\r\n    msMatchesSelector(selectors: string): boolean;\r\n    msReleasePointerCapture(pointerId: number): void;\r\n    msSetPointerCapture(pointerId: number): void;\r\n    msZoomTo(args: MsZoomToOptions): void;\r\n    releasePointerCapture(pointerId: number): void;\r\n    removeAttribute(name?: string): void;\r\n    removeAttributeNS(namespaceURI: string, localName: string): void;\r\n    removeAttributeNode(oldAttr: Attr): Attr;\r\n    requestFullscreen(): void;\r\n    requestPointerLock(): void;\r\n    setAttribute(name: string, value: string): void;\r\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\r\n    setAttributeNode(newAttr: Attr): Attr;\r\n    setAttributeNodeNS(newAttr: Attr): Attr;\r\n    setPointerCapture(pointerId: number): void;\r\n    webkitMatchesSelector(selectors: string): boolean;\r\n    webkitRequestFullScreen(): void;\r\n    webkitRequestFullscreen(): void;\r\n    getElementsByClassName(classNames: string): NodeListOf<Element>;\r\n    matches(selector: string): boolean;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Element: {\r\n    prototype: Element;\r\n    new(): Element;\r\n}\r\n\r\ninterface ErrorEvent extends Event {\r\n    readonly colno: number;\r\n    readonly error: any;\r\n    readonly filename: string;\r\n    readonly lineno: number;\r\n    readonly message: string;\r\n    initErrorEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, messageArg: string, filenameArg: string, linenoArg: number): void;\r\n}\r\n\r\ndeclare var ErrorEvent: {\r\n    prototype: ErrorEvent;\r\n    new(): ErrorEvent;\r\n}\r\n\r\ninterface Event {\r\n    readonly bubbles: boolean;\r\n    cancelBubble: boolean;\r\n    readonly cancelable: boolean;\r\n    readonly currentTarget: EventTarget;\r\n    readonly defaultPrevented: boolean;\r\n    readonly eventPhase: number;\r\n    readonly isTrusted: boolean;\r\n    returnValue: boolean;\r\n    readonly srcElement: Element | null;\r\n    readonly target: EventTarget;\r\n    readonly timeStamp: number;\r\n    readonly type: string;\r\n    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void;\r\n    preventDefault(): void;\r\n    stopImmediatePropagation(): void;\r\n    stopPropagation(): void;\r\n    readonly AT_TARGET: number;\r\n    readonly BUBBLING_PHASE: number;\r\n    readonly CAPTURING_PHASE: number;\r\n}\r\n\r\ndeclare var Event: {\r\n    prototype: Event;\r\n    new(type: string, eventInitDict?: EventInit): Event;\r\n    readonly AT_TARGET: number;\r\n    readonly BUBBLING_PHASE: number;\r\n    readonly CAPTURING_PHASE: number;\r\n}\r\n\r\ninterface EventTarget {\r\n    addEventListener(type: string, listener?: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    dispatchEvent(evt: Event): boolean;\r\n    removeEventListener(type: string, listener?: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var EventTarget: {\r\n    prototype: EventTarget;\r\n    new(): EventTarget;\r\n}\r\n\r\ninterface External {\r\n}\r\n\r\ndeclare var External: {\r\n    prototype: External;\r\n    new(): External;\r\n}\r\n\r\ninterface File extends Blob {\r\n    readonly lastModifiedDate: any;\r\n    readonly name: string;\r\n    readonly webkitRelativePath: string;\r\n}\r\n\r\ndeclare var File: {\r\n    prototype: File;\r\n    new (parts: (ArrayBuffer | ArrayBufferView | Blob | string)[], filename: string, properties?: FilePropertyBag): File;\r\n}\r\n\r\ninterface FileList {\r\n    readonly length: number;\r\n    item(index: number): File;\r\n    [index: number]: File;\r\n}\r\n\r\ndeclare var FileList: {\r\n    prototype: FileList;\r\n    new(): FileList;\r\n}\r\n\r\ninterface FileReader extends EventTarget, MSBaseReader {\r\n    readonly error: DOMError;\r\n    readAsArrayBuffer(blob: Blob): void;\r\n    readAsBinaryString(blob: Blob): void;\r\n    readAsDataURL(blob: Blob): void;\r\n    readAsText(blob: Blob, encoding?: string): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var FileReader: {\r\n    prototype: FileReader;\r\n    new(): FileReader;\r\n}\r\n\r\ninterface FocusEvent extends UIEvent {\r\n    readonly relatedTarget: EventTarget;\r\n    initFocusEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget): void;\r\n}\r\n\r\ndeclare var FocusEvent: {\r\n    prototype: FocusEvent;\r\n    new(typeArg: string, eventInitDict?: FocusEventInit): FocusEvent;\r\n}\r\n\r\ninterface FormData {\r\n    append(name: any, value: any, blobName?: string): void;\r\n}\r\n\r\ndeclare var FormData: {\r\n    prototype: FormData;\r\n    new (form?: HTMLFormElement): FormData;\r\n}\r\n\r\ninterface GainNode extends AudioNode {\r\n    readonly gain: AudioParam;\r\n}\r\n\r\ndeclare var GainNode: {\r\n    prototype: GainNode;\r\n    new(): GainNode;\r\n}\r\n\r\ninterface Gamepad {\r\n    readonly axes: number[];\r\n    readonly buttons: GamepadButton[];\r\n    readonly connected: boolean;\r\n    readonly id: string;\r\n    readonly index: number;\r\n    readonly mapping: string;\r\n    readonly timestamp: number;\r\n}\r\n\r\ndeclare var Gamepad: {\r\n    prototype: Gamepad;\r\n    new(): Gamepad;\r\n}\r\n\r\ninterface GamepadButton {\r\n    readonly pressed: boolean;\r\n    readonly value: number;\r\n}\r\n\r\ndeclare var GamepadButton: {\r\n    prototype: GamepadButton;\r\n    new(): GamepadButton;\r\n}\r\n\r\ninterface GamepadEvent extends Event {\r\n    readonly gamepad: Gamepad;\r\n}\r\n\r\ndeclare var GamepadEvent: {\r\n    prototype: GamepadEvent;\r\n    new(): GamepadEvent;\r\n}\r\n\r\ninterface Geolocation {\r\n    clearWatch(watchId: number): void;\r\n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void;\r\n    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number;\r\n}\r\n\r\ndeclare var Geolocation: {\r\n    prototype: Geolocation;\r\n    new(): Geolocation;\r\n}\r\n\r\ninterface HTMLAllCollection extends HTMLCollection {\r\n    namedItem(name: string): Element;\r\n}\r\n\r\ndeclare var HTMLAllCollection: {\r\n    prototype: HTMLAllCollection;\r\n    new(): HTMLAllCollection;\r\n}\r\n\r\ninterface HTMLAnchorElement extends HTMLElement {\r\n    Methods: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the coordinates of the object.\r\n      */\r\n    coords: string;\r\n    download: string;\r\n    /**\r\n      * Contains the anchor portion of the URL including the hash sign (#).\r\n      */\r\n    hash: string;\r\n    /**\r\n      * Contains the hostname and port values of the URL.\r\n      */\r\n    host: string;\r\n    /**\r\n      * Contains the hostname of a URL.\r\n      */\r\n    hostname: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the language code of the object.\r\n      */\r\n    hreflang: string;\r\n    readonly mimeType: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    name: string;\r\n    readonly nameProp: string;\r\n    /**\r\n      * Contains the pathname of the URL.\r\n      */\r\n    pathname: string;\r\n    /**\r\n      * Sets or retrieves the port number associated with a URL.\r\n      */\r\n    port: string;\r\n    /**\r\n      * Contains the protocol of the URL.\r\n      */\r\n    protocol: string;\r\n    readonly protocolLong: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rel: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rev: string;\r\n    /**\r\n      * Sets or retrieves the substring of the href property that follows the question mark.\r\n      */\r\n    search: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    shape: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n    type: string;\r\n    urn: string;\r\n    /** \r\n      * Returns a string representation of an object.\r\n      */\r\n    toString(): string;\r\n}\r\n\r\ndeclare var HTMLAnchorElement: {\r\n    prototype: HTMLAnchorElement;\r\n    new(): HTMLAnchorElement;\r\n}\r\n\r\ninterface HTMLAppletElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\r\n      */\r\n    readonly BaseHref: string;\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\r\n      */\r\n    altHtml: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\r\n      */\r\n    archive: string;\r\n    border: string;\r\n    code: string;\r\n    /**\r\n      * Sets or retrieves the URL of the component.\r\n      */\r\n    codeBase: string;\r\n    /**\r\n      * Sets or retrieves the Internet media type for the code associated with the object.\r\n      */\r\n    codeType: string;\r\n    /**\r\n      * Address of a pointer to the document this page or frame contains. If there is no document, then null will be returned.\r\n      */\r\n    readonly contentDocument: Document;\r\n    /**\r\n      * Sets or retrieves the URL that references the data of the object.\r\n      */\r\n    data: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own declare functionality for the object.\r\n      */\r\n    declare: boolean;\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    name: string;\r\n    object: string | null;\r\n    /**\r\n      * Sets or retrieves a message to be displayed while an object is loading.\r\n      */\r\n    standby: string;\r\n    /**\r\n      * Returns the content type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    vspace: number;\r\n    width: number;\r\n}\r\n\r\ndeclare var HTMLAppletElement: {\r\n    prototype: HTMLAppletElement;\r\n    new(): HTMLAppletElement;\r\n}\r\n\r\ninterface HTMLAreaElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves the coordinates of the object.\r\n      */\r\n    coords: string;\r\n    download: string;\r\n    /**\r\n      * Sets or retrieves the subsection of the href property that follows the number sign (#).\r\n      */\r\n    hash: string;\r\n    /**\r\n      * Sets or retrieves the hostname and port number of the location or URL.\r\n      */\r\n    host: string;\r\n    /**\r\n      * Sets or retrieves the host name part of the location or URL. \r\n      */\r\n    hostname: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or gets whether clicks in this region cause action.\r\n      */\r\n    noHref: boolean;\r\n    /**\r\n      * Sets or retrieves the file name or path specified by the object.\r\n      */\r\n    pathname: string;\r\n    /**\r\n      * Sets or retrieves the port number associated with a URL.\r\n      */\r\n    port: string;\r\n    /**\r\n      * Sets or retrieves the protocol portion of a URL.\r\n      */\r\n    protocol: string;\r\n    rel: string;\r\n    /**\r\n      * Sets or retrieves the substring of the href property that follows the question mark.\r\n      */\r\n    search: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    shape: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /** \r\n      * Returns a string representation of an object.\r\n      */\r\n    toString(): string;\r\n}\r\n\r\ndeclare var HTMLAreaElement: {\r\n    prototype: HTMLAreaElement;\r\n    new(): HTMLAreaElement;\r\n}\r\n\r\ninterface HTMLAreasCollection extends HTMLCollection {\r\n    /**\r\n      * Adds an element to the areas, controlRange, or options collection.\r\n      */\r\n    add(element: HTMLElement, before?: HTMLElement | number): void;\r\n    /**\r\n      * Removes an element from the collection.\r\n      */\r\n    remove(index?: number): void;\r\n}\r\n\r\ndeclare var HTMLAreasCollection: {\r\n    prototype: HTMLAreasCollection;\r\n    new(): HTMLAreasCollection;\r\n}\r\n\r\ninterface HTMLAudioElement extends HTMLMediaElement {\r\n}\r\n\r\ndeclare var HTMLAudioElement: {\r\n    prototype: HTMLAudioElement;\r\n    new(): HTMLAudioElement;\r\n}\r\n\r\ninterface HTMLBRElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\r\n      */\r\n    clear: string;\r\n}\r\n\r\ndeclare var HTMLBRElement: {\r\n    prototype: HTMLBRElement;\r\n    new(): HTMLBRElement;\r\n}\r\n\r\ninterface HTMLBaseElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets the baseline URL on which relative links are based.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n}\r\n\r\ndeclare var HTMLBaseElement: {\r\n    prototype: HTMLBaseElement;\r\n    new(): HTMLBaseElement;\r\n}\r\n\r\ninterface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedColorProperty {\r\n    /**\r\n      * Sets or retrieves the current typeface family.\r\n      */\r\n    face: string;\r\n    /**\r\n      * Sets or retrieves the font size of the object.\r\n      */\r\n    size: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLBaseFontElement: {\r\n    prototype: HTMLBaseFontElement;\r\n    new(): HTMLBaseFontElement;\r\n}\r\n\r\ninterface HTMLBodyElement extends HTMLElement {\r\n    aLink: any;\r\n    background: string;\r\n    bgColor: any;\r\n    bgProperties: string;\r\n    link: any;\r\n    noWrap: boolean;\r\n    onafterprint: (ev: Event) => any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    onblur: (ev: FocusEvent) => any;\r\n    onerror: (ev: Event) => any;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onhashchange: (ev: HashChangeEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onoffline: (ev: Event) => any;\r\n    ononline: (ev: Event) => any;\r\n    onorientationchange: (ev: Event) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    onpopstate: (ev: PopStateEvent) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onunload: (ev: Event) => any;\r\n    text: any;\r\n    vLink: any;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLBodyElement: {\r\n    prototype: HTMLBodyElement;\r\n    new(): HTMLBodyElement;\r\n}\r\n\r\ninterface HTMLButtonElement extends HTMLElement {\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\r\n      */\r\n    formAction: string;\r\n    /**\r\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\r\n      */\r\n    formEnctype: string;\r\n    /**\r\n      * Overrides the submit method attribute previously specified on a form element.\r\n      */\r\n    formMethod: string;\r\n    /**\r\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\r\n      */\r\n    formNoValidate: string;\r\n    /**\r\n      * Overrides the target attribute on a form element.\r\n      */\r\n    formTarget: string;\r\n    /** \r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    status: any;\r\n    /**\r\n      * Gets the classification and default behavior of the button.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    readonly validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    readonly validity: ValidityState;\r\n    /** \r\n      * Sets or retrieves the default or selected value of the control.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    readonly willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ndeclare var HTMLButtonElement: {\r\n    prototype: HTMLButtonElement;\r\n    new(): HTMLButtonElement;\r\n}\r\n\r\ninterface HTMLCanvasElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets the height of a canvas element on a document.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Gets or sets the width of a canvas element on a document.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\r\n      * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\r\n      */\r\n    getContext(contextId: \"2d\"): CanvasRenderingContext2D;\r\n    getContext(contextId: \"experimental-webgl\"): WebGLRenderingContext;\r\n    getContext(contextId: string, ...args: any[]): CanvasRenderingContext2D | WebGLRenderingContext;\r\n    /**\r\n      * Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing.\r\n      */\r\n    msToBlob(): Blob;\r\n    /**\r\n      * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\r\n      * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\r\n      */\r\n    toDataURL(type?: string, ...args: any[]): string;\r\n    toBlob(): Blob;\r\n}\r\n\r\ndeclare var HTMLCanvasElement: {\r\n    prototype: HTMLCanvasElement;\r\n    new(): HTMLCanvasElement;\r\n}\r\n\r\ninterface HTMLCollection {\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    readonly length: number;\r\n    /**\r\n      * Retrieves an object from various collections.\r\n      */\r\n    item(index: number): Element;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      */\r\n    namedItem(name: string): Element;\r\n    [index: number]: Element;\r\n}\r\n\r\ndeclare var HTMLCollection: {\r\n    prototype: HTMLCollection;\r\n    new(): HTMLCollection;\r\n}\r\n\r\ninterface HTMLDListElement extends HTMLElement {\r\n    compact: boolean;\r\n}\r\n\r\ndeclare var HTMLDListElement: {\r\n    prototype: HTMLDListElement;\r\n    new(): HTMLDListElement;\r\n}\r\n\r\ninterface HTMLDataListElement extends HTMLElement {\r\n    options: HTMLCollectionOf<HTMLOptionElement>;\r\n}\r\n\r\ndeclare var HTMLDataListElement: {\r\n    prototype: HTMLDataListElement;\r\n    new(): HTMLDataListElement;\r\n}\r\n\r\ninterface HTMLDirectoryElement extends HTMLElement {\r\n    compact: boolean;\r\n}\r\n\r\ndeclare var HTMLDirectoryElement: {\r\n    prototype: HTMLDirectoryElement;\r\n    new(): HTMLDirectoryElement;\r\n}\r\n\r\ninterface HTMLDivElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text. \r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\n\r\ndeclare var HTMLDivElement: {\r\n    prototype: HTMLDivElement;\r\n    new(): HTMLDivElement;\r\n}\r\n\r\ninterface HTMLDocument extends Document {\r\n}\r\n\r\ndeclare var HTMLDocument: {\r\n    prototype: HTMLDocument;\r\n    new(): HTMLDocument;\r\n}\r\n\r\ninterface HTMLElement extends Element {\r\n    accessKey: string;\r\n    readonly children: HTMLCollection;\r\n    contentEditable: string;\r\n    readonly dataset: DOMStringMap;\r\n    dir: string;\r\n    draggable: boolean;\r\n    hidden: boolean;\r\n    hideFocus: boolean;\r\n    innerHTML: string;\r\n    innerText: string;\r\n    readonly isContentEditable: boolean;\r\n    lang: string;\r\n    readonly offsetHeight: number;\r\n    readonly offsetLeft: number;\r\n    readonly offsetParent: Element;\r\n    readonly offsetTop: number;\r\n    readonly offsetWidth: number;\r\n    onabort: (ev: Event) => any;\r\n    onactivate: (ev: UIEvent) => any;\r\n    onbeforeactivate: (ev: UIEvent) => any;\r\n    onbeforecopy: (ev: ClipboardEvent) => any;\r\n    onbeforecut: (ev: ClipboardEvent) => any;\r\n    onbeforedeactivate: (ev: UIEvent) => any;\r\n    onbeforepaste: (ev: ClipboardEvent) => any;\r\n    onblur: (ev: FocusEvent) => any;\r\n    oncanplay: (ev: Event) => any;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    onchange: (ev: Event) => any;\r\n    onclick: (ev: MouseEvent) => any;\r\n    oncontextmenu: (ev: PointerEvent) => any;\r\n    oncopy: (ev: ClipboardEvent) => any;\r\n    oncuechange: (ev: Event) => any;\r\n    oncut: (ev: ClipboardEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    ondeactivate: (ev: UIEvent) => any;\r\n    ondrag: (ev: DragEvent) => any;\r\n    ondragend: (ev: DragEvent) => any;\r\n    ondragenter: (ev: DragEvent) => any;\r\n    ondragleave: (ev: DragEvent) => any;\r\n    ondragover: (ev: DragEvent) => any;\r\n    ondragstart: (ev: DragEvent) => any;\r\n    ondrop: (ev: DragEvent) => any;\r\n    ondurationchange: (ev: Event) => any;\r\n    onemptied: (ev: Event) => any;\r\n    onended: (ev: MediaStreamErrorEvent) => any;\r\n    onerror: (ev: Event) => any;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    oninput: (ev: Event) => any;\r\n    oninvalid: (ev: Event) => any;\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadeddata: (ev: Event) => any;\r\n    onloadedmetadata: (ev: Event) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onmouseenter: (ev: MouseEvent) => any;\r\n    onmouseleave: (ev: MouseEvent) => any;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    onmousewheel: (ev: WheelEvent) => any;\r\n    onmscontentzoom: (ev: UIEvent) => any;\r\n    onmsmanipulationstatechanged: (ev: MSManipulationEvent) => any;\r\n    onpaste: (ev: ClipboardEvent) => any;\r\n    onpause: (ev: Event) => any;\r\n    onplay: (ev: Event) => any;\r\n    onplaying: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onratechange: (ev: Event) => any;\r\n    onreset: (ev: Event) => any;\r\n    onscroll: (ev: UIEvent) => any;\r\n    onseeked: (ev: Event) => any;\r\n    onseeking: (ev: Event) => any;\r\n    onselect: (ev: UIEvent) => any;\r\n    onselectstart: (ev: Event) => any;\r\n    onstalled: (ev: Event) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    onsuspend: (ev: Event) => any;\r\n    ontimeupdate: (ev: Event) => any;\r\n    onvolumechange: (ev: Event) => any;\r\n    onwaiting: (ev: Event) => any;\r\n    outerHTML: string;\r\n    outerText: string;\r\n    spellcheck: boolean;\r\n    readonly style: CSSStyleDeclaration;\r\n    tabIndex: number;\r\n    title: string;\r\n    blur(): void;\r\n    click(): void;\r\n    dragDrop(): boolean;\r\n    focus(): void;\r\n    insertAdjacentElement(position: string, insertedElement: Element): Element;\r\n    insertAdjacentHTML(where: string, html: string): void;\r\n    insertAdjacentText(where: string, text: string): void;\r\n    msGetInputContext(): MSInputMethodContext;\r\n    scrollIntoView(top?: boolean): void;\r\n    setActive(): void;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLElement: {\r\n    prototype: HTMLElement;\r\n    new(): HTMLElement;\r\n}\r\n\r\ninterface HTMLEmbedElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    hidden: any;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    readonly msPlayToSource: any;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Retrieves the palette used for the embedded document.\r\n      */\r\n    readonly palette: string;\r\n    /**\r\n      * Retrieves the URL of the plug-in used to view an embedded document.\r\n      */\r\n    readonly pluginspage: string;\r\n    readonly readyState: string;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the height and width units of the embed object.\r\n      */\r\n    units: string;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLEmbedElement: {\r\n    prototype: HTMLEmbedElement;\r\n    new(): HTMLEmbedElement;\r\n}\r\n\r\ninterface HTMLFieldSetElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    readonly validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    readonly validity: ValidityState;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    readonly willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\n\r\ndeclare var HTMLFieldSetElement: {\r\n    prototype: HTMLFieldSetElement;\r\n    new(): HTMLFieldSetElement;\r\n}\r\n\r\ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\r\n    /**\r\n      * Sets or retrieves the current typeface family.\r\n      */\r\n    face: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLFontElement: {\r\n    prototype: HTMLFontElement;\r\n    new(): HTMLFontElement;\r\n}\r\n\r\ninterface HTMLFormElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\r\n      */\r\n    acceptCharset: string;\r\n    /**\r\n      * Sets or retrieves the URL to which the form content is sent for processing.\r\n      */\r\n    action: string;\r\n    /**\r\n      * Specifies whether autocomplete is applied to an editable text field.\r\n      */\r\n    autocomplete: string;\r\n    /**\r\n      * Retrieves a collection, in source order, of all controls in a given form.\r\n      */\r\n    readonly elements: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves the MIME encoding for the form.\r\n      */\r\n    encoding: string;\r\n    /**\r\n      * Sets or retrieves the encoding type for the form.\r\n      */\r\n    enctype: string;\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    readonly length: number;\r\n    /**\r\n      * Sets or retrieves how to send the form data to the server.\r\n      */\r\n    method: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Designates a form that is not validated when submitted.\r\n      */\r\n    noValidate: boolean;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Retrieves a form object or an object from an elements collection.\r\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\r\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\r\n      */\r\n    item(name?: any, index?: any): any;\r\n    /**\r\n      * Retrieves a form object or an object from an elements collection.\r\n      */\r\n    namedItem(name: string): any;\r\n    /**\r\n      * Fires when the user resets a form.\r\n      */\r\n    reset(): void;\r\n    /**\r\n      * Fires when a FORM is about to be submitted.\r\n      */\r\n    submit(): void;\r\n    [name: string]: any;\r\n}\r\n\r\ndeclare var HTMLFormElement: {\r\n    prototype: HTMLFormElement;\r\n    new(): HTMLFormElement;\r\n}\r\n\r\ninterface HTMLFrameElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    readonly contentDocument: Document;\r\n    /**\r\n      * Retrieves the object of the specified.\r\n      */\r\n    readonly contentWindow: Window;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string | number;\r\n    /**\r\n      * Sets or retrieves a URI to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\r\n      */\r\n    marginHeight: string;\r\n    /**\r\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\r\n      */\r\n    marginWidth: string;\r\n    /**\r\n      * Sets or retrieves the frame name.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves whether the user can resize the frame.\r\n      */\r\n    noResize: boolean;\r\n    /**\r\n      * Raised when the object has been completely received from the server.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    /**\r\n      * Sets or retrieves whether the frame can be scrolled.\r\n      */\r\n    scrolling: string;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string | number;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLFrameElement: {\r\n    prototype: HTMLFrameElement;\r\n    new(): HTMLFrameElement;\r\n}\r\n\r\ninterface HTMLFrameSetElement extends HTMLElement {\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the frame widths of the object.\r\n      */\r\n    cols: string;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    name: string;\r\n    onafterprint: (ev: Event) => any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    /**\r\n      * Fires when the object loses the input focus.\r\n      */\r\n    onblur: (ev: FocusEvent) => any;\r\n    onerror: (ev: Event) => any;\r\n    /**\r\n      * Fires when the object receives focus.\r\n      */\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onhashchange: (ev: HashChangeEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onoffline: (ev: Event) => any;\r\n    ononline: (ev: Event) => any;\r\n    onorientationchange: (ev: Event) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onunload: (ev: Event) => any;\r\n    /**\r\n      * Sets or retrieves the frame heights of the object.\r\n      */\r\n    rows: string;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLFrameSetElement: {\r\n    prototype: HTMLFrameSetElement;\r\n    new(): HTMLFrameSetElement;\r\n}\r\n\r\ninterface HTMLHRElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\r\n      */\r\n    noShade: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLHRElement: {\r\n    prototype: HTMLHRElement;\r\n    new(): HTMLHRElement;\r\n}\r\n\r\ninterface HTMLHeadElement extends HTMLElement {\r\n    profile: string;\r\n}\r\n\r\ndeclare var HTMLHeadElement: {\r\n    prototype: HTMLHeadElement;\r\n    new(): HTMLHeadElement;\r\n}\r\n\r\ninterface HTMLHeadingElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n}\r\n\r\ndeclare var HTMLHeadingElement: {\r\n    prototype: HTMLHeadingElement;\r\n    new(): HTMLHeadingElement;\r\n}\r\n\r\ninterface HTMLHtmlElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the DTD version that governs the current document.\r\n      */\r\n    version: string;\r\n}\r\n\r\ndeclare var HTMLHtmlElement: {\r\n    prototype: HTMLHtmlElement;\r\n    new(): HTMLHtmlElement;\r\n}\r\n\r\ninterface HTMLIFrameElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    allowFullscreen: boolean;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    readonly contentDocument: Document;\r\n    /**\r\n      * Retrieves the object of the specified.\r\n      */\r\n    readonly contentWindow: Window;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Sets or retrieves the horizontal margin for the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves a URI to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\r\n      */\r\n    marginHeight: string;\r\n    /**\r\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\r\n      */\r\n    marginWidth: string;\r\n    /**\r\n      * Sets or retrieves the frame name.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves whether the user can resize the frame.\r\n      */\r\n    noResize: boolean;\r\n    /**\r\n      * Raised when the object has been completely received from the server.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    readonly sandbox: DOMSettableTokenList;\r\n    /**\r\n      * Sets or retrieves whether the frame can be scrolled.\r\n      */\r\n    scrolling: string;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLIFrameElement: {\r\n    prototype: HTMLIFrameElement;\r\n    new(): HTMLIFrameElement;\r\n}\r\n\r\ninterface HTMLImageElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Retrieves whether the object is fully loaded.\r\n      */\r\n    readonly complete: boolean;\r\n    crossOrigin: string;\r\n    readonly currentSrc: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves whether the image is a server-side image map.\r\n      */\r\n    isMap: boolean;\r\n    /**\r\n      * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    lowsrc: string;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    readonly msPlayToSource: any;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * The original height of the image resource before sizing.\r\n      */\r\n    readonly naturalHeight: number;\r\n    /**\r\n      * The original width of the image resource before sizing.\r\n      */\r\n    readonly naturalWidth: number;\r\n    sizes: string;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    srcset: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    readonly x: number;\r\n    readonly y: number;\r\n    msGetAsCastingSource(): any;\r\n}\r\n\r\ndeclare var HTMLImageElement: {\r\n    prototype: HTMLImageElement;\r\n    new(): HTMLImageElement;\r\n    create(): HTMLImageElement;\r\n}\r\n\r\ninterface HTMLInputElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a comma-separated list of content types.\r\n      */\r\n    accept: string;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Specifies whether autocomplete is applied to an editable text field.\r\n      */\r\n    autocomplete: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the state of the check box or radio button.\r\n      */\r\n    checked: boolean;\r\n    /**\r\n      * Retrieves whether the object is fully loaded.\r\n      */\r\n    readonly complete: boolean;\r\n    /**\r\n      * Sets or retrieves the state of the check box or radio button.\r\n      */\r\n    defaultChecked: boolean;\r\n    /**\r\n      * Sets or retrieves the initial contents of the object.\r\n      */\r\n    defaultValue: string;\r\n    disabled: boolean;\r\n    /**\r\n      * Returns a FileList object on a file type input object.\r\n      */\r\n    readonly files: FileList;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\r\n      */\r\n    formAction: string;\r\n    /**\r\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\r\n      */\r\n    formEnctype: string;\r\n    /**\r\n      * Overrides the submit method attribute previously specified on a form element.\r\n      */\r\n    formMethod: string;\r\n    /**\r\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\r\n      */\r\n    formNoValidate: string;\r\n    /**\r\n      * Overrides the target attribute on a form element.\r\n      */\r\n    formTarget: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    hspace: number;\r\n    indeterminate: boolean;\r\n    /**\r\n      * Specifies the ID of a pre-defined datalist of options for an input element.\r\n      */\r\n    readonly list: HTMLElement;\r\n    /**\r\n      * Defines the maximum acceptable value for an input element with type=\"number\".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.\r\n      */\r\n    max: string;\r\n    /**\r\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\r\n      */\r\n    maxLength: number;\r\n    /**\r\n      * Defines the minimum acceptable value for an input element with type=\"number\". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.\r\n      */\r\n    min: string;\r\n    /**\r\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\r\n      */\r\n    multiple: boolean;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets or sets a string containing a regular expression that the user's input must match.\r\n      */\r\n    pattern: string;\r\n    /**\r\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\r\n      */\r\n    placeholder: string;\r\n    readOnly: boolean;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    selectionDirection: string;\r\n    /**\r\n      * Gets or sets the end position or offset of a text selection.\r\n      */\r\n    selectionEnd: number;\r\n    /**\r\n      * Gets or sets the starting position or offset of a text selection.\r\n      */\r\n    selectionStart: number;\r\n    size: number;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    status: boolean;\r\n    /**\r\n      * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.\r\n      */\r\n    step: string;\r\n    /**\r\n      * Returns the content type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    readonly validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    readonly validity: ValidityState;\r\n    /**\r\n      * Returns the value of the data at the cursor's current position.\r\n      */\r\n    value: string;\r\n    valueAsDate: Date;\r\n    /**\r\n      * Returns the input field value as a number.\r\n      */\r\n    valueAsNumber: number;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    webkitdirectory: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    readonly willValidate: boolean;\r\n    minLength: number;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Makes the selection equal to the current object.\r\n      */\r\n    select(): void;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n    /**\r\n      * Sets the start and end positions of a selection in a text field.\r\n      * @param start The offset into the text field for the start of the selection.\r\n      * @param end The offset into the text field for the end of the selection.\r\n      */\r\n    setSelectionRange(start?: number, end?: number, direction?: string): void;\r\n    /**\r\n      * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.\r\n      * @param n Value to decrement the value by.\r\n      */\r\n    stepDown(n?: number): void;\r\n    /**\r\n      * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.\r\n      * @param n Value to increment the value by.\r\n      */\r\n    stepUp(n?: number): void;\r\n}\r\n\r\ndeclare var HTMLInputElement: {\r\n    prototype: HTMLInputElement;\r\n    new(): HTMLInputElement;\r\n}\r\n\r\ninterface HTMLLIElement extends HTMLElement {\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the value of a list item.\r\n      */\r\n    value: number;\r\n}\r\n\r\ndeclare var HTMLLIElement: {\r\n    prototype: HTMLLIElement;\r\n    new(): HTMLLIElement;\r\n}\r\n\r\ninterface HTMLLabelElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the object to which the given label object is assigned.\r\n      */\r\n    htmlFor: string;\r\n}\r\n\r\ndeclare var HTMLLabelElement: {\r\n    prototype: HTMLLabelElement;\r\n    new(): HTMLLabelElement;\r\n}\r\n\r\ninterface HTMLLegendElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n}\r\n\r\ndeclare var HTMLLegendElement: {\r\n    prototype: HTMLLegendElement;\r\n    new(): HTMLLegendElement;\r\n}\r\n\r\ninterface HTMLLinkElement extends HTMLElement, LinkStyle {\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    disabled: boolean;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the language code of the object.\r\n      */\r\n    hreflang: string;\r\n    /**\r\n      * Sets or retrieves the media type.\r\n      */\r\n    media: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rel: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rev: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Sets or retrieves the MIME type of the object.\r\n      */\r\n    type: string;\r\n    import?: Document;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLLinkElement: {\r\n    prototype: HTMLLinkElement;\r\n    new(): HTMLLinkElement;\r\n}\r\n\r\ninterface HTMLMapElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a collection of the area objects defined for the given map object.\r\n      */\r\n    readonly areas: HTMLAreasCollection;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n}\r\n\r\ndeclare var HTMLMapElement: {\r\n    prototype: HTMLMapElement;\r\n    new(): HTMLMapElement;\r\n}\r\n\r\ninterface HTMLMarqueeElement extends HTMLElement {\r\n    behavior: string;\r\n    bgColor: any;\r\n    direction: string;\r\n    height: string;\r\n    hspace: number;\r\n    loop: number;\r\n    onbounce: (ev: Event) => any;\r\n    onfinish: (ev: Event) => any;\r\n    onstart: (ev: Event) => any;\r\n    scrollAmount: number;\r\n    scrollDelay: number;\r\n    trueSpeed: boolean;\r\n    vspace: number;\r\n    width: string;\r\n    start(): void;\r\n    stop(): void;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"bounce\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"finish\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"start\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLMarqueeElement: {\r\n    prototype: HTMLMarqueeElement;\r\n    new(): HTMLMarqueeElement;\r\n}\r\n\r\ninterface HTMLMediaElement extends HTMLElement {\r\n    /**\r\n      * Returns an AudioTrackList object with the audio tracks for a given video element.\r\n      */\r\n    readonly audioTracks: AudioTrackList;\r\n    /**\r\n      * Gets or sets a value that indicates whether to start playing the media automatically.\r\n      */\r\n    autoplay: boolean;\r\n    /**\r\n      * Gets a collection of buffered time ranges.\r\n      */\r\n    readonly buffered: TimeRanges;\r\n    /**\r\n      * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).\r\n      */\r\n    controls: boolean;\r\n    crossOrigin: string;\r\n    /**\r\n      * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.\r\n      */\r\n    readonly currentSrc: string;\r\n    /**\r\n      * Gets or sets the current playback position, in seconds.\r\n      */\r\n    currentTime: number;\r\n    defaultMuted: boolean;\r\n    /**\r\n      * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.\r\n      */\r\n    defaultPlaybackRate: number;\r\n    /**\r\n      * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.\r\n      */\r\n    readonly duration: number;\r\n    /**\r\n      * Gets information about whether the playback has ended or not.\r\n      */\r\n    readonly ended: boolean;\r\n    /**\r\n      * Returns an object representing the current error state of the audio or video element.\r\n      */\r\n    readonly error: MediaError;\r\n    /**\r\n      * Gets or sets a flag to specify whether playback should restart after it completes.\r\n      */\r\n    loop: boolean;\r\n    readonly mediaKeys: MediaKeys | null;\r\n    /**\r\n      * Specifies the purpose of the audio or video media, such as background audio or alerts.\r\n      */\r\n    msAudioCategory: string;\r\n    /**\r\n      * Specifies the output device id that the audio will be sent to.\r\n      */\r\n    msAudioDeviceType: string;\r\n    readonly msGraphicsTrustStatus: MSGraphicsTrust;\r\n    /**\r\n      * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.\r\n      */\r\n    readonly msKeys: MSMediaKeys;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    readonly msPlayToSource: any;\r\n    /**\r\n      * Specifies whether or not to enable low-latency playback on the media element.\r\n      */\r\n    msRealTime: boolean;\r\n    /**\r\n      * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.\r\n      */\r\n    muted: boolean;\r\n    /**\r\n      * Gets the current network activity for the element.\r\n      */\r\n    readonly networkState: number;\r\n    onencrypted: (ev: MediaEncryptedEvent) => any;\r\n    onmsneedkey: (ev: MSMediaKeyNeededEvent) => any;\r\n    /**\r\n      * Gets a flag that specifies whether playback is paused.\r\n      */\r\n    readonly paused: boolean;\r\n    /**\r\n      * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.\r\n      */\r\n    playbackRate: number;\r\n    /**\r\n      * Gets TimeRanges for the current media resource that has been played.\r\n      */\r\n    readonly played: TimeRanges;\r\n    /**\r\n      * Gets or sets the current playback position, in seconds.\r\n      */\r\n    preload: string;\r\n    readyState: number;\r\n    /**\r\n      * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.\r\n      */\r\n    readonly seekable: TimeRanges;\r\n    /**\r\n      * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.\r\n      */\r\n    readonly seeking: boolean;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    srcObject: MediaStream | null;\r\n    readonly textTracks: TextTrackList;\r\n    readonly videoTracks: VideoTrackList;\r\n    /**\r\n      * Gets or sets the volume level for audio portions of the media element.\r\n      */\r\n    volume: number;\r\n    addTextTrack(kind: string, label?: string, language?: string): TextTrack;\r\n    /**\r\n      * Returns a string that specifies whether the client can play a given media resource type.\r\n      */\r\n    canPlayType(type: string): string;\r\n    /**\r\n      * Fires immediately after the client loads the object.\r\n      */\r\n    load(): void;\r\n    /**\r\n      * Clears all effects from the media pipeline.\r\n      */\r\n    msClearEffects(): void;\r\n    msGetAsCastingSource(): any;\r\n    /**\r\n      * Inserts the specified audio effect into media pipeline.\r\n      */\r\n    msInsertAudioEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\r\n    msSetMediaKeys(mediaKeys: MSMediaKeys): void;\r\n    /**\r\n      * Specifies the media protection manager for a given media pipeline.\r\n      */\r\n    msSetMediaProtectionManager(mediaProtectionManager?: any): void;\r\n    /**\r\n      * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.\r\n      */\r\n    pause(): void;\r\n    /**\r\n      * Loads and starts playback of a media resource.\r\n      */\r\n    play(): void;\r\n    setMediaKeys(mediaKeys: MediaKeys | null): PromiseLike<void>;\r\n    readonly HAVE_CURRENT_DATA: number;\r\n    readonly HAVE_ENOUGH_DATA: number;\r\n    readonly HAVE_FUTURE_DATA: number;\r\n    readonly HAVE_METADATA: number;\r\n    readonly HAVE_NOTHING: number;\r\n    readonly NETWORK_EMPTY: number;\r\n    readonly NETWORK_IDLE: number;\r\n    readonly NETWORK_LOADING: number;\r\n    readonly NETWORK_NO_SOURCE: number;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"encrypted\", listener: (ev: MediaEncryptedEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msneedkey\", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLMediaElement: {\r\n    prototype: HTMLMediaElement;\r\n    new(): HTMLMediaElement;\r\n    readonly HAVE_CURRENT_DATA: number;\r\n    readonly HAVE_ENOUGH_DATA: number;\r\n    readonly HAVE_FUTURE_DATA: number;\r\n    readonly HAVE_METADATA: number;\r\n    readonly HAVE_NOTHING: number;\r\n    readonly NETWORK_EMPTY: number;\r\n    readonly NETWORK_IDLE: number;\r\n    readonly NETWORK_LOADING: number;\r\n    readonly NETWORK_NO_SOURCE: number;\r\n}\r\n\r\ninterface HTMLMenuElement extends HTMLElement {\r\n    compact: boolean;\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLMenuElement: {\r\n    prototype: HTMLMenuElement;\r\n    new(): HTMLMenuElement;\r\n}\r\n\r\ninterface HTMLMetaElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Gets or sets meta-information to associate with httpEquiv or name.\r\n      */\r\n    content: string;\r\n    /**\r\n      * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.\r\n      */\r\n    httpEquiv: string;\r\n    /**\r\n      * Sets or retrieves the value specified in the content attribute of the meta object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\r\n      */\r\n    scheme: string;\r\n    /**\r\n      * Sets or retrieves the URL property that will be loaded after the specified time has elapsed. \r\n      */\r\n    url: string;\r\n}\r\n\r\ndeclare var HTMLMetaElement: {\r\n    prototype: HTMLMetaElement;\r\n    new(): HTMLMetaElement;\r\n}\r\n\r\ninterface HTMLMeterElement extends HTMLElement {\r\n    high: number;\r\n    low: number;\r\n    max: number;\r\n    min: number;\r\n    optimum: number;\r\n    value: number;\r\n}\r\n\r\ndeclare var HTMLMeterElement: {\r\n    prototype: HTMLMeterElement;\r\n    new(): HTMLMeterElement;\r\n}\r\n\r\ninterface HTMLModElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n}\r\n\r\ndeclare var HTMLModElement: {\r\n    prototype: HTMLModElement;\r\n    new(): HTMLModElement;\r\n}\r\n\r\ninterface HTMLOListElement extends HTMLElement {\r\n    compact: boolean;\r\n    /**\r\n      * The starting number.\r\n      */\r\n    start: number;\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLOListElement: {\r\n    prototype: HTMLOListElement;\r\n    new(): HTMLOListElement;\r\n}\r\n\r\ninterface HTMLObjectElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\r\n      */\r\n    readonly BaseHref: string;\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\r\n      */\r\n    altHtml: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\r\n      */\r\n    archive: string;\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the URL of the file containing the compiled Java class.\r\n      */\r\n    code: string;\r\n    /**\r\n      * Sets or retrieves the URL of the component.\r\n      */\r\n    codeBase: string;\r\n    /**\r\n      * Sets or retrieves the Internet media type for the code associated with the object.\r\n      */\r\n    codeType: string;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    readonly contentDocument: Document;\r\n    /**\r\n      * Sets or retrieves the URL that references the data of the object.\r\n      */\r\n    data: string;\r\n    declare: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    hspace: number;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    readonly msPlayToSource: any;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Retrieves the contained object.\r\n      */\r\n    readonly object: any;\r\n    readonly readyState: number;\r\n    /**\r\n      * Sets or retrieves a message to be displayed while an object is loading.\r\n      */\r\n    standby: string;\r\n    /**\r\n      * Sets or retrieves the MIME type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    readonly validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    readonly validity: ValidityState;\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    readonly willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLObjectElement: {\r\n    prototype: HTMLObjectElement;\r\n    new(): HTMLObjectElement;\r\n}\r\n\r\ninterface HTMLOptGroupElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the status of an option.\r\n      */\r\n    defaultSelected: boolean;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the ordinal position of an option in a list box.\r\n      */\r\n    readonly index: number;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\r\n      */\r\n    label: string;\r\n    /**\r\n      * Sets or retrieves whether the option in the list box is the default item.\r\n      */\r\n    selected: boolean;\r\n    /**\r\n      * Sets or retrieves the text string specified by the option tag.\r\n      */\r\n    readonly text: string;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n}\r\n\r\ndeclare var HTMLOptGroupElement: {\r\n    prototype: HTMLOptGroupElement;\r\n    new(): HTMLOptGroupElement;\r\n}\r\n\r\ninterface HTMLOptionElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the status of an option.\r\n      */\r\n    defaultSelected: boolean;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the ordinal position of an option in a list box.\r\n      */\r\n    readonly index: number;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\r\n      */\r\n    label: string;\r\n    /**\r\n      * Sets or retrieves whether the option in the list box is the default item.\r\n      */\r\n    selected: boolean;\r\n    /**\r\n      * Sets or retrieves the text string specified by the option tag.\r\n      */\r\n    text: string;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n}\r\n\r\ndeclare var HTMLOptionElement: {\r\n    prototype: HTMLOptionElement;\r\n    new(): HTMLOptionElement;\r\n    create(): HTMLOptionElement;\r\n}\r\n\r\ninterface HTMLOptionsCollection extends HTMLCollection {\r\n    length: number;\r\n    selectedIndex: number;\r\n    add(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number): void;\r\n    remove(index: number): void;\r\n}\r\n\r\ndeclare var HTMLOptionsCollection: {\r\n    prototype: HTMLOptionsCollection;\r\n    new(): HTMLOptionsCollection;\r\n}\r\n\r\ninterface HTMLParagraphElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text. \r\n      */\r\n    align: string;\r\n    clear: string;\r\n}\r\n\r\ndeclare var HTMLParagraphElement: {\r\n    prototype: HTMLParagraphElement;\r\n    new(): HTMLParagraphElement;\r\n}\r\n\r\ninterface HTMLParamElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the name of an input parameter for an element.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the content type of the resource designated by the value attribute.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the value of an input parameter for an element.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Sets or retrieves the data type of the value attribute.\r\n      */\r\n    valueType: string;\r\n}\r\n\r\ndeclare var HTMLParamElement: {\r\n    prototype: HTMLParamElement;\r\n    new(): HTMLParamElement;\r\n}\r\n\r\ninterface HTMLPictureElement extends HTMLElement {\r\n}\r\n\r\ndeclare var HTMLPictureElement: {\r\n    prototype: HTMLPictureElement;\r\n    new(): HTMLPictureElement;\r\n}\r\n\r\ninterface HTMLPreElement extends HTMLElement {\r\n    /**\r\n      * Sets or gets a value that you can use to implement your own width functionality for the object.\r\n      */\r\n    width: number;\r\n}\r\n\r\ndeclare var HTMLPreElement: {\r\n    prototype: HTMLPreElement;\r\n    new(): HTMLPreElement;\r\n}\r\n\r\ninterface HTMLProgressElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Defines the maximum, or \"done\" value for a progress element.\r\n      */\r\n    max: number;\r\n    /**\r\n      * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).\r\n      */\r\n    readonly position: number;\r\n    /**\r\n      * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.\r\n      */\r\n    value: number;\r\n}\r\n\r\ndeclare var HTMLProgressElement: {\r\n    prototype: HTMLProgressElement;\r\n    new(): HTMLProgressElement;\r\n}\r\n\r\ninterface HTMLQuoteElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\n\r\ndeclare var HTMLQuoteElement: {\r\n    prototype: HTMLQuoteElement;\r\n    new(): HTMLQuoteElement;\r\n}\r\n\r\ninterface HTMLScriptElement extends HTMLElement {\r\n    async: boolean;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the status of the script.\r\n      */\r\n    defer: boolean;\r\n    /**\r\n      * Sets or retrieves the event for which the script is written. \r\n      */\r\n    event: string;\r\n    /** \r\n      * Sets or retrieves the object that is bound to the event script.\r\n      */\r\n    htmlFor: string;\r\n    /**\r\n      * Retrieves the URL to an external file that contains the source code or data.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n    /**\r\n      * Sets or retrieves the MIME type for the associated scripting engine.\r\n      */\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLScriptElement: {\r\n    prototype: HTMLScriptElement;\r\n    new(): HTMLScriptElement;\r\n}\r\n\r\ninterface HTMLSelectElement extends HTMLElement {\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\r\n      */\r\n    multiple: boolean;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    options: HTMLCollectionOf<HTMLOptionElement>;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Sets or retrieves the index of the selected option in a select object.\r\n      */\r\n    selectedIndex: number;\r\n    selectedOptions: HTMLCollectionOf<HTMLOptionElement>;\r\n    /**\r\n      * Sets or retrieves the number of rows in the list box. \r\n      */\r\n    size: number;\r\n    /**\r\n      * Retrieves the type of select control based on the value of the MULTIPLE attribute.\r\n      */\r\n    readonly type: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    readonly validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    readonly validity: ValidityState;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    readonly willValidate: boolean;\r\n    /**\r\n      * Adds an element to the areas, controlRange, or options collection.\r\n      * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\r\n      * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection. \r\n      */\r\n    add(element: HTMLElement, before?: HTMLElement | number): void;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\r\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\r\n      */\r\n    item(name?: any, index?: any): any;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\r\n      */\r\n    namedItem(name: string): any;\r\n    /**\r\n      * Removes an element from the collection.\r\n      * @param index Number that specifies the zero-based index of the element to remove from the collection.\r\n      */\r\n    remove(index?: number): void;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n    [name: string]: any;\r\n}\r\n\r\ndeclare var HTMLSelectElement: {\r\n    prototype: HTMLSelectElement;\r\n    new(): HTMLSelectElement;\r\n}\r\n\r\ninterface HTMLSourceElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets the intended media type of the media source.\r\n     */\r\n    media: string;\r\n    msKeySystem: string;\r\n    sizes: string;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    srcset: string;\r\n    /**\r\n     * Gets or sets the MIME type of a media resource.\r\n     */\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLSourceElement: {\r\n    prototype: HTMLSourceElement;\r\n    new(): HTMLSourceElement;\r\n}\r\n\r\ninterface HTMLSpanElement extends HTMLElement {\r\n}\r\n\r\ndeclare var HTMLSpanElement: {\r\n    prototype: HTMLSpanElement;\r\n    new(): HTMLSpanElement;\r\n}\r\n\r\ninterface HTMLStyleElement extends HTMLElement, LinkStyle {\r\n    disabled: boolean;\r\n    /**\r\n      * Sets or retrieves the media type.\r\n      */\r\n    media: string;\r\n    /**\r\n      * Retrieves the CSS language in which the style sheet is written.\r\n      */\r\n    type: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLStyleElement: {\r\n    prototype: HTMLStyleElement;\r\n    new(): HTMLStyleElement;\r\n}\r\n\r\ninterface HTMLTableCaptionElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the alignment of the caption or legend.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the caption appears at the top or bottom of the table.\r\n      */\r\n    vAlign: string;\r\n}\r\n\r\ndeclare var HTMLTableCaptionElement: {\r\n    prototype: HTMLTableCaptionElement;\r\n    new(): HTMLTableCaptionElement;\r\n}\r\n\r\ninterface HTMLTableCellElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves abbreviated text for the object.\r\n      */\r\n    abbr: string;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\r\n      */\r\n    axis: string;\r\n    bgColor: any;\r\n    /**\r\n      * Retrieves the position of the object in the cells collection of a row.\r\n      */\r\n    readonly cellIndex: number;\r\n    /**\r\n      * Sets or retrieves the number columns in the table that the object should span.\r\n      */\r\n    colSpan: number;\r\n    /**\r\n      * Sets or retrieves a list of header cells that provide information for the object.\r\n      */\r\n    headers: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n    /**\r\n      * Sets or retrieves how many rows in a table the cell should span.\r\n      */\r\n    rowSpan: number;\r\n    /**\r\n      * Sets or retrieves the group of cells in a table to which the object's information applies.\r\n      */\r\n    scope: string;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLTableCellElement: {\r\n    prototype: HTMLTableCellElement;\r\n    new(): HTMLTableCellElement;\r\n}\r\n\r\ninterface HTMLTableColElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves the alignment of the object relative to the display or table.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the number of columns in the group.\r\n      */\r\n    span: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: any;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLTableColElement: {\r\n    prototype: HTMLTableColElement;\r\n    new(): HTMLTableColElement;\r\n}\r\n\r\ninterface HTMLTableDataCellElement extends HTMLTableCellElement {\r\n}\r\n\r\ndeclare var HTMLTableDataCellElement: {\r\n    prototype: HTMLTableDataCellElement;\r\n    new(): HTMLTableDataCellElement;\r\n}\r\n\r\ninterface HTMLTableElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    bgColor: any;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object. \r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Retrieves the caption object of a table.\r\n      */\r\n    caption: HTMLTableCaptionElement;\r\n    /**\r\n      * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\r\n      */\r\n    cellPadding: string;\r\n    /**\r\n      * Sets or retrieves the amount of space between cells in a table.\r\n      */\r\n    cellSpacing: string;\r\n    /**\r\n      * Sets or retrieves the number of columns in the table.\r\n      */\r\n    cols: number;\r\n    /**\r\n      * Sets or retrieves the way the border frame around the table is displayed.\r\n      */\r\n    frame: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: HTMLCollectionOf<HTMLTableRowElement>;\r\n    /**\r\n      * Sets or retrieves which dividing lines (inner borders) are displayed.\r\n      */\r\n    rules: string;\r\n    /**\r\n      * Sets or retrieves a description and/or structure of the object.\r\n      */\r\n    summary: string;\r\n    /**\r\n      * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.\r\n      */\r\n    tBodies: HTMLCollectionOf<HTMLTableSectionElement>;\r\n    /**\r\n      * Retrieves the tFoot object of the table.\r\n      */\r\n    tFoot: HTMLTableSectionElement;\r\n    /**\r\n      * Retrieves the tHead object of the table.\r\n      */\r\n    tHead: HTMLTableSectionElement;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Creates an empty caption element in the table.\r\n      */\r\n    createCaption(): HTMLTableCaptionElement;\r\n    /**\r\n      * Creates an empty tBody element in the table.\r\n      */\r\n    createTBody(): HTMLTableSectionElement;\r\n    /**\r\n      * Creates an empty tFoot element in the table.\r\n      */\r\n    createTFoot(): HTMLTableSectionElement;\r\n    /**\r\n      * Returns the tHead element object if successful, or null otherwise.\r\n      */\r\n    createTHead(): HTMLTableSectionElement;\r\n    /**\r\n      * Deletes the caption element and its contents from the table.\r\n      */\r\n    deleteCaption(): void;\r\n    /**\r\n      * Removes the specified row (tr) from the element and from the rows collection.\r\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\r\n      */\r\n    deleteRow(index?: number): void;\r\n    /**\r\n      * Deletes the tFoot element and its contents from the table.\r\n      */\r\n    deleteTFoot(): void;\r\n    /**\r\n      * Deletes the tHead element and its contents from the table.\r\n      */\r\n    deleteTHead(): void;\r\n    /**\r\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\r\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\r\n      */\r\n    insertRow(index?: number): HTMLTableRowElement;\r\n}\r\n\r\ndeclare var HTMLTableElement: {\r\n    prototype: HTMLTableElement;\r\n    new(): HTMLTableElement;\r\n}\r\n\r\ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement {\r\n    /**\r\n      * Sets or retrieves the group of cells in a table to which the object's information applies.\r\n      */\r\n    scope: string;\r\n}\r\n\r\ndeclare var HTMLTableHeaderCellElement: {\r\n    prototype: HTMLTableHeaderCellElement;\r\n    new(): HTMLTableHeaderCellElement;\r\n}\r\n\r\ninterface HTMLTableRowElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    bgColor: any;\r\n    /**\r\n      * Retrieves a collection of all cells in the table row.\r\n      */\r\n    cells: HTMLCollectionOf<HTMLTableDataCellElement | HTMLTableHeaderCellElement>;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Retrieves the position of the object in the rows collection for the table.\r\n      */\r\n    readonly rowIndex: number;\r\n    /**\r\n      * Retrieves the position of the object in the collection.\r\n      */\r\n    readonly sectionRowIndex: number;\r\n    /**\r\n      * Removes the specified cell from the table row, as well as from the cells collection.\r\n      * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\r\n      */\r\n    deleteCell(index?: number): void;\r\n    /**\r\n      * Creates a new cell in the table row, and adds the cell to the cells collection.\r\n      * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\r\n      */\r\n    insertCell(index?: number): HTMLTableDataCellElement;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLTableRowElement: {\r\n    prototype: HTMLTableRowElement;\r\n    new(): HTMLTableRowElement;\r\n}\r\n\r\ninterface HTMLTableSectionElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: HTMLCollectionOf<HTMLTableRowElement>;\r\n    /**\r\n      * Removes the specified row (tr) from the element and from the rows collection.\r\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\r\n      */\r\n    deleteRow(index?: number): void;\r\n    /**\r\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\r\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\r\n      */\r\n    insertRow(index?: number): HTMLTableRowElement;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLTableSectionElement: {\r\n    prototype: HTMLTableSectionElement;\r\n    new(): HTMLTableSectionElement;\r\n}\r\n\r\ninterface HTMLTemplateElement extends HTMLElement {\r\n    readonly content: DocumentFragment;\r\n}\r\n\r\ndeclare var HTMLTemplateElement: {\r\n    prototype: HTMLTemplateElement;\r\n    new(): HTMLTemplateElement;\r\n}\r\n\r\ninterface HTMLTextAreaElement extends HTMLElement {\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    cols: number;\r\n    /**\r\n      * Sets or retrieves the initial contents of the object.\r\n      */\r\n    defaultValue: string;\r\n    disabled: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    readonly form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\r\n      */\r\n    maxLength: number;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\r\n      */\r\n    placeholder: string;\r\n    /**\r\n      * Sets or retrieves the value indicated whether the content of the object is read-only.\r\n      */\r\n    readOnly: boolean;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: number;\r\n    /**\r\n      * Gets or sets the end position or offset of a text selection.\r\n      */\r\n    selectionEnd: number;\r\n    /**\r\n      * Gets or sets the starting position or offset of a text selection.\r\n      */\r\n    selectionStart: number;\r\n    /**\r\n      * Sets or retrieves the value indicating whether the control is selected.\r\n      */\r\n    status: any;\r\n    /**\r\n      * Retrieves the type of control.\r\n      */\r\n    readonly type: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    readonly validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    readonly validity: ValidityState;\r\n    /**\r\n      * Retrieves or sets the text in the entry field of the textArea element.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    readonly willValidate: boolean;\r\n    /**\r\n      * Sets or retrieves how to handle wordwrapping in the object.\r\n      */\r\n    wrap: string;\r\n    minLength: number;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Highlights the input area of a form element.\r\n      */\r\n    select(): void;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n    /**\r\n      * Sets the start and end positions of a selection in a text field.\r\n      * @param start The offset into the text field for the start of the selection.\r\n      * @param end The offset into the text field for the end of the selection.\r\n      */\r\n    setSelectionRange(start: number, end: number): void;\r\n}\r\n\r\ndeclare var HTMLTextAreaElement: {\r\n    prototype: HTMLTextAreaElement;\r\n    new(): HTMLTextAreaElement;\r\n}\r\n\r\ninterface HTMLTitleElement extends HTMLElement {\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n}\r\n\r\ndeclare var HTMLTitleElement: {\r\n    prototype: HTMLTitleElement;\r\n    new(): HTMLTitleElement;\r\n}\r\n\r\ninterface HTMLTrackElement extends HTMLElement {\r\n    default: boolean;\r\n    kind: string;\r\n    label: string;\r\n    readonly readyState: number;\r\n    src: string;\r\n    srclang: string;\r\n    readonly track: TextTrack;\r\n    readonly ERROR: number;\r\n    readonly LOADED: number;\r\n    readonly LOADING: number;\r\n    readonly NONE: number;\r\n}\r\n\r\ndeclare var HTMLTrackElement: {\r\n    prototype: HTMLTrackElement;\r\n    new(): HTMLTrackElement;\r\n    readonly ERROR: number;\r\n    readonly LOADED: number;\r\n    readonly LOADING: number;\r\n    readonly NONE: number;\r\n}\r\n\r\ninterface HTMLUListElement extends HTMLElement {\r\n    compact: boolean;\r\n    type: string;\r\n}\r\n\r\ndeclare var HTMLUListElement: {\r\n    prototype: HTMLUListElement;\r\n    new(): HTMLUListElement;\r\n}\r\n\r\ninterface HTMLUnknownElement extends HTMLElement {\r\n}\r\n\r\ndeclare var HTMLUnknownElement: {\r\n    prototype: HTMLUnknownElement;\r\n    new(): HTMLUnknownElement;\r\n}\r\n\r\ninterface HTMLVideoElement extends HTMLMediaElement {\r\n    /**\r\n      * Gets or sets the height of the video element.\r\n      */\r\n    height: number;\r\n    msHorizontalMirror: boolean;\r\n    readonly msIsLayoutOptimalForPlayback: boolean;\r\n    readonly msIsStereo3D: boolean;\r\n    msStereo3DPackingMode: string;\r\n    msStereo3DRenderMode: string;\r\n    msZoom: boolean;\r\n    onMSVideoFormatChanged: (ev: Event) => any;\r\n    onMSVideoFrameStepCompleted: (ev: Event) => any;\r\n    onMSVideoOptimalLayoutChanged: (ev: Event) => any;\r\n    /**\r\n      * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.\r\n      */\r\n    poster: string;\r\n    /**\r\n      * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.\r\n      */\r\n    readonly videoHeight: number;\r\n    /**\r\n      * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.\r\n      */\r\n    readonly videoWidth: number;\r\n    readonly webkitDisplayingFullscreen: boolean;\r\n    readonly webkitSupportsFullscreen: boolean;\r\n    /**\r\n      * Gets or sets the width of the video element.\r\n      */\r\n    width: number;\r\n    getVideoPlaybackQuality(): VideoPlaybackQuality;\r\n    msFrameStep(forward: boolean): void;\r\n    msInsertVideoEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\r\n    msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void;\r\n    webkitEnterFullScreen(): void;\r\n    webkitEnterFullscreen(): void;\r\n    webkitExitFullScreen(): void;\r\n    webkitExitFullscreen(): void;\r\n    addEventListener(type: \"MSContentZoom\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSManipulationStateChanged\", listener: (ev: MSManipulationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoFormatChanged\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoFrameStepCompleted\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoOptimalLayoutChanged\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"encrypted\", listener: (ev: MediaEncryptedEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msneedkey\", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: ClipboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var HTMLVideoElement: {\r\n    prototype: HTMLVideoElement;\r\n    new(): HTMLVideoElement;\r\n}\r\n\r\ninterface HashChangeEvent extends Event {\r\n    readonly newURL: string | null;\r\n    readonly oldURL: string | null;\r\n}\r\n\r\ndeclare var HashChangeEvent: {\r\n    prototype: HashChangeEvent;\r\n    new(type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent;\r\n}\r\n\r\ninterface History {\r\n    readonly length: number;\r\n    readonly state: any;\r\n    back(distance?: any): void;\r\n    forward(distance?: any): void;\r\n    go(delta?: any): void;\r\n    pushState(statedata: any, title?: string, url?: string): void;\r\n    replaceState(statedata: any, title?: string, url?: string): void;\r\n}\r\n\r\ndeclare var History: {\r\n    prototype: History;\r\n    new(): History;\r\n}\r\n\r\ninterface IDBCursor {\r\n    readonly direction: string;\r\n    key: IDBKeyRange | IDBValidKey;\r\n    readonly primaryKey: any;\r\n    source: IDBObjectStore | IDBIndex;\r\n    advance(count: number): void;\r\n    continue(key?: IDBKeyRange | IDBValidKey): void;\r\n    delete(): IDBRequest;\r\n    update(value: any): IDBRequest;\r\n    readonly NEXT: string;\r\n    readonly NEXT_NO_DUPLICATE: string;\r\n    readonly PREV: string;\r\n    readonly PREV_NO_DUPLICATE: string;\r\n}\r\n\r\ndeclare var IDBCursor: {\r\n    prototype: IDBCursor;\r\n    new(): IDBCursor;\r\n    readonly NEXT: string;\r\n    readonly NEXT_NO_DUPLICATE: string;\r\n    readonly PREV: string;\r\n    readonly PREV_NO_DUPLICATE: string;\r\n}\r\n\r\ninterface IDBCursorWithValue extends IDBCursor {\r\n    readonly value: any;\r\n}\r\n\r\ndeclare var IDBCursorWithValue: {\r\n    prototype: IDBCursorWithValue;\r\n    new(): IDBCursorWithValue;\r\n}\r\n\r\ninterface IDBDatabase extends EventTarget {\r\n    readonly name: string;\r\n    readonly objectStoreNames: DOMStringList;\r\n    onabort: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    version: number;\r\n    onversionchange: (ev: IDBVersionChangeEvent) => any;\r\n    close(): void;\r\n    createObjectStore(name: string, optionalParameters?: IDBObjectStoreParameters): IDBObjectStore;\r\n    deleteObjectStore(name: string): void;\r\n    transaction(storeNames: string | string[], mode?: string): IDBTransaction;\r\n    addEventListener(type: \"versionchange\", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var IDBDatabase: {\r\n    prototype: IDBDatabase;\r\n    new(): IDBDatabase;\r\n}\r\n\r\ninterface IDBFactory {\r\n    cmp(first: any, second: any): number;\r\n    deleteDatabase(name: string): IDBOpenDBRequest;\r\n    open(name: string, version?: number): IDBOpenDBRequest;\r\n}\r\n\r\ndeclare var IDBFactory: {\r\n    prototype: IDBFactory;\r\n    new(): IDBFactory;\r\n}\r\n\r\ninterface IDBIndex {\r\n    keyPath: string | string[];\r\n    readonly name: string;\r\n    readonly objectStore: IDBObjectStore;\r\n    readonly unique: boolean;\r\n    multiEntry: boolean;\r\n    count(key?: IDBKeyRange | IDBValidKey): IDBRequest;\r\n    get(key: IDBKeyRange | IDBValidKey): IDBRequest;\r\n    getKey(key: IDBKeyRange | IDBValidKey): IDBRequest;\r\n    openCursor(range?: IDBKeyRange | IDBValidKey, direction?: string): IDBRequest;\r\n    openKeyCursor(range?: IDBKeyRange | IDBValidKey, direction?: string): IDBRequest;\r\n}\r\n\r\ndeclare var IDBIndex: {\r\n    prototype: IDBIndex;\r\n    new(): IDBIndex;\r\n}\r\n\r\ninterface IDBKeyRange {\r\n    readonly lower: any;\r\n    readonly lowerOpen: boolean;\r\n    readonly upper: any;\r\n    readonly upperOpen: boolean;\r\n}\r\n\r\ndeclare var IDBKeyRange: {\r\n    prototype: IDBKeyRange;\r\n    new(): IDBKeyRange;\r\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\r\n    lowerBound(lower: any, open?: boolean): IDBKeyRange;\r\n    only(value: any): IDBKeyRange;\r\n    upperBound(upper: any, open?: boolean): IDBKeyRange;\r\n}\r\n\r\ninterface IDBObjectStore {\r\n    readonly indexNames: DOMStringList;\r\n    keyPath: string | string[];\r\n    readonly name: string;\r\n    readonly transaction: IDBTransaction;\r\n    autoIncrement: boolean;\r\n    add(value: any, key?: IDBKeyRange | IDBValidKey): IDBRequest;\r\n    clear(): IDBRequest;\r\n    count(key?: IDBKeyRange | IDBValidKey): IDBRequest;\r\n    createIndex(name: string, keyPath: string | string[], optionalParameters?: IDBIndexParameters): IDBIndex;\r\n    delete(key: IDBKeyRange | IDBValidKey): IDBRequest;\r\n    deleteIndex(indexName: string): void;\r\n    get(key: any): IDBRequest;\r\n    index(name: string): IDBIndex;\r\n    openCursor(range?: IDBKeyRange | IDBValidKey, direction?: string): IDBRequest;\r\n    put(value: any, key?: IDBKeyRange | IDBValidKey): IDBRequest;\r\n}\r\n\r\ndeclare var IDBObjectStore: {\r\n    prototype: IDBObjectStore;\r\n    new(): IDBObjectStore;\r\n}\r\n\r\ninterface IDBOpenDBRequest extends IDBRequest {\r\n    onblocked: (ev: Event) => any;\r\n    onupgradeneeded: (ev: IDBVersionChangeEvent) => any;\r\n    addEventListener(type: \"blocked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"success\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"upgradeneeded\", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var IDBOpenDBRequest: {\r\n    prototype: IDBOpenDBRequest;\r\n    new(): IDBOpenDBRequest;\r\n}\r\n\r\ninterface IDBRequest extends EventTarget {\r\n    readonly error: DOMError;\r\n    onerror: (ev: Event) => any;\r\n    onsuccess: (ev: Event) => any;\r\n    readonly readyState: string;\r\n    readonly result: any;\r\n    source: IDBObjectStore | IDBIndex | IDBCursor;\r\n    readonly transaction: IDBTransaction;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"success\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var IDBRequest: {\r\n    prototype: IDBRequest;\r\n    new(): IDBRequest;\r\n}\r\n\r\ninterface IDBTransaction extends EventTarget {\r\n    readonly db: IDBDatabase;\r\n    readonly error: DOMError;\r\n    readonly mode: string;\r\n    onabort: (ev: Event) => any;\r\n    oncomplete: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    abort(): void;\r\n    objectStore(name: string): IDBObjectStore;\r\n    readonly READ_ONLY: string;\r\n    readonly READ_WRITE: string;\r\n    readonly VERSION_CHANGE: string;\r\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var IDBTransaction: {\r\n    prototype: IDBTransaction;\r\n    new(): IDBTransaction;\r\n    readonly READ_ONLY: string;\r\n    readonly READ_WRITE: string;\r\n    readonly VERSION_CHANGE: string;\r\n}\r\n\r\ninterface IDBVersionChangeEvent extends Event {\r\n    readonly newVersion: number | null;\r\n    readonly oldVersion: number;\r\n}\r\n\r\ndeclare var IDBVersionChangeEvent: {\r\n    prototype: IDBVersionChangeEvent;\r\n    new(): IDBVersionChangeEvent;\r\n}\r\n\r\ninterface ImageData {\r\n    data: Uint8ClampedArray;\r\n    readonly height: number;\r\n    readonly width: number;\r\n}\r\n\r\ndeclare var ImageData: {\r\n    prototype: ImageData;\r\n    new(width: number, height: number): ImageData;\r\n    new(array: Uint8ClampedArray, width: number, height: number): ImageData;\r\n}\r\n\r\ninterface KeyboardEvent extends UIEvent {\r\n    readonly altKey: boolean;\r\n    readonly char: string | null;\r\n    readonly charCode: number;\r\n    readonly ctrlKey: boolean;\r\n    readonly key: string;\r\n    readonly keyCode: number;\r\n    readonly locale: string;\r\n    readonly location: number;\r\n    readonly metaKey: boolean;\r\n    readonly repeat: boolean;\r\n    readonly shiftKey: boolean;\r\n    readonly which: number;\r\n    getModifierState(keyArg: string): boolean;\r\n    initKeyboardEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void;\r\n    readonly DOM_KEY_LOCATION_JOYSTICK: number;\r\n    readonly DOM_KEY_LOCATION_LEFT: number;\r\n    readonly DOM_KEY_LOCATION_MOBILE: number;\r\n    readonly DOM_KEY_LOCATION_NUMPAD: number;\r\n    readonly DOM_KEY_LOCATION_RIGHT: number;\r\n    readonly DOM_KEY_LOCATION_STANDARD: number;\r\n}\r\n\r\ndeclare var KeyboardEvent: {\r\n    prototype: KeyboardEvent;\r\n    new(typeArg: string, eventInitDict?: KeyboardEventInit): KeyboardEvent;\r\n    readonly DOM_KEY_LOCATION_JOYSTICK: number;\r\n    readonly DOM_KEY_LOCATION_LEFT: number;\r\n    readonly DOM_KEY_LOCATION_MOBILE: number;\r\n    readonly DOM_KEY_LOCATION_NUMPAD: number;\r\n    readonly DOM_KEY_LOCATION_RIGHT: number;\r\n    readonly DOM_KEY_LOCATION_STANDARD: number;\r\n}\r\n\r\ninterface ListeningStateChangedEvent extends Event {\r\n    readonly label: string;\r\n    readonly state: string;\r\n}\r\n\r\ndeclare var ListeningStateChangedEvent: {\r\n    prototype: ListeningStateChangedEvent;\r\n    new(): ListeningStateChangedEvent;\r\n}\r\n\r\ninterface Location {\r\n    hash: string;\r\n    host: string;\r\n    hostname: string;\r\n    href: string;\r\n    readonly origin: string;\r\n    pathname: string;\r\n    port: string;\r\n    protocol: string;\r\n    search: string;\r\n    assign(url: string): void;\r\n    reload(forcedReload?: boolean): void;\r\n    replace(url: string): void;\r\n    toString(): string;\r\n}\r\n\r\ndeclare var Location: {\r\n    prototype: Location;\r\n    new(): Location;\r\n}\r\n\r\ninterface LongRunningScriptDetectedEvent extends Event {\r\n    readonly executionTime: number;\r\n    stopPageScriptExecution: boolean;\r\n}\r\n\r\ndeclare var LongRunningScriptDetectedEvent: {\r\n    prototype: LongRunningScriptDetectedEvent;\r\n    new(): LongRunningScriptDetectedEvent;\r\n}\r\n\r\ninterface MSApp {\r\n    clearTemporaryWebDataAsync(): MSAppAsyncOperation;\r\n    createBlobFromRandomAccessStream(type: string, seeker: any): Blob;\r\n    createDataPackage(object: any): any;\r\n    createDataPackageFromSelection(): any;\r\n    createFileFromStorageFile(storageFile: any): File;\r\n    createStreamFromInputStream(type: string, inputStream: any): MSStream;\r\n    execAsyncAtPriority(asynchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): void;\r\n    execAtPriority(synchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): any;\r\n    getCurrentPriority(): string;\r\n    getHtmlPrintDocumentSourceAsync(htmlDoc: any): PromiseLike<any>;\r\n    getViewId(view: any): any;\r\n    isTaskScheduledAtPriorityOrHigher(priority: string): boolean;\r\n    pageHandlesAllApplicationActivations(enabled: boolean): void;\r\n    suppressSubdownloadCredentialPrompts(suppress: boolean): void;\r\n    terminateApp(exceptionObject: any): void;\r\n    readonly CURRENT: string;\r\n    readonly HIGH: string;\r\n    readonly IDLE: string;\r\n    readonly NORMAL: string;\r\n}\r\ndeclare var MSApp: MSApp;\r\n\r\ninterface MSAppAsyncOperation extends EventTarget {\r\n    readonly error: DOMError;\r\n    oncomplete: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    readonly readyState: number;\r\n    readonly result: any;\r\n    start(): void;\r\n    readonly COMPLETED: number;\r\n    readonly ERROR: number;\r\n    readonly STARTED: number;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSAppAsyncOperation: {\r\n    prototype: MSAppAsyncOperation;\r\n    new(): MSAppAsyncOperation;\r\n    readonly COMPLETED: number;\r\n    readonly ERROR: number;\r\n    readonly STARTED: number;\r\n}\r\n\r\ninterface MSAssertion {\r\n    readonly id: string;\r\n    readonly type: string;\r\n}\r\n\r\ndeclare var MSAssertion: {\r\n    prototype: MSAssertion;\r\n    new(): MSAssertion;\r\n}\r\n\r\ninterface MSBlobBuilder {\r\n    append(data: any, endings?: string): void;\r\n    getBlob(contentType?: string): Blob;\r\n}\r\n\r\ndeclare var MSBlobBuilder: {\r\n    prototype: MSBlobBuilder;\r\n    new(): MSBlobBuilder;\r\n}\r\n\r\ninterface MSCredentials {\r\n    getAssertion(challenge: string, filter?: MSCredentialFilter, params?: MSSignatureParameters): PromiseLike<MSAssertion>;\r\n    makeCredential(accountInfo: MSAccountInfo, params: MSCredentialParameters[], challenge?: string): PromiseLike<MSAssertion>;\r\n}\r\n\r\ndeclare var MSCredentials: {\r\n    prototype: MSCredentials;\r\n    new(): MSCredentials;\r\n}\r\n\r\ninterface MSFIDOCredentialAssertion extends MSAssertion {\r\n    readonly algorithm: string | Algorithm;\r\n    readonly attestation: any;\r\n    readonly publicKey: string;\r\n    readonly transportHints: string[];\r\n}\r\n\r\ndeclare var MSFIDOCredentialAssertion: {\r\n    prototype: MSFIDOCredentialAssertion;\r\n    new(): MSFIDOCredentialAssertion;\r\n}\r\n\r\ninterface MSFIDOSignature {\r\n    readonly authnrData: string;\r\n    readonly clientData: string;\r\n    readonly signature: string;\r\n}\r\n\r\ndeclare var MSFIDOSignature: {\r\n    prototype: MSFIDOSignature;\r\n    new(): MSFIDOSignature;\r\n}\r\n\r\ninterface MSFIDOSignatureAssertion extends MSAssertion {\r\n    readonly signature: MSFIDOSignature;\r\n}\r\n\r\ndeclare var MSFIDOSignatureAssertion: {\r\n    prototype: MSFIDOSignatureAssertion;\r\n    new(): MSFIDOSignatureAssertion;\r\n}\r\n\r\ninterface MSGesture {\r\n    target: Element;\r\n    addPointer(pointerId: number): void;\r\n    stop(): void;\r\n}\r\n\r\ndeclare var MSGesture: {\r\n    prototype: MSGesture;\r\n    new(): MSGesture;\r\n}\r\n\r\ninterface MSGestureEvent extends UIEvent {\r\n    readonly clientX: number;\r\n    readonly clientY: number;\r\n    readonly expansion: number;\r\n    readonly gestureObject: any;\r\n    readonly hwTimestamp: number;\r\n    readonly offsetX: number;\r\n    readonly offsetY: number;\r\n    readonly rotation: number;\r\n    readonly scale: number;\r\n    readonly screenX: number;\r\n    readonly screenY: number;\r\n    readonly translationX: number;\r\n    readonly translationY: number;\r\n    readonly velocityAngular: number;\r\n    readonly velocityExpansion: number;\r\n    readonly velocityX: number;\r\n    readonly velocityY: number;\r\n    initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;\r\n    readonly MSGESTURE_FLAG_BEGIN: number;\r\n    readonly MSGESTURE_FLAG_CANCEL: number;\r\n    readonly MSGESTURE_FLAG_END: number;\r\n    readonly MSGESTURE_FLAG_INERTIA: number;\r\n    readonly MSGESTURE_FLAG_NONE: number;\r\n}\r\n\r\ndeclare var MSGestureEvent: {\r\n    prototype: MSGestureEvent;\r\n    new(): MSGestureEvent;\r\n    readonly MSGESTURE_FLAG_BEGIN: number;\r\n    readonly MSGESTURE_FLAG_CANCEL: number;\r\n    readonly MSGESTURE_FLAG_END: number;\r\n    readonly MSGESTURE_FLAG_INERTIA: number;\r\n    readonly MSGESTURE_FLAG_NONE: number;\r\n}\r\n\r\ninterface MSGraphicsTrust {\r\n    readonly constrictionActive: boolean;\r\n    readonly status: string;\r\n}\r\n\r\ndeclare var MSGraphicsTrust: {\r\n    prototype: MSGraphicsTrust;\r\n    new(): MSGraphicsTrust;\r\n}\r\n\r\ninterface MSHTMLWebViewElement extends HTMLElement {\r\n    readonly canGoBack: boolean;\r\n    readonly canGoForward: boolean;\r\n    readonly containsFullScreenElement: boolean;\r\n    readonly documentTitle: string;\r\n    height: number;\r\n    readonly settings: MSWebViewSettings;\r\n    src: string;\r\n    width: number;\r\n    addWebAllowedObject(name: string, applicationObject: any): void;\r\n    buildLocalStreamUri(contentIdentifier: string, relativePath: string): string;\r\n    capturePreviewToBlobAsync(): MSWebViewAsyncOperation;\r\n    captureSelectedContentToDataPackageAsync(): MSWebViewAsyncOperation;\r\n    getDeferredPermissionRequestById(id: number): DeferredPermissionRequest;\r\n    getDeferredPermissionRequests(): DeferredPermissionRequest[];\r\n    goBack(): void;\r\n    goForward(): void;\r\n    invokeScriptAsync(scriptName: string, ...args: any[]): MSWebViewAsyncOperation;\r\n    navigate(uri: string): void;\r\n    navigateToLocalStreamUri(source: string, streamResolver: any): void;\r\n    navigateToString(contents: string): void;\r\n    navigateWithHttpRequestMessage(requestMessage: any): void;\r\n    refresh(): void;\r\n    stop(): void;\r\n}\r\n\r\ndeclare var MSHTMLWebViewElement: {\r\n    prototype: MSHTMLWebViewElement;\r\n    new(): MSHTMLWebViewElement;\r\n}\r\n\r\ninterface MSInputMethodContext extends EventTarget {\r\n    readonly compositionEndOffset: number;\r\n    readonly compositionStartOffset: number;\r\n    oncandidatewindowhide: (ev: Event) => any;\r\n    oncandidatewindowshow: (ev: Event) => any;\r\n    oncandidatewindowupdate: (ev: Event) => any;\r\n    readonly target: HTMLElement;\r\n    getCandidateWindowClientRect(): ClientRect;\r\n    getCompositionAlternatives(): string[];\r\n    hasComposition(): boolean;\r\n    isCandidateWindowVisible(): boolean;\r\n    addEventListener(type: \"MSCandidateWindowHide\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSCandidateWindowShow\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSCandidateWindowUpdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSInputMethodContext: {\r\n    prototype: MSInputMethodContext;\r\n    new(): MSInputMethodContext;\r\n}\r\n\r\ninterface MSManipulationEvent extends UIEvent {\r\n    readonly currentState: number;\r\n    readonly inertiaDestinationX: number;\r\n    readonly inertiaDestinationY: number;\r\n    readonly lastState: number;\r\n    initMSManipulationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, lastState: number, currentState: number): void;\r\n    readonly MS_MANIPULATION_STATE_ACTIVE: number;\r\n    readonly MS_MANIPULATION_STATE_CANCELLED: number;\r\n    readonly MS_MANIPULATION_STATE_COMMITTED: number;\r\n    readonly MS_MANIPULATION_STATE_DRAGGING: number;\r\n    readonly MS_MANIPULATION_STATE_INERTIA: number;\r\n    readonly MS_MANIPULATION_STATE_PRESELECT: number;\r\n    readonly MS_MANIPULATION_STATE_SELECTING: number;\r\n    readonly MS_MANIPULATION_STATE_STOPPED: number;\r\n}\r\n\r\ndeclare var MSManipulationEvent: {\r\n    prototype: MSManipulationEvent;\r\n    new(): MSManipulationEvent;\r\n    readonly MS_MANIPULATION_STATE_ACTIVE: number;\r\n    readonly MS_MANIPULATION_STATE_CANCELLED: number;\r\n    readonly MS_MANIPULATION_STATE_COMMITTED: number;\r\n    readonly MS_MANIPULATION_STATE_DRAGGING: number;\r\n    readonly MS_MANIPULATION_STATE_INERTIA: number;\r\n    readonly MS_MANIPULATION_STATE_PRESELECT: number;\r\n    readonly MS_MANIPULATION_STATE_SELECTING: number;\r\n    readonly MS_MANIPULATION_STATE_STOPPED: number;\r\n}\r\n\r\ninterface MSMediaKeyError {\r\n    readonly code: number;\r\n    readonly systemCode: number;\r\n    readonly MS_MEDIA_KEYERR_CLIENT: number;\r\n    readonly MS_MEDIA_KEYERR_DOMAIN: number;\r\n    readonly MS_MEDIA_KEYERR_HARDWARECHANGE: number;\r\n    readonly MS_MEDIA_KEYERR_OUTPUT: number;\r\n    readonly MS_MEDIA_KEYERR_SERVICE: number;\r\n    readonly MS_MEDIA_KEYERR_UNKNOWN: number;\r\n}\r\n\r\ndeclare var MSMediaKeyError: {\r\n    prototype: MSMediaKeyError;\r\n    new(): MSMediaKeyError;\r\n    readonly MS_MEDIA_KEYERR_CLIENT: number;\r\n    readonly MS_MEDIA_KEYERR_DOMAIN: number;\r\n    readonly MS_MEDIA_KEYERR_HARDWARECHANGE: number;\r\n    readonly MS_MEDIA_KEYERR_OUTPUT: number;\r\n    readonly MS_MEDIA_KEYERR_SERVICE: number;\r\n    readonly MS_MEDIA_KEYERR_UNKNOWN: number;\r\n}\r\n\r\ninterface MSMediaKeyMessageEvent extends Event {\r\n    readonly destinationURL: string | null;\r\n    readonly message: Uint8Array;\r\n}\r\n\r\ndeclare var MSMediaKeyMessageEvent: {\r\n    prototype: MSMediaKeyMessageEvent;\r\n    new(): MSMediaKeyMessageEvent;\r\n}\r\n\r\ninterface MSMediaKeyNeededEvent extends Event {\r\n    readonly initData: Uint8Array | null;\r\n}\r\n\r\ndeclare var MSMediaKeyNeededEvent: {\r\n    prototype: MSMediaKeyNeededEvent;\r\n    new(): MSMediaKeyNeededEvent;\r\n}\r\n\r\ninterface MSMediaKeySession extends EventTarget {\r\n    readonly error: MSMediaKeyError | null;\r\n    readonly keySystem: string;\r\n    readonly sessionId: string;\r\n    close(): void;\r\n    update(key: Uint8Array): void;\r\n}\r\n\r\ndeclare var MSMediaKeySession: {\r\n    prototype: MSMediaKeySession;\r\n    new(): MSMediaKeySession;\r\n}\r\n\r\ninterface MSMediaKeys {\r\n    readonly keySystem: string;\r\n    createSession(type: string, initData: Uint8Array, cdmData?: Uint8Array): MSMediaKeySession;\r\n}\r\n\r\ndeclare var MSMediaKeys: {\r\n    prototype: MSMediaKeys;\r\n    new(keySystem: string): MSMediaKeys;\r\n    isTypeSupported(keySystem: string, type?: string): boolean;\r\n    isTypeSupportedWithFeatures(keySystem: string, type?: string): string;\r\n}\r\n\r\ninterface MSPointerEvent extends MouseEvent {\r\n    readonly currentPoint: any;\r\n    readonly height: number;\r\n    readonly hwTimestamp: number;\r\n    readonly intermediatePoints: any;\r\n    readonly isPrimary: boolean;\r\n    readonly pointerId: number;\r\n    readonly pointerType: any;\r\n    readonly pressure: number;\r\n    readonly rotation: number;\r\n    readonly tiltX: number;\r\n    readonly tiltY: number;\r\n    readonly width: number;\r\n    getCurrentPoint(element: Element): void;\r\n    getIntermediatePoints(element: Element): void;\r\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\r\n}\r\n\r\ndeclare var MSPointerEvent: {\r\n    prototype: MSPointerEvent;\r\n    new(typeArg: string, eventInitDict?: PointerEventInit): MSPointerEvent;\r\n}\r\n\r\ninterface MSRangeCollection {\r\n    readonly length: number;\r\n    item(index: number): Range;\r\n    [index: number]: Range;\r\n}\r\n\r\ndeclare var MSRangeCollection: {\r\n    prototype: MSRangeCollection;\r\n    new(): MSRangeCollection;\r\n}\r\n\r\ninterface MSSiteModeEvent extends Event {\r\n    readonly actionURL: string;\r\n    readonly buttonID: number;\r\n}\r\n\r\ndeclare var MSSiteModeEvent: {\r\n    prototype: MSSiteModeEvent;\r\n    new(): MSSiteModeEvent;\r\n}\r\n\r\ninterface MSStream {\r\n    readonly type: string;\r\n    msClose(): void;\r\n    msDetachStream(): any;\r\n}\r\n\r\ndeclare var MSStream: {\r\n    prototype: MSStream;\r\n    new(): MSStream;\r\n}\r\n\r\ninterface MSStreamReader extends EventTarget, MSBaseReader {\r\n    readonly error: DOMError;\r\n    readAsArrayBuffer(stream: MSStream, size?: number): void;\r\n    readAsBinaryString(stream: MSStream, size?: number): void;\r\n    readAsBlob(stream: MSStream, size?: number): void;\r\n    readAsDataURL(stream: MSStream, size?: number): void;\r\n    readAsText(stream: MSStream, encoding?: string, size?: number): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSStreamReader: {\r\n    prototype: MSStreamReader;\r\n    new(): MSStreamReader;\r\n}\r\n\r\ninterface MSWebViewAsyncOperation extends EventTarget {\r\n    readonly error: DOMError;\r\n    oncomplete: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    readonly readyState: number;\r\n    readonly result: any;\r\n    readonly target: MSHTMLWebViewElement;\r\n    readonly type: number;\r\n    start(): void;\r\n    readonly COMPLETED: number;\r\n    readonly ERROR: number;\r\n    readonly STARTED: number;\r\n    readonly TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\r\n    readonly TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\r\n    readonly TYPE_INVOKE_SCRIPT: number;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MSWebViewAsyncOperation: {\r\n    prototype: MSWebViewAsyncOperation;\r\n    new(): MSWebViewAsyncOperation;\r\n    readonly COMPLETED: number;\r\n    readonly ERROR: number;\r\n    readonly STARTED: number;\r\n    readonly TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\r\n    readonly TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\r\n    readonly TYPE_INVOKE_SCRIPT: number;\r\n}\r\n\r\ninterface MSWebViewSettings {\r\n    isIndexedDBEnabled: boolean;\r\n    isJavaScriptEnabled: boolean;\r\n}\r\n\r\ndeclare var MSWebViewSettings: {\r\n    prototype: MSWebViewSettings;\r\n    new(): MSWebViewSettings;\r\n}\r\n\r\ninterface MediaDeviceInfo {\r\n    readonly deviceId: string;\r\n    readonly groupId: string;\r\n    readonly kind: string;\r\n    readonly label: string;\r\n}\r\n\r\ndeclare var MediaDeviceInfo: {\r\n    prototype: MediaDeviceInfo;\r\n    new(): MediaDeviceInfo;\r\n}\r\n\r\ninterface MediaDevices extends EventTarget {\r\n    ondevicechange: (ev: Event) => any;\r\n    enumerateDevices(): any;\r\n    getSupportedConstraints(): MediaTrackSupportedConstraints;\r\n    getUserMedia(constraints: MediaStreamConstraints): PromiseLike<MediaStream>;\r\n    addEventListener(type: \"devicechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MediaDevices: {\r\n    prototype: MediaDevices;\r\n    new(): MediaDevices;\r\n}\r\n\r\ninterface MediaElementAudioSourceNode extends AudioNode {\r\n}\r\n\r\ndeclare var MediaElementAudioSourceNode: {\r\n    prototype: MediaElementAudioSourceNode;\r\n    new(): MediaElementAudioSourceNode;\r\n}\r\n\r\ninterface MediaEncryptedEvent extends Event {\r\n    readonly initData: ArrayBuffer | null;\r\n    readonly initDataType: string;\r\n}\r\n\r\ndeclare var MediaEncryptedEvent: {\r\n    prototype: MediaEncryptedEvent;\r\n    new(type: string, eventInitDict?: MediaEncryptedEventInit): MediaEncryptedEvent;\r\n}\r\n\r\ninterface MediaError {\r\n    readonly code: number;\r\n    readonly msExtendedCode: number;\r\n    readonly MEDIA_ERR_ABORTED: number;\r\n    readonly MEDIA_ERR_DECODE: number;\r\n    readonly MEDIA_ERR_NETWORK: number;\r\n    readonly MEDIA_ERR_SRC_NOT_SUPPORTED: number;\r\n    readonly MS_MEDIA_ERR_ENCRYPTED: number;\r\n}\r\n\r\ndeclare var MediaError: {\r\n    prototype: MediaError;\r\n    new(): MediaError;\r\n    readonly MEDIA_ERR_ABORTED: number;\r\n    readonly MEDIA_ERR_DECODE: number;\r\n    readonly MEDIA_ERR_NETWORK: number;\r\n    readonly MEDIA_ERR_SRC_NOT_SUPPORTED: number;\r\n    readonly MS_MEDIA_ERR_ENCRYPTED: number;\r\n}\r\n\r\ninterface MediaKeyMessageEvent extends Event {\r\n    readonly message: ArrayBuffer;\r\n    readonly messageType: string;\r\n}\r\n\r\ndeclare var MediaKeyMessageEvent: {\r\n    prototype: MediaKeyMessageEvent;\r\n    new(type: string, eventInitDict?: MediaKeyMessageEventInit): MediaKeyMessageEvent;\r\n}\r\n\r\ninterface MediaKeySession extends EventTarget {\r\n    readonly closed: PromiseLike<void>;\r\n    readonly expiration: number;\r\n    readonly keyStatuses: MediaKeyStatusMap;\r\n    readonly sessionId: string;\r\n    close(): PromiseLike<void>;\r\n    generateRequest(initDataType: string, initData: any): PromiseLike<void>;\r\n    load(sessionId: string): PromiseLike<boolean>;\r\n    remove(): PromiseLike<void>;\r\n    update(response: any): PromiseLike<void>;\r\n}\r\n\r\ndeclare var MediaKeySession: {\r\n    prototype: MediaKeySession;\r\n    new(): MediaKeySession;\r\n}\r\n\r\ninterface MediaKeyStatusMap {\r\n    readonly size: number;\r\n    forEach(callback: ForEachCallback): void;\r\n    get(keyId: any): string;\r\n    has(keyId: any): boolean;\r\n}\r\n\r\ndeclare var MediaKeyStatusMap: {\r\n    prototype: MediaKeyStatusMap;\r\n    new(): MediaKeyStatusMap;\r\n}\r\n\r\ninterface MediaKeySystemAccess {\r\n    readonly keySystem: string;\r\n    createMediaKeys(): PromiseLike<MediaKeys>;\r\n    getConfiguration(): MediaKeySystemConfiguration;\r\n}\r\n\r\ndeclare var MediaKeySystemAccess: {\r\n    prototype: MediaKeySystemAccess;\r\n    new(): MediaKeySystemAccess;\r\n}\r\n\r\ninterface MediaKeys {\r\n    createSession(sessionType?: string): MediaKeySession;\r\n    setServerCertificate(serverCertificate: any): PromiseLike<void>;\r\n}\r\n\r\ndeclare var MediaKeys: {\r\n    prototype: MediaKeys;\r\n    new(): MediaKeys;\r\n}\r\n\r\ninterface MediaList {\r\n    readonly length: number;\r\n    mediaText: string;\r\n    appendMedium(newMedium: string): void;\r\n    deleteMedium(oldMedium: string): void;\r\n    item(index: number): string;\r\n    toString(): string;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var MediaList: {\r\n    prototype: MediaList;\r\n    new(): MediaList;\r\n}\r\n\r\ninterface MediaQueryList {\r\n    readonly matches: boolean;\r\n    readonly media: string;\r\n    addListener(listener: MediaQueryListListener): void;\r\n    removeListener(listener: MediaQueryListListener): void;\r\n}\r\n\r\ndeclare var MediaQueryList: {\r\n    prototype: MediaQueryList;\r\n    new(): MediaQueryList;\r\n}\r\n\r\ninterface MediaSource extends EventTarget {\r\n    readonly activeSourceBuffers: SourceBufferList;\r\n    duration: number;\r\n    readonly readyState: string;\r\n    readonly sourceBuffers: SourceBufferList;\r\n    addSourceBuffer(type: string): SourceBuffer;\r\n    endOfStream(error?: number): void;\r\n    removeSourceBuffer(sourceBuffer: SourceBuffer): void;\r\n}\r\n\r\ndeclare var MediaSource: {\r\n    prototype: MediaSource;\r\n    new(): MediaSource;\r\n    isTypeSupported(type: string): boolean;\r\n}\r\n\r\ninterface MediaStream extends EventTarget {\r\n    readonly active: boolean;\r\n    readonly id: string;\r\n    onactive: (ev: Event) => any;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    oninactive: (ev: Event) => any;\r\n    onremovetrack: (ev: TrackEvent) => any;\r\n    addTrack(track: MediaStreamTrack): void;\r\n    clone(): MediaStream;\r\n    getAudioTracks(): MediaStreamTrack[];\r\n    getTrackById(trackId: string): MediaStreamTrack | null;\r\n    getTracks(): MediaStreamTrack[];\r\n    getVideoTracks(): MediaStreamTrack[];\r\n    removeTrack(track: MediaStreamTrack): void;\r\n    stop(): void;\r\n    addEventListener(type: \"active\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"inactive\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"removetrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MediaStream: {\r\n    prototype: MediaStream;\r\n    new(streamOrTracks?: MediaStream | MediaStreamTrack[]): MediaStream;\r\n}\r\n\r\ninterface MediaStreamAudioSourceNode extends AudioNode {\r\n}\r\n\r\ndeclare var MediaStreamAudioSourceNode: {\r\n    prototype: MediaStreamAudioSourceNode;\r\n    new(): MediaStreamAudioSourceNode;\r\n}\r\n\r\ninterface MediaStreamError {\r\n    readonly constraintName: string | null;\r\n    readonly message: string | null;\r\n    readonly name: string;\r\n}\r\n\r\ndeclare var MediaStreamError: {\r\n    prototype: MediaStreamError;\r\n    new(): MediaStreamError;\r\n}\r\n\r\ninterface MediaStreamErrorEvent extends Event {\r\n    readonly error: MediaStreamError | null;\r\n}\r\n\r\ndeclare var MediaStreamErrorEvent: {\r\n    prototype: MediaStreamErrorEvent;\r\n    new(type: string, eventInitDict?: MediaStreamErrorEventInit): MediaStreamErrorEvent;\r\n}\r\n\r\ninterface MediaStreamTrack extends EventTarget {\r\n    enabled: boolean;\r\n    readonly id: string;\r\n    readonly kind: string;\r\n    readonly label: string;\r\n    readonly muted: boolean;\r\n    onended: (ev: MediaStreamErrorEvent) => any;\r\n    onmute: (ev: Event) => any;\r\n    onoverconstrained: (ev: MediaStreamErrorEvent) => any;\r\n    onunmute: (ev: Event) => any;\r\n    readonly readonly: boolean;\r\n    readonly readyState: string;\r\n    readonly remote: boolean;\r\n    applyConstraints(constraints: MediaTrackConstraints): PromiseLike<void>;\r\n    clone(): MediaStreamTrack;\r\n    getCapabilities(): MediaTrackCapabilities;\r\n    getConstraints(): MediaTrackConstraints;\r\n    getSettings(): MediaTrackSettings;\r\n    stop(): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mute\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"overconstrained\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unmute\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MediaStreamTrack: {\r\n    prototype: MediaStreamTrack;\r\n    new(): MediaStreamTrack;\r\n}\r\n\r\ninterface MediaStreamTrackEvent extends Event {\r\n    readonly track: MediaStreamTrack;\r\n}\r\n\r\ndeclare var MediaStreamTrackEvent: {\r\n    prototype: MediaStreamTrackEvent;\r\n    new(type: string, eventInitDict?: MediaStreamTrackEventInit): MediaStreamTrackEvent;\r\n}\r\n\r\ninterface MessageChannel {\r\n    readonly port1: MessagePort;\r\n    readonly port2: MessagePort;\r\n}\r\n\r\ndeclare var MessageChannel: {\r\n    prototype: MessageChannel;\r\n    new(): MessageChannel;\r\n}\r\n\r\ninterface MessageEvent extends Event {\r\n    readonly data: any;\r\n    readonly origin: string;\r\n    readonly ports: any;\r\n    readonly source: Window;\r\n    initMessageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, dataArg: any, originArg: string, lastEventIdArg: string, sourceArg: Window): void;\r\n}\r\n\r\ndeclare var MessageEvent: {\r\n    prototype: MessageEvent;\r\n    new(type: string, eventInitDict?: MessageEventInit): MessageEvent;\r\n}\r\n\r\ninterface MessagePort extends EventTarget {\r\n    onmessage: (ev: MessageEvent) => any;\r\n    close(): void;\r\n    postMessage(message?: any, ports?: any): void;\r\n    start(): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var MessagePort: {\r\n    prototype: MessagePort;\r\n    new(): MessagePort;\r\n}\r\n\r\ninterface MimeType {\r\n    readonly description: string;\r\n    readonly enabledPlugin: Plugin;\r\n    readonly suffixes: string;\r\n    readonly type: string;\r\n}\r\n\r\ndeclare var MimeType: {\r\n    prototype: MimeType;\r\n    new(): MimeType;\r\n}\r\n\r\ninterface MimeTypeArray {\r\n    readonly length: number;\r\n    item(index: number): Plugin;\r\n    namedItem(type: string): Plugin;\r\n    [index: number]: Plugin;\r\n}\r\n\r\ndeclare var MimeTypeArray: {\r\n    prototype: MimeTypeArray;\r\n    new(): MimeTypeArray;\r\n}\r\n\r\ninterface MouseEvent extends UIEvent {\r\n    readonly altKey: boolean;\r\n    readonly button: number;\r\n    readonly buttons: number;\r\n    readonly clientX: number;\r\n    readonly clientY: number;\r\n    readonly ctrlKey: boolean;\r\n    readonly fromElement: Element;\r\n    readonly layerX: number;\r\n    readonly layerY: number;\r\n    readonly metaKey: boolean;\r\n    readonly movementX: number;\r\n    readonly movementY: number;\r\n    readonly offsetX: number;\r\n    readonly offsetY: number;\r\n    readonly pageX: number;\r\n    readonly pageY: number;\r\n    readonly relatedTarget: EventTarget;\r\n    readonly screenX: number;\r\n    readonly screenY: number;\r\n    readonly shiftKey: boolean;\r\n    readonly toElement: Element;\r\n    readonly which: number;\r\n    readonly x: number;\r\n    readonly y: number;\r\n    getModifierState(keyArg: string): boolean;\r\n    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget): void;\r\n}\r\n\r\ndeclare var MouseEvent: {\r\n    prototype: MouseEvent;\r\n    new(typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\r\n}\r\n\r\ninterface MutationEvent extends Event {\r\n    readonly attrChange: number;\r\n    readonly attrName: string;\r\n    readonly newValue: string;\r\n    readonly prevValue: string;\r\n    readonly relatedNode: Node;\r\n    initMutationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;\r\n    readonly ADDITION: number;\r\n    readonly MODIFICATION: number;\r\n    readonly REMOVAL: number;\r\n}\r\n\r\ndeclare var MutationEvent: {\r\n    prototype: MutationEvent;\r\n    new(): MutationEvent;\r\n    readonly ADDITION: number;\r\n    readonly MODIFICATION: number;\r\n    readonly REMOVAL: number;\r\n}\r\n\r\ninterface MutationObserver {\r\n    disconnect(): void;\r\n    observe(target: Node, options: MutationObserverInit): void;\r\n    takeRecords(): MutationRecord[];\r\n}\r\n\r\ndeclare var MutationObserver: {\r\n    prototype: MutationObserver;\r\n    new(callback: MutationCallback): MutationObserver;\r\n}\r\n\r\ninterface MutationRecord {\r\n    readonly addedNodes: NodeList;\r\n    readonly attributeName: string | null;\r\n    readonly attributeNamespace: string | null;\r\n    readonly nextSibling: Node | null;\r\n    readonly oldValue: string | null;\r\n    readonly previousSibling: Node | null;\r\n    readonly removedNodes: NodeList;\r\n    readonly target: Node;\r\n    readonly type: string;\r\n}\r\n\r\ndeclare var MutationRecord: {\r\n    prototype: MutationRecord;\r\n    new(): MutationRecord;\r\n}\r\n\r\ninterface NamedNodeMap {\r\n    readonly length: number;\r\n    getNamedItem(name: string): Attr;\r\n    getNamedItemNS(namespaceURI: string | null, localName: string | null): Attr;\r\n    item(index: number): Attr;\r\n    removeNamedItem(name: string): Attr;\r\n    removeNamedItemNS(namespaceURI: string | null, localName: string | null): Attr;\r\n    setNamedItem(arg: Attr): Attr;\r\n    setNamedItemNS(arg: Attr): Attr;\r\n    [index: number]: Attr;\r\n}\r\n\r\ndeclare var NamedNodeMap: {\r\n    prototype: NamedNodeMap;\r\n    new(): NamedNodeMap;\r\n}\r\n\r\ninterface NavigationCompletedEvent extends NavigationEvent {\r\n    readonly isSuccess: boolean;\r\n    readonly webErrorStatus: number;\r\n}\r\n\r\ndeclare var NavigationCompletedEvent: {\r\n    prototype: NavigationCompletedEvent;\r\n    new(): NavigationCompletedEvent;\r\n}\r\n\r\ninterface NavigationEvent extends Event {\r\n    readonly uri: string;\r\n}\r\n\r\ndeclare var NavigationEvent: {\r\n    prototype: NavigationEvent;\r\n    new(): NavigationEvent;\r\n}\r\n\r\ninterface NavigationEventWithReferrer extends NavigationEvent {\r\n    readonly referer: string;\r\n}\r\n\r\ndeclare var NavigationEventWithReferrer: {\r\n    prototype: NavigationEventWithReferrer;\r\n    new(): NavigationEventWithReferrer;\r\n}\r\n\r\ninterface Navigator extends Object, NavigatorID, NavigatorOnLine, NavigatorContentUtils, NavigatorStorageUtils, NavigatorGeolocation, MSNavigatorDoNotTrack, MSFileSaver, NavigatorUserMedia {\r\n    readonly appCodeName: string;\r\n    readonly cookieEnabled: boolean;\r\n    readonly language: string;\r\n    readonly maxTouchPoints: number;\r\n    readonly mimeTypes: MimeTypeArray;\r\n    readonly msManipulationViewsEnabled: boolean;\r\n    readonly msMaxTouchPoints: number;\r\n    readonly msPointerEnabled: boolean;\r\n    readonly plugins: PluginArray;\r\n    readonly pointerEnabled: boolean;\r\n    readonly webdriver: boolean;\r\n    getGamepads(): Gamepad[];\r\n    javaEnabled(): boolean;\r\n    msLaunchUri(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback): void;\r\n    requestMediaKeySystemAccess(keySystem: string, supportedConfigurations: MediaKeySystemConfiguration[]): PromiseLike<MediaKeySystemAccess>;\r\n    vibrate(pattern: number | number[]): boolean;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Navigator: {\r\n    prototype: Navigator;\r\n    new(): Navigator;\r\n}\r\n\r\ninterface Node extends EventTarget {\r\n    readonly attributes: NamedNodeMap;\r\n    readonly baseURI: string | null;\r\n    readonly childNodes: NodeList;\r\n    readonly firstChild: Node;\r\n    readonly lastChild: Node;\r\n    readonly localName: string | null;\r\n    readonly namespaceURI: string | null;\r\n    readonly nextSibling: Node;\r\n    readonly nodeName: string;\r\n    readonly nodeType: number;\r\n    nodeValue: string | null;\r\n    readonly ownerDocument: Document;\r\n    readonly parentElement: HTMLElement;\r\n    readonly parentNode: Node;\r\n    readonly previousSibling: Node;\r\n    textContent: string | null;\r\n    appendChild(newChild: Node): Node;\r\n    cloneNode(deep?: boolean): Node;\r\n    compareDocumentPosition(other: Node): number;\r\n    contains(child: Node): boolean;\r\n    hasAttributes(): boolean;\r\n    hasChildNodes(): boolean;\r\n    insertBefore(newChild: Node, refChild: Node): Node;\r\n    isDefaultNamespace(namespaceURI: string | null): boolean;\r\n    isEqualNode(arg: Node): boolean;\r\n    isSameNode(other: Node): boolean;\r\n    lookupNamespaceURI(prefix: string | null): string | null;\r\n    lookupPrefix(namespaceURI: string | null): string | null;\r\n    normalize(): void;\r\n    removeChild(oldChild: Node): Node;\r\n    replaceChild(newChild: Node, oldChild: Node): Node;\r\n    contains(node: Node): boolean;\r\n    readonly ATTRIBUTE_NODE: number;\r\n    readonly CDATA_SECTION_NODE: number;\r\n    readonly COMMENT_NODE: number;\r\n    readonly DOCUMENT_FRAGMENT_NODE: number;\r\n    readonly DOCUMENT_NODE: number;\r\n    readonly DOCUMENT_POSITION_CONTAINED_BY: number;\r\n    readonly DOCUMENT_POSITION_CONTAINS: number;\r\n    readonly DOCUMENT_POSITION_DISCONNECTED: number;\r\n    readonly DOCUMENT_POSITION_FOLLOWING: number;\r\n    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\r\n    readonly DOCUMENT_POSITION_PRECEDING: number;\r\n    readonly DOCUMENT_TYPE_NODE: number;\r\n    readonly ELEMENT_NODE: number;\r\n    readonly ENTITY_NODE: number;\r\n    readonly ENTITY_REFERENCE_NODE: number;\r\n    readonly NOTATION_NODE: number;\r\n    readonly PROCESSING_INSTRUCTION_NODE: number;\r\n    readonly TEXT_NODE: number;\r\n}\r\n\r\ndeclare var Node: {\r\n    prototype: Node;\r\n    new(): Node;\r\n    readonly ATTRIBUTE_NODE: number;\r\n    readonly CDATA_SECTION_NODE: number;\r\n    readonly COMMENT_NODE: number;\r\n    readonly DOCUMENT_FRAGMENT_NODE: number;\r\n    readonly DOCUMENT_NODE: number;\r\n    readonly DOCUMENT_POSITION_CONTAINED_BY: number;\r\n    readonly DOCUMENT_POSITION_CONTAINS: number;\r\n    readonly DOCUMENT_POSITION_DISCONNECTED: number;\r\n    readonly DOCUMENT_POSITION_FOLLOWING: number;\r\n    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\r\n    readonly DOCUMENT_POSITION_PRECEDING: number;\r\n    readonly DOCUMENT_TYPE_NODE: number;\r\n    readonly ELEMENT_NODE: number;\r\n    readonly ENTITY_NODE: number;\r\n    readonly ENTITY_REFERENCE_NODE: number;\r\n    readonly NOTATION_NODE: number;\r\n    readonly PROCESSING_INSTRUCTION_NODE: number;\r\n    readonly TEXT_NODE: number;\r\n}\r\n\r\ninterface NodeFilter {\r\n    acceptNode(n: Node): number;\r\n}\r\n\r\ndeclare var NodeFilter: {\r\n    readonly FILTER_ACCEPT: number;\r\n    readonly FILTER_REJECT: number;\r\n    readonly FILTER_SKIP: number;\r\n    readonly SHOW_ALL: number;\r\n    readonly SHOW_ATTRIBUTE: number;\r\n    readonly SHOW_CDATA_SECTION: number;\r\n    readonly SHOW_COMMENT: number;\r\n    readonly SHOW_DOCUMENT: number;\r\n    readonly SHOW_DOCUMENT_FRAGMENT: number;\r\n    readonly SHOW_DOCUMENT_TYPE: number;\r\n    readonly SHOW_ELEMENT: number;\r\n    readonly SHOW_ENTITY: number;\r\n    readonly SHOW_ENTITY_REFERENCE: number;\r\n    readonly SHOW_NOTATION: number;\r\n    readonly SHOW_PROCESSING_INSTRUCTION: number;\r\n    readonly SHOW_TEXT: number;\r\n}\r\n\r\ninterface NodeIterator {\r\n    readonly expandEntityReferences: boolean;\r\n    readonly filter: NodeFilter;\r\n    readonly root: Node;\r\n    readonly whatToShow: number;\r\n    detach(): void;\r\n    nextNode(): Node;\r\n    previousNode(): Node;\r\n}\r\n\r\ndeclare var NodeIterator: {\r\n    prototype: NodeIterator;\r\n    new(): NodeIterator;\r\n}\r\n\r\ninterface NodeList {\r\n    readonly length: number;\r\n    item(index: number): Node;\r\n    [index: number]: Node;\r\n}\r\n\r\ndeclare var NodeList: {\r\n    prototype: NodeList;\r\n    new(): NodeList;\r\n}\r\n\r\ninterface OES_element_index_uint {\r\n}\r\n\r\ndeclare var OES_element_index_uint: {\r\n    prototype: OES_element_index_uint;\r\n    new(): OES_element_index_uint;\r\n}\r\n\r\ninterface OES_standard_derivatives {\r\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\r\n}\r\n\r\ndeclare var OES_standard_derivatives: {\r\n    prototype: OES_standard_derivatives;\r\n    new(): OES_standard_derivatives;\r\n    readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\r\n}\r\n\r\ninterface OES_texture_float {\r\n}\r\n\r\ndeclare var OES_texture_float: {\r\n    prototype: OES_texture_float;\r\n    new(): OES_texture_float;\r\n}\r\n\r\ninterface OES_texture_float_linear {\r\n}\r\n\r\ndeclare var OES_texture_float_linear: {\r\n    prototype: OES_texture_float_linear;\r\n    new(): OES_texture_float_linear;\r\n}\r\n\r\ninterface OfflineAudioCompletionEvent extends Event {\r\n    readonly renderedBuffer: AudioBuffer;\r\n}\r\n\r\ndeclare var OfflineAudioCompletionEvent: {\r\n    prototype: OfflineAudioCompletionEvent;\r\n    new(): OfflineAudioCompletionEvent;\r\n}\r\n\r\ninterface OfflineAudioContext extends AudioContext {\r\n    oncomplete: (ev: Event) => any;\r\n    startRendering(): PromiseLike<AudioBuffer>;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var OfflineAudioContext: {\r\n    prototype: OfflineAudioContext;\r\n    new(numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext;\r\n}\r\n\r\ninterface OscillatorNode extends AudioNode {\r\n    readonly detune: AudioParam;\r\n    readonly frequency: AudioParam;\r\n    onended: (ev: MediaStreamErrorEvent) => any;\r\n    type: string;\r\n    setPeriodicWave(periodicWave: PeriodicWave): void;\r\n    start(when?: number): void;\r\n    stop(when?: number): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var OscillatorNode: {\r\n    prototype: OscillatorNode;\r\n    new(): OscillatorNode;\r\n}\r\n\r\ninterface OverflowEvent extends UIEvent {\r\n    readonly horizontalOverflow: boolean;\r\n    readonly orient: number;\r\n    readonly verticalOverflow: boolean;\r\n    readonly BOTH: number;\r\n    readonly HORIZONTAL: number;\r\n    readonly VERTICAL: number;\r\n}\r\n\r\ndeclare var OverflowEvent: {\r\n    prototype: OverflowEvent;\r\n    new(): OverflowEvent;\r\n    readonly BOTH: number;\r\n    readonly HORIZONTAL: number;\r\n    readonly VERTICAL: number;\r\n}\r\n\r\ninterface PageTransitionEvent extends Event {\r\n    readonly persisted: boolean;\r\n}\r\n\r\ndeclare var PageTransitionEvent: {\r\n    prototype: PageTransitionEvent;\r\n    new(): PageTransitionEvent;\r\n}\r\n\r\ninterface PannerNode extends AudioNode {\r\n    coneInnerAngle: number;\r\n    coneOuterAngle: number;\r\n    coneOuterGain: number;\r\n    distanceModel: string;\r\n    maxDistance: number;\r\n    panningModel: string;\r\n    refDistance: number;\r\n    rolloffFactor: number;\r\n    setOrientation(x: number, y: number, z: number): void;\r\n    setPosition(x: number, y: number, z: number): void;\r\n    setVelocity(x: number, y: number, z: number): void;\r\n}\r\n\r\ndeclare var PannerNode: {\r\n    prototype: PannerNode;\r\n    new(): PannerNode;\r\n}\r\n\r\ninterface PerfWidgetExternal {\r\n    readonly activeNetworkRequestCount: number;\r\n    readonly averageFrameTime: number;\r\n    readonly averagePaintTime: number;\r\n    readonly extraInformationEnabled: boolean;\r\n    readonly independentRenderingEnabled: boolean;\r\n    readonly irDisablingContentString: string;\r\n    readonly irStatusAvailable: boolean;\r\n    readonly maxCpuSpeed: number;\r\n    readonly paintRequestsPerSecond: number;\r\n    readonly performanceCounter: number;\r\n    readonly performanceCounterFrequency: number;\r\n    addEventListener(eventType: string, callback: Function): void;\r\n    getMemoryUsage(): number;\r\n    getProcessCpuUsage(): number;\r\n    getRecentCpuUsage(last: number | null): any;\r\n    getRecentFrames(last: number | null): any;\r\n    getRecentMemoryUsage(last: number | null): any;\r\n    getRecentPaintRequests(last: number | null): any;\r\n    removeEventListener(eventType: string, callback: Function): void;\r\n    repositionWindow(x: number, y: number): void;\r\n    resizeWindow(width: number, height: number): void;\r\n}\r\n\r\ndeclare var PerfWidgetExternal: {\r\n    prototype: PerfWidgetExternal;\r\n    new(): PerfWidgetExternal;\r\n}\r\n\r\ninterface Performance {\r\n    readonly navigation: PerformanceNavigation;\r\n    readonly timing: PerformanceTiming;\r\n    clearMarks(markName?: string): void;\r\n    clearMeasures(measureName?: string): void;\r\n    clearResourceTimings(): void;\r\n    getEntries(): any;\r\n    getEntriesByName(name: string, entryType?: string): any;\r\n    getEntriesByType(entryType: string): any;\r\n    getMarks(markName?: string): any;\r\n    getMeasures(measureName?: string): any;\r\n    mark(markName: string): void;\r\n    measure(measureName: string, startMarkName?: string, endMarkName?: string): void;\r\n    now(): number;\r\n    setResourceTimingBufferSize(maxSize: number): void;\r\n    toJSON(): any;\r\n}\r\n\r\ndeclare var Performance: {\r\n    prototype: Performance;\r\n    new(): Performance;\r\n}\r\n\r\ninterface PerformanceEntry {\r\n    readonly duration: number;\r\n    readonly entryType: string;\r\n    readonly name: string;\r\n    readonly startTime: number;\r\n}\r\n\r\ndeclare var PerformanceEntry: {\r\n    prototype: PerformanceEntry;\r\n    new(): PerformanceEntry;\r\n}\r\n\r\ninterface PerformanceMark extends PerformanceEntry {\r\n}\r\n\r\ndeclare var PerformanceMark: {\r\n    prototype: PerformanceMark;\r\n    new(): PerformanceMark;\r\n}\r\n\r\ninterface PerformanceMeasure extends PerformanceEntry {\r\n}\r\n\r\ndeclare var PerformanceMeasure: {\r\n    prototype: PerformanceMeasure;\r\n    new(): PerformanceMeasure;\r\n}\r\n\r\ninterface PerformanceNavigation {\r\n    readonly redirectCount: number;\r\n    readonly type: number;\r\n    toJSON(): any;\r\n    readonly TYPE_BACK_FORWARD: number;\r\n    readonly TYPE_NAVIGATE: number;\r\n    readonly TYPE_RELOAD: number;\r\n    readonly TYPE_RESERVED: number;\r\n}\r\n\r\ndeclare var PerformanceNavigation: {\r\n    prototype: PerformanceNavigation;\r\n    new(): PerformanceNavigation;\r\n    readonly TYPE_BACK_FORWARD: number;\r\n    readonly TYPE_NAVIGATE: number;\r\n    readonly TYPE_RELOAD: number;\r\n    readonly TYPE_RESERVED: number;\r\n}\r\n\r\ninterface PerformanceNavigationTiming extends PerformanceEntry {\r\n    readonly connectEnd: number;\r\n    readonly connectStart: number;\r\n    readonly domComplete: number;\r\n    readonly domContentLoadedEventEnd: number;\r\n    readonly domContentLoadedEventStart: number;\r\n    readonly domInteractive: number;\r\n    readonly domLoading: number;\r\n    readonly domainLookupEnd: number;\r\n    readonly domainLookupStart: number;\r\n    readonly fetchStart: number;\r\n    readonly loadEventEnd: number;\r\n    readonly loadEventStart: number;\r\n    readonly navigationStart: number;\r\n    readonly redirectCount: number;\r\n    readonly redirectEnd: number;\r\n    readonly redirectStart: number;\r\n    readonly requestStart: number;\r\n    readonly responseEnd: number;\r\n    readonly responseStart: number;\r\n    readonly type: string;\r\n    readonly unloadEventEnd: number;\r\n    readonly unloadEventStart: number;\r\n}\r\n\r\ndeclare var PerformanceNavigationTiming: {\r\n    prototype: PerformanceNavigationTiming;\r\n    new(): PerformanceNavigationTiming;\r\n}\r\n\r\ninterface PerformanceResourceTiming extends PerformanceEntry {\r\n    readonly connectEnd: number;\r\n    readonly connectStart: number;\r\n    readonly domainLookupEnd: number;\r\n    readonly domainLookupStart: number;\r\n    readonly fetchStart: number;\r\n    readonly initiatorType: string;\r\n    readonly redirectEnd: number;\r\n    readonly redirectStart: number;\r\n    readonly requestStart: number;\r\n    readonly responseEnd: number;\r\n    readonly responseStart: number;\r\n}\r\n\r\ndeclare var PerformanceResourceTiming: {\r\n    prototype: PerformanceResourceTiming;\r\n    new(): PerformanceResourceTiming;\r\n}\r\n\r\ninterface PerformanceTiming {\r\n    readonly connectEnd: number;\r\n    readonly connectStart: number;\r\n    readonly domComplete: number;\r\n    readonly domContentLoadedEventEnd: number;\r\n    readonly domContentLoadedEventStart: number;\r\n    readonly domInteractive: number;\r\n    readonly domLoading: number;\r\n    readonly domainLookupEnd: number;\r\n    readonly domainLookupStart: number;\r\n    readonly fetchStart: number;\r\n    readonly loadEventEnd: number;\r\n    readonly loadEventStart: number;\r\n    readonly msFirstPaint: number;\r\n    readonly navigationStart: number;\r\n    readonly redirectEnd: number;\r\n    readonly redirectStart: number;\r\n    readonly requestStart: number;\r\n    readonly responseEnd: number;\r\n    readonly responseStart: number;\r\n    readonly unloadEventEnd: number;\r\n    readonly unloadEventStart: number;\r\n    toJSON(): any;\r\n}\r\n\r\ndeclare var PerformanceTiming: {\r\n    prototype: PerformanceTiming;\r\n    new(): PerformanceTiming;\r\n}\r\n\r\ninterface PeriodicWave {\r\n}\r\n\r\ndeclare var PeriodicWave: {\r\n    prototype: PeriodicWave;\r\n    new(): PeriodicWave;\r\n}\r\n\r\ninterface PermissionRequest extends DeferredPermissionRequest {\r\n    readonly state: string;\r\n    defer(): void;\r\n}\r\n\r\ndeclare var PermissionRequest: {\r\n    prototype: PermissionRequest;\r\n    new(): PermissionRequest;\r\n}\r\n\r\ninterface PermissionRequestedEvent extends Event {\r\n    readonly permissionRequest: PermissionRequest;\r\n}\r\n\r\ndeclare var PermissionRequestedEvent: {\r\n    prototype: PermissionRequestedEvent;\r\n    new(): PermissionRequestedEvent;\r\n}\r\n\r\ninterface Plugin {\r\n    readonly description: string;\r\n    readonly filename: string;\r\n    readonly length: number;\r\n    readonly name: string;\r\n    readonly version: string;\r\n    item(index: number): MimeType;\r\n    namedItem(type: string): MimeType;\r\n    [index: number]: MimeType;\r\n}\r\n\r\ndeclare var Plugin: {\r\n    prototype: Plugin;\r\n    new(): Plugin;\r\n}\r\n\r\ninterface PluginArray {\r\n    readonly length: number;\r\n    item(index: number): Plugin;\r\n    namedItem(name: string): Plugin;\r\n    refresh(reload?: boolean): void;\r\n    [index: number]: Plugin;\r\n}\r\n\r\ndeclare var PluginArray: {\r\n    prototype: PluginArray;\r\n    new(): PluginArray;\r\n}\r\n\r\ninterface PointerEvent extends MouseEvent {\r\n    readonly currentPoint: any;\r\n    readonly height: number;\r\n    readonly hwTimestamp: number;\r\n    readonly intermediatePoints: any;\r\n    readonly isPrimary: boolean;\r\n    readonly pointerId: number;\r\n    readonly pointerType: any;\r\n    readonly pressure: number;\r\n    readonly rotation: number;\r\n    readonly tiltX: number;\r\n    readonly tiltY: number;\r\n    readonly width: number;\r\n    getCurrentPoint(element: Element): void;\r\n    getIntermediatePoints(element: Element): void;\r\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\r\n}\r\n\r\ndeclare var PointerEvent: {\r\n    prototype: PointerEvent;\r\n    new(typeArg: string, eventInitDict?: PointerEventInit): PointerEvent;\r\n}\r\n\r\ninterface PopStateEvent extends Event {\r\n    readonly state: any;\r\n    initPopStateEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, stateArg: any): void;\r\n}\r\n\r\ndeclare var PopStateEvent: {\r\n    prototype: PopStateEvent;\r\n    new(): PopStateEvent;\r\n}\r\n\r\ninterface Position {\r\n    readonly coords: Coordinates;\r\n    readonly timestamp: number;\r\n}\r\n\r\ndeclare var Position: {\r\n    prototype: Position;\r\n    new(): Position;\r\n}\r\n\r\ninterface PositionError {\r\n    readonly code: number;\r\n    readonly message: string;\r\n    toString(): string;\r\n    readonly PERMISSION_DENIED: number;\r\n    readonly POSITION_UNAVAILABLE: number;\r\n    readonly TIMEOUT: number;\r\n}\r\n\r\ndeclare var PositionError: {\r\n    prototype: PositionError;\r\n    new(): PositionError;\r\n    readonly PERMISSION_DENIED: number;\r\n    readonly POSITION_UNAVAILABLE: number;\r\n    readonly TIMEOUT: number;\r\n}\r\n\r\ninterface ProcessingInstruction extends CharacterData {\r\n    readonly target: string;\r\n}\r\n\r\ndeclare var ProcessingInstruction: {\r\n    prototype: ProcessingInstruction;\r\n    new(): ProcessingInstruction;\r\n}\r\n\r\ninterface ProgressEvent extends Event {\r\n    readonly lengthComputable: boolean;\r\n    readonly loaded: number;\r\n    readonly total: number;\r\n    initProgressEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, lengthComputableArg: boolean, loadedArg: number, totalArg: number): void;\r\n}\r\n\r\ndeclare var ProgressEvent: {\r\n    prototype: ProgressEvent;\r\n    new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent;\r\n}\r\n\r\ninterface RTCDTMFToneChangeEvent extends Event {\r\n    readonly tone: string;\r\n}\r\n\r\ndeclare var RTCDTMFToneChangeEvent: {\r\n    prototype: RTCDTMFToneChangeEvent;\r\n    new(type: string, eventInitDict: RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent;\r\n}\r\n\r\ninterface RTCDtlsTransport extends RTCStatsProvider {\r\n    ondtlsstatechange: ((ev: RTCDtlsTransportStateChangedEvent) => any) | null;\r\n    onerror: ((ev: Event) => any) | null;\r\n    readonly state: string;\r\n    readonly transport: RTCIceTransport;\r\n    getLocalParameters(): RTCDtlsParameters;\r\n    getRemoteCertificates(): ArrayBuffer[];\r\n    getRemoteParameters(): RTCDtlsParameters | null;\r\n    start(remoteParameters: RTCDtlsParameters): void;\r\n    stop(): void;\r\n    addEventListener(type: \"dtlsstatechange\", listener: (ev: RTCDtlsTransportStateChangedEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var RTCDtlsTransport: {\r\n    prototype: RTCDtlsTransport;\r\n    new(transport: RTCIceTransport): RTCDtlsTransport;\r\n}\r\n\r\ninterface RTCDtlsTransportStateChangedEvent extends Event {\r\n    readonly state: string;\r\n}\r\n\r\ndeclare var RTCDtlsTransportStateChangedEvent: {\r\n    prototype: RTCDtlsTransportStateChangedEvent;\r\n    new(): RTCDtlsTransportStateChangedEvent;\r\n}\r\n\r\ninterface RTCDtmfSender extends EventTarget {\r\n    readonly canInsertDTMF: boolean;\r\n    readonly duration: number;\r\n    readonly interToneGap: number;\r\n    ontonechange: (ev: RTCDTMFToneChangeEvent) => any;\r\n    readonly sender: RTCRtpSender;\r\n    readonly toneBuffer: string;\r\n    insertDTMF(tones: string, duration?: number, interToneGap?: number): void;\r\n    addEventListener(type: \"tonechange\", listener: (ev: RTCDTMFToneChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var RTCDtmfSender: {\r\n    prototype: RTCDtmfSender;\r\n    new(sender: RTCRtpSender): RTCDtmfSender;\r\n}\r\n\r\ninterface RTCIceCandidatePairChangedEvent extends Event {\r\n    readonly pair: RTCIceCandidatePair;\r\n}\r\n\r\ndeclare var RTCIceCandidatePairChangedEvent: {\r\n    prototype: RTCIceCandidatePairChangedEvent;\r\n    new(): RTCIceCandidatePairChangedEvent;\r\n}\r\n\r\ninterface RTCIceGatherer extends RTCStatsProvider {\r\n    readonly component: string;\r\n    onerror: ((ev: Event) => any) | null;\r\n    onlocalcandidate: ((ev: RTCIceGathererEvent) => any) | null;\r\n    createAssociatedGatherer(): RTCIceGatherer;\r\n    getLocalCandidates(): RTCIceCandidate[];\r\n    getLocalParameters(): RTCIceParameters;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"localcandidate\", listener: (ev: RTCIceGathererEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var RTCIceGatherer: {\r\n    prototype: RTCIceGatherer;\r\n    new(options: RTCIceGatherOptions): RTCIceGatherer;\r\n}\r\n\r\ninterface RTCIceGathererEvent extends Event {\r\n    readonly candidate: RTCIceCandidate | RTCIceCandidateComplete;\r\n}\r\n\r\ndeclare var RTCIceGathererEvent: {\r\n    prototype: RTCIceGathererEvent;\r\n    new(): RTCIceGathererEvent;\r\n}\r\n\r\ninterface RTCIceTransport extends RTCStatsProvider {\r\n    readonly component: string;\r\n    readonly iceGatherer: RTCIceGatherer | null;\r\n    oncandidatepairchange: ((ev: RTCIceCandidatePairChangedEvent) => any) | null;\r\n    onicestatechange: ((ev: RTCIceTransportStateChangedEvent) => any) | null;\r\n    readonly role: string;\r\n    readonly state: string;\r\n    addRemoteCandidate(remoteCandidate: RTCIceCandidate | RTCIceCandidateComplete): void;\r\n    createAssociatedTransport(): RTCIceTransport;\r\n    getNominatedCandidatePair(): RTCIceCandidatePair | null;\r\n    getRemoteCandidates(): RTCIceCandidate[];\r\n    getRemoteParameters(): RTCIceParameters | null;\r\n    setRemoteCandidates(remoteCandidates: RTCIceCandidate[]): void;\r\n    start(gatherer: RTCIceGatherer, remoteParameters: RTCIceParameters, role?: string): void;\r\n    stop(): void;\r\n    addEventListener(type: \"candidatepairchange\", listener: (ev: RTCIceCandidatePairChangedEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"icestatechange\", listener: (ev: RTCIceTransportStateChangedEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var RTCIceTransport: {\r\n    prototype: RTCIceTransport;\r\n    new(): RTCIceTransport;\r\n}\r\n\r\ninterface RTCIceTransportStateChangedEvent extends Event {\r\n    readonly state: string;\r\n}\r\n\r\ndeclare var RTCIceTransportStateChangedEvent: {\r\n    prototype: RTCIceTransportStateChangedEvent;\r\n    new(): RTCIceTransportStateChangedEvent;\r\n}\r\n\r\ninterface RTCRtpReceiver extends RTCStatsProvider {\r\n    onerror: ((ev: Event) => any) | null;\r\n    readonly rtcpTransport: RTCDtlsTransport;\r\n    readonly track: MediaStreamTrack | null;\r\n    readonly transport: RTCDtlsTransport | RTCSrtpSdesTransport;\r\n    getContributingSources(): RTCRtpContributingSource[];\r\n    receive(parameters: RTCRtpParameters): void;\r\n    requestSendCSRC(csrc: number): void;\r\n    setTransport(transport: RTCDtlsTransport | RTCSrtpSdesTransport, rtcpTransport?: RTCDtlsTransport): void;\r\n    stop(): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var RTCRtpReceiver: {\r\n    prototype: RTCRtpReceiver;\r\n    new(transport: RTCDtlsTransport | RTCSrtpSdesTransport, kind: string, rtcpTransport?: RTCDtlsTransport): RTCRtpReceiver;\r\n    getCapabilities(kind?: string): RTCRtpCapabilities;\r\n}\r\n\r\ninterface RTCRtpSender extends RTCStatsProvider {\r\n    onerror: ((ev: Event) => any) | null;\r\n    onssrcconflict: ((ev: RTCSsrcConflictEvent) => any) | null;\r\n    readonly rtcpTransport: RTCDtlsTransport;\r\n    readonly track: MediaStreamTrack;\r\n    readonly transport: RTCDtlsTransport | RTCSrtpSdesTransport;\r\n    send(parameters: RTCRtpParameters): void;\r\n    setTrack(track: MediaStreamTrack): void;\r\n    setTransport(transport: RTCDtlsTransport | RTCSrtpSdesTransport, rtcpTransport?: RTCDtlsTransport): void;\r\n    stop(): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ssrcconflict\", listener: (ev: RTCSsrcConflictEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var RTCRtpSender: {\r\n    prototype: RTCRtpSender;\r\n    new(track: MediaStreamTrack, transport: RTCDtlsTransport | RTCSrtpSdesTransport, rtcpTransport?: RTCDtlsTransport): RTCRtpSender;\r\n    getCapabilities(kind?: string): RTCRtpCapabilities;\r\n}\r\n\r\ninterface RTCSrtpSdesTransport extends EventTarget {\r\n    onerror: ((ev: Event) => any) | null;\r\n    readonly transport: RTCIceTransport;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var RTCSrtpSdesTransport: {\r\n    prototype: RTCSrtpSdesTransport;\r\n    new(transport: RTCIceTransport, encryptParameters: RTCSrtpSdesParameters, decryptParameters: RTCSrtpSdesParameters): RTCSrtpSdesTransport;\r\n    getLocalParameters(): RTCSrtpSdesParameters[];\r\n}\r\n\r\ninterface RTCSsrcConflictEvent extends Event {\r\n    readonly ssrc: number;\r\n}\r\n\r\ndeclare var RTCSsrcConflictEvent: {\r\n    prototype: RTCSsrcConflictEvent;\r\n    new(): RTCSsrcConflictEvent;\r\n}\r\n\r\ninterface RTCStatsProvider extends EventTarget {\r\n    getStats(): PromiseLike<RTCStatsReport>;\r\n    msGetStats(): PromiseLike<RTCStatsReport>;\r\n}\r\n\r\ndeclare var RTCStatsProvider: {\r\n    prototype: RTCStatsProvider;\r\n    new(): RTCStatsProvider;\r\n}\r\n\r\ninterface Range {\r\n    readonly collapsed: boolean;\r\n    readonly commonAncestorContainer: Node;\r\n    readonly endContainer: Node;\r\n    readonly endOffset: number;\r\n    readonly startContainer: Node;\r\n    readonly startOffset: number;\r\n    cloneContents(): DocumentFragment;\r\n    cloneRange(): Range;\r\n    collapse(toStart: boolean): void;\r\n    compareBoundaryPoints(how: number, sourceRange: Range): number;\r\n    createContextualFragment(fragment: string): DocumentFragment;\r\n    deleteContents(): void;\r\n    detach(): void;\r\n    expand(Unit: string): boolean;\r\n    extractContents(): DocumentFragment;\r\n    getBoundingClientRect(): ClientRect;\r\n    getClientRects(): ClientRectList;\r\n    insertNode(newNode: Node): void;\r\n    selectNode(refNode: Node): void;\r\n    selectNodeContents(refNode: Node): void;\r\n    setEnd(refNode: Node, offset: number): void;\r\n    setEndAfter(refNode: Node): void;\r\n    setEndBefore(refNode: Node): void;\r\n    setStart(refNode: Node, offset: number): void;\r\n    setStartAfter(refNode: Node): void;\r\n    setStartBefore(refNode: Node): void;\r\n    surroundContents(newParent: Node): void;\r\n    toString(): string;\r\n    readonly END_TO_END: number;\r\n    readonly END_TO_START: number;\r\n    readonly START_TO_END: number;\r\n    readonly START_TO_START: number;\r\n}\r\n\r\ndeclare var Range: {\r\n    prototype: Range;\r\n    new(): Range;\r\n    readonly END_TO_END: number;\r\n    readonly END_TO_START: number;\r\n    readonly START_TO_END: number;\r\n    readonly START_TO_START: number;\r\n}\r\n\r\ninterface SVGAElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\r\n    readonly target: SVGAnimatedString;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGAElement: {\r\n    prototype: SVGAElement;\r\n    new(): SVGAElement;\r\n}\r\n\r\ninterface SVGAngle {\r\n    readonly unitType: number;\r\n    value: number;\r\n    valueAsString: string;\r\n    valueInSpecifiedUnits: number;\r\n    convertToSpecifiedUnits(unitType: number): void;\r\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\r\n    readonly SVG_ANGLETYPE_DEG: number;\r\n    readonly SVG_ANGLETYPE_GRAD: number;\r\n    readonly SVG_ANGLETYPE_RAD: number;\r\n    readonly SVG_ANGLETYPE_UNKNOWN: number;\r\n    readonly SVG_ANGLETYPE_UNSPECIFIED: number;\r\n}\r\n\r\ndeclare var SVGAngle: {\r\n    prototype: SVGAngle;\r\n    new(): SVGAngle;\r\n    readonly SVG_ANGLETYPE_DEG: number;\r\n    readonly SVG_ANGLETYPE_GRAD: number;\r\n    readonly SVG_ANGLETYPE_RAD: number;\r\n    readonly SVG_ANGLETYPE_UNKNOWN: number;\r\n    readonly SVG_ANGLETYPE_UNSPECIFIED: number;\r\n}\r\n\r\ninterface SVGAnimatedAngle {\r\n    readonly animVal: SVGAngle;\r\n    readonly baseVal: SVGAngle;\r\n}\r\n\r\ndeclare var SVGAnimatedAngle: {\r\n    prototype: SVGAnimatedAngle;\r\n    new(): SVGAnimatedAngle;\r\n}\r\n\r\ninterface SVGAnimatedBoolean {\r\n    readonly animVal: boolean;\r\n    baseVal: boolean;\r\n}\r\n\r\ndeclare var SVGAnimatedBoolean: {\r\n    prototype: SVGAnimatedBoolean;\r\n    new(): SVGAnimatedBoolean;\r\n}\r\n\r\ninterface SVGAnimatedEnumeration {\r\n    readonly animVal: number;\r\n    baseVal: number;\r\n}\r\n\r\ndeclare var SVGAnimatedEnumeration: {\r\n    prototype: SVGAnimatedEnumeration;\r\n    new(): SVGAnimatedEnumeration;\r\n}\r\n\r\ninterface SVGAnimatedInteger {\r\n    readonly animVal: number;\r\n    baseVal: number;\r\n}\r\n\r\ndeclare var SVGAnimatedInteger: {\r\n    prototype: SVGAnimatedInteger;\r\n    new(): SVGAnimatedInteger;\r\n}\r\n\r\ninterface SVGAnimatedLength {\r\n    readonly animVal: SVGLength;\r\n    readonly baseVal: SVGLength;\r\n}\r\n\r\ndeclare var SVGAnimatedLength: {\r\n    prototype: SVGAnimatedLength;\r\n    new(): SVGAnimatedLength;\r\n}\r\n\r\ninterface SVGAnimatedLengthList {\r\n    readonly animVal: SVGLengthList;\r\n    readonly baseVal: SVGLengthList;\r\n}\r\n\r\ndeclare var SVGAnimatedLengthList: {\r\n    prototype: SVGAnimatedLengthList;\r\n    new(): SVGAnimatedLengthList;\r\n}\r\n\r\ninterface SVGAnimatedNumber {\r\n    readonly animVal: number;\r\n    baseVal: number;\r\n}\r\n\r\ndeclare var SVGAnimatedNumber: {\r\n    prototype: SVGAnimatedNumber;\r\n    new(): SVGAnimatedNumber;\r\n}\r\n\r\ninterface SVGAnimatedNumberList {\r\n    readonly animVal: SVGNumberList;\r\n    readonly baseVal: SVGNumberList;\r\n}\r\n\r\ndeclare var SVGAnimatedNumberList: {\r\n    prototype: SVGAnimatedNumberList;\r\n    new(): SVGAnimatedNumberList;\r\n}\r\n\r\ninterface SVGAnimatedPreserveAspectRatio {\r\n    readonly animVal: SVGPreserveAspectRatio;\r\n    readonly baseVal: SVGPreserveAspectRatio;\r\n}\r\n\r\ndeclare var SVGAnimatedPreserveAspectRatio: {\r\n    prototype: SVGAnimatedPreserveAspectRatio;\r\n    new(): SVGAnimatedPreserveAspectRatio;\r\n}\r\n\r\ninterface SVGAnimatedRect {\r\n    readonly animVal: SVGRect;\r\n    readonly baseVal: SVGRect;\r\n}\r\n\r\ndeclare var SVGAnimatedRect: {\r\n    prototype: SVGAnimatedRect;\r\n    new(): SVGAnimatedRect;\r\n}\r\n\r\ninterface SVGAnimatedString {\r\n    readonly animVal: string;\r\n    baseVal: string;\r\n}\r\n\r\ndeclare var SVGAnimatedString: {\r\n    prototype: SVGAnimatedString;\r\n    new(): SVGAnimatedString;\r\n}\r\n\r\ninterface SVGAnimatedTransformList {\r\n    readonly animVal: SVGTransformList;\r\n    readonly baseVal: SVGTransformList;\r\n}\r\n\r\ndeclare var SVGAnimatedTransformList: {\r\n    prototype: SVGAnimatedTransformList;\r\n    new(): SVGAnimatedTransformList;\r\n}\r\n\r\ninterface SVGCircleElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    readonly cx: SVGAnimatedLength;\r\n    readonly cy: SVGAnimatedLength;\r\n    readonly r: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGCircleElement: {\r\n    prototype: SVGCircleElement;\r\n    new(): SVGCircleElement;\r\n}\r\n\r\ninterface SVGClipPathElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGUnitTypes {\r\n    readonly clipPathUnits: SVGAnimatedEnumeration;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGClipPathElement: {\r\n    prototype: SVGClipPathElement;\r\n    new(): SVGClipPathElement;\r\n}\r\n\r\ninterface SVGComponentTransferFunctionElement extends SVGElement {\r\n    readonly amplitude: SVGAnimatedNumber;\r\n    readonly exponent: SVGAnimatedNumber;\r\n    readonly intercept: SVGAnimatedNumber;\r\n    readonly offset: SVGAnimatedNumber;\r\n    readonly slope: SVGAnimatedNumber;\r\n    readonly tableValues: SVGAnimatedNumberList;\r\n    readonly type: SVGAnimatedEnumeration;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\r\n}\r\n\r\ndeclare var SVGComponentTransferFunctionElement: {\r\n    prototype: SVGComponentTransferFunctionElement;\r\n    new(): SVGComponentTransferFunctionElement;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\r\n    readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGDefsElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGDefsElement: {\r\n    prototype: SVGDefsElement;\r\n    new(): SVGDefsElement;\r\n}\r\n\r\ninterface SVGDescElement extends SVGElement, SVGStylable, SVGLangSpace {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGDescElement: {\r\n    prototype: SVGDescElement;\r\n    new(): SVGDescElement;\r\n}\r\n\r\ninterface SVGElement extends Element {\r\n    onclick: (ev: MouseEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    readonly ownerSVGElement: SVGSVGElement;\r\n    readonly viewportElement: SVGElement;\r\n    xmlbase: string;\r\n    className: any;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGElement: {\r\n    prototype: SVGElement;\r\n    new(): SVGElement;\r\n}\r\n\r\ninterface SVGElementInstance extends EventTarget {\r\n    readonly childNodes: SVGElementInstanceList;\r\n    readonly correspondingElement: SVGElement;\r\n    readonly correspondingUseElement: SVGUseElement;\r\n    readonly firstChild: SVGElementInstance;\r\n    readonly lastChild: SVGElementInstance;\r\n    readonly nextSibling: SVGElementInstance;\r\n    readonly parentNode: SVGElementInstance;\r\n    readonly previousSibling: SVGElementInstance;\r\n}\r\n\r\ndeclare var SVGElementInstance: {\r\n    prototype: SVGElementInstance;\r\n    new(): SVGElementInstance;\r\n}\r\n\r\ninterface SVGElementInstanceList {\r\n    readonly length: number;\r\n    item(index: number): SVGElementInstance;\r\n}\r\n\r\ndeclare var SVGElementInstanceList: {\r\n    prototype: SVGElementInstanceList;\r\n    new(): SVGElementInstanceList;\r\n}\r\n\r\ninterface SVGEllipseElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    readonly cx: SVGAnimatedLength;\r\n    readonly cy: SVGAnimatedLength;\r\n    readonly rx: SVGAnimatedLength;\r\n    readonly ry: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGEllipseElement: {\r\n    prototype: SVGEllipseElement;\r\n    new(): SVGEllipseElement;\r\n}\r\n\r\ninterface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    readonly in2: SVGAnimatedString;\r\n    readonly mode: SVGAnimatedEnumeration;\r\n    readonly SVG_FEBLEND_MODE_COLOR: number;\r\n    readonly SVG_FEBLEND_MODE_COLOR_BURN: number;\r\n    readonly SVG_FEBLEND_MODE_COLOR_DODGE: number;\r\n    readonly SVG_FEBLEND_MODE_DARKEN: number;\r\n    readonly SVG_FEBLEND_MODE_DIFFERENCE: number;\r\n    readonly SVG_FEBLEND_MODE_EXCLUSION: number;\r\n    readonly SVG_FEBLEND_MODE_HARD_LIGHT: number;\r\n    readonly SVG_FEBLEND_MODE_HUE: number;\r\n    readonly SVG_FEBLEND_MODE_LIGHTEN: number;\r\n    readonly SVG_FEBLEND_MODE_LUMINOSITY: number;\r\n    readonly SVG_FEBLEND_MODE_MULTIPLY: number;\r\n    readonly SVG_FEBLEND_MODE_NORMAL: number;\r\n    readonly SVG_FEBLEND_MODE_OVERLAY: number;\r\n    readonly SVG_FEBLEND_MODE_SATURATION: number;\r\n    readonly SVG_FEBLEND_MODE_SCREEN: number;\r\n    readonly SVG_FEBLEND_MODE_SOFT_LIGHT: number;\r\n    readonly SVG_FEBLEND_MODE_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEBlendElement: {\r\n    prototype: SVGFEBlendElement;\r\n    new(): SVGFEBlendElement;\r\n    readonly SVG_FEBLEND_MODE_COLOR: number;\r\n    readonly SVG_FEBLEND_MODE_COLOR_BURN: number;\r\n    readonly SVG_FEBLEND_MODE_COLOR_DODGE: number;\r\n    readonly SVG_FEBLEND_MODE_DARKEN: number;\r\n    readonly SVG_FEBLEND_MODE_DIFFERENCE: number;\r\n    readonly SVG_FEBLEND_MODE_EXCLUSION: number;\r\n    readonly SVG_FEBLEND_MODE_HARD_LIGHT: number;\r\n    readonly SVG_FEBLEND_MODE_HUE: number;\r\n    readonly SVG_FEBLEND_MODE_LIGHTEN: number;\r\n    readonly SVG_FEBLEND_MODE_LUMINOSITY: number;\r\n    readonly SVG_FEBLEND_MODE_MULTIPLY: number;\r\n    readonly SVG_FEBLEND_MODE_NORMAL: number;\r\n    readonly SVG_FEBLEND_MODE_OVERLAY: number;\r\n    readonly SVG_FEBLEND_MODE_SATURATION: number;\r\n    readonly SVG_FEBLEND_MODE_SCREEN: number;\r\n    readonly SVG_FEBLEND_MODE_SOFT_LIGHT: number;\r\n    readonly SVG_FEBLEND_MODE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    readonly type: SVGAnimatedEnumeration;\r\n    readonly values: SVGAnimatedNumberList;\r\n    readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\r\n    readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\r\n    readonly SVG_FECOLORMATRIX_TYPE_MATRIX: number;\r\n    readonly SVG_FECOLORMATRIX_TYPE_SATURATE: number;\r\n    readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEColorMatrixElement: {\r\n    prototype: SVGFEColorMatrixElement;\r\n    new(): SVGFEColorMatrixElement;\r\n    readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\r\n    readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\r\n    readonly SVG_FECOLORMATRIX_TYPE_MATRIX: number;\r\n    readonly SVG_FECOLORMATRIX_TYPE_SATURATE: number;\r\n    readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEComponentTransferElement: {\r\n    prototype: SVGFEComponentTransferElement;\r\n    new(): SVGFEComponentTransferElement;\r\n}\r\n\r\ninterface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    readonly in2: SVGAnimatedString;\r\n    readonly k1: SVGAnimatedNumber;\r\n    readonly k2: SVGAnimatedNumber;\r\n    readonly k3: SVGAnimatedNumber;\r\n    readonly k4: SVGAnimatedNumber;\r\n    readonly operator: SVGAnimatedEnumeration;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_ATOP: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_IN: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_OUT: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_OVER: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_XOR: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFECompositeElement: {\r\n    prototype: SVGFECompositeElement;\r\n    new(): SVGFECompositeElement;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_ATOP: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_IN: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_OUT: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_OVER: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\r\n    readonly SVG_FECOMPOSITE_OPERATOR_XOR: number;\r\n}\r\n\r\ninterface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly bias: SVGAnimatedNumber;\r\n    readonly divisor: SVGAnimatedNumber;\r\n    readonly edgeMode: SVGAnimatedEnumeration;\r\n    readonly in1: SVGAnimatedString;\r\n    readonly kernelMatrix: SVGAnimatedNumberList;\r\n    readonly kernelUnitLengthX: SVGAnimatedNumber;\r\n    readonly kernelUnitLengthY: SVGAnimatedNumber;\r\n    readonly orderX: SVGAnimatedInteger;\r\n    readonly orderY: SVGAnimatedInteger;\r\n    readonly preserveAlpha: SVGAnimatedBoolean;\r\n    readonly targetX: SVGAnimatedInteger;\r\n    readonly targetY: SVGAnimatedInteger;\r\n    readonly SVG_EDGEMODE_DUPLICATE: number;\r\n    readonly SVG_EDGEMODE_NONE: number;\r\n    readonly SVG_EDGEMODE_UNKNOWN: number;\r\n    readonly SVG_EDGEMODE_WRAP: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEConvolveMatrixElement: {\r\n    prototype: SVGFEConvolveMatrixElement;\r\n    new(): SVGFEConvolveMatrixElement;\r\n    readonly SVG_EDGEMODE_DUPLICATE: number;\r\n    readonly SVG_EDGEMODE_NONE: number;\r\n    readonly SVG_EDGEMODE_UNKNOWN: number;\r\n    readonly SVG_EDGEMODE_WRAP: number;\r\n}\r\n\r\ninterface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly diffuseConstant: SVGAnimatedNumber;\r\n    readonly in1: SVGAnimatedString;\r\n    readonly kernelUnitLengthX: SVGAnimatedNumber;\r\n    readonly kernelUnitLengthY: SVGAnimatedNumber;\r\n    readonly surfaceScale: SVGAnimatedNumber;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEDiffuseLightingElement: {\r\n    prototype: SVGFEDiffuseLightingElement;\r\n    new(): SVGFEDiffuseLightingElement;\r\n}\r\n\r\ninterface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    readonly in2: SVGAnimatedString;\r\n    readonly scale: SVGAnimatedNumber;\r\n    readonly xChannelSelector: SVGAnimatedEnumeration;\r\n    readonly yChannelSelector: SVGAnimatedEnumeration;\r\n    readonly SVG_CHANNEL_A: number;\r\n    readonly SVG_CHANNEL_B: number;\r\n    readonly SVG_CHANNEL_G: number;\r\n    readonly SVG_CHANNEL_R: number;\r\n    readonly SVG_CHANNEL_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEDisplacementMapElement: {\r\n    prototype: SVGFEDisplacementMapElement;\r\n    new(): SVGFEDisplacementMapElement;\r\n    readonly SVG_CHANNEL_A: number;\r\n    readonly SVG_CHANNEL_B: number;\r\n    readonly SVG_CHANNEL_G: number;\r\n    readonly SVG_CHANNEL_R: number;\r\n    readonly SVG_CHANNEL_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFEDistantLightElement extends SVGElement {\r\n    readonly azimuth: SVGAnimatedNumber;\r\n    readonly elevation: SVGAnimatedNumber;\r\n}\r\n\r\ndeclare var SVGFEDistantLightElement: {\r\n    prototype: SVGFEDistantLightElement;\r\n    new(): SVGFEDistantLightElement;\r\n}\r\n\r\ninterface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEFloodElement: {\r\n    prototype: SVGFEFloodElement;\r\n    new(): SVGFEFloodElement;\r\n}\r\n\r\ninterface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {\r\n}\r\n\r\ndeclare var SVGFEFuncAElement: {\r\n    prototype: SVGFEFuncAElement;\r\n    new(): SVGFEFuncAElement;\r\n}\r\n\r\ninterface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {\r\n}\r\n\r\ndeclare var SVGFEFuncBElement: {\r\n    prototype: SVGFEFuncBElement;\r\n    new(): SVGFEFuncBElement;\r\n}\r\n\r\ninterface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {\r\n}\r\n\r\ndeclare var SVGFEFuncGElement: {\r\n    prototype: SVGFEFuncGElement;\r\n    new(): SVGFEFuncGElement;\r\n}\r\n\r\ninterface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {\r\n}\r\n\r\ndeclare var SVGFEFuncRElement: {\r\n    prototype: SVGFEFuncRElement;\r\n    new(): SVGFEFuncRElement;\r\n}\r\n\r\ninterface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    readonly stdDeviationX: SVGAnimatedNumber;\r\n    readonly stdDeviationY: SVGAnimatedNumber;\r\n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEGaussianBlurElement: {\r\n    prototype: SVGFEGaussianBlurElement;\r\n    new(): SVGFEGaussianBlurElement;\r\n}\r\n\r\ninterface SVGFEImageElement extends SVGElement, SVGFilterPrimitiveStandardAttributes, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired {\r\n    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEImageElement: {\r\n    prototype: SVGFEImageElement;\r\n    new(): SVGFEImageElement;\r\n}\r\n\r\ninterface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEMergeElement: {\r\n    prototype: SVGFEMergeElement;\r\n    new(): SVGFEMergeElement;\r\n}\r\n\r\ninterface SVGFEMergeNodeElement extends SVGElement {\r\n    readonly in1: SVGAnimatedString;\r\n}\r\n\r\ndeclare var SVGFEMergeNodeElement: {\r\n    prototype: SVGFEMergeNodeElement;\r\n    new(): SVGFEMergeNodeElement;\r\n}\r\n\r\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    readonly operator: SVGAnimatedEnumeration;\r\n    readonly radiusX: SVGAnimatedNumber;\r\n    readonly radiusY: SVGAnimatedNumber;\r\n    readonly SVG_MORPHOLOGY_OPERATOR_DILATE: number;\r\n    readonly SVG_MORPHOLOGY_OPERATOR_ERODE: number;\r\n    readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEMorphologyElement: {\r\n    prototype: SVGFEMorphologyElement;\r\n    new(): SVGFEMorphologyElement;\r\n    readonly SVG_MORPHOLOGY_OPERATOR_DILATE: number;\r\n    readonly SVG_MORPHOLOGY_OPERATOR_ERODE: number;\r\n    readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly dx: SVGAnimatedNumber;\r\n    readonly dy: SVGAnimatedNumber;\r\n    readonly in1: SVGAnimatedString;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFEOffsetElement: {\r\n    prototype: SVGFEOffsetElement;\r\n    new(): SVGFEOffsetElement;\r\n}\r\n\r\ninterface SVGFEPointLightElement extends SVGElement {\r\n    readonly x: SVGAnimatedNumber;\r\n    readonly y: SVGAnimatedNumber;\r\n    readonly z: SVGAnimatedNumber;\r\n}\r\n\r\ndeclare var SVGFEPointLightElement: {\r\n    prototype: SVGFEPointLightElement;\r\n    new(): SVGFEPointLightElement;\r\n}\r\n\r\ninterface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    readonly kernelUnitLengthX: SVGAnimatedNumber;\r\n    readonly kernelUnitLengthY: SVGAnimatedNumber;\r\n    readonly specularConstant: SVGAnimatedNumber;\r\n    readonly specularExponent: SVGAnimatedNumber;\r\n    readonly surfaceScale: SVGAnimatedNumber;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFESpecularLightingElement: {\r\n    prototype: SVGFESpecularLightingElement;\r\n    new(): SVGFESpecularLightingElement;\r\n}\r\n\r\ninterface SVGFESpotLightElement extends SVGElement {\r\n    readonly limitingConeAngle: SVGAnimatedNumber;\r\n    readonly pointsAtX: SVGAnimatedNumber;\r\n    readonly pointsAtY: SVGAnimatedNumber;\r\n    readonly pointsAtZ: SVGAnimatedNumber;\r\n    readonly specularExponent: SVGAnimatedNumber;\r\n    readonly x: SVGAnimatedNumber;\r\n    readonly y: SVGAnimatedNumber;\r\n    readonly z: SVGAnimatedNumber;\r\n}\r\n\r\ndeclare var SVGFESpotLightElement: {\r\n    prototype: SVGFESpotLightElement;\r\n    new(): SVGFESpotLightElement;\r\n}\r\n\r\ninterface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly in1: SVGAnimatedString;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFETileElement: {\r\n    prototype: SVGFETileElement;\r\n    new(): SVGFETileElement;\r\n}\r\n\r\ninterface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    readonly baseFrequencyX: SVGAnimatedNumber;\r\n    readonly baseFrequencyY: SVGAnimatedNumber;\r\n    readonly numOctaves: SVGAnimatedInteger;\r\n    readonly seed: SVGAnimatedNumber;\r\n    readonly stitchTiles: SVGAnimatedEnumeration;\r\n    readonly type: SVGAnimatedEnumeration;\r\n    readonly SVG_STITCHTYPE_NOSTITCH: number;\r\n    readonly SVG_STITCHTYPE_STITCH: number;\r\n    readonly SVG_STITCHTYPE_UNKNOWN: number;\r\n    readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\r\n    readonly SVG_TURBULENCE_TYPE_TURBULENCE: number;\r\n    readonly SVG_TURBULENCE_TYPE_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFETurbulenceElement: {\r\n    prototype: SVGFETurbulenceElement;\r\n    new(): SVGFETurbulenceElement;\r\n    readonly SVG_STITCHTYPE_NOSTITCH: number;\r\n    readonly SVG_STITCHTYPE_STITCH: number;\r\n    readonly SVG_STITCHTYPE_UNKNOWN: number;\r\n    readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\r\n    readonly SVG_TURBULENCE_TYPE_TURBULENCE: number;\r\n    readonly SVG_TURBULENCE_TYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGFilterElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired {\r\n    readonly filterResX: SVGAnimatedInteger;\r\n    readonly filterResY: SVGAnimatedInteger;\r\n    readonly filterUnits: SVGAnimatedEnumeration;\r\n    readonly height: SVGAnimatedLength;\r\n    readonly primitiveUnits: SVGAnimatedEnumeration;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n    setFilterRes(filterResX: number, filterResY: number): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGFilterElement: {\r\n    prototype: SVGFilterElement;\r\n    new(): SVGFilterElement;\r\n}\r\n\r\ninterface SVGForeignObjectElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    readonly height: SVGAnimatedLength;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGForeignObjectElement: {\r\n    prototype: SVGForeignObjectElement;\r\n    new(): SVGForeignObjectElement;\r\n}\r\n\r\ninterface SVGGElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGGElement: {\r\n    prototype: SVGGElement;\r\n    new(): SVGGElement;\r\n}\r\n\r\ninterface SVGGradientElement extends SVGElement, SVGStylable, SVGExternalResourcesRequired, SVGURIReference, SVGUnitTypes {\r\n    readonly gradientTransform: SVGAnimatedTransformList;\r\n    readonly gradientUnits: SVGAnimatedEnumeration;\r\n    readonly spreadMethod: SVGAnimatedEnumeration;\r\n    readonly SVG_SPREADMETHOD_PAD: number;\r\n    readonly SVG_SPREADMETHOD_REFLECT: number;\r\n    readonly SVG_SPREADMETHOD_REPEAT: number;\r\n    readonly SVG_SPREADMETHOD_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGGradientElement: {\r\n    prototype: SVGGradientElement;\r\n    new(): SVGGradientElement;\r\n    readonly SVG_SPREADMETHOD_PAD: number;\r\n    readonly SVG_SPREADMETHOD_REFLECT: number;\r\n    readonly SVG_SPREADMETHOD_REPEAT: number;\r\n    readonly SVG_SPREADMETHOD_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGImageElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\r\n    readonly height: SVGAnimatedLength;\r\n    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGImageElement: {\r\n    prototype: SVGImageElement;\r\n    new(): SVGImageElement;\r\n}\r\n\r\ninterface SVGLength {\r\n    readonly unitType: number;\r\n    value: number;\r\n    valueAsString: string;\r\n    valueInSpecifiedUnits: number;\r\n    convertToSpecifiedUnits(unitType: number): void;\r\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\r\n    readonly SVG_LENGTHTYPE_CM: number;\r\n    readonly SVG_LENGTHTYPE_EMS: number;\r\n    readonly SVG_LENGTHTYPE_EXS: number;\r\n    readonly SVG_LENGTHTYPE_IN: number;\r\n    readonly SVG_LENGTHTYPE_MM: number;\r\n    readonly SVG_LENGTHTYPE_NUMBER: number;\r\n    readonly SVG_LENGTHTYPE_PC: number;\r\n    readonly SVG_LENGTHTYPE_PERCENTAGE: number;\r\n    readonly SVG_LENGTHTYPE_PT: number;\r\n    readonly SVG_LENGTHTYPE_PX: number;\r\n    readonly SVG_LENGTHTYPE_UNKNOWN: number;\r\n}\r\n\r\ndeclare var SVGLength: {\r\n    prototype: SVGLength;\r\n    new(): SVGLength;\r\n    readonly SVG_LENGTHTYPE_CM: number;\r\n    readonly SVG_LENGTHTYPE_EMS: number;\r\n    readonly SVG_LENGTHTYPE_EXS: number;\r\n    readonly SVG_LENGTHTYPE_IN: number;\r\n    readonly SVG_LENGTHTYPE_MM: number;\r\n    readonly SVG_LENGTHTYPE_NUMBER: number;\r\n    readonly SVG_LENGTHTYPE_PC: number;\r\n    readonly SVG_LENGTHTYPE_PERCENTAGE: number;\r\n    readonly SVG_LENGTHTYPE_PT: number;\r\n    readonly SVG_LENGTHTYPE_PX: number;\r\n    readonly SVG_LENGTHTYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGLengthList {\r\n    readonly numberOfItems: number;\r\n    appendItem(newItem: SVGLength): SVGLength;\r\n    clear(): void;\r\n    getItem(index: number): SVGLength;\r\n    initialize(newItem: SVGLength): SVGLength;\r\n    insertItemBefore(newItem: SVGLength, index: number): SVGLength;\r\n    removeItem(index: number): SVGLength;\r\n    replaceItem(newItem: SVGLength, index: number): SVGLength;\r\n}\r\n\r\ndeclare var SVGLengthList: {\r\n    prototype: SVGLengthList;\r\n    new(): SVGLengthList;\r\n}\r\n\r\ninterface SVGLineElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    readonly x1: SVGAnimatedLength;\r\n    readonly x2: SVGAnimatedLength;\r\n    readonly y1: SVGAnimatedLength;\r\n    readonly y2: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGLineElement: {\r\n    prototype: SVGLineElement;\r\n    new(): SVGLineElement;\r\n}\r\n\r\ninterface SVGLinearGradientElement extends SVGGradientElement {\r\n    readonly x1: SVGAnimatedLength;\r\n    readonly x2: SVGAnimatedLength;\r\n    readonly y1: SVGAnimatedLength;\r\n    readonly y2: SVGAnimatedLength;\r\n}\r\n\r\ndeclare var SVGLinearGradientElement: {\r\n    prototype: SVGLinearGradientElement;\r\n    new(): SVGLinearGradientElement;\r\n}\r\n\r\ninterface SVGMarkerElement extends SVGElement, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox {\r\n    readonly markerHeight: SVGAnimatedLength;\r\n    readonly markerUnits: SVGAnimatedEnumeration;\r\n    readonly markerWidth: SVGAnimatedLength;\r\n    readonly orientAngle: SVGAnimatedAngle;\r\n    readonly orientType: SVGAnimatedEnumeration;\r\n    readonly refX: SVGAnimatedLength;\r\n    readonly refY: SVGAnimatedLength;\r\n    setOrientToAngle(angle: SVGAngle): void;\r\n    setOrientToAuto(): void;\r\n    readonly SVG_MARKERUNITS_STROKEWIDTH: number;\r\n    readonly SVG_MARKERUNITS_UNKNOWN: number;\r\n    readonly SVG_MARKERUNITS_USERSPACEONUSE: number;\r\n    readonly SVG_MARKER_ORIENT_ANGLE: number;\r\n    readonly SVG_MARKER_ORIENT_AUTO: number;\r\n    readonly SVG_MARKER_ORIENT_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGMarkerElement: {\r\n    prototype: SVGMarkerElement;\r\n    new(): SVGMarkerElement;\r\n    readonly SVG_MARKERUNITS_STROKEWIDTH: number;\r\n    readonly SVG_MARKERUNITS_UNKNOWN: number;\r\n    readonly SVG_MARKERUNITS_USERSPACEONUSE: number;\r\n    readonly SVG_MARKER_ORIENT_ANGLE: number;\r\n    readonly SVG_MARKER_ORIENT_AUTO: number;\r\n    readonly SVG_MARKER_ORIENT_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGMaskElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGUnitTypes {\r\n    readonly height: SVGAnimatedLength;\r\n    readonly maskContentUnits: SVGAnimatedEnumeration;\r\n    readonly maskUnits: SVGAnimatedEnumeration;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGMaskElement: {\r\n    prototype: SVGMaskElement;\r\n    new(): SVGMaskElement;\r\n}\r\n\r\ninterface SVGMatrix {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n    d: number;\r\n    e: number;\r\n    f: number;\r\n    flipX(): SVGMatrix;\r\n    flipY(): SVGMatrix;\r\n    inverse(): SVGMatrix;\r\n    multiply(secondMatrix: SVGMatrix): SVGMatrix;\r\n    rotate(angle: number): SVGMatrix;\r\n    rotateFromVector(x: number, y: number): SVGMatrix;\r\n    scale(scaleFactor: number): SVGMatrix;\r\n    scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix;\r\n    skewX(angle: number): SVGMatrix;\r\n    skewY(angle: number): SVGMatrix;\r\n    translate(x: number, y: number): SVGMatrix;\r\n}\r\n\r\ndeclare var SVGMatrix: {\r\n    prototype: SVGMatrix;\r\n    new(): SVGMatrix;\r\n}\r\n\r\ninterface SVGMetadataElement extends SVGElement {\r\n}\r\n\r\ndeclare var SVGMetadataElement: {\r\n    prototype: SVGMetadataElement;\r\n    new(): SVGMetadataElement;\r\n}\r\n\r\ninterface SVGNumber {\r\n    value: number;\r\n}\r\n\r\ndeclare var SVGNumber: {\r\n    prototype: SVGNumber;\r\n    new(): SVGNumber;\r\n}\r\n\r\ninterface SVGNumberList {\r\n    readonly numberOfItems: number;\r\n    appendItem(newItem: SVGNumber): SVGNumber;\r\n    clear(): void;\r\n    getItem(index: number): SVGNumber;\r\n    initialize(newItem: SVGNumber): SVGNumber;\r\n    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;\r\n    removeItem(index: number): SVGNumber;\r\n    replaceItem(newItem: SVGNumber, index: number): SVGNumber;\r\n}\r\n\r\ndeclare var SVGNumberList: {\r\n    prototype: SVGNumberList;\r\n    new(): SVGNumberList;\r\n}\r\n\r\ninterface SVGPathElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPathData {\r\n    createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcAbs;\r\n    createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcRel;\r\n    createSVGPathSegClosePath(): SVGPathSegClosePath;\r\n    createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs;\r\n    createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel;\r\n    createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs;\r\n    createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel;\r\n    createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs;\r\n    createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel;\r\n    createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs;\r\n    createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel;\r\n    createSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs;\r\n    createSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs;\r\n    createSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel;\r\n    createSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel;\r\n    createSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs;\r\n    createSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel;\r\n    createSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs;\r\n    createSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel;\r\n    getPathSegAtLength(distance: number): number;\r\n    getPointAtLength(distance: number): SVGPoint;\r\n    getTotalLength(): number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGPathElement: {\r\n    prototype: SVGPathElement;\r\n    new(): SVGPathElement;\r\n}\r\n\r\ninterface SVGPathSeg {\r\n    readonly pathSegType: number;\r\n    readonly pathSegTypeAsLetter: string;\r\n    readonly PATHSEG_ARC_ABS: number;\r\n    readonly PATHSEG_ARC_REL: number;\r\n    readonly PATHSEG_CLOSEPATH: number;\r\n    readonly PATHSEG_CURVETO_CUBIC_ABS: number;\r\n    readonly PATHSEG_CURVETO_CUBIC_REL: number;\r\n    readonly PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\r\n    readonly PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\r\n    readonly PATHSEG_CURVETO_QUADRATIC_ABS: number;\r\n    readonly PATHSEG_CURVETO_QUADRATIC_REL: number;\r\n    readonly PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\r\n    readonly PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\r\n    readonly PATHSEG_LINETO_ABS: number;\r\n    readonly PATHSEG_LINETO_HORIZONTAL_ABS: number;\r\n    readonly PATHSEG_LINETO_HORIZONTAL_REL: number;\r\n    readonly PATHSEG_LINETO_REL: number;\r\n    readonly PATHSEG_LINETO_VERTICAL_ABS: number;\r\n    readonly PATHSEG_LINETO_VERTICAL_REL: number;\r\n    readonly PATHSEG_MOVETO_ABS: number;\r\n    readonly PATHSEG_MOVETO_REL: number;\r\n    readonly PATHSEG_UNKNOWN: number;\r\n}\r\n\r\ndeclare var SVGPathSeg: {\r\n    prototype: SVGPathSeg;\r\n    new(): SVGPathSeg;\r\n    readonly PATHSEG_ARC_ABS: number;\r\n    readonly PATHSEG_ARC_REL: number;\r\n    readonly PATHSEG_CLOSEPATH: number;\r\n    readonly PATHSEG_CURVETO_CUBIC_ABS: number;\r\n    readonly PATHSEG_CURVETO_CUBIC_REL: number;\r\n    readonly PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\r\n    readonly PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\r\n    readonly PATHSEG_CURVETO_QUADRATIC_ABS: number;\r\n    readonly PATHSEG_CURVETO_QUADRATIC_REL: number;\r\n    readonly PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\r\n    readonly PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\r\n    readonly PATHSEG_LINETO_ABS: number;\r\n    readonly PATHSEG_LINETO_HORIZONTAL_ABS: number;\r\n    readonly PATHSEG_LINETO_HORIZONTAL_REL: number;\r\n    readonly PATHSEG_LINETO_REL: number;\r\n    readonly PATHSEG_LINETO_VERTICAL_ABS: number;\r\n    readonly PATHSEG_LINETO_VERTICAL_REL: number;\r\n    readonly PATHSEG_MOVETO_ABS: number;\r\n    readonly PATHSEG_MOVETO_REL: number;\r\n    readonly PATHSEG_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGPathSegArcAbs extends SVGPathSeg {\r\n    angle: number;\r\n    largeArcFlag: boolean;\r\n    r1: number;\r\n    r2: number;\r\n    sweepFlag: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegArcAbs: {\r\n    prototype: SVGPathSegArcAbs;\r\n    new(): SVGPathSegArcAbs;\r\n}\r\n\r\ninterface SVGPathSegArcRel extends SVGPathSeg {\r\n    angle: number;\r\n    largeArcFlag: boolean;\r\n    r1: number;\r\n    r2: number;\r\n    sweepFlag: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegArcRel: {\r\n    prototype: SVGPathSegArcRel;\r\n    new(): SVGPathSegArcRel;\r\n}\r\n\r\ninterface SVGPathSegClosePath extends SVGPathSeg {\r\n}\r\n\r\ndeclare var SVGPathSegClosePath: {\r\n    prototype: SVGPathSegClosePath;\r\n    new(): SVGPathSegClosePath;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicAbs extends SVGPathSeg {\r\n    x: number;\r\n    x1: number;\r\n    x2: number;\r\n    y: number;\r\n    y1: number;\r\n    y2: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoCubicAbs: {\r\n    prototype: SVGPathSegCurvetoCubicAbs;\r\n    new(): SVGPathSegCurvetoCubicAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicRel extends SVGPathSeg {\r\n    x: number;\r\n    x1: number;\r\n    x2: number;\r\n    y: number;\r\n    y1: number;\r\n    y2: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoCubicRel: {\r\n    prototype: SVGPathSegCurvetoCubicRel;\r\n    new(): SVGPathSegCurvetoCubicRel;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg {\r\n    x: number;\r\n    x2: number;\r\n    y: number;\r\n    y2: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoCubicSmoothAbs: {\r\n    prototype: SVGPathSegCurvetoCubicSmoothAbs;\r\n    new(): SVGPathSegCurvetoCubicSmoothAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg {\r\n    x: number;\r\n    x2: number;\r\n    y: number;\r\n    y2: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoCubicSmoothRel: {\r\n    prototype: SVGPathSegCurvetoCubicSmoothRel;\r\n    new(): SVGPathSegCurvetoCubicSmoothRel;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg {\r\n    x: number;\r\n    x1: number;\r\n    y: number;\r\n    y1: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoQuadraticAbs: {\r\n    prototype: SVGPathSegCurvetoQuadraticAbs;\r\n    new(): SVGPathSegCurvetoQuadraticAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticRel extends SVGPathSeg {\r\n    x: number;\r\n    x1: number;\r\n    y: number;\r\n    y1: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoQuadraticRel: {\r\n    prototype: SVGPathSegCurvetoQuadraticRel;\r\n    new(): SVGPathSegCurvetoQuadraticRel;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoQuadraticSmoothAbs: {\r\n    prototype: SVGPathSegCurvetoQuadraticSmoothAbs;\r\n    new(): SVGPathSegCurvetoQuadraticSmoothAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegCurvetoQuadraticSmoothRel: {\r\n    prototype: SVGPathSegCurvetoQuadraticSmoothRel;\r\n    new(): SVGPathSegCurvetoQuadraticSmoothRel;\r\n}\r\n\r\ninterface SVGPathSegLinetoAbs extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoAbs: {\r\n    prototype: SVGPathSegLinetoAbs;\r\n    new(): SVGPathSegLinetoAbs;\r\n}\r\n\r\ninterface SVGPathSegLinetoHorizontalAbs extends SVGPathSeg {\r\n    x: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoHorizontalAbs: {\r\n    prototype: SVGPathSegLinetoHorizontalAbs;\r\n    new(): SVGPathSegLinetoHorizontalAbs;\r\n}\r\n\r\ninterface SVGPathSegLinetoHorizontalRel extends SVGPathSeg {\r\n    x: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoHorizontalRel: {\r\n    prototype: SVGPathSegLinetoHorizontalRel;\r\n    new(): SVGPathSegLinetoHorizontalRel;\r\n}\r\n\r\ninterface SVGPathSegLinetoRel extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoRel: {\r\n    prototype: SVGPathSegLinetoRel;\r\n    new(): SVGPathSegLinetoRel;\r\n}\r\n\r\ninterface SVGPathSegLinetoVerticalAbs extends SVGPathSeg {\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoVerticalAbs: {\r\n    prototype: SVGPathSegLinetoVerticalAbs;\r\n    new(): SVGPathSegLinetoVerticalAbs;\r\n}\r\n\r\ninterface SVGPathSegLinetoVerticalRel extends SVGPathSeg {\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegLinetoVerticalRel: {\r\n    prototype: SVGPathSegLinetoVerticalRel;\r\n    new(): SVGPathSegLinetoVerticalRel;\r\n}\r\n\r\ninterface SVGPathSegList {\r\n    readonly numberOfItems: number;\r\n    appendItem(newItem: SVGPathSeg): SVGPathSeg;\r\n    clear(): void;\r\n    getItem(index: number): SVGPathSeg;\r\n    initialize(newItem: SVGPathSeg): SVGPathSeg;\r\n    insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg;\r\n    removeItem(index: number): SVGPathSeg;\r\n    replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg;\r\n}\r\n\r\ndeclare var SVGPathSegList: {\r\n    prototype: SVGPathSegList;\r\n    new(): SVGPathSegList;\r\n}\r\n\r\ninterface SVGPathSegMovetoAbs extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegMovetoAbs: {\r\n    prototype: SVGPathSegMovetoAbs;\r\n    new(): SVGPathSegMovetoAbs;\r\n}\r\n\r\ninterface SVGPathSegMovetoRel extends SVGPathSeg {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGPathSegMovetoRel: {\r\n    prototype: SVGPathSegMovetoRel;\r\n    new(): SVGPathSegMovetoRel;\r\n}\r\n\r\ninterface SVGPatternElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox, SVGURIReference, SVGUnitTypes {\r\n    readonly height: SVGAnimatedLength;\r\n    readonly patternContentUnits: SVGAnimatedEnumeration;\r\n    readonly patternTransform: SVGAnimatedTransformList;\r\n    readonly patternUnits: SVGAnimatedEnumeration;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGPatternElement: {\r\n    prototype: SVGPatternElement;\r\n    new(): SVGPatternElement;\r\n}\r\n\r\ninterface SVGPoint {\r\n    x: number;\r\n    y: number;\r\n    matrixTransform(matrix: SVGMatrix): SVGPoint;\r\n}\r\n\r\ndeclare var SVGPoint: {\r\n    prototype: SVGPoint;\r\n    new(): SVGPoint;\r\n}\r\n\r\ninterface SVGPointList {\r\n    readonly numberOfItems: number;\r\n    appendItem(newItem: SVGPoint): SVGPoint;\r\n    clear(): void;\r\n    getItem(index: number): SVGPoint;\r\n    initialize(newItem: SVGPoint): SVGPoint;\r\n    insertItemBefore(newItem: SVGPoint, index: number): SVGPoint;\r\n    removeItem(index: number): SVGPoint;\r\n    replaceItem(newItem: SVGPoint, index: number): SVGPoint;\r\n}\r\n\r\ndeclare var SVGPointList: {\r\n    prototype: SVGPointList;\r\n    new(): SVGPointList;\r\n}\r\n\r\ninterface SVGPolygonElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPoints {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGPolygonElement: {\r\n    prototype: SVGPolygonElement;\r\n    new(): SVGPolygonElement;\r\n}\r\n\r\ninterface SVGPolylineElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGAnimatedPoints {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGPolylineElement: {\r\n    prototype: SVGPolylineElement;\r\n    new(): SVGPolylineElement;\r\n}\r\n\r\ninterface SVGPreserveAspectRatio {\r\n    align: number;\r\n    meetOrSlice: number;\r\n    readonly SVG_MEETORSLICE_MEET: number;\r\n    readonly SVG_MEETORSLICE_SLICE: number;\r\n    readonly SVG_MEETORSLICE_UNKNOWN: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_NONE: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMID: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\r\n}\r\n\r\ndeclare var SVGPreserveAspectRatio: {\r\n    prototype: SVGPreserveAspectRatio;\r\n    new(): SVGPreserveAspectRatio;\r\n    readonly SVG_MEETORSLICE_MEET: number;\r\n    readonly SVG_MEETORSLICE_SLICE: number;\r\n    readonly SVG_MEETORSLICE_UNKNOWN: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_NONE: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMID: number;\r\n    readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\r\n}\r\n\r\ninterface SVGRadialGradientElement extends SVGGradientElement {\r\n    readonly cx: SVGAnimatedLength;\r\n    readonly cy: SVGAnimatedLength;\r\n    readonly fx: SVGAnimatedLength;\r\n    readonly fy: SVGAnimatedLength;\r\n    readonly r: SVGAnimatedLength;\r\n}\r\n\r\ndeclare var SVGRadialGradientElement: {\r\n    prototype: SVGRadialGradientElement;\r\n    new(): SVGRadialGradientElement;\r\n}\r\n\r\ninterface SVGRect {\r\n    height: number;\r\n    width: number;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var SVGRect: {\r\n    prototype: SVGRect;\r\n    new(): SVGRect;\r\n}\r\n\r\ninterface SVGRectElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    readonly height: SVGAnimatedLength;\r\n    readonly rx: SVGAnimatedLength;\r\n    readonly ry: SVGAnimatedLength;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGRectElement: {\r\n    prototype: SVGRectElement;\r\n    new(): SVGRectElement;\r\n}\r\n\r\ninterface SVGSVGElement extends SVGElement, DocumentEvent, SVGLocatable, SVGTests, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox, SVGZoomAndPan {\r\n    contentScriptType: string;\r\n    contentStyleType: string;\r\n    currentScale: number;\r\n    readonly currentTranslate: SVGPoint;\r\n    readonly height: SVGAnimatedLength;\r\n    onabort: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onscroll: (ev: UIEvent) => any;\r\n    onunload: (ev: Event) => any;\r\n    onzoom: (ev: SVGZoomEvent) => any;\r\n    readonly pixelUnitToMillimeterX: number;\r\n    readonly pixelUnitToMillimeterY: number;\r\n    readonly screenPixelToMillimeterX: number;\r\n    readonly screenPixelToMillimeterY: number;\r\n    readonly viewport: SVGRect;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n    checkEnclosure(element: SVGElement, rect: SVGRect): boolean;\r\n    checkIntersection(element: SVGElement, rect: SVGRect): boolean;\r\n    createSVGAngle(): SVGAngle;\r\n    createSVGLength(): SVGLength;\r\n    createSVGMatrix(): SVGMatrix;\r\n    createSVGNumber(): SVGNumber;\r\n    createSVGPoint(): SVGPoint;\r\n    createSVGRect(): SVGRect;\r\n    createSVGTransform(): SVGTransform;\r\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\r\n    deselectAll(): void;\r\n    forceRedraw(): void;\r\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\n    getCurrentTime(): number;\r\n    getElementById(elementId: string): Element;\r\n    getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>;\r\n    getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>;\r\n    pauseAnimations(): void;\r\n    setCurrentTime(seconds: number): void;\r\n    suspendRedraw(maxWaitMilliseconds: number): number;\r\n    unpauseAnimations(): void;\r\n    unsuspendRedraw(suspendHandleID: number): void;\r\n    unsuspendRedrawAll(): void;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGotPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSLostPointerCapture\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"SVGAbort\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"SVGError\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"SVGUnload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"SVGZoom\", listener: (ev: SVGZoomEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ariarequest\", listener: (ev: AriaRequestEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"command\", listener: (ev: CommandEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchcancel\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchend\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchmove\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"touchstart\", listener: (ev: TouchEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"webkitfullscreenerror\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGSVGElement: {\r\n    prototype: SVGSVGElement;\r\n    new(): SVGSVGElement;\r\n}\r\n\r\ninterface SVGScriptElement extends SVGElement, SVGExternalResourcesRequired, SVGURIReference {\r\n    type: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGScriptElement: {\r\n    prototype: SVGScriptElement;\r\n    new(): SVGScriptElement;\r\n}\r\n\r\ninterface SVGStopElement extends SVGElement, SVGStylable {\r\n    readonly offset: SVGAnimatedNumber;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGStopElement: {\r\n    prototype: SVGStopElement;\r\n    new(): SVGStopElement;\r\n}\r\n\r\ninterface SVGStringList {\r\n    readonly numberOfItems: number;\r\n    appendItem(newItem: string): string;\r\n    clear(): void;\r\n    getItem(index: number): string;\r\n    initialize(newItem: string): string;\r\n    insertItemBefore(newItem: string, index: number): string;\r\n    removeItem(index: number): string;\r\n    replaceItem(newItem: string, index: number): string;\r\n}\r\n\r\ndeclare var SVGStringList: {\r\n    prototype: SVGStringList;\r\n    new(): SVGStringList;\r\n}\r\n\r\ninterface SVGStyleElement extends SVGElement, SVGLangSpace {\r\n    disabled: boolean;\r\n    media: string;\r\n    title: string;\r\n    type: string;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGStyleElement: {\r\n    prototype: SVGStyleElement;\r\n    new(): SVGStyleElement;\r\n}\r\n\r\ninterface SVGSwitchElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGSwitchElement: {\r\n    prototype: SVGSwitchElement;\r\n    new(): SVGSwitchElement;\r\n}\r\n\r\ninterface SVGSymbolElement extends SVGElement, SVGStylable, SVGLangSpace, SVGExternalResourcesRequired, SVGFitToViewBox {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGSymbolElement: {\r\n    prototype: SVGSymbolElement;\r\n    new(): SVGSymbolElement;\r\n}\r\n\r\ninterface SVGTSpanElement extends SVGTextPositioningElement {\r\n}\r\n\r\ndeclare var SVGTSpanElement: {\r\n    prototype: SVGTSpanElement;\r\n    new(): SVGTSpanElement;\r\n}\r\n\r\ninterface SVGTextContentElement extends SVGElement, SVGStylable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired {\r\n    readonly lengthAdjust: SVGAnimatedEnumeration;\r\n    readonly textLength: SVGAnimatedLength;\r\n    getCharNumAtPosition(point: SVGPoint): number;\r\n    getComputedTextLength(): number;\r\n    getEndPositionOfChar(charnum: number): SVGPoint;\r\n    getExtentOfChar(charnum: number): SVGRect;\r\n    getNumberOfChars(): number;\r\n    getRotationOfChar(charnum: number): number;\r\n    getStartPositionOfChar(charnum: number): SVGPoint;\r\n    getSubStringLength(charnum: number, nchars: number): number;\r\n    selectSubString(charnum: number, nchars: number): void;\r\n    readonly LENGTHADJUST_SPACING: number;\r\n    readonly LENGTHADJUST_SPACINGANDGLYPHS: number;\r\n    readonly LENGTHADJUST_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGTextContentElement: {\r\n    prototype: SVGTextContentElement;\r\n    new(): SVGTextContentElement;\r\n    readonly LENGTHADJUST_SPACING: number;\r\n    readonly LENGTHADJUST_SPACINGANDGLYPHS: number;\r\n    readonly LENGTHADJUST_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGTextElement extends SVGTextPositioningElement, SVGTransformable {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGTextElement: {\r\n    prototype: SVGTextElement;\r\n    new(): SVGTextElement;\r\n}\r\n\r\ninterface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {\r\n    readonly method: SVGAnimatedEnumeration;\r\n    readonly spacing: SVGAnimatedEnumeration;\r\n    readonly startOffset: SVGAnimatedLength;\r\n    readonly TEXTPATH_METHODTYPE_ALIGN: number;\r\n    readonly TEXTPATH_METHODTYPE_STRETCH: number;\r\n    readonly TEXTPATH_METHODTYPE_UNKNOWN: number;\r\n    readonly TEXTPATH_SPACINGTYPE_AUTO: number;\r\n    readonly TEXTPATH_SPACINGTYPE_EXACT: number;\r\n    readonly TEXTPATH_SPACINGTYPE_UNKNOWN: number;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGTextPathElement: {\r\n    prototype: SVGTextPathElement;\r\n    new(): SVGTextPathElement;\r\n    readonly TEXTPATH_METHODTYPE_ALIGN: number;\r\n    readonly TEXTPATH_METHODTYPE_STRETCH: number;\r\n    readonly TEXTPATH_METHODTYPE_UNKNOWN: number;\r\n    readonly TEXTPATH_SPACINGTYPE_AUTO: number;\r\n    readonly TEXTPATH_SPACINGTYPE_EXACT: number;\r\n    readonly TEXTPATH_SPACINGTYPE_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGTextPositioningElement extends SVGTextContentElement {\r\n    readonly dx: SVGAnimatedLengthList;\r\n    readonly dy: SVGAnimatedLengthList;\r\n    readonly rotate: SVGAnimatedNumberList;\r\n    readonly x: SVGAnimatedLengthList;\r\n    readonly y: SVGAnimatedLengthList;\r\n}\r\n\r\ndeclare var SVGTextPositioningElement: {\r\n    prototype: SVGTextPositioningElement;\r\n    new(): SVGTextPositioningElement;\r\n}\r\n\r\ninterface SVGTitleElement extends SVGElement, SVGStylable, SVGLangSpace {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGTitleElement: {\r\n    prototype: SVGTitleElement;\r\n    new(): SVGTitleElement;\r\n}\r\n\r\ninterface SVGTransform {\r\n    readonly angle: number;\r\n    readonly matrix: SVGMatrix;\r\n    readonly type: number;\r\n    setMatrix(matrix: SVGMatrix): void;\r\n    setRotate(angle: number, cx: number, cy: number): void;\r\n    setScale(sx: number, sy: number): void;\r\n    setSkewX(angle: number): void;\r\n    setSkewY(angle: number): void;\r\n    setTranslate(tx: number, ty: number): void;\r\n    readonly SVG_TRANSFORM_MATRIX: number;\r\n    readonly SVG_TRANSFORM_ROTATE: number;\r\n    readonly SVG_TRANSFORM_SCALE: number;\r\n    readonly SVG_TRANSFORM_SKEWX: number;\r\n    readonly SVG_TRANSFORM_SKEWY: number;\r\n    readonly SVG_TRANSFORM_TRANSLATE: number;\r\n    readonly SVG_TRANSFORM_UNKNOWN: number;\r\n}\r\n\r\ndeclare var SVGTransform: {\r\n    prototype: SVGTransform;\r\n    new(): SVGTransform;\r\n    readonly SVG_TRANSFORM_MATRIX: number;\r\n    readonly SVG_TRANSFORM_ROTATE: number;\r\n    readonly SVG_TRANSFORM_SCALE: number;\r\n    readonly SVG_TRANSFORM_SKEWX: number;\r\n    readonly SVG_TRANSFORM_SKEWY: number;\r\n    readonly SVG_TRANSFORM_TRANSLATE: number;\r\n    readonly SVG_TRANSFORM_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGTransformList {\r\n    readonly numberOfItems: number;\r\n    appendItem(newItem: SVGTransform): SVGTransform;\r\n    clear(): void;\r\n    consolidate(): SVGTransform;\r\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\r\n    getItem(index: number): SVGTransform;\r\n    initialize(newItem: SVGTransform): SVGTransform;\r\n    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;\r\n    removeItem(index: number): SVGTransform;\r\n    replaceItem(newItem: SVGTransform, index: number): SVGTransform;\r\n}\r\n\r\ndeclare var SVGTransformList: {\r\n    prototype: SVGTransformList;\r\n    new(): SVGTransformList;\r\n}\r\n\r\ninterface SVGUnitTypes {\r\n    readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\r\n    readonly SVG_UNIT_TYPE_UNKNOWN: number;\r\n    readonly SVG_UNIT_TYPE_USERSPACEONUSE: number;\r\n}\r\ndeclare var SVGUnitTypes: SVGUnitTypes;\r\n\r\ninterface SVGUseElement extends SVGElement, SVGStylable, SVGTransformable, SVGTests, SVGLangSpace, SVGExternalResourcesRequired, SVGURIReference {\r\n    readonly animatedInstanceRoot: SVGElementInstance;\r\n    readonly height: SVGAnimatedLength;\r\n    readonly instanceRoot: SVGElementInstance;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGUseElement: {\r\n    prototype: SVGUseElement;\r\n    new(): SVGUseElement;\r\n}\r\n\r\ninterface SVGViewElement extends SVGElement, SVGExternalResourcesRequired, SVGFitToViewBox, SVGZoomAndPan {\r\n    readonly viewTarget: SVGStringList;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var SVGViewElement: {\r\n    prototype: SVGViewElement;\r\n    new(): SVGViewElement;\r\n}\r\n\r\ninterface SVGZoomAndPan {\r\n    readonly zoomAndPan: number;\r\n}\r\n\r\ndeclare var SVGZoomAndPan: {\r\n    readonly SVG_ZOOMANDPAN_DISABLE: number;\r\n    readonly SVG_ZOOMANDPAN_MAGNIFY: number;\r\n    readonly SVG_ZOOMANDPAN_UNKNOWN: number;\r\n}\r\n\r\ninterface SVGZoomEvent extends UIEvent {\r\n    readonly newScale: number;\r\n    readonly newTranslate: SVGPoint;\r\n    readonly previousScale: number;\r\n    readonly previousTranslate: SVGPoint;\r\n    readonly zoomRectScreen: SVGRect;\r\n}\r\n\r\ndeclare var SVGZoomEvent: {\r\n    prototype: SVGZoomEvent;\r\n    new(): SVGZoomEvent;\r\n}\r\n\r\ninterface Screen extends EventTarget {\r\n    readonly availHeight: number;\r\n    readonly availWidth: number;\r\n    bufferDepth: number;\r\n    readonly colorDepth: number;\r\n    readonly deviceXDPI: number;\r\n    readonly deviceYDPI: number;\r\n    readonly fontSmoothingEnabled: boolean;\r\n    readonly height: number;\r\n    readonly logicalXDPI: number;\r\n    readonly logicalYDPI: number;\r\n    readonly msOrientation: string;\r\n    onmsorientationchange: (ev: Event) => any;\r\n    readonly pixelDepth: number;\r\n    readonly systemXDPI: number;\r\n    readonly systemYDPI: number;\r\n    readonly width: number;\r\n    msLockOrientation(orientations: string | string[]): boolean;\r\n    msUnlockOrientation(): void;\r\n    addEventListener(type: \"MSOrientationChange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Screen: {\r\n    prototype: Screen;\r\n    new(): Screen;\r\n}\r\n\r\ninterface ScriptNotifyEvent extends Event {\r\n    readonly callingUri: string;\r\n    readonly value: string;\r\n}\r\n\r\ndeclare var ScriptNotifyEvent: {\r\n    prototype: ScriptNotifyEvent;\r\n    new(): ScriptNotifyEvent;\r\n}\r\n\r\ninterface ScriptProcessorNode extends AudioNode {\r\n    readonly bufferSize: number;\r\n    onaudioprocess: (ev: AudioProcessingEvent) => any;\r\n    addEventListener(type: \"audioprocess\", listener: (ev: AudioProcessingEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var ScriptProcessorNode: {\r\n    prototype: ScriptProcessorNode;\r\n    new(): ScriptProcessorNode;\r\n}\r\n\r\ninterface Selection {\r\n    readonly anchorNode: Node;\r\n    readonly anchorOffset: number;\r\n    readonly focusNode: Node;\r\n    readonly focusOffset: number;\r\n    readonly isCollapsed: boolean;\r\n    readonly rangeCount: number;\r\n    readonly type: string;\r\n    addRange(range: Range): void;\r\n    collapse(parentNode: Node, offset: number): void;\r\n    collapseToEnd(): void;\r\n    collapseToStart(): void;\r\n    containsNode(node: Node, partlyContained: boolean): boolean;\r\n    deleteFromDocument(): void;\r\n    empty(): void;\r\n    extend(newNode: Node, offset: number): void;\r\n    getRangeAt(index: number): Range;\r\n    removeAllRanges(): void;\r\n    removeRange(range: Range): void;\r\n    selectAllChildren(parentNode: Node): void;\r\n    setBaseAndExtent(baseNode: Node, baseOffset: number, extentNode: Node, extentOffset: number): void;\r\n    toString(): string;\r\n}\r\n\r\ndeclare var Selection: {\r\n    prototype: Selection;\r\n    new(): Selection;\r\n}\r\n\r\ninterface SourceBuffer extends EventTarget {\r\n    appendWindowEnd: number;\r\n    appendWindowStart: number;\r\n    readonly audioTracks: AudioTrackList;\r\n    readonly buffered: TimeRanges;\r\n    mode: string;\r\n    timestampOffset: number;\r\n    readonly updating: boolean;\r\n    readonly videoTracks: VideoTrackList;\r\n    abort(): void;\r\n    appendBuffer(data: ArrayBuffer | ArrayBufferView): void;\r\n    appendStream(stream: MSStream, maxSize?: number): void;\r\n    remove(start: number, end: number): void;\r\n}\r\n\r\ndeclare var SourceBuffer: {\r\n    prototype: SourceBuffer;\r\n    new(): SourceBuffer;\r\n}\r\n\r\ninterface SourceBufferList extends EventTarget {\r\n    readonly length: number;\r\n    item(index: number): SourceBuffer;\r\n    [index: number]: SourceBuffer;\r\n}\r\n\r\ndeclare var SourceBufferList: {\r\n    prototype: SourceBufferList;\r\n    new(): SourceBufferList;\r\n}\r\n\r\ninterface StereoPannerNode extends AudioNode {\r\n    readonly pan: AudioParam;\r\n}\r\n\r\ndeclare var StereoPannerNode: {\r\n    prototype: StereoPannerNode;\r\n    new(): StereoPannerNode;\r\n}\r\n\r\ninterface Storage {\r\n    readonly length: number;\r\n    clear(): void;\r\n    getItem(key: string): string;\r\n    key(index: number): string;\r\n    removeItem(key: string): void;\r\n    setItem(key: string, data: string): void;\r\n    [key: string]: any;\r\n    [index: number]: string;\r\n}\r\n\r\ndeclare var Storage: {\r\n    prototype: Storage;\r\n    new(): Storage;\r\n}\r\n\r\ninterface StorageEvent extends Event {\r\n    readonly url: string;\r\n    key?: string;\r\n    oldValue?: string;\r\n    newValue?: string;\r\n    storageArea?: Storage;\r\n}\r\n\r\ndeclare var StorageEvent: {\r\n    prototype: StorageEvent;\r\n    new (type: string, eventInitDict?: StorageEventInit): StorageEvent;\r\n}\r\n\r\ninterface StyleMedia {\r\n    readonly type: string;\r\n    matchMedium(mediaquery: string): boolean;\r\n}\r\n\r\ndeclare var StyleMedia: {\r\n    prototype: StyleMedia;\r\n    new(): StyleMedia;\r\n}\r\n\r\ninterface StyleSheet {\r\n    disabled: boolean;\r\n    readonly href: string;\r\n    readonly media: MediaList;\r\n    readonly ownerNode: Node;\r\n    readonly parentStyleSheet: StyleSheet;\r\n    readonly title: string;\r\n    readonly type: string;\r\n}\r\n\r\ndeclare var StyleSheet: {\r\n    prototype: StyleSheet;\r\n    new(): StyleSheet;\r\n}\r\n\r\ninterface StyleSheetList {\r\n    readonly length: number;\r\n    item(index?: number): StyleSheet;\r\n    [index: number]: StyleSheet;\r\n}\r\n\r\ndeclare var StyleSheetList: {\r\n    prototype: StyleSheetList;\r\n    new(): StyleSheetList;\r\n}\r\n\r\ninterface StyleSheetPageList {\r\n    readonly length: number;\r\n    item(index: number): CSSPageRule;\r\n    [index: number]: CSSPageRule;\r\n}\r\n\r\ndeclare var StyleSheetPageList: {\r\n    prototype: StyleSheetPageList;\r\n    new(): StyleSheetPageList;\r\n}\r\n\r\ninterface SubtleCrypto {\r\n    decrypt(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): PromiseLike<any>;\r\n    deriveBits(algorithm: string | Algorithm, baseKey: CryptoKey, length: number): PromiseLike<any>;\r\n    deriveKey(algorithm: string | Algorithm, baseKey: CryptoKey, derivedKeyType: string | Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<any>;\r\n    digest(algorithm: string | Algorithm, data: ArrayBufferView): PromiseLike<any>;\r\n    encrypt(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): PromiseLike<any>;\r\n    exportKey(format: string, key: CryptoKey): PromiseLike<any>;\r\n    generateKey(algorithm: string | Algorithm, extractable: boolean, keyUsages: string[]): PromiseLike<any>;\r\n    importKey(format: string, keyData: ArrayBufferView, algorithm: string | Algorithm | null, extractable: boolean, keyUsages: string[]): PromiseLike<any>;\r\n    sign(algorithm: string | Algorithm, key: CryptoKey, data: ArrayBufferView): PromiseLike<any>;\r\n    unwrapKey(format: string, wrappedKey: ArrayBufferView, unwrappingKey: CryptoKey, unwrapAlgorithm: string | Algorithm, unwrappedKeyAlgorithm: string | Algorithm | null, extractable: boolean, keyUsages: string[]): PromiseLike<any>;\r\n    verify(algorithm: string | Algorithm, key: CryptoKey, signature: ArrayBufferView, data: ArrayBufferView): PromiseLike<any>;\r\n    wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: string | Algorithm): PromiseLike<any>;\r\n}\r\n\r\ndeclare var SubtleCrypto: {\r\n    prototype: SubtleCrypto;\r\n    new(): SubtleCrypto;\r\n}\r\n\r\ninterface Text extends CharacterData {\r\n    readonly wholeText: string;\r\n    splitText(offset: number): Text;\r\n}\r\n\r\ndeclare var Text: {\r\n    prototype: Text;\r\n    new(): Text;\r\n}\r\n\r\ninterface TextEvent extends UIEvent {\r\n    readonly data: string;\r\n    readonly inputMethod: number;\r\n    readonly locale: string;\r\n    initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void;\r\n    readonly DOM_INPUT_METHOD_DROP: number;\r\n    readonly DOM_INPUT_METHOD_HANDWRITING: number;\r\n    readonly DOM_INPUT_METHOD_IME: number;\r\n    readonly DOM_INPUT_METHOD_KEYBOARD: number;\r\n    readonly DOM_INPUT_METHOD_MULTIMODAL: number;\r\n    readonly DOM_INPUT_METHOD_OPTION: number;\r\n    readonly DOM_INPUT_METHOD_PASTE: number;\r\n    readonly DOM_INPUT_METHOD_SCRIPT: number;\r\n    readonly DOM_INPUT_METHOD_UNKNOWN: number;\r\n    readonly DOM_INPUT_METHOD_VOICE: number;\r\n}\r\n\r\ndeclare var TextEvent: {\r\n    prototype: TextEvent;\r\n    new(): TextEvent;\r\n    readonly DOM_INPUT_METHOD_DROP: number;\r\n    readonly DOM_INPUT_METHOD_HANDWRITING: number;\r\n    readonly DOM_INPUT_METHOD_IME: number;\r\n    readonly DOM_INPUT_METHOD_KEYBOARD: number;\r\n    readonly DOM_INPUT_METHOD_MULTIMODAL: number;\r\n    readonly DOM_INPUT_METHOD_OPTION: number;\r\n    readonly DOM_INPUT_METHOD_PASTE: number;\r\n    readonly DOM_INPUT_METHOD_SCRIPT: number;\r\n    readonly DOM_INPUT_METHOD_UNKNOWN: number;\r\n    readonly DOM_INPUT_METHOD_VOICE: number;\r\n}\r\n\r\ninterface TextMetrics {\r\n    readonly width: number;\r\n}\r\n\r\ndeclare var TextMetrics: {\r\n    prototype: TextMetrics;\r\n    new(): TextMetrics;\r\n}\r\n\r\ninterface TextTrack extends EventTarget {\r\n    readonly activeCues: TextTrackCueList;\r\n    readonly cues: TextTrackCueList;\r\n    readonly inBandMetadataTrackDispatchType: string;\r\n    readonly kind: string;\r\n    readonly label: string;\r\n    readonly language: string;\r\n    mode: any;\r\n    oncuechange: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onload: (ev: Event) => any;\r\n    readonly readyState: number;\r\n    addCue(cue: TextTrackCue): void;\r\n    removeCue(cue: TextTrackCue): void;\r\n    readonly DISABLED: number;\r\n    readonly ERROR: number;\r\n    readonly HIDDEN: number;\r\n    readonly LOADED: number;\r\n    readonly LOADING: number;\r\n    readonly NONE: number;\r\n    readonly SHOWING: number;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var TextTrack: {\r\n    prototype: TextTrack;\r\n    new(): TextTrack;\r\n    readonly DISABLED: number;\r\n    readonly ERROR: number;\r\n    readonly HIDDEN: number;\r\n    readonly LOADED: number;\r\n    readonly LOADING: number;\r\n    readonly NONE: number;\r\n    readonly SHOWING: number;\r\n}\r\n\r\ninterface TextTrackCue extends EventTarget {\r\n    endTime: number;\r\n    id: string;\r\n    onenter: (ev: Event) => any;\r\n    onexit: (ev: Event) => any;\r\n    pauseOnExit: boolean;\r\n    startTime: number;\r\n    text: string;\r\n    readonly track: TextTrack;\r\n    getCueAsHTML(): DocumentFragment;\r\n    addEventListener(type: \"enter\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"exit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var TextTrackCue: {\r\n    prototype: TextTrackCue;\r\n    new(startTime: number, endTime: number, text: string): TextTrackCue;\r\n}\r\n\r\ninterface TextTrackCueList {\r\n    readonly length: number;\r\n    getCueById(id: string): TextTrackCue;\r\n    item(index: number): TextTrackCue;\r\n    [index: number]: TextTrackCue;\r\n}\r\n\r\ndeclare var TextTrackCueList: {\r\n    prototype: TextTrackCueList;\r\n    new(): TextTrackCueList;\r\n}\r\n\r\ninterface TextTrackList extends EventTarget {\r\n    readonly length: number;\r\n    onaddtrack: ((ev: TrackEvent) => any) | null;\r\n    item(index: number): TextTrack;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    [index: number]: TextTrack;\r\n}\r\n\r\ndeclare var TextTrackList: {\r\n    prototype: TextTrackList;\r\n    new(): TextTrackList;\r\n}\r\n\r\ninterface TimeRanges {\r\n    readonly length: number;\r\n    end(index: number): number;\r\n    start(index: number): number;\r\n}\r\n\r\ndeclare var TimeRanges: {\r\n    prototype: TimeRanges;\r\n    new(): TimeRanges;\r\n}\r\n\r\ninterface Touch {\r\n    readonly clientX: number;\r\n    readonly clientY: number;\r\n    readonly identifier: number;\r\n    readonly pageX: number;\r\n    readonly pageY: number;\r\n    readonly screenX: number;\r\n    readonly screenY: number;\r\n    readonly target: EventTarget;\r\n}\r\n\r\ndeclare var Touch: {\r\n    prototype: Touch;\r\n    new(): Touch;\r\n}\r\n\r\ninterface TouchEvent extends UIEvent {\r\n    readonly altKey: boolean;\r\n    readonly changedTouches: TouchList;\r\n    readonly ctrlKey: boolean;\r\n    readonly metaKey: boolean;\r\n    readonly shiftKey: boolean;\r\n    readonly targetTouches: TouchList;\r\n    readonly touches: TouchList;\r\n}\r\n\r\ndeclare var TouchEvent: {\r\n    prototype: TouchEvent;\r\n    new(): TouchEvent;\r\n}\r\n\r\ninterface TouchList {\r\n    readonly length: number;\r\n    item(index: number): Touch | null;\r\n    [index: number]: Touch;\r\n}\r\n\r\ndeclare var TouchList: {\r\n    prototype: TouchList;\r\n    new(): TouchList;\r\n}\r\n\r\ninterface TrackEvent extends Event {\r\n    readonly track: any;\r\n}\r\n\r\ndeclare var TrackEvent: {\r\n    prototype: TrackEvent;\r\n    new(): TrackEvent;\r\n}\r\n\r\ninterface TransitionEvent extends Event {\r\n    readonly elapsedTime: number;\r\n    readonly propertyName: string;\r\n    initTransitionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, propertyNameArg: string, elapsedTimeArg: number): void;\r\n}\r\n\r\ndeclare var TransitionEvent: {\r\n    prototype: TransitionEvent;\r\n    new(): TransitionEvent;\r\n}\r\n\r\ninterface TreeWalker {\r\n    currentNode: Node;\r\n    readonly expandEntityReferences: boolean;\r\n    readonly filter: NodeFilter;\r\n    readonly root: Node;\r\n    readonly whatToShow: number;\r\n    firstChild(): Node;\r\n    lastChild(): Node;\r\n    nextNode(): Node;\r\n    nextSibling(): Node;\r\n    parentNode(): Node;\r\n    previousNode(): Node;\r\n    previousSibling(): Node;\r\n}\r\n\r\ndeclare var TreeWalker: {\r\n    prototype: TreeWalker;\r\n    new(): TreeWalker;\r\n}\r\n\r\ninterface UIEvent extends Event {\r\n    readonly detail: number;\r\n    readonly view: Window;\r\n    initUIEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number): void;\r\n}\r\n\r\ndeclare var UIEvent: {\r\n    prototype: UIEvent;\r\n    new(type: string, eventInitDict?: UIEventInit): UIEvent;\r\n}\r\n\r\ninterface URL {\r\n    hash: string;\r\n    host: string;\r\n    hostname: string;\r\n    href: string;\r\n    readonly origin: string;\r\n    password: string;\r\n    pathname: string;\r\n    port: string;\r\n    protocol: string;\r\n    search: string;\r\n    username: string;\r\n    toString(): string;\r\n}\r\n\r\ndeclare var URL: {\r\n    prototype: URL;\r\n    new(url: string, base?: string): URL;\r\n    createObjectURL(object: any, options?: ObjectURLOptions): string;\r\n    revokeObjectURL(url: string): void;\r\n}\r\n\r\ninterface UnviewableContentIdentifiedEvent extends NavigationEventWithReferrer {\r\n    readonly mediaType: string;\r\n}\r\n\r\ndeclare var UnviewableContentIdentifiedEvent: {\r\n    prototype: UnviewableContentIdentifiedEvent;\r\n    new(): UnviewableContentIdentifiedEvent;\r\n}\r\n\r\ninterface ValidityState {\r\n    readonly badInput: boolean;\r\n    readonly customError: boolean;\r\n    readonly patternMismatch: boolean;\r\n    readonly rangeOverflow: boolean;\r\n    readonly rangeUnderflow: boolean;\r\n    readonly stepMismatch: boolean;\r\n    readonly tooLong: boolean;\r\n    readonly typeMismatch: boolean;\r\n    readonly valid: boolean;\r\n    readonly valueMissing: boolean;\r\n}\r\n\r\ndeclare var ValidityState: {\r\n    prototype: ValidityState;\r\n    new(): ValidityState;\r\n}\r\n\r\ninterface VideoPlaybackQuality {\r\n    readonly corruptedVideoFrames: number;\r\n    readonly creationTime: number;\r\n    readonly droppedVideoFrames: number;\r\n    readonly totalFrameDelay: number;\r\n    readonly totalVideoFrames: number;\r\n}\r\n\r\ndeclare var VideoPlaybackQuality: {\r\n    prototype: VideoPlaybackQuality;\r\n    new(): VideoPlaybackQuality;\r\n}\r\n\r\ninterface VideoTrack {\r\n    readonly id: string;\r\n    kind: string;\r\n    readonly label: string;\r\n    language: string;\r\n    selected: boolean;\r\n    readonly sourceBuffer: SourceBuffer;\r\n}\r\n\r\ndeclare var VideoTrack: {\r\n    prototype: VideoTrack;\r\n    new(): VideoTrack;\r\n}\r\n\r\ninterface VideoTrackList extends EventTarget {\r\n    readonly length: number;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    onchange: (ev: Event) => any;\r\n    onremovetrack: (ev: TrackEvent) => any;\r\n    readonly selectedIndex: number;\r\n    getTrackById(id: string): VideoTrack | null;\r\n    item(index: number): VideoTrack;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"removetrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    [index: number]: VideoTrack;\r\n}\r\n\r\ndeclare var VideoTrackList: {\r\n    prototype: VideoTrackList;\r\n    new(): VideoTrackList;\r\n}\r\n\r\ninterface WEBGL_compressed_texture_s3tc {\r\n    readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: number;\r\n    readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: number;\r\n    readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: number;\r\n    readonly COMPRESSED_RGB_S3TC_DXT1_EXT: number;\r\n}\r\n\r\ndeclare var WEBGL_compressed_texture_s3tc: {\r\n    prototype: WEBGL_compressed_texture_s3tc;\r\n    new(): WEBGL_compressed_texture_s3tc;\r\n    readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: number;\r\n    readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: number;\r\n    readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: number;\r\n    readonly COMPRESSED_RGB_S3TC_DXT1_EXT: number;\r\n}\r\n\r\ninterface WEBGL_debug_renderer_info {\r\n    readonly UNMASKED_RENDERER_WEBGL: number;\r\n    readonly UNMASKED_VENDOR_WEBGL: number;\r\n}\r\n\r\ndeclare var WEBGL_debug_renderer_info: {\r\n    prototype: WEBGL_debug_renderer_info;\r\n    new(): WEBGL_debug_renderer_info;\r\n    readonly UNMASKED_RENDERER_WEBGL: number;\r\n    readonly UNMASKED_VENDOR_WEBGL: number;\r\n}\r\n\r\ninterface WEBGL_depth_texture {\r\n    readonly UNSIGNED_INT_24_8_WEBGL: number;\r\n}\r\n\r\ndeclare var WEBGL_depth_texture: {\r\n    prototype: WEBGL_depth_texture;\r\n    new(): WEBGL_depth_texture;\r\n    readonly UNSIGNED_INT_24_8_WEBGL: number;\r\n}\r\n\r\ninterface WaveShaperNode extends AudioNode {\r\n    curve: Float32Array | null;\r\n    oversample: string;\r\n}\r\n\r\ndeclare var WaveShaperNode: {\r\n    prototype: WaveShaperNode;\r\n    new(): WaveShaperNode;\r\n}\r\n\r\ninterface WebGLActiveInfo {\r\n    readonly name: string;\r\n    readonly size: number;\r\n    readonly type: number;\r\n}\r\n\r\ndeclare var WebGLActiveInfo: {\r\n    prototype: WebGLActiveInfo;\r\n    new(): WebGLActiveInfo;\r\n}\r\n\r\ninterface WebGLBuffer extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLBuffer: {\r\n    prototype: WebGLBuffer;\r\n    new(): WebGLBuffer;\r\n}\r\n\r\ninterface WebGLContextEvent extends Event {\r\n    readonly statusMessage: string;\r\n}\r\n\r\ndeclare var WebGLContextEvent: {\r\n    prototype: WebGLContextEvent;\r\n    new(type: string, eventInitDict?: WebGLContextEventInit): WebGLContextEvent;\r\n}\r\n\r\ninterface WebGLFramebuffer extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLFramebuffer: {\r\n    prototype: WebGLFramebuffer;\r\n    new(): WebGLFramebuffer;\r\n}\r\n\r\ninterface WebGLObject {\r\n}\r\n\r\ndeclare var WebGLObject: {\r\n    prototype: WebGLObject;\r\n    new(): WebGLObject;\r\n}\r\n\r\ninterface WebGLProgram extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLProgram: {\r\n    prototype: WebGLProgram;\r\n    new(): WebGLProgram;\r\n}\r\n\r\ninterface WebGLRenderbuffer extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLRenderbuffer: {\r\n    prototype: WebGLRenderbuffer;\r\n    new(): WebGLRenderbuffer;\r\n}\r\n\r\ninterface WebGLRenderingContext {\r\n    readonly canvas: HTMLCanvasElement;\r\n    readonly drawingBufferHeight: number;\r\n    readonly drawingBufferWidth: number;\r\n    activeTexture(texture: number): void;\r\n    attachShader(program: WebGLProgram | null, shader: WebGLShader | null): void;\r\n    bindAttribLocation(program: WebGLProgram | null, index: number, name: string): void;\r\n    bindBuffer(target: number, buffer: WebGLBuffer | null): void;\r\n    bindFramebuffer(target: number, framebuffer: WebGLFramebuffer | null): void;\r\n    bindRenderbuffer(target: number, renderbuffer: WebGLRenderbuffer | null): void;\r\n    bindTexture(target: number, texture: WebGLTexture | null): void;\r\n    blendColor(red: number, green: number, blue: number, alpha: number): void;\r\n    blendEquation(mode: number): void;\r\n    blendEquationSeparate(modeRGB: number, modeAlpha: number): void;\r\n    blendFunc(sfactor: number, dfactor: number): void;\r\n    blendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;\r\n    bufferData(target: number, size: number | ArrayBufferView | ArrayBuffer, usage: number): void;\r\n    bufferSubData(target: number, offset: number, data: ArrayBufferView | ArrayBuffer): void;\r\n    checkFramebufferStatus(target: number): number;\r\n    clear(mask: number): void;\r\n    clearColor(red: number, green: number, blue: number, alpha: number): void;\r\n    clearDepth(depth: number): void;\r\n    clearStencil(s: number): void;\r\n    colorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;\r\n    compileShader(shader: WebGLShader | null): void;\r\n    compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, data: ArrayBufferView): void;\r\n    compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, data: ArrayBufferView): void;\r\n    copyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void;\r\n    copyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;\r\n    createBuffer(): WebGLBuffer | null;\r\n    createFramebuffer(): WebGLFramebuffer | null;\r\n    createProgram(): WebGLProgram | null;\r\n    createRenderbuffer(): WebGLRenderbuffer | null;\r\n    createShader(type: number): WebGLShader | null;\r\n    createTexture(): WebGLTexture | null;\r\n    cullFace(mode: number): void;\r\n    deleteBuffer(buffer: WebGLBuffer | null): void;\r\n    deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;\r\n    deleteProgram(program: WebGLProgram | null): void;\r\n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;\r\n    deleteShader(shader: WebGLShader | null): void;\r\n    deleteTexture(texture: WebGLTexture | null): void;\r\n    depthFunc(func: number): void;\r\n    depthMask(flag: boolean): void;\r\n    depthRange(zNear: number, zFar: number): void;\r\n    detachShader(program: WebGLProgram | null, shader: WebGLShader | null): void;\r\n    disable(cap: number): void;\r\n    disableVertexAttribArray(index: number): void;\r\n    drawArrays(mode: number, first: number, count: number): void;\r\n    drawElements(mode: number, count: number, type: number, offset: number): void;\r\n    enable(cap: number): void;\r\n    enableVertexAttribArray(index: number): void;\r\n    finish(): void;\r\n    flush(): void;\r\n    framebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer | null): void;\r\n    framebufferTexture2D(target: number, attachment: number, textarget: number, texture: WebGLTexture | null, level: number): void;\r\n    frontFace(mode: number): void;\r\n    generateMipmap(target: number): void;\r\n    getActiveAttrib(program: WebGLProgram | null, index: number): WebGLActiveInfo | null;\r\n    getActiveUniform(program: WebGLProgram | null, index: number): WebGLActiveInfo | null;\r\n    getAttachedShaders(program: WebGLProgram | null): WebGLShader[] | null;\r\n    getAttribLocation(program: WebGLProgram | null, name: string): number;\r\n    getBufferParameter(target: number, pname: number): any;\r\n    getContextAttributes(): WebGLContextAttributes;\r\n    getError(): number;\r\n    getExtension(name: string): any;\r\n    getFramebufferAttachmentParameter(target: number, attachment: number, pname: number): any;\r\n    getParameter(pname: number): any;\r\n    getProgramInfoLog(program: WebGLProgram | null): string | null;\r\n    getProgramParameter(program: WebGLProgram | null, pname: number): any;\r\n    getRenderbufferParameter(target: number, pname: number): any;\r\n    getShaderInfoLog(shader: WebGLShader | null): string | null;\r\n    getShaderParameter(shader: WebGLShader | null, pname: number): any;\r\n    getShaderPrecisionFormat(shadertype: number, precisiontype: number): WebGLShaderPrecisionFormat | null;\r\n    getShaderSource(shader: WebGLShader | null): string | null;\r\n    getSupportedExtensions(): string[] | null;\r\n    getTexParameter(target: number, pname: number): any;\r\n    getUniform(program: WebGLProgram | null, location: WebGLUniformLocation | null): any;\r\n    getUniformLocation(program: WebGLProgram | null, name: string): WebGLUniformLocation | null;\r\n    getVertexAttrib(index: number, pname: number): any;\r\n    getVertexAttribOffset(index: number, pname: number): number;\r\n    hint(target: number, mode: number): void;\r\n    isBuffer(buffer: WebGLBuffer | null): boolean;\r\n    isContextLost(): boolean;\r\n    isEnabled(cap: number): boolean;\r\n    isFramebuffer(framebuffer: WebGLFramebuffer | null): boolean;\r\n    isProgram(program: WebGLProgram | null): boolean;\r\n    isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): boolean;\r\n    isShader(shader: WebGLShader | null): boolean;\r\n    isTexture(texture: WebGLTexture | null): boolean;\r\n    lineWidth(width: number): void;\r\n    linkProgram(program: WebGLProgram | null): void;\r\n    pixelStorei(pname: number, param: number): void;\r\n    polygonOffset(factor: number, units: number): void;\r\n    readPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView | null): void;\r\n    renderbufferStorage(target: number, internalformat: number, width: number, height: number): void;\r\n    sampleCoverage(value: number, invert: boolean): void;\r\n    scissor(x: number, y: number, width: number, height: number): void;\r\n    shaderSource(shader: WebGLShader | null, source: string): void;\r\n    stencilFunc(func: number, ref: number, mask: number): void;\r\n    stencilFuncSeparate(face: number, func: number, ref: number, mask: number): void;\r\n    stencilMask(mask: number): void;\r\n    stencilMaskSeparate(face: number, mask: number): void;\r\n    stencilOp(fail: number, zfail: number, zpass: number): void;\r\n    stencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void;\r\n    texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, image: HTMLImageElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, canvas: HTMLCanvasElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, video: HTMLVideoElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void;\r\n    texParameterf(target: number, pname: number, param: number): void;\r\n    texParameteri(target: number, pname: number, param: number): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: HTMLImageElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: HTMLCanvasElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: HTMLVideoElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void;\r\n    uniform1f(location: WebGLUniformLocation | null, x: number): void;\r\n    uniform1fv(location: WebGLUniformLocation, v: Float32Array | number[]): void;\r\n    uniform1i(location: WebGLUniformLocation | null, x: number): void;\r\n    uniform1iv(location: WebGLUniformLocation, v: Int32Array | number[]): void;\r\n    uniform2f(location: WebGLUniformLocation | null, x: number, y: number): void;\r\n    uniform2fv(location: WebGLUniformLocation, v: Float32Array | number[]): void;\r\n    uniform2i(location: WebGLUniformLocation | null, x: number, y: number): void;\r\n    uniform2iv(location: WebGLUniformLocation, v: Int32Array | number[]): void;\r\n    uniform3f(location: WebGLUniformLocation | null, x: number, y: number, z: number): void;\r\n    uniform3fv(location: WebGLUniformLocation, v: Float32Array | number[]): void;\r\n    uniform3i(location: WebGLUniformLocation | null, x: number, y: number, z: number): void;\r\n    uniform3iv(location: WebGLUniformLocation, v: Int32Array | number[]): void;\r\n    uniform4f(location: WebGLUniformLocation | null, x: number, y: number, z: number, w: number): void;\r\n    uniform4fv(location: WebGLUniformLocation, v: Float32Array | number[]): void;\r\n    uniform4i(location: WebGLUniformLocation | null, x: number, y: number, z: number, w: number): void;\r\n    uniform4iv(location: WebGLUniformLocation, v: Int32Array | number[]): void;\r\n    uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array | number[]): void;\r\n    uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array | number[]): void;\r\n    uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array | number[]): void;\r\n    useProgram(program: WebGLProgram | null): void;\r\n    validateProgram(program: WebGLProgram | null): void;\r\n    vertexAttrib1f(indx: number, x: number): void;\r\n    vertexAttrib1fv(indx: number, values: Float32Array | number[]): void;\r\n    vertexAttrib2f(indx: number, x: number, y: number): void;\r\n    vertexAttrib2fv(indx: number, values: Float32Array | number[]): void;\r\n    vertexAttrib3f(indx: number, x: number, y: number, z: number): void;\r\n    vertexAttrib3fv(indx: number, values: Float32Array | number[]): void;\r\n    vertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void;\r\n    vertexAttrib4fv(indx: number, values: Float32Array | number[]): void;\r\n    vertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void;\r\n    viewport(x: number, y: number, width: number, height: number): void;\r\n    readonly ACTIVE_ATTRIBUTES: number;\r\n    readonly ACTIVE_TEXTURE: number;\r\n    readonly ACTIVE_UNIFORMS: number;\r\n    readonly ALIASED_LINE_WIDTH_RANGE: number;\r\n    readonly ALIASED_POINT_SIZE_RANGE: number;\r\n    readonly ALPHA: number;\r\n    readonly ALPHA_BITS: number;\r\n    readonly ALWAYS: number;\r\n    readonly ARRAY_BUFFER: number;\r\n    readonly ARRAY_BUFFER_BINDING: number;\r\n    readonly ATTACHED_SHADERS: number;\r\n    readonly BACK: number;\r\n    readonly BLEND: number;\r\n    readonly BLEND_COLOR: number;\r\n    readonly BLEND_DST_ALPHA: number;\r\n    readonly BLEND_DST_RGB: number;\r\n    readonly BLEND_EQUATION: number;\r\n    readonly BLEND_EQUATION_ALPHA: number;\r\n    readonly BLEND_EQUATION_RGB: number;\r\n    readonly BLEND_SRC_ALPHA: number;\r\n    readonly BLEND_SRC_RGB: number;\r\n    readonly BLUE_BITS: number;\r\n    readonly BOOL: number;\r\n    readonly BOOL_VEC2: number;\r\n    readonly BOOL_VEC3: number;\r\n    readonly BOOL_VEC4: number;\r\n    readonly BROWSER_DEFAULT_WEBGL: number;\r\n    readonly BUFFER_SIZE: number;\r\n    readonly BUFFER_USAGE: number;\r\n    readonly BYTE: number;\r\n    readonly CCW: number;\r\n    readonly CLAMP_TO_EDGE: number;\r\n    readonly COLOR_ATTACHMENT0: number;\r\n    readonly COLOR_BUFFER_BIT: number;\r\n    readonly COLOR_CLEAR_VALUE: number;\r\n    readonly COLOR_WRITEMASK: number;\r\n    readonly COMPILE_STATUS: number;\r\n    readonly COMPRESSED_TEXTURE_FORMATS: number;\r\n    readonly CONSTANT_ALPHA: number;\r\n    readonly CONSTANT_COLOR: number;\r\n    readonly CONTEXT_LOST_WEBGL: number;\r\n    readonly CULL_FACE: number;\r\n    readonly CULL_FACE_MODE: number;\r\n    readonly CURRENT_PROGRAM: number;\r\n    readonly CURRENT_VERTEX_ATTRIB: number;\r\n    readonly CW: number;\r\n    readonly DECR: number;\r\n    readonly DECR_WRAP: number;\r\n    readonly DELETE_STATUS: number;\r\n    readonly DEPTH_ATTACHMENT: number;\r\n    readonly DEPTH_BITS: number;\r\n    readonly DEPTH_BUFFER_BIT: number;\r\n    readonly DEPTH_CLEAR_VALUE: number;\r\n    readonly DEPTH_COMPONENT: number;\r\n    readonly DEPTH_COMPONENT16: number;\r\n    readonly DEPTH_FUNC: number;\r\n    readonly DEPTH_RANGE: number;\r\n    readonly DEPTH_STENCIL: number;\r\n    readonly DEPTH_STENCIL_ATTACHMENT: number;\r\n    readonly DEPTH_TEST: number;\r\n    readonly DEPTH_WRITEMASK: number;\r\n    readonly DITHER: number;\r\n    readonly DONT_CARE: number;\r\n    readonly DST_ALPHA: number;\r\n    readonly DST_COLOR: number;\r\n    readonly DYNAMIC_DRAW: number;\r\n    readonly ELEMENT_ARRAY_BUFFER: number;\r\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: number;\r\n    readonly EQUAL: number;\r\n    readonly FASTEST: number;\r\n    readonly FLOAT: number;\r\n    readonly FLOAT_MAT2: number;\r\n    readonly FLOAT_MAT3: number;\r\n    readonly FLOAT_MAT4: number;\r\n    readonly FLOAT_VEC2: number;\r\n    readonly FLOAT_VEC3: number;\r\n    readonly FLOAT_VEC4: number;\r\n    readonly FRAGMENT_SHADER: number;\r\n    readonly FRAMEBUFFER: number;\r\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;\r\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;\r\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;\r\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;\r\n    readonly FRAMEBUFFER_BINDING: number;\r\n    readonly FRAMEBUFFER_COMPLETE: number;\r\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;\r\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;\r\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;\r\n    readonly FRAMEBUFFER_UNSUPPORTED: number;\r\n    readonly FRONT: number;\r\n    readonly FRONT_AND_BACK: number;\r\n    readonly FRONT_FACE: number;\r\n    readonly FUNC_ADD: number;\r\n    readonly FUNC_REVERSE_SUBTRACT: number;\r\n    readonly FUNC_SUBTRACT: number;\r\n    readonly GENERATE_MIPMAP_HINT: number;\r\n    readonly GEQUAL: number;\r\n    readonly GREATER: number;\r\n    readonly GREEN_BITS: number;\r\n    readonly HIGH_FLOAT: number;\r\n    readonly HIGH_INT: number;\r\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: number;\r\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: number;\r\n    readonly INCR: number;\r\n    readonly INCR_WRAP: number;\r\n    readonly INT: number;\r\n    readonly INT_VEC2: number;\r\n    readonly INT_VEC3: number;\r\n    readonly INT_VEC4: number;\r\n    readonly INVALID_ENUM: number;\r\n    readonly INVALID_FRAMEBUFFER_OPERATION: number;\r\n    readonly INVALID_OPERATION: number;\r\n    readonly INVALID_VALUE: number;\r\n    readonly INVERT: number;\r\n    readonly KEEP: number;\r\n    readonly LEQUAL: number;\r\n    readonly LESS: number;\r\n    readonly LINEAR: number;\r\n    readonly LINEAR_MIPMAP_LINEAR: number;\r\n    readonly LINEAR_MIPMAP_NEAREST: number;\r\n    readonly LINES: number;\r\n    readonly LINE_LOOP: number;\r\n    readonly LINE_STRIP: number;\r\n    readonly LINE_WIDTH: number;\r\n    readonly LINK_STATUS: number;\r\n    readonly LOW_FLOAT: number;\r\n    readonly LOW_INT: number;\r\n    readonly LUMINANCE: number;\r\n    readonly LUMINANCE_ALPHA: number;\r\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;\r\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: number;\r\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: number;\r\n    readonly MAX_RENDERBUFFER_SIZE: number;\r\n    readonly MAX_TEXTURE_IMAGE_UNITS: number;\r\n    readonly MAX_TEXTURE_SIZE: number;\r\n    readonly MAX_VARYING_VECTORS: number;\r\n    readonly MAX_VERTEX_ATTRIBS: number;\r\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;\r\n    readonly MAX_VERTEX_UNIFORM_VECTORS: number;\r\n    readonly MAX_VIEWPORT_DIMS: number;\r\n    readonly MEDIUM_FLOAT: number;\r\n    readonly MEDIUM_INT: number;\r\n    readonly MIRRORED_REPEAT: number;\r\n    readonly NEAREST: number;\r\n    readonly NEAREST_MIPMAP_LINEAR: number;\r\n    readonly NEAREST_MIPMAP_NEAREST: number;\r\n    readonly NEVER: number;\r\n    readonly NICEST: number;\r\n    readonly NONE: number;\r\n    readonly NOTEQUAL: number;\r\n    readonly NO_ERROR: number;\r\n    readonly ONE: number;\r\n    readonly ONE_MINUS_CONSTANT_ALPHA: number;\r\n    readonly ONE_MINUS_CONSTANT_COLOR: number;\r\n    readonly ONE_MINUS_DST_ALPHA: number;\r\n    readonly ONE_MINUS_DST_COLOR: number;\r\n    readonly ONE_MINUS_SRC_ALPHA: number;\r\n    readonly ONE_MINUS_SRC_COLOR: number;\r\n    readonly OUT_OF_MEMORY: number;\r\n    readonly PACK_ALIGNMENT: number;\r\n    readonly POINTS: number;\r\n    readonly POLYGON_OFFSET_FACTOR: number;\r\n    readonly POLYGON_OFFSET_FILL: number;\r\n    readonly POLYGON_OFFSET_UNITS: number;\r\n    readonly RED_BITS: number;\r\n    readonly RENDERBUFFER: number;\r\n    readonly RENDERBUFFER_ALPHA_SIZE: number;\r\n    readonly RENDERBUFFER_BINDING: number;\r\n    readonly RENDERBUFFER_BLUE_SIZE: number;\r\n    readonly RENDERBUFFER_DEPTH_SIZE: number;\r\n    readonly RENDERBUFFER_GREEN_SIZE: number;\r\n    readonly RENDERBUFFER_HEIGHT: number;\r\n    readonly RENDERBUFFER_INTERNAL_FORMAT: number;\r\n    readonly RENDERBUFFER_RED_SIZE: number;\r\n    readonly RENDERBUFFER_STENCIL_SIZE: number;\r\n    readonly RENDERBUFFER_WIDTH: number;\r\n    readonly RENDERER: number;\r\n    readonly REPEAT: number;\r\n    readonly REPLACE: number;\r\n    readonly RGB: number;\r\n    readonly RGB565: number;\r\n    readonly RGB5_A1: number;\r\n    readonly RGBA: number;\r\n    readonly RGBA4: number;\r\n    readonly SAMPLER_2D: number;\r\n    readonly SAMPLER_CUBE: number;\r\n    readonly SAMPLES: number;\r\n    readonly SAMPLE_ALPHA_TO_COVERAGE: number;\r\n    readonly SAMPLE_BUFFERS: number;\r\n    readonly SAMPLE_COVERAGE: number;\r\n    readonly SAMPLE_COVERAGE_INVERT: number;\r\n    readonly SAMPLE_COVERAGE_VALUE: number;\r\n    readonly SCISSOR_BOX: number;\r\n    readonly SCISSOR_TEST: number;\r\n    readonly SHADER_TYPE: number;\r\n    readonly SHADING_LANGUAGE_VERSION: number;\r\n    readonly SHORT: number;\r\n    readonly SRC_ALPHA: number;\r\n    readonly SRC_ALPHA_SATURATE: number;\r\n    readonly SRC_COLOR: number;\r\n    readonly STATIC_DRAW: number;\r\n    readonly STENCIL_ATTACHMENT: number;\r\n    readonly STENCIL_BACK_FAIL: number;\r\n    readonly STENCIL_BACK_FUNC: number;\r\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: number;\r\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: number;\r\n    readonly STENCIL_BACK_REF: number;\r\n    readonly STENCIL_BACK_VALUE_MASK: number;\r\n    readonly STENCIL_BACK_WRITEMASK: number;\r\n    readonly STENCIL_BITS: number;\r\n    readonly STENCIL_BUFFER_BIT: number;\r\n    readonly STENCIL_CLEAR_VALUE: number;\r\n    readonly STENCIL_FAIL: number;\r\n    readonly STENCIL_FUNC: number;\r\n    readonly STENCIL_INDEX: number;\r\n    readonly STENCIL_INDEX8: number;\r\n    readonly STENCIL_PASS_DEPTH_FAIL: number;\r\n    readonly STENCIL_PASS_DEPTH_PASS: number;\r\n    readonly STENCIL_REF: number;\r\n    readonly STENCIL_TEST: number;\r\n    readonly STENCIL_VALUE_MASK: number;\r\n    readonly STENCIL_WRITEMASK: number;\r\n    readonly STREAM_DRAW: number;\r\n    readonly SUBPIXEL_BITS: number;\r\n    readonly TEXTURE: number;\r\n    readonly TEXTURE0: number;\r\n    readonly TEXTURE1: number;\r\n    readonly TEXTURE10: number;\r\n    readonly TEXTURE11: number;\r\n    readonly TEXTURE12: number;\r\n    readonly TEXTURE13: number;\r\n    readonly TEXTURE14: number;\r\n    readonly TEXTURE15: number;\r\n    readonly TEXTURE16: number;\r\n    readonly TEXTURE17: number;\r\n    readonly TEXTURE18: number;\r\n    readonly TEXTURE19: number;\r\n    readonly TEXTURE2: number;\r\n    readonly TEXTURE20: number;\r\n    readonly TEXTURE21: number;\r\n    readonly TEXTURE22: number;\r\n    readonly TEXTURE23: number;\r\n    readonly TEXTURE24: number;\r\n    readonly TEXTURE25: number;\r\n    readonly TEXTURE26: number;\r\n    readonly TEXTURE27: number;\r\n    readonly TEXTURE28: number;\r\n    readonly TEXTURE29: number;\r\n    readonly TEXTURE3: number;\r\n    readonly TEXTURE30: number;\r\n    readonly TEXTURE31: number;\r\n    readonly TEXTURE4: number;\r\n    readonly TEXTURE5: number;\r\n    readonly TEXTURE6: number;\r\n    readonly TEXTURE7: number;\r\n    readonly TEXTURE8: number;\r\n    readonly TEXTURE9: number;\r\n    readonly TEXTURE_2D: number;\r\n    readonly TEXTURE_BINDING_2D: number;\r\n    readonly TEXTURE_BINDING_CUBE_MAP: number;\r\n    readonly TEXTURE_CUBE_MAP: number;\r\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: number;\r\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: number;\r\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: number;\r\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: number;\r\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: number;\r\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: number;\r\n    readonly TEXTURE_MAG_FILTER: number;\r\n    readonly TEXTURE_MIN_FILTER: number;\r\n    readonly TEXTURE_WRAP_S: number;\r\n    readonly TEXTURE_WRAP_T: number;\r\n    readonly TRIANGLES: number;\r\n    readonly TRIANGLE_FAN: number;\r\n    readonly TRIANGLE_STRIP: number;\r\n    readonly UNPACK_ALIGNMENT: number;\r\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: number;\r\n    readonly UNPACK_FLIP_Y_WEBGL: number;\r\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;\r\n    readonly UNSIGNED_BYTE: number;\r\n    readonly UNSIGNED_INT: number;\r\n    readonly UNSIGNED_SHORT: number;\r\n    readonly UNSIGNED_SHORT_4_4_4_4: number;\r\n    readonly UNSIGNED_SHORT_5_5_5_1: number;\r\n    readonly UNSIGNED_SHORT_5_6_5: number;\r\n    readonly VALIDATE_STATUS: number;\r\n    readonly VENDOR: number;\r\n    readonly VERSION: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: number;\r\n    readonly VERTEX_SHADER: number;\r\n    readonly VIEWPORT: number;\r\n    readonly ZERO: number;\r\n}\r\n\r\ndeclare var WebGLRenderingContext: {\r\n    prototype: WebGLRenderingContext;\r\n    new(): WebGLRenderingContext;\r\n    readonly ACTIVE_ATTRIBUTES: number;\r\n    readonly ACTIVE_TEXTURE: number;\r\n    readonly ACTIVE_UNIFORMS: number;\r\n    readonly ALIASED_LINE_WIDTH_RANGE: number;\r\n    readonly ALIASED_POINT_SIZE_RANGE: number;\r\n    readonly ALPHA: number;\r\n    readonly ALPHA_BITS: number;\r\n    readonly ALWAYS: number;\r\n    readonly ARRAY_BUFFER: number;\r\n    readonly ARRAY_BUFFER_BINDING: number;\r\n    readonly ATTACHED_SHADERS: number;\r\n    readonly BACK: number;\r\n    readonly BLEND: number;\r\n    readonly BLEND_COLOR: number;\r\n    readonly BLEND_DST_ALPHA: number;\r\n    readonly BLEND_DST_RGB: number;\r\n    readonly BLEND_EQUATION: number;\r\n    readonly BLEND_EQUATION_ALPHA: number;\r\n    readonly BLEND_EQUATION_RGB: number;\r\n    readonly BLEND_SRC_ALPHA: number;\r\n    readonly BLEND_SRC_RGB: number;\r\n    readonly BLUE_BITS: number;\r\n    readonly BOOL: number;\r\n    readonly BOOL_VEC2: number;\r\n    readonly BOOL_VEC3: number;\r\n    readonly BOOL_VEC4: number;\r\n    readonly BROWSER_DEFAULT_WEBGL: number;\r\n    readonly BUFFER_SIZE: number;\r\n    readonly BUFFER_USAGE: number;\r\n    readonly BYTE: number;\r\n    readonly CCW: number;\r\n    readonly CLAMP_TO_EDGE: number;\r\n    readonly COLOR_ATTACHMENT0: number;\r\n    readonly COLOR_BUFFER_BIT: number;\r\n    readonly COLOR_CLEAR_VALUE: number;\r\n    readonly COLOR_WRITEMASK: number;\r\n    readonly COMPILE_STATUS: number;\r\n    readonly COMPRESSED_TEXTURE_FORMATS: number;\r\n    readonly CONSTANT_ALPHA: number;\r\n    readonly CONSTANT_COLOR: number;\r\n    readonly CONTEXT_LOST_WEBGL: number;\r\n    readonly CULL_FACE: number;\r\n    readonly CULL_FACE_MODE: number;\r\n    readonly CURRENT_PROGRAM: number;\r\n    readonly CURRENT_VERTEX_ATTRIB: number;\r\n    readonly CW: number;\r\n    readonly DECR: number;\r\n    readonly DECR_WRAP: number;\r\n    readonly DELETE_STATUS: number;\r\n    readonly DEPTH_ATTACHMENT: number;\r\n    readonly DEPTH_BITS: number;\r\n    readonly DEPTH_BUFFER_BIT: number;\r\n    readonly DEPTH_CLEAR_VALUE: number;\r\n    readonly DEPTH_COMPONENT: number;\r\n    readonly DEPTH_COMPONENT16: number;\r\n    readonly DEPTH_FUNC: number;\r\n    readonly DEPTH_RANGE: number;\r\n    readonly DEPTH_STENCIL: number;\r\n    readonly DEPTH_STENCIL_ATTACHMENT: number;\r\n    readonly DEPTH_TEST: number;\r\n    readonly DEPTH_WRITEMASK: number;\r\n    readonly DITHER: number;\r\n    readonly DONT_CARE: number;\r\n    readonly DST_ALPHA: number;\r\n    readonly DST_COLOR: number;\r\n    readonly DYNAMIC_DRAW: number;\r\n    readonly ELEMENT_ARRAY_BUFFER: number;\r\n    readonly ELEMENT_ARRAY_BUFFER_BINDING: number;\r\n    readonly EQUAL: number;\r\n    readonly FASTEST: number;\r\n    readonly FLOAT: number;\r\n    readonly FLOAT_MAT2: number;\r\n    readonly FLOAT_MAT3: number;\r\n    readonly FLOAT_MAT4: number;\r\n    readonly FLOAT_VEC2: number;\r\n    readonly FLOAT_VEC3: number;\r\n    readonly FLOAT_VEC4: number;\r\n    readonly FRAGMENT_SHADER: number;\r\n    readonly FRAMEBUFFER: number;\r\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;\r\n    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;\r\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;\r\n    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;\r\n    readonly FRAMEBUFFER_BINDING: number;\r\n    readonly FRAMEBUFFER_COMPLETE: number;\r\n    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;\r\n    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;\r\n    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;\r\n    readonly FRAMEBUFFER_UNSUPPORTED: number;\r\n    readonly FRONT: number;\r\n    readonly FRONT_AND_BACK: number;\r\n    readonly FRONT_FACE: number;\r\n    readonly FUNC_ADD: number;\r\n    readonly FUNC_REVERSE_SUBTRACT: number;\r\n    readonly FUNC_SUBTRACT: number;\r\n    readonly GENERATE_MIPMAP_HINT: number;\r\n    readonly GEQUAL: number;\r\n    readonly GREATER: number;\r\n    readonly GREEN_BITS: number;\r\n    readonly HIGH_FLOAT: number;\r\n    readonly HIGH_INT: number;\r\n    readonly IMPLEMENTATION_COLOR_READ_FORMAT: number;\r\n    readonly IMPLEMENTATION_COLOR_READ_TYPE: number;\r\n    readonly INCR: number;\r\n    readonly INCR_WRAP: number;\r\n    readonly INT: number;\r\n    readonly INT_VEC2: number;\r\n    readonly INT_VEC3: number;\r\n    readonly INT_VEC4: number;\r\n    readonly INVALID_ENUM: number;\r\n    readonly INVALID_FRAMEBUFFER_OPERATION: number;\r\n    readonly INVALID_OPERATION: number;\r\n    readonly INVALID_VALUE: number;\r\n    readonly INVERT: number;\r\n    readonly KEEP: number;\r\n    readonly LEQUAL: number;\r\n    readonly LESS: number;\r\n    readonly LINEAR: number;\r\n    readonly LINEAR_MIPMAP_LINEAR: number;\r\n    readonly LINEAR_MIPMAP_NEAREST: number;\r\n    readonly LINES: number;\r\n    readonly LINE_LOOP: number;\r\n    readonly LINE_STRIP: number;\r\n    readonly LINE_WIDTH: number;\r\n    readonly LINK_STATUS: number;\r\n    readonly LOW_FLOAT: number;\r\n    readonly LOW_INT: number;\r\n    readonly LUMINANCE: number;\r\n    readonly LUMINANCE_ALPHA: number;\r\n    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;\r\n    readonly MAX_CUBE_MAP_TEXTURE_SIZE: number;\r\n    readonly MAX_FRAGMENT_UNIFORM_VECTORS: number;\r\n    readonly MAX_RENDERBUFFER_SIZE: number;\r\n    readonly MAX_TEXTURE_IMAGE_UNITS: number;\r\n    readonly MAX_TEXTURE_SIZE: number;\r\n    readonly MAX_VARYING_VECTORS: number;\r\n    readonly MAX_VERTEX_ATTRIBS: number;\r\n    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;\r\n    readonly MAX_VERTEX_UNIFORM_VECTORS: number;\r\n    readonly MAX_VIEWPORT_DIMS: number;\r\n    readonly MEDIUM_FLOAT: number;\r\n    readonly MEDIUM_INT: number;\r\n    readonly MIRRORED_REPEAT: number;\r\n    readonly NEAREST: number;\r\n    readonly NEAREST_MIPMAP_LINEAR: number;\r\n    readonly NEAREST_MIPMAP_NEAREST: number;\r\n    readonly NEVER: number;\r\n    readonly NICEST: number;\r\n    readonly NONE: number;\r\n    readonly NOTEQUAL: number;\r\n    readonly NO_ERROR: number;\r\n    readonly ONE: number;\r\n    readonly ONE_MINUS_CONSTANT_ALPHA: number;\r\n    readonly ONE_MINUS_CONSTANT_COLOR: number;\r\n    readonly ONE_MINUS_DST_ALPHA: number;\r\n    readonly ONE_MINUS_DST_COLOR: number;\r\n    readonly ONE_MINUS_SRC_ALPHA: number;\r\n    readonly ONE_MINUS_SRC_COLOR: number;\r\n    readonly OUT_OF_MEMORY: number;\r\n    readonly PACK_ALIGNMENT: number;\r\n    readonly POINTS: number;\r\n    readonly POLYGON_OFFSET_FACTOR: number;\r\n    readonly POLYGON_OFFSET_FILL: number;\r\n    readonly POLYGON_OFFSET_UNITS: number;\r\n    readonly RED_BITS: number;\r\n    readonly RENDERBUFFER: number;\r\n    readonly RENDERBUFFER_ALPHA_SIZE: number;\r\n    readonly RENDERBUFFER_BINDING: number;\r\n    readonly RENDERBUFFER_BLUE_SIZE: number;\r\n    readonly RENDERBUFFER_DEPTH_SIZE: number;\r\n    readonly RENDERBUFFER_GREEN_SIZE: number;\r\n    readonly RENDERBUFFER_HEIGHT: number;\r\n    readonly RENDERBUFFER_INTERNAL_FORMAT: number;\r\n    readonly RENDERBUFFER_RED_SIZE: number;\r\n    readonly RENDERBUFFER_STENCIL_SIZE: number;\r\n    readonly RENDERBUFFER_WIDTH: number;\r\n    readonly RENDERER: number;\r\n    readonly REPEAT: number;\r\n    readonly REPLACE: number;\r\n    readonly RGB: number;\r\n    readonly RGB565: number;\r\n    readonly RGB5_A1: number;\r\n    readonly RGBA: number;\r\n    readonly RGBA4: number;\r\n    readonly SAMPLER_2D: number;\r\n    readonly SAMPLER_CUBE: number;\r\n    readonly SAMPLES: number;\r\n    readonly SAMPLE_ALPHA_TO_COVERAGE: number;\r\n    readonly SAMPLE_BUFFERS: number;\r\n    readonly SAMPLE_COVERAGE: number;\r\n    readonly SAMPLE_COVERAGE_INVERT: number;\r\n    readonly SAMPLE_COVERAGE_VALUE: number;\r\n    readonly SCISSOR_BOX: number;\r\n    readonly SCISSOR_TEST: number;\r\n    readonly SHADER_TYPE: number;\r\n    readonly SHADING_LANGUAGE_VERSION: number;\r\n    readonly SHORT: number;\r\n    readonly SRC_ALPHA: number;\r\n    readonly SRC_ALPHA_SATURATE: number;\r\n    readonly SRC_COLOR: number;\r\n    readonly STATIC_DRAW: number;\r\n    readonly STENCIL_ATTACHMENT: number;\r\n    readonly STENCIL_BACK_FAIL: number;\r\n    readonly STENCIL_BACK_FUNC: number;\r\n    readonly STENCIL_BACK_PASS_DEPTH_FAIL: number;\r\n    readonly STENCIL_BACK_PASS_DEPTH_PASS: number;\r\n    readonly STENCIL_BACK_REF: number;\r\n    readonly STENCIL_BACK_VALUE_MASK: number;\r\n    readonly STENCIL_BACK_WRITEMASK: number;\r\n    readonly STENCIL_BITS: number;\r\n    readonly STENCIL_BUFFER_BIT: number;\r\n    readonly STENCIL_CLEAR_VALUE: number;\r\n    readonly STENCIL_FAIL: number;\r\n    readonly STENCIL_FUNC: number;\r\n    readonly STENCIL_INDEX: number;\r\n    readonly STENCIL_INDEX8: number;\r\n    readonly STENCIL_PASS_DEPTH_FAIL: number;\r\n    readonly STENCIL_PASS_DEPTH_PASS: number;\r\n    readonly STENCIL_REF: number;\r\n    readonly STENCIL_TEST: number;\r\n    readonly STENCIL_VALUE_MASK: number;\r\n    readonly STENCIL_WRITEMASK: number;\r\n    readonly STREAM_DRAW: number;\r\n    readonly SUBPIXEL_BITS: number;\r\n    readonly TEXTURE: number;\r\n    readonly TEXTURE0: number;\r\n    readonly TEXTURE1: number;\r\n    readonly TEXTURE10: number;\r\n    readonly TEXTURE11: number;\r\n    readonly TEXTURE12: number;\r\n    readonly TEXTURE13: number;\r\n    readonly TEXTURE14: number;\r\n    readonly TEXTURE15: number;\r\n    readonly TEXTURE16: number;\r\n    readonly TEXTURE17: number;\r\n    readonly TEXTURE18: number;\r\n    readonly TEXTURE19: number;\r\n    readonly TEXTURE2: number;\r\n    readonly TEXTURE20: number;\r\n    readonly TEXTURE21: number;\r\n    readonly TEXTURE22: number;\r\n    readonly TEXTURE23: number;\r\n    readonly TEXTURE24: number;\r\n    readonly TEXTURE25: number;\r\n    readonly TEXTURE26: number;\r\n    readonly TEXTURE27: number;\r\n    readonly TEXTURE28: number;\r\n    readonly TEXTURE29: number;\r\n    readonly TEXTURE3: number;\r\n    readonly TEXTURE30: number;\r\n    readonly TEXTURE31: number;\r\n    readonly TEXTURE4: number;\r\n    readonly TEXTURE5: number;\r\n    readonly TEXTURE6: number;\r\n    readonly TEXTURE7: number;\r\n    readonly TEXTURE8: number;\r\n    readonly TEXTURE9: number;\r\n    readonly TEXTURE_2D: number;\r\n    readonly TEXTURE_BINDING_2D: number;\r\n    readonly TEXTURE_BINDING_CUBE_MAP: number;\r\n    readonly TEXTURE_CUBE_MAP: number;\r\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: number;\r\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: number;\r\n    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: number;\r\n    readonly TEXTURE_CUBE_MAP_POSITIVE_X: number;\r\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: number;\r\n    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: number;\r\n    readonly TEXTURE_MAG_FILTER: number;\r\n    readonly TEXTURE_MIN_FILTER: number;\r\n    readonly TEXTURE_WRAP_S: number;\r\n    readonly TEXTURE_WRAP_T: number;\r\n    readonly TRIANGLES: number;\r\n    readonly TRIANGLE_FAN: number;\r\n    readonly TRIANGLE_STRIP: number;\r\n    readonly UNPACK_ALIGNMENT: number;\r\n    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: number;\r\n    readonly UNPACK_FLIP_Y_WEBGL: number;\r\n    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;\r\n    readonly UNSIGNED_BYTE: number;\r\n    readonly UNSIGNED_INT: number;\r\n    readonly UNSIGNED_SHORT: number;\r\n    readonly UNSIGNED_SHORT_4_4_4_4: number;\r\n    readonly UNSIGNED_SHORT_5_5_5_1: number;\r\n    readonly UNSIGNED_SHORT_5_6_5: number;\r\n    readonly VALIDATE_STATUS: number;\r\n    readonly VENDOR: number;\r\n    readonly VERSION: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_ENABLED: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_POINTER: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_SIZE: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_STRIDE: number;\r\n    readonly VERTEX_ATTRIB_ARRAY_TYPE: number;\r\n    readonly VERTEX_SHADER: number;\r\n    readonly VIEWPORT: number;\r\n    readonly ZERO: number;\r\n}\r\n\r\ninterface WebGLShader extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLShader: {\r\n    prototype: WebGLShader;\r\n    new(): WebGLShader;\r\n}\r\n\r\ninterface WebGLShaderPrecisionFormat {\r\n    readonly precision: number;\r\n    readonly rangeMax: number;\r\n    readonly rangeMin: number;\r\n}\r\n\r\ndeclare var WebGLShaderPrecisionFormat: {\r\n    prototype: WebGLShaderPrecisionFormat;\r\n    new(): WebGLShaderPrecisionFormat;\r\n}\r\n\r\ninterface WebGLTexture extends WebGLObject {\r\n}\r\n\r\ndeclare var WebGLTexture: {\r\n    prototype: WebGLTexture;\r\n    new(): WebGLTexture;\r\n}\r\n\r\ninterface WebGLUniformLocation {\r\n}\r\n\r\ndeclare var WebGLUniformLocation: {\r\n    prototype: WebGLUniformLocation;\r\n    new(): WebGLUniformLocation;\r\n}\r\n\r\ninterface WebKitCSSMatrix {\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n    d: number;\r\n    e: number;\r\n    f: number;\r\n    m11: number;\r\n    m12: number;\r\n    m13: number;\r\n    m14: number;\r\n    m21: number;\r\n    m22: number;\r\n    m23: number;\r\n    m24: number;\r\n    m31: number;\r\n    m32: number;\r\n    m33: number;\r\n    m34: number;\r\n    m41: number;\r\n    m42: number;\r\n    m43: number;\r\n    m44: number;\r\n    inverse(): WebKitCSSMatrix;\r\n    multiply(secondMatrix: WebKitCSSMatrix): WebKitCSSMatrix;\r\n    rotate(angleX: number, angleY?: number, angleZ?: number): WebKitCSSMatrix;\r\n    rotateAxisAngle(x: number, y: number, z: number, angle: number): WebKitCSSMatrix;\r\n    scale(scaleX: number, scaleY?: number, scaleZ?: number): WebKitCSSMatrix;\r\n    setMatrixValue(value: string): void;\r\n    skewX(angle: number): WebKitCSSMatrix;\r\n    skewY(angle: number): WebKitCSSMatrix;\r\n    toString(): string;\r\n    translate(x: number, y: number, z?: number): WebKitCSSMatrix;\r\n}\r\n\r\ndeclare var WebKitCSSMatrix: {\r\n    prototype: WebKitCSSMatrix;\r\n    new(text?: string): WebKitCSSMatrix;\r\n}\r\n\r\ninterface WebKitPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ndeclare var WebKitPoint: {\r\n    prototype: WebKitPoint;\r\n    new(x?: number, y?: number): WebKitPoint;\r\n}\r\n\r\ninterface WebSocket extends EventTarget {\r\n    binaryType: string;\r\n    readonly bufferedAmount: number;\r\n    readonly extensions: string;\r\n    onclose: (ev: CloseEvent) => any;\r\n    onerror: (ev: Event) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onopen: (ev: Event) => any;\r\n    readonly protocol: string;\r\n    readonly readyState: number;\r\n    readonly url: string;\r\n    close(code?: number, reason?: string): void;\r\n    send(data: any): void;\r\n    readonly CLOSED: number;\r\n    readonly CLOSING: number;\r\n    readonly CONNECTING: number;\r\n    readonly OPEN: number;\r\n    addEventListener(type: \"close\", listener: (ev: CloseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"open\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var WebSocket: {\r\n    prototype: WebSocket;\r\n    new(url: string, protocols?: string | string[]): WebSocket;\r\n    readonly CLOSED: number;\r\n    readonly CLOSING: number;\r\n    readonly CONNECTING: number;\r\n    readonly OPEN: number;\r\n}\r\n\r\ninterface WheelEvent extends MouseEvent {\r\n    readonly deltaMode: number;\r\n    readonly deltaX: number;\r\n    readonly deltaY: number;\r\n    readonly deltaZ: number;\r\n    readonly wheelDelta: number;\r\n    readonly wheelDeltaX: number;\r\n    readonly wheelDeltaY: number;\r\n    getCurrentPoint(element: Element): void;\r\n    initWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void;\r\n    readonly DOM_DELTA_LINE: number;\r\n    readonly DOM_DELTA_PAGE: number;\r\n    readonly DOM_DELTA_PIXEL: number;\r\n}\r\n\r\ndeclare var WheelEvent: {\r\n    prototype: WheelEvent;\r\n    new(typeArg: string, eventInitDict?: WheelEventInit): WheelEvent;\r\n    readonly DOM_DELTA_LINE: number;\r\n    readonly DOM_DELTA_PAGE: number;\r\n    readonly DOM_DELTA_PIXEL: number;\r\n}\r\n\r\ninterface Window extends EventTarget, WindowTimers, WindowSessionStorage, WindowLocalStorage, WindowConsole, GlobalEventHandlers, IDBEnvironment, WindowBase64 {\r\n    readonly applicationCache: ApplicationCache;\r\n    readonly clientInformation: Navigator;\r\n    readonly closed: boolean;\r\n    readonly crypto: Crypto;\r\n    defaultStatus: string;\r\n    readonly devicePixelRatio: number;\r\n    readonly doNotTrack: string;\r\n    readonly document: Document;\r\n    event: Event;\r\n    readonly external: External;\r\n    readonly frameElement: Element;\r\n    readonly frames: Window;\r\n    readonly history: History;\r\n    readonly innerHeight: number;\r\n    readonly innerWidth: number;\r\n    readonly length: number;\r\n    readonly location: Location;\r\n    readonly locationbar: BarProp;\r\n    readonly menubar: BarProp;\r\n    readonly msCredentials: MSCredentials;\r\n    name: string;\r\n    readonly navigator: Navigator;\r\n    offscreenBuffering: string | boolean;\r\n    onabort: (ev: Event) => any;\r\n    onafterprint: (ev: Event) => any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    onblur: (ev: FocusEvent) => any;\r\n    oncanplay: (ev: Event) => any;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    onchange: (ev: Event) => any;\r\n    onclick: (ev: MouseEvent) => any;\r\n    oncompassneedscalibration: (ev: Event) => any;\r\n    oncontextmenu: (ev: PointerEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    ondevicelight: (ev: DeviceLightEvent) => any;\r\n    ondevicemotion: (ev: DeviceMotionEvent) => any;\r\n    ondeviceorientation: (ev: DeviceOrientationEvent) => any;\r\n    ondrag: (ev: DragEvent) => any;\r\n    ondragend: (ev: DragEvent) => any;\r\n    ondragenter: (ev: DragEvent) => any;\r\n    ondragleave: (ev: DragEvent) => any;\r\n    ondragover: (ev: DragEvent) => any;\r\n    ondragstart: (ev: DragEvent) => any;\r\n    ondrop: (ev: DragEvent) => any;\r\n    ondurationchange: (ev: Event) => any;\r\n    onemptied: (ev: Event) => any;\r\n    onended: (ev: MediaStreamErrorEvent) => any;\r\n    onerror: ErrorEventHandler;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onhashchange: (ev: HashChangeEvent) => any;\r\n    oninput: (ev: Event) => any;\r\n    oninvalid: (ev: Event) => any;\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadeddata: (ev: Event) => any;\r\n    onloadedmetadata: (ev: Event) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onmouseenter: (ev: MouseEvent) => any;\r\n    onmouseleave: (ev: MouseEvent) => any;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    onmousewheel: (ev: WheelEvent) => any;\r\n    onmsgesturechange: (ev: MSGestureEvent) => any;\r\n    onmsgesturedoubletap: (ev: MSGestureEvent) => any;\r\n    onmsgestureend: (ev: MSGestureEvent) => any;\r\n    onmsgesturehold: (ev: MSGestureEvent) => any;\r\n    onmsgesturestart: (ev: MSGestureEvent) => any;\r\n    onmsgesturetap: (ev: MSGestureEvent) => any;\r\n    onmsinertiastart: (ev: MSGestureEvent) => any;\r\n    onmspointercancel: (ev: MSPointerEvent) => any;\r\n    onmspointerdown: (ev: MSPointerEvent) => any;\r\n    onmspointerenter: (ev: MSPointerEvent) => any;\r\n    onmspointerleave: (ev: MSPointerEvent) => any;\r\n    onmspointermove: (ev: MSPointerEvent) => any;\r\n    onmspointerout: (ev: MSPointerEvent) => any;\r\n    onmspointerover: (ev: MSPointerEvent) => any;\r\n    onmspointerup: (ev: MSPointerEvent) => any;\r\n    onoffline: (ev: Event) => any;\r\n    ononline: (ev: Event) => any;\r\n    onorientationchange: (ev: Event) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    onpause: (ev: Event) => any;\r\n    onplay: (ev: Event) => any;\r\n    onplaying: (ev: Event) => any;\r\n    onpopstate: (ev: PopStateEvent) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onratechange: (ev: Event) => any;\r\n    onreadystatechange: (ev: ProgressEvent) => any;\r\n    onreset: (ev: Event) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onscroll: (ev: UIEvent) => any;\r\n    onseeked: (ev: Event) => any;\r\n    onseeking: (ev: Event) => any;\r\n    onselect: (ev: UIEvent) => any;\r\n    onstalled: (ev: Event) => any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    onsuspend: (ev: Event) => any;\r\n    ontimeupdate: (ev: Event) => any;\r\n    ontouchcancel: (ev: TouchEvent) => any;\r\n    ontouchend: (ev: TouchEvent) => any;\r\n    ontouchmove: (ev: TouchEvent) => any;\r\n    ontouchstart: (ev: TouchEvent) => any;\r\n    onunload: (ev: Event) => any;\r\n    onvolumechange: (ev: Event) => any;\r\n    onwaiting: (ev: Event) => any;\r\n    readonly opener: Window;\r\n    orientation: string | number;\r\n    readonly outerHeight: number;\r\n    readonly outerWidth: number;\r\n    readonly pageXOffset: number;\r\n    readonly pageYOffset: number;\r\n    readonly parent: Window;\r\n    readonly performance: Performance;\r\n    readonly personalbar: BarProp;\r\n    readonly screen: Screen;\r\n    readonly screenLeft: number;\r\n    readonly screenTop: number;\r\n    readonly screenX: number;\r\n    readonly screenY: number;\r\n    readonly scrollX: number;\r\n    readonly scrollY: number;\r\n    readonly scrollbars: BarProp;\r\n    readonly self: Window;\r\n    status: string;\r\n    readonly statusbar: BarProp;\r\n    readonly styleMedia: StyleMedia;\r\n    readonly toolbar: BarProp;\r\n    readonly top: Window;\r\n    readonly window: Window;\r\n    URL: typeof URL;\r\n    alert(message?: any): void;\r\n    blur(): void;\r\n    cancelAnimationFrame(handle: number): void;\r\n    captureEvents(): void;\r\n    close(): void;\r\n    confirm(message?: string): boolean;\r\n    focus(): void;\r\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\n    getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList;\r\n    getSelection(): Selection;\r\n    matchMedia(mediaQuery: string): MediaQueryList;\r\n    moveBy(x?: number, y?: number): void;\r\n    moveTo(x?: number, y?: number): void;\r\n    msWriteProfilerMark(profilerMarkName: string): void;\r\n    open(url?: string, target?: string, features?: string, replace?: boolean): Window;\r\n    postMessage(message: any, targetOrigin: string, transfer?: any[]): void;\r\n    print(): void;\r\n    prompt(message?: string, _default?: string): string | null;\r\n    releaseEvents(): void;\r\n    requestAnimationFrame(callback: FrameRequestCallback): number;\r\n    resizeBy(x?: number, y?: number): void;\r\n    resizeTo(x?: number, y?: number): void;\r\n    scroll(x?: number, y?: number): void;\r\n    scrollBy(x?: number, y?: number): void;\r\n    scrollTo(x?: number, y?: number): void;\r\n    webkitCancelAnimationFrame(handle: number): void;\r\n    webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;\r\n    webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;\r\n    webkitRequestAnimationFrame(callback: FrameRequestCallback): number;\r\n    addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"compassneedscalibration\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"devicelight\", listener: (ev: DeviceLightEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"devicemotion\", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deviceorientation\", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n    [index: number]: Window;\r\n}\r\n\r\ndeclare var Window: {\r\n    prototype: Window;\r\n    new(): Window;\r\n}\r\n\r\ninterface Worker extends EventTarget, AbstractWorker {\r\n    onmessage: (ev: MessageEvent) => any;\r\n    postMessage(message: any, ports?: any): void;\r\n    terminate(): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var Worker: {\r\n    prototype: Worker;\r\n    new(stringUrl: string): Worker;\r\n}\r\n\r\ninterface XMLDocument extends Document {\r\n}\r\n\r\ndeclare var XMLDocument: {\r\n    prototype: XMLDocument;\r\n    new(): XMLDocument;\r\n}\r\n\r\ninterface XMLHttpRequest extends EventTarget, XMLHttpRequestEventTarget {\r\n    msCaching: string;\r\n    onreadystatechange: (ev: ProgressEvent) => any;\r\n    readonly readyState: number;\r\n    readonly response: any;\r\n    readonly responseText: string;\r\n    responseType: string;\r\n    readonly responseXML: any;\r\n    readonly status: number;\r\n    readonly statusText: string;\r\n    timeout: number;\r\n    readonly upload: XMLHttpRequestUpload;\r\n    withCredentials: boolean;\r\n    abort(): void;\r\n    getAllResponseHeaders(): string;\r\n    getResponseHeader(header: string): string | null;\r\n    msCachingEnabled(): boolean;\r\n    open(method: string, url: string, async?: boolean, user?: string, password?: string): void;\r\n    overrideMimeType(mime: string): void;\r\n    send(data?: Document): void;\r\n    send(data?: string): void;\r\n    send(data?: any): void;\r\n    setRequestHeader(header: string, value: string): void;\r\n    readonly DONE: number;\r\n    readonly HEADERS_RECEIVED: number;\r\n    readonly LOADING: number;\r\n    readonly OPENED: number;\r\n    readonly UNSENT: number;\r\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeout\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var XMLHttpRequest: {\r\n    prototype: XMLHttpRequest;\r\n    new(): XMLHttpRequest;\r\n    readonly DONE: number;\r\n    readonly HEADERS_RECEIVED: number;\r\n    readonly LOADING: number;\r\n    readonly OPENED: number;\r\n    readonly UNSENT: number;\r\n    create(): XMLHttpRequest;\r\n}\r\n\r\ninterface XMLHttpRequestUpload extends EventTarget, XMLHttpRequestEventTarget {\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ndeclare var XMLHttpRequestUpload: {\r\n    prototype: XMLHttpRequestUpload;\r\n    new(): XMLHttpRequestUpload;\r\n}\r\n\r\ninterface XMLSerializer {\r\n    serializeToString(target: Node): string;\r\n}\r\n\r\ndeclare var XMLSerializer: {\r\n    prototype: XMLSerializer;\r\n    new(): XMLSerializer;\r\n}\r\n\r\ninterface XPathEvaluator {\r\n    createExpression(expression: string, resolver: XPathNSResolver): XPathExpression;\r\n    createNSResolver(nodeResolver?: Node): XPathNSResolver;\r\n    evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult;\r\n}\r\n\r\ndeclare var XPathEvaluator: {\r\n    prototype: XPathEvaluator;\r\n    new(): XPathEvaluator;\r\n}\r\n\r\ninterface XPathExpression {\r\n    evaluate(contextNode: Node, type: number, result: XPathResult): XPathExpression;\r\n}\r\n\r\ndeclare var XPathExpression: {\r\n    prototype: XPathExpression;\r\n    new(): XPathExpression;\r\n}\r\n\r\ninterface XPathNSResolver {\r\n    lookupNamespaceURI(prefix: string): string;\r\n}\r\n\r\ndeclare var XPathNSResolver: {\r\n    prototype: XPathNSResolver;\r\n    new(): XPathNSResolver;\r\n}\r\n\r\ninterface XPathResult {\r\n    readonly booleanValue: boolean;\r\n    readonly invalidIteratorState: boolean;\r\n    readonly numberValue: number;\r\n    readonly resultType: number;\r\n    readonly singleNodeValue: Node;\r\n    readonly snapshotLength: number;\r\n    readonly stringValue: string;\r\n    iterateNext(): Node;\r\n    snapshotItem(index: number): Node;\r\n    readonly ANY_TYPE: number;\r\n    readonly ANY_UNORDERED_NODE_TYPE: number;\r\n    readonly BOOLEAN_TYPE: number;\r\n    readonly FIRST_ORDERED_NODE_TYPE: number;\r\n    readonly NUMBER_TYPE: number;\r\n    readonly ORDERED_NODE_ITERATOR_TYPE: number;\r\n    readonly ORDERED_NODE_SNAPSHOT_TYPE: number;\r\n    readonly STRING_TYPE: number;\r\n    readonly UNORDERED_NODE_ITERATOR_TYPE: number;\r\n    readonly UNORDERED_NODE_SNAPSHOT_TYPE: number;\r\n}\r\n\r\ndeclare var XPathResult: {\r\n    prototype: XPathResult;\r\n    new(): XPathResult;\r\n    readonly ANY_TYPE: number;\r\n    readonly ANY_UNORDERED_NODE_TYPE: number;\r\n    readonly BOOLEAN_TYPE: number;\r\n    readonly FIRST_ORDERED_NODE_TYPE: number;\r\n    readonly NUMBER_TYPE: number;\r\n    readonly ORDERED_NODE_ITERATOR_TYPE: number;\r\n    readonly ORDERED_NODE_SNAPSHOT_TYPE: number;\r\n    readonly STRING_TYPE: number;\r\n    readonly UNORDERED_NODE_ITERATOR_TYPE: number;\r\n    readonly UNORDERED_NODE_SNAPSHOT_TYPE: number;\r\n}\r\n\r\ninterface XSLTProcessor {\r\n    clearParameters(): void;\r\n    getParameter(namespaceURI: string, localName: string): any;\r\n    importStylesheet(style: Node): void;\r\n    removeParameter(namespaceURI: string, localName: string): void;\r\n    reset(): void;\r\n    setParameter(namespaceURI: string, localName: string, value: any): void;\r\n    transformToDocument(source: Node): Document;\r\n    transformToFragment(source: Node, document: Document): DocumentFragment;\r\n}\r\n\r\ndeclare var XSLTProcessor: {\r\n    prototype: XSLTProcessor;\r\n    new(): XSLTProcessor;\r\n}\r\n\r\ninterface AbstractWorker {\r\n    onerror: (ev: Event) => any;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ninterface CanvasPathMethods {\r\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\r\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\r\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\r\n    closePath(): void;\r\n    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\r\n    lineTo(x: number, y: number): void;\r\n    moveTo(x: number, y: number): void;\r\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\r\n    rect(x: number, y: number, w: number, h: number): void;\r\n}\r\n\r\ninterface ChildNode {\r\n    remove(): void;\r\n}\r\n\r\ninterface DOML2DeprecatedColorProperty {\r\n    color: string;\r\n}\r\n\r\ninterface DOML2DeprecatedSizeProperty {\r\n    size: number;\r\n}\r\n\r\ninterface DocumentEvent {\r\n    createEvent(eventInterface:\"AnimationEvent\"): AnimationEvent;\r\n    createEvent(eventInterface:\"AriaRequestEvent\"): AriaRequestEvent;\r\n    createEvent(eventInterface:\"AudioProcessingEvent\"): AudioProcessingEvent;\r\n    createEvent(eventInterface:\"BeforeUnloadEvent\"): BeforeUnloadEvent;\r\n    createEvent(eventInterface:\"ClipboardEvent\"): ClipboardEvent;\r\n    createEvent(eventInterface:\"CloseEvent\"): CloseEvent;\r\n    createEvent(eventInterface:\"CommandEvent\"): CommandEvent;\r\n    createEvent(eventInterface:\"CompositionEvent\"): CompositionEvent;\r\n    createEvent(eventInterface:\"CustomEvent\"): CustomEvent;\r\n    createEvent(eventInterface:\"DeviceLightEvent\"): DeviceLightEvent;\r\n    createEvent(eventInterface:\"DeviceMotionEvent\"): DeviceMotionEvent;\r\n    createEvent(eventInterface:\"DeviceOrientationEvent\"): DeviceOrientationEvent;\r\n    createEvent(eventInterface:\"DragEvent\"): DragEvent;\r\n    createEvent(eventInterface:\"ErrorEvent\"): ErrorEvent;\r\n    createEvent(eventInterface:\"Event\"): Event;\r\n    createEvent(eventInterface:\"Events\"): Event;\r\n    createEvent(eventInterface:\"FocusEvent\"): FocusEvent;\r\n    createEvent(eventInterface:\"GamepadEvent\"): GamepadEvent;\r\n    createEvent(eventInterface:\"HashChangeEvent\"): HashChangeEvent;\r\n    createEvent(eventInterface:\"IDBVersionChangeEvent\"): IDBVersionChangeEvent;\r\n    createEvent(eventInterface:\"KeyboardEvent\"): KeyboardEvent;\r\n    createEvent(eventInterface:\"ListeningStateChangedEvent\"): ListeningStateChangedEvent;\r\n    createEvent(eventInterface:\"LongRunningScriptDetectedEvent\"): LongRunningScriptDetectedEvent;\r\n    createEvent(eventInterface:\"MSGestureEvent\"): MSGestureEvent;\r\n    createEvent(eventInterface:\"MSManipulationEvent\"): MSManipulationEvent;\r\n    createEvent(eventInterface:\"MSMediaKeyMessageEvent\"): MSMediaKeyMessageEvent;\r\n    createEvent(eventInterface:\"MSMediaKeyNeededEvent\"): MSMediaKeyNeededEvent;\r\n    createEvent(eventInterface:\"MSPointerEvent\"): MSPointerEvent;\r\n    createEvent(eventInterface:\"MSSiteModeEvent\"): MSSiteModeEvent;\r\n    createEvent(eventInterface:\"MediaEncryptedEvent\"): MediaEncryptedEvent;\r\n    createEvent(eventInterface:\"MediaKeyMessageEvent\"): MediaKeyMessageEvent;\r\n    createEvent(eventInterface:\"MediaStreamErrorEvent\"): MediaStreamErrorEvent;\r\n    createEvent(eventInterface:\"MediaStreamTrackEvent\"): MediaStreamTrackEvent;\r\n    createEvent(eventInterface:\"MessageEvent\"): MessageEvent;\r\n    createEvent(eventInterface:\"MouseEvent\"): MouseEvent;\r\n    createEvent(eventInterface:\"MouseEvents\"): MouseEvent;\r\n    createEvent(eventInterface:\"MutationEvent\"): MutationEvent;\r\n    createEvent(eventInterface:\"MutationEvents\"): MutationEvent;\r\n    createEvent(eventInterface:\"NavigationCompletedEvent\"): NavigationCompletedEvent;\r\n    createEvent(eventInterface:\"NavigationEvent\"): NavigationEvent;\r\n    createEvent(eventInterface:\"NavigationEventWithReferrer\"): NavigationEventWithReferrer;\r\n    createEvent(eventInterface:\"OfflineAudioCompletionEvent\"): OfflineAudioCompletionEvent;\r\n    createEvent(eventInterface:\"OverflowEvent\"): OverflowEvent;\r\n    createEvent(eventInterface:\"PageTransitionEvent\"): PageTransitionEvent;\r\n    createEvent(eventInterface:\"PermissionRequestedEvent\"): PermissionRequestedEvent;\r\n    createEvent(eventInterface:\"PointerEvent\"): PointerEvent;\r\n    createEvent(eventInterface:\"PopStateEvent\"): PopStateEvent;\r\n    createEvent(eventInterface:\"ProgressEvent\"): ProgressEvent;\r\n    createEvent(eventInterface:\"RTCDTMFToneChangeEvent\"): RTCDTMFToneChangeEvent;\r\n    createEvent(eventInterface:\"RTCDtlsTransportStateChangedEvent\"): RTCDtlsTransportStateChangedEvent;\r\n    createEvent(eventInterface:\"RTCIceCandidatePairChangedEvent\"): RTCIceCandidatePairChangedEvent;\r\n    createEvent(eventInterface:\"RTCIceGathererEvent\"): RTCIceGathererEvent;\r\n    createEvent(eventInterface:\"RTCIceTransportStateChangedEvent\"): RTCIceTransportStateChangedEvent;\r\n    createEvent(eventInterface:\"RTCSsrcConflictEvent\"): RTCSsrcConflictEvent;\r\n    createEvent(eventInterface:\"SVGZoomEvent\"): SVGZoomEvent;\r\n    createEvent(eventInterface:\"SVGZoomEvents\"): SVGZoomEvent;\r\n    createEvent(eventInterface:\"ScriptNotifyEvent\"): ScriptNotifyEvent;\r\n    createEvent(eventInterface:\"StorageEvent\"): StorageEvent;\r\n    createEvent(eventInterface:\"TextEvent\"): TextEvent;\r\n    createEvent(eventInterface:\"TouchEvent\"): TouchEvent;\r\n    createEvent(eventInterface:\"TrackEvent\"): TrackEvent;\r\n    createEvent(eventInterface:\"TransitionEvent\"): TransitionEvent;\r\n    createEvent(eventInterface:\"UIEvent\"): UIEvent;\r\n    createEvent(eventInterface:\"UIEvents\"): UIEvent;\r\n    createEvent(eventInterface:\"UnviewableContentIdentifiedEvent\"): UnviewableContentIdentifiedEvent;\r\n    createEvent(eventInterface:\"WebGLContextEvent\"): WebGLContextEvent;\r\n    createEvent(eventInterface:\"WheelEvent\"): WheelEvent;\r\n    createEvent(eventInterface: string): Event;\r\n}\r\n\r\ninterface ElementTraversal {\r\n    readonly childElementCount: number;\r\n    readonly firstElementChild: Element;\r\n    readonly lastElementChild: Element;\r\n    readonly nextElementSibling: Element;\r\n    readonly previousElementSibling: Element;\r\n}\r\n\r\ninterface GetSVGDocument {\r\n    getSVGDocument(): Document;\r\n}\r\n\r\ninterface GlobalEventHandlers {\r\n    onpointercancel: (ev: PointerEvent) => any;\r\n    onpointerdown: (ev: PointerEvent) => any;\r\n    onpointerenter: (ev: PointerEvent) => any;\r\n    onpointerleave: (ev: PointerEvent) => any;\r\n    onpointermove: (ev: PointerEvent) => any;\r\n    onpointerout: (ev: PointerEvent) => any;\r\n    onpointerover: (ev: PointerEvent) => any;\r\n    onpointerup: (ev: PointerEvent) => any;\r\n    onwheel: (ev: WheelEvent) => any;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ninterface HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own ch functionality for the object.\r\n      */\r\n    ch: string;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own chOff functionality for the object.\r\n      */\r\n    chOff: string;\r\n    /**\r\n      * Sets or retrieves how text and other content are vertically aligned within the object that contains them.\r\n      */\r\n    vAlign: string;\r\n}\r\n\r\ninterface IDBEnvironment {\r\n    readonly indexedDB: IDBFactory;\r\n}\r\n\r\ninterface LinkStyle {\r\n    readonly sheet: StyleSheet;\r\n}\r\n\r\ninterface MSBaseReader {\r\n    onabort: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    readonly readyState: number;\r\n    readonly result: any;\r\n    abort(): void;\r\n    readonly DONE: number;\r\n    readonly EMPTY: number;\r\n    readonly LOADING: number;\r\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ninterface MSFileSaver {\r\n    msSaveBlob(blob: any, defaultName?: string): boolean;\r\n    msSaveOrOpenBlob(blob: any, defaultName?: string): boolean;\r\n}\r\n\r\ninterface MSNavigatorDoNotTrack {\r\n    confirmSiteSpecificTrackingException(args: ConfirmSiteSpecificExceptionsInformation): boolean;\r\n    confirmWebWideTrackingException(args: ExceptionInformation): boolean;\r\n    removeSiteSpecificTrackingException(args: ExceptionInformation): void;\r\n    removeWebWideTrackingException(args: ExceptionInformation): void;\r\n    storeSiteSpecificTrackingException(args: StoreSiteSpecificExceptionsInformation): void;\r\n    storeWebWideTrackingException(args: StoreExceptionsInformation): void;\r\n}\r\n\r\ninterface NavigatorContentUtils {\r\n}\r\n\r\ninterface NavigatorGeolocation {\r\n    readonly geolocation: Geolocation;\r\n}\r\n\r\ninterface NavigatorID {\r\n    readonly appName: string;\r\n    readonly appVersion: string;\r\n    readonly platform: string;\r\n    readonly product: string;\r\n    readonly productSub: string;\r\n    readonly userAgent: string;\r\n    readonly vendor: string;\r\n    readonly vendorSub: string;\r\n}\r\n\r\ninterface NavigatorOnLine {\r\n    readonly onLine: boolean;\r\n}\r\n\r\ninterface NavigatorStorageUtils {\r\n}\r\n\r\ninterface NavigatorUserMedia {\r\n    readonly mediaDevices: MediaDevices;\r\n    getUserMedia(constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void;\r\n}\r\n\r\ninterface NodeSelector {\r\n    querySelector(selectors: string): Element;\r\n    querySelectorAll(selectors: string): NodeListOf<Element>;\r\n}\r\n\r\ninterface RandomSource {\r\n    getRandomValues(array: ArrayBufferView): ArrayBufferView;\r\n}\r\n\r\ninterface SVGAnimatedPathData {\r\n    readonly pathSegList: SVGPathSegList;\r\n}\r\n\r\ninterface SVGAnimatedPoints {\r\n    readonly animatedPoints: SVGPointList;\r\n    readonly points: SVGPointList;\r\n}\r\n\r\ninterface SVGExternalResourcesRequired {\r\n    readonly externalResourcesRequired: SVGAnimatedBoolean;\r\n}\r\n\r\ninterface SVGFilterPrimitiveStandardAttributes extends SVGStylable {\r\n    readonly height: SVGAnimatedLength;\r\n    readonly result: SVGAnimatedString;\r\n    readonly width: SVGAnimatedLength;\r\n    readonly x: SVGAnimatedLength;\r\n    readonly y: SVGAnimatedLength;\r\n}\r\n\r\ninterface SVGFitToViewBox {\r\n    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n    readonly viewBox: SVGAnimatedRect;\r\n}\r\n\r\ninterface SVGLangSpace {\r\n    xmllang: string;\r\n    xmlspace: string;\r\n}\r\n\r\ninterface SVGLocatable {\r\n    readonly farthestViewportElement: SVGElement;\r\n    readonly nearestViewportElement: SVGElement;\r\n    getBBox(): SVGRect;\r\n    getCTM(): SVGMatrix;\r\n    getScreenCTM(): SVGMatrix;\r\n    getTransformToElement(element: SVGElement): SVGMatrix;\r\n}\r\n\r\ninterface SVGStylable {\r\n    className: any;\r\n    readonly style: CSSStyleDeclaration;\r\n}\r\n\r\ninterface SVGTests {\r\n    readonly requiredExtensions: SVGStringList;\r\n    readonly requiredFeatures: SVGStringList;\r\n    readonly systemLanguage: SVGStringList;\r\n    hasExtension(extension: string): boolean;\r\n}\r\n\r\ninterface SVGTransformable extends SVGLocatable {\r\n    readonly transform: SVGAnimatedTransformList;\r\n}\r\n\r\ninterface SVGURIReference {\r\n    readonly href: SVGAnimatedString;\r\n}\r\n\r\ninterface WindowBase64 {\r\n    atob(encodedString: string): string;\r\n    btoa(rawString: string): string;\r\n}\r\n\r\ninterface WindowConsole {\r\n    readonly console: Console;\r\n}\r\n\r\ninterface WindowLocalStorage {\r\n    readonly localStorage: Storage;\r\n}\r\n\r\ninterface WindowSessionStorage {\r\n    readonly sessionStorage: Storage;\r\n}\r\n\r\ninterface WindowTimers extends Object, WindowTimersExtension {\r\n    clearInterval(handle: number): void;\r\n    clearTimeout(handle: number): void;\r\n    setInterval(handler: any, timeout?: any, ...args: any[]): number;\r\n    setTimeout(handler: any, timeout?: any, ...args: any[]): number;\r\n}\r\n\r\ninterface WindowTimersExtension {\r\n    clearImmediate(handle: number): void;\r\n    setImmediate(expression: any, ...args: any[]): number;\r\n}\r\n\r\ninterface XMLHttpRequestEventTarget {\r\n    onabort: (ev: Event) => any;\r\n    onerror: (ev: Event) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    ontimeout: (ev: ProgressEvent) => any;\r\n    addEventListener(type: \"abort\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeout\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\n}\r\n\r\ninterface StorageEventInit extends EventInit {\r\n    key?: string;\r\n    oldValue?: string;\r\n    newValue?: string;\r\n    url: string;\r\n    storageArea?: Storage;\r\n}\r\n\r\ninterface NodeListOf<TNode extends Node> extends NodeList {\r\n    length: number;\r\n    item(index: number): TNode;\r\n    [index: number]: TNode;\r\n}\r\n\r\ninterface HTMLCollectionOf<T extends Element> extends HTMLCollection {\r\n    item(index: number): T;\r\n    namedItem(name: string): T;\r\n    [index: number]: T;\r\n}\r\n\r\ninterface BlobPropertyBag {\r\n    type?: string;\r\n    endings?: string;\r\n}\r\n\r\ninterface FilePropertyBag {\r\n    type?: string;\r\n    lastModified?: number;\r\n}\r\n\r\ninterface EventListenerObject {\r\n    handleEvent(evt: Event): void;\r\n}\r\n\r\ninterface MessageEventInit extends EventInit {\r\n    data?: any;\r\n    origin?: string;\r\n    lastEventId?: string;\r\n    channel?: string;\r\n    source?: any;\r\n    ports?: MessagePort[];\r\n}\r\n\r\ninterface ProgressEventInit extends EventInit {\r\n    lengthComputable?: boolean;\r\n    loaded?: number;\r\n    total?: number;\r\n}\r\n\r\ninterface ClipboardEventInit extends EventInit {\r\n    data?: string;\r\n    dataType?: string;\r\n}\r\n\r\ninterface IDBArrayKey extends Array<IDBValidKey> {\r\n}\r\n\r\ndeclare type EventListenerOrEventListenerObject = EventListener | EventListenerObject;\r\n\r\ninterface ErrorEventHandler {\r\n    (message: string, filename?: string, lineno?: number, colno?: number, error?:Error): void;\r\n}\r\ninterface PositionCallback {\r\n    (position: Position): void;\r\n}\r\ninterface PositionErrorCallback {\r\n    (error: PositionError): void;\r\n}\r\ninterface MediaQueryListListener {\r\n    (mql: MediaQueryList): void;\r\n}\r\ninterface MSLaunchUriCallback {\r\n    (): void;\r\n}\r\ninterface FrameRequestCallback {\r\n    (time: number): void;\r\n}\r\ninterface MSUnsafeFunctionCallback {\r\n    (): any;\r\n}\r\ninterface MSExecAtPriorityFunctionCallback {\r\n    (...args: any[]): any;\r\n}\r\ninterface MutationCallback {\r\n    (mutations: MutationRecord[], observer: MutationObserver): void;\r\n}\r\ninterface DecodeSuccessCallback {\r\n    (decodedData: AudioBuffer): void;\r\n}\r\ninterface DecodeErrorCallback {\r\n    (error: DOMException): void;\r\n}\r\ninterface FunctionStringCallback {\r\n    (data: string): void;\r\n}\r\ninterface NavigatorUserMediaSuccessCallback {\r\n    (stream: MediaStream): void;\r\n}\r\ninterface NavigatorUserMediaErrorCallback {\r\n    (error: MediaStreamError): void;\r\n}\r\ninterface ForEachCallback {\r\n    (keyId: any, status: string): void;\r\n}\r\ndeclare var Audio: {new(src?: string): HTMLAudioElement; };\r\ndeclare var Image: {new(width?: number, height?: number): HTMLImageElement; };\r\ndeclare var Option: {new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean): HTMLOptionElement; };\r\ndeclare var applicationCache: ApplicationCache;\r\ndeclare var clientInformation: Navigator;\r\ndeclare var closed: boolean;\r\ndeclare var crypto: Crypto;\r\ndeclare var defaultStatus: string;\r\ndeclare var devicePixelRatio: number;\r\ndeclare var doNotTrack: string;\r\ndeclare var document: Document;\r\ndeclare var event: Event;\r\ndeclare var external: External;\r\ndeclare var frameElement: Element;\r\ndeclare var frames: Window;\r\ndeclare var history: History;\r\ndeclare var innerHeight: number;\r\ndeclare var innerWidth: number;\r\ndeclare var length: number;\r\ndeclare var location: Location;\r\ndeclare var locationbar: BarProp;\r\ndeclare var menubar: BarProp;\r\ndeclare var msCredentials: MSCredentials;\r\ndeclare var name: string;\r\ndeclare var navigator: Navigator;\r\ndeclare var offscreenBuffering: string | boolean;\r\ndeclare var onabort: (ev: Event) => any;\r\ndeclare var onafterprint: (ev: Event) => any;\r\ndeclare var onbeforeprint: (ev: Event) => any;\r\ndeclare var onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\ndeclare var onblur: (ev: FocusEvent) => any;\r\ndeclare var oncanplay: (ev: Event) => any;\r\ndeclare var oncanplaythrough: (ev: Event) => any;\r\ndeclare var onchange: (ev: Event) => any;\r\ndeclare var onclick: (ev: MouseEvent) => any;\r\ndeclare var oncompassneedscalibration: (ev: Event) => any;\r\ndeclare var oncontextmenu: (ev: PointerEvent) => any;\r\ndeclare var ondblclick: (ev: MouseEvent) => any;\r\ndeclare var ondevicelight: (ev: DeviceLightEvent) => any;\r\ndeclare var ondevicemotion: (ev: DeviceMotionEvent) => any;\r\ndeclare var ondeviceorientation: (ev: DeviceOrientationEvent) => any;\r\ndeclare var ondrag: (ev: DragEvent) => any;\r\ndeclare var ondragend: (ev: DragEvent) => any;\r\ndeclare var ondragenter: (ev: DragEvent) => any;\r\ndeclare var ondragleave: (ev: DragEvent) => any;\r\ndeclare var ondragover: (ev: DragEvent) => any;\r\ndeclare var ondragstart: (ev: DragEvent) => any;\r\ndeclare var ondrop: (ev: DragEvent) => any;\r\ndeclare var ondurationchange: (ev: Event) => any;\r\ndeclare var onemptied: (ev: Event) => any;\r\ndeclare var onended: (ev: MediaStreamErrorEvent) => any;\r\ndeclare var onerror: ErrorEventHandler;\r\ndeclare var onfocus: (ev: FocusEvent) => any;\r\ndeclare var onhashchange: (ev: HashChangeEvent) => any;\r\ndeclare var oninput: (ev: Event) => any;\r\ndeclare var oninvalid: (ev: Event) => any;\r\ndeclare var onkeydown: (ev: KeyboardEvent) => any;\r\ndeclare var onkeypress: (ev: KeyboardEvent) => any;\r\ndeclare var onkeyup: (ev: KeyboardEvent) => any;\r\ndeclare var onload: (ev: Event) => any;\r\ndeclare var onloadeddata: (ev: Event) => any;\r\ndeclare var onloadedmetadata: (ev: Event) => any;\r\ndeclare var onloadstart: (ev: Event) => any;\r\ndeclare var onmessage: (ev: MessageEvent) => any;\r\ndeclare var onmousedown: (ev: MouseEvent) => any;\r\ndeclare var onmouseenter: (ev: MouseEvent) => any;\r\ndeclare var onmouseleave: (ev: MouseEvent) => any;\r\ndeclare var onmousemove: (ev: MouseEvent) => any;\r\ndeclare var onmouseout: (ev: MouseEvent) => any;\r\ndeclare var onmouseover: (ev: MouseEvent) => any;\r\ndeclare var onmouseup: (ev: MouseEvent) => any;\r\ndeclare var onmousewheel: (ev: WheelEvent) => any;\r\ndeclare var onmsgesturechange: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgesturedoubletap: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgestureend: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgesturehold: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgesturestart: (ev: MSGestureEvent) => any;\r\ndeclare var onmsgesturetap: (ev: MSGestureEvent) => any;\r\ndeclare var onmsinertiastart: (ev: MSGestureEvent) => any;\r\ndeclare var onmspointercancel: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerdown: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerenter: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerleave: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointermove: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerout: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerover: (ev: MSPointerEvent) => any;\r\ndeclare var onmspointerup: (ev: MSPointerEvent) => any;\r\ndeclare var onoffline: (ev: Event) => any;\r\ndeclare var ononline: (ev: Event) => any;\r\ndeclare var onorientationchange: (ev: Event) => any;\r\ndeclare var onpagehide: (ev: PageTransitionEvent) => any;\r\ndeclare var onpageshow: (ev: PageTransitionEvent) => any;\r\ndeclare var onpause: (ev: Event) => any;\r\ndeclare var onplay: (ev: Event) => any;\r\ndeclare var onplaying: (ev: Event) => any;\r\ndeclare var onpopstate: (ev: PopStateEvent) => any;\r\ndeclare var onprogress: (ev: ProgressEvent) => any;\r\ndeclare var onratechange: (ev: Event) => any;\r\ndeclare var onreadystatechange: (ev: ProgressEvent) => any;\r\ndeclare var onreset: (ev: Event) => any;\r\ndeclare var onresize: (ev: UIEvent) => any;\r\ndeclare var onscroll: (ev: UIEvent) => any;\r\ndeclare var onseeked: (ev: Event) => any;\r\ndeclare var onseeking: (ev: Event) => any;\r\ndeclare var onselect: (ev: UIEvent) => any;\r\ndeclare var onstalled: (ev: Event) => any;\r\ndeclare var onstorage: (ev: StorageEvent) => any;\r\ndeclare var onsubmit: (ev: Event) => any;\r\ndeclare var onsuspend: (ev: Event) => any;\r\ndeclare var ontimeupdate: (ev: Event) => any;\r\ndeclare var ontouchcancel: (ev: TouchEvent) => any;\r\ndeclare var ontouchend: (ev: TouchEvent) => any;\r\ndeclare var ontouchmove: (ev: TouchEvent) => any;\r\ndeclare var ontouchstart: (ev: TouchEvent) => any;\r\ndeclare var onunload: (ev: Event) => any;\r\ndeclare var onvolumechange: (ev: Event) => any;\r\ndeclare var onwaiting: (ev: Event) => any;\r\ndeclare var opener: Window;\r\ndeclare var orientation: string | number;\r\ndeclare var outerHeight: number;\r\ndeclare var outerWidth: number;\r\ndeclare var pageXOffset: number;\r\ndeclare var pageYOffset: number;\r\ndeclare var parent: Window;\r\ndeclare var performance: Performance;\r\ndeclare var personalbar: BarProp;\r\ndeclare var screen: Screen;\r\ndeclare var screenLeft: number;\r\ndeclare var screenTop: number;\r\ndeclare var screenX: number;\r\ndeclare var screenY: number;\r\ndeclare var scrollX: number;\r\ndeclare var scrollY: number;\r\ndeclare var scrollbars: BarProp;\r\ndeclare var self: Window;\r\ndeclare var status: string;\r\ndeclare var statusbar: BarProp;\r\ndeclare var styleMedia: StyleMedia;\r\ndeclare var toolbar: BarProp;\r\ndeclare var top: Window;\r\ndeclare var window: Window;\r\ndeclare function alert(message?: any): void;\r\ndeclare function blur(): void;\r\ndeclare function cancelAnimationFrame(handle: number): void;\r\ndeclare function captureEvents(): void;\r\ndeclare function close(): void;\r\ndeclare function confirm(message?: string): boolean;\r\ndeclare function focus(): void;\r\ndeclare function getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\ndeclare function getMatchedCSSRules(elt: Element, pseudoElt?: string): CSSRuleList;\r\ndeclare function getSelection(): Selection;\r\ndeclare function matchMedia(mediaQuery: string): MediaQueryList;\r\ndeclare function moveBy(x?: number, y?: number): void;\r\ndeclare function moveTo(x?: number, y?: number): void;\r\ndeclare function msWriteProfilerMark(profilerMarkName: string): void;\r\ndeclare function open(url?: string, target?: string, features?: string, replace?: boolean): Window;\r\ndeclare function postMessage(message: any, targetOrigin: string, transfer?: any[]): void;\r\ndeclare function print(): void;\r\ndeclare function prompt(message?: string, _default?: string): string | null;\r\ndeclare function releaseEvents(): void;\r\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\r\ndeclare function resizeBy(x?: number, y?: number): void;\r\ndeclare function resizeTo(x?: number, y?: number): void;\r\ndeclare function scroll(x?: number, y?: number): void;\r\ndeclare function scrollBy(x?: number, y?: number): void;\r\ndeclare function scrollTo(x?: number, y?: number): void;\r\ndeclare function webkitCancelAnimationFrame(handle: number): void;\r\ndeclare function webkitConvertPointFromNodeToPage(node: Node, pt: WebKitPoint): WebKitPoint;\r\ndeclare function webkitConvertPointFromPageToNode(node: Node, pt: WebKitPoint): WebKitPoint;\r\ndeclare function webkitRequestAnimationFrame(callback: FrameRequestCallback): number;\r\ndeclare function toString(): string;\r\ndeclare function addEventListener(type: string, listener?: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\ndeclare function dispatchEvent(evt: Event): boolean;\r\ndeclare function removeEventListener(type: string, listener?: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\ndeclare function clearInterval(handle: number): void;\r\ndeclare function clearTimeout(handle: number): void;\r\ndeclare function setInterval(handler: any, timeout?: any, ...args: any[]): number;\r\ndeclare function setTimeout(handler: any, timeout?: any, ...args: any[]): number;\r\ndeclare function clearImmediate(handle: number): void;\r\ndeclare function setImmediate(expression: any, ...args: any[]): number;\r\ndeclare var sessionStorage: Storage;\r\ndeclare var localStorage: Storage;\r\ndeclare var console: Console;\r\ndeclare var onpointercancel: (ev: PointerEvent) => any;\r\ndeclare var onpointerdown: (ev: PointerEvent) => any;\r\ndeclare var onpointerenter: (ev: PointerEvent) => any;\r\ndeclare var onpointerleave: (ev: PointerEvent) => any;\r\ndeclare var onpointermove: (ev: PointerEvent) => any;\r\ndeclare var onpointerout: (ev: PointerEvent) => any;\r\ndeclare var onpointerover: (ev: PointerEvent) => any;\r\ndeclare var onpointerup: (ev: PointerEvent) => any;\r\ndeclare var onwheel: (ev: WheelEvent) => any;\r\ndeclare var indexedDB: IDBFactory;\r\ndeclare function atob(encodedString: string): string;\r\ndeclare function btoa(rawString: string): string;\r\ndeclare function addEventListener(type: \"MSGestureChange\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureDoubleTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureEnd\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureHold\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSGestureTap\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSInertiaStart\", listener: (ev: MSGestureEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerCancel\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerDown\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerEnter\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerLeave\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerMove\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerOut\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerOver\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"MSPointerUp\", listener: (ev: MSPointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"compassneedscalibration\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"contextmenu\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"devicelight\", listener: (ev: DeviceLightEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"devicemotion\", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"deviceorientation\", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"ended\", listener: (ev: MediaStreamErrorEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"hashchange\", listener: (ev: HashChangeEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"invalid\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousewheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"orientationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"readystatechange\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"wheel\", listener: (ev: WheelEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void;\r\ntype AAGUID = string;\r\ntype AlgorithmIdentifier = string | Algorithm;\r\ntype ConstrainBoolean = boolean | ConstrainBooleanParameters;\r\ntype ConstrainDOMString = string | string[] | ConstrainDOMStringParameters;\r\ntype ConstrainDouble = number | ConstrainDoubleRange;\r\ntype ConstrainLong = number | ConstrainLongRange;\r\ntype CryptoOperationData = ArrayBufferView;\r\ntype GLbitfield = number;\r\ntype GLboolean = boolean;\r\ntype GLbyte = number;\r\ntype GLclampf = number;\r\ntype GLenum = number;\r\ntype GLfloat = number;\r\ntype GLint = number;\r\ntype GLintptr = number;\r\ntype GLshort = number;\r\ntype GLsizei = number;\r\ntype GLsizeiptr = number;\r\ntype GLubyte = number;\r\ntype GLuint = number;\r\ntype GLushort = number;\r\ntype IDBKeyPath = string;\r\ntype KeyFormat = string;\r\ntype KeyType = string;\r\ntype KeyUsage = string;\r\ntype MSInboundPayload = MSVideoRecvPayload | MSAudioRecvPayload;\r\ntype MSLocalClientEvent = MSLocalClientEventBase | MSAudioLocalClientEvent;\r\ntype MSOutboundPayload = MSVideoSendPayload | MSAudioSendPayload;\r\ntype RTCIceGatherCandidate = RTCIceCandidate | RTCIceCandidateComplete;\r\ntype RTCTransport = RTCDtlsTransport | RTCSrtpSdesTransport;\r\ntype payloadtype = number;\r\ntype IDBValidKey = number | string | Date | IDBArrayKey;\r\n/////////////////////////////\r\n/// WorkerGlobalScope APIs \r\n/////////////////////////////\r\n// These are only available in a Web Worker \r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n\r\n/////////////////////////////\r\n/// Windows Script Host APIS\r\n/////////////////////////////\r\n\r\n\r\ninterface ActiveXObject {\r\n    new (s: string): any;\r\n}\r\ndeclare var ActiveXObject: ActiveXObject;\r\n\r\ninterface ITextWriter {\r\n    Write(s: string): void;\r\n    WriteLine(s: string): void;\r\n    Close(): void;\r\n}\r\n\r\ninterface TextStreamBase {\r\n    /**\r\n     * The column number of the current character position in an input stream.\r\n     */\r\n    Column: number;\r\n\r\n    /**\r\n     * The current line number in an input stream.\r\n     */\r\n    Line: number;\r\n\r\n    /**\r\n     * Closes a text stream.\r\n     * It is not necessary to close standard streams; they close automatically when the process ends. If \r\n     * you close a standard stream, be aware that any other pointers to that standard stream become invalid.\r\n     */\r\n    Close(): void;\r\n}\r\n\r\ninterface TextStreamWriter extends TextStreamBase {\r\n    /**\r\n     * Sends a string to an output stream.\r\n     */\r\n    Write(s: string): void;\r\n\r\n    /**\r\n     * Sends a specified number of blank lines (newline characters) to an output stream.\r\n     */\r\n    WriteBlankLines(intLines: number): void;\r\n\r\n    /**\r\n     * Sends a string followed by a newline character to an output stream.\r\n     */\r\n    WriteLine(s: string): void;\r\n}\r\n\r\ninterface TextStreamReader extends TextStreamBase {\r\n    /**\r\n     * Returns a specified number of characters from an input stream, starting at the current pointer position.\r\n     * Does not return until the ENTER key is pressed.\r\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r\n     */\r\n    Read(characters: number): string;\r\n\r\n    /**\r\n     * Returns all characters from an input stream.\r\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r\n     */\r\n    ReadAll(): string;\r\n\r\n    /**\r\n     * Returns an entire line from an input stream.\r\n     * Although this method extracts the newline character, it does not add it to the returned string.\r\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r\n     */\r\n    ReadLine(): string;\r\n\r\n    /**\r\n     * Skips a specified number of characters when reading from an input text stream.\r\n     * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r\n     * @param characters Positive number of characters to skip forward. (Backward skipping is not supported.)\r\n     */\r\n    Skip(characters: number): void;\r\n\r\n    /**\r\n     * Skips the next line when reading from an input text stream.\r\n     * Can only be used on a stream in reading mode, not writing or appending mode.\r\n     */\r\n    SkipLine(): void;\r\n\r\n    /**\r\n     * Indicates whether the stream pointer position is at the end of a line.\r\n     */\r\n    AtEndOfLine: boolean;\r\n\r\n    /**\r\n     * Indicates whether the stream pointer position is at the end of a stream.\r\n     */\r\n    AtEndOfStream: boolean;\r\n}\r\n\r\ndeclare var WScript: {\r\n    /**\r\n    * Outputs text to either a message box (under WScript.exe) or the command console window followed by\r\n    * a newline (under CScript.exe).\r\n    */\r\n    Echo(s: any): void;\r\n\r\n    /**\r\n     * Exposes the write-only error output stream for the current script.\r\n     * Can be accessed only while using CScript.exe.\r\n     */\r\n    StdErr: TextStreamWriter;\r\n\r\n    /**\r\n     * Exposes the write-only output stream for the current script.\r\n     * Can be accessed only while using CScript.exe.\r\n     */\r\n    StdOut: TextStreamWriter;\r\n    Arguments: { length: number; Item(n: number): string; };\r\n\r\n    /**\r\n     *  The full path of the currently running script.\r\n     */\r\n    ScriptFullName: string;\r\n\r\n    /**\r\n     * Forces the script to stop immediately, with an optional exit code.\r\n     */\r\n    Quit(exitCode?: number): number;\r\n\r\n    /**\r\n     * The Windows Script Host build version number.\r\n     */\r\n    BuildVersion: number;\r\n\r\n    /**\r\n     * Fully qualified path of the host executable.\r\n     */\r\n    FullName: string;\r\n\r\n    /**\r\n     * Gets/sets the script mode - interactive(true) or batch(false).\r\n     */\r\n    Interactive: boolean;\r\n\r\n    /**\r\n     * The name of the host executable (WScript.exe or CScript.exe).\r\n     */\r\n    Name: string;\r\n\r\n    /**\r\n     * Path of the directory containing the host executable.\r\n     */\r\n    Path: string;\r\n\r\n    /**\r\n     * The filename of the currently running script.\r\n     */\r\n    ScriptName: string;\r\n\r\n    /**\r\n     * Exposes the read-only input stream for the current script.\r\n     * Can be accessed only while using CScript.exe.\r\n     */\r\n    StdIn: TextStreamReader;\r\n\r\n    /**\r\n     * Windows Script Host version\r\n     */\r\n    Version: string;\r\n\r\n    /**\r\n     * Connects a COM object's event sources to functions named with a given prefix, in the form prefix_event.\r\n     */\r\n    ConnectObject(objEventSource: any, strPrefix: string): void;\r\n\r\n    /**\r\n     * Creates a COM object.\r\n     * @param strProgiID\r\n     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\r\n     */\r\n    CreateObject(strProgID: string, strPrefix?: string): any;\r\n\r\n    /**\r\n     * Disconnects a COM object from its event sources.\r\n     */\r\n    DisconnectObject(obj: any): void;\r\n\r\n    /**\r\n     * Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file.\r\n     * @param strPathname Fully qualified path to the file containing the object persisted to disk.\r\n     *                       For objects in memory, pass a zero-length string.\r\n     * @param strProgID\r\n     * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\r\n     */\r\n    GetObject(strPathname: string, strProgID?: string, strPrefix?: string): any;\r\n\r\n    /**\r\n     * Suspends script execution for a specified length of time, then continues execution.\r\n     * @param intTime Interval (in milliseconds) to suspend script execution.\r\n     */\r\n    Sleep(intTime: number): void;\r\n};\r\n\r\n/**\r\n * Allows enumerating over a COM collection, which may not have indexed item access.\r\n */\r\ninterface Enumerator<T> {\r\n    /**\r\n     * Returns true if the current item is the last one in the collection, or the collection is empty,\r\n     * or the current item is undefined.\r\n     */\r\n    atEnd(): boolean;\r\n\r\n    /**\r\n     * Returns the current item in the collection\r\n     */\r\n    item(): T;\r\n\r\n    /**\r\n     * Resets the current item in the collection to the first item. If there are no items in the collection,\r\n     * the current item is set to undefined.\r\n     */\r\n    moveFirst(): void;\r\n\r\n    /**\r\n     * Moves the current item to the next item in the collection. If the enumerator is at the end of\r\n     * the collection or the collection is empty, the current item is set to undefined.\r\n     */\r\n    moveNext(): void;\r\n}\r\n\r\ninterface EnumeratorConstructor {\r\n    new <T>(collection: any): Enumerator<T>;\r\n    new (collection: any): Enumerator<any>;\r\n}\r\n\r\ndeclare var Enumerator: EnumeratorConstructor;\r\n\r\n/**\r\n * Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions.\r\n */\r\ninterface VBArray<T> {\r\n    /**\r\n     * Returns the number of dimensions (1-based).\r\n     */\r\n    dimensions(): number;\r\n\r\n    /**\r\n     * Takes an index for each dimension in the array, and returns the item at the corresponding location.\r\n     */\r\n    getItem(dimension1Index: number, ...dimensionNIndexes: number[]): T;\r\n\r\n    /**\r\n     * Returns the smallest available index for a given dimension.\r\n     * @param dimension 1-based dimension (defaults to 1)\r\n     */\r\n    lbound(dimension?: number): number;\r\n\r\n    /**\r\n     * Returns the largest available index for a given dimension.\r\n     * @param dimension 1-based dimension (defaults to 1)\r\n     */\r\n    ubound(dimension?: number): number;\r\n\r\n    /**\r\n     * Returns a Javascript array with all the elements in the VBArray. If there are multiple dimensions,\r\n     * each successive dimension is appended to the end of the array.\r\n     * Example: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6]\r\n     */\r\n    toArray(): T[];\r\n}\r\n\r\ninterface VBArrayConstructor {\r\n    new <T>(safeArray: any): VBArray<T>;\r\n    new (safeArray: any): VBArray<any>;\r\n}\r\n\r\ndeclare var VBArray: VBArrayConstructor;\r\n/// <reference path=\"lib.dom.generated.d.ts\" />\r\n\r\ninterface DOMTokenList {\r\n    [Symbol.iterator](): IterableIterator<string>;\r\n}\r\n\r\ninterface NodeList {\r\n    [Symbol.iterator](): IterableIterator<Node>\r\n}\r\n\r\ninterface NodeListOf<TNode extends Node> {\r\n    [Symbol.iterator](): IterableIterator<TNode>\r\n}\r\n"

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(139);

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// CodeMirror, copyright (c) by Marijn Haverbeke and others
	// Distributed under an MIT license: http://codemirror.net/LICENSE
	
	// TODO actually recognize syntax of TypeScript constructs
	
	(function(mod) {
	  if (true) // CommonJS
	    mod(__webpack_require__(35));
	  else if (typeof define == "function" && define.amd) // AMD
	    define(["../../lib/codemirror"], mod);
	  else // Plain browser env
	    mod(CodeMirror);
	})(function(CodeMirror) {
	"use strict";
	
	function expressionAllowed(stream, state, backUp) {
	  return /^(?:operator|sof|keyword c|case|new|[\[{}\(,;:]|=>)$/.test(state.lastType) ||
	    (state.lastType == "quasi" && /\{\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))
	}
	
	CodeMirror.defineMode("javascript", function(config, parserConfig) {
	  var indentUnit = config.indentUnit;
	  var statementIndent = parserConfig.statementIndent;
	  var jsonldMode = parserConfig.jsonld;
	  var jsonMode = parserConfig.json || jsonldMode;
	  var isTS = parserConfig.typescript;
	  var wordRE = parserConfig.wordCharacters || /[\w$\xa1-\uffff]/;
	
	  // Tokenizer
	
	  var keywords = function(){
	    function kw(type) {return {type: type, style: "keyword"};}
	    var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c");
	    var operator = kw("operator"), atom = {type: "atom", style: "atom"};
	
	    var jsKeywords = {
	      "if": kw("if"), "while": A, "with": A, "else": B, "do": B, "try": B, "finally": B,
	      "return": C, "break": C, "continue": C, "new": kw("new"), "delete": C, "throw": C, "debugger": C,
	      "var": kw("var"), "const": kw("var"), "let": kw("var"),
	      "function": kw("function"), "catch": kw("catch"),
	      "for": kw("for"), "switch": kw("switch"), "case": kw("case"), "default": kw("default"),
	      "in": operator, "typeof": operator, "instanceof": operator,
	      "true": atom, "false": atom, "null": atom, "undefined": atom, "NaN": atom, "Infinity": atom,
	      "this": kw("this"), "class": kw("class"), "super": kw("atom"),
	      "yield": C, "export": kw("export"), "import": kw("import"), "extends": C,
	      "await": C, "async": kw("async")
	    };
	
	    // Extend the 'normal' keywords with the TypeScript language extensions
	    if (isTS) {
	      var type = {type: "variable", style: "variable-3"};
	      var tsKeywords = {
	        // object-like things
	        "interface": kw("class"),
	        "implements": C,
	        "namespace": C,
	        "module": kw("module"),
	        "enum": kw("module"),
	
	        // scope modifiers
	        "public": kw("modifier"),
	        "private": kw("modifier"),
	        "protected": kw("modifier"),
	        "abstract": kw("modifier"),
	
	        // operators
	        "as": operator,
	
	        // types
	        "string": type, "number": type, "boolean": type, "any": type
	      };
	
	      for (var attr in tsKeywords) {
	        jsKeywords[attr] = tsKeywords[attr];
	      }
	    }
	
	    return jsKeywords;
	  }();
	
	  var isOperatorChar = /[+\-*&%=<>!?|~^]/;
	  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;
	
	  function readRegexp(stream) {
	    var escaped = false, next, inSet = false;
	    while ((next = stream.next()) != null) {
	      if (!escaped) {
	        if (next == "/" && !inSet) return;
	        if (next == "[") inSet = true;
	        else if (inSet && next == "]") inSet = false;
	      }
	      escaped = !escaped && next == "\\";
	    }
	  }
	
	  // Used as scratch variables to communicate multiple values without
	  // consing up tons of objects.
	  var type, content;
	  function ret(tp, style, cont) {
	    type = tp; content = cont;
	    return style;
	  }
	  function tokenBase(stream, state) {
	    var ch = stream.next();
	    if (ch == '"' || ch == "'") {
	      state.tokenize = tokenString(ch);
	      return state.tokenize(stream, state);
	    } else if (ch == "." && stream.match(/^\d+(?:[eE][+\-]?\d+)?/)) {
	      return ret("number", "number");
	    } else if (ch == "." && stream.match("..")) {
	      return ret("spread", "meta");
	    } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
	      return ret(ch);
	    } else if (ch == "=" && stream.eat(">")) {
	      return ret("=>", "operator");
	    } else if (ch == "0" && stream.eat(/x/i)) {
	      stream.eatWhile(/[\da-f]/i);
	      return ret("number", "number");
	    } else if (ch == "0" && stream.eat(/o/i)) {
	      stream.eatWhile(/[0-7]/i);
	      return ret("number", "number");
	    } else if (ch == "0" && stream.eat(/b/i)) {
	      stream.eatWhile(/[01]/i);
	      return ret("number", "number");
	    } else if (/\d/.test(ch)) {
	      stream.match(/^\d*(?:\.\d*)?(?:[eE][+\-]?\d+)?/);
	      return ret("number", "number");
	    } else if (ch == "/") {
	      if (stream.eat("*")) {
	        state.tokenize = tokenComment;
	        return tokenComment(stream, state);
	      } else if (stream.eat("/")) {
	        stream.skipToEnd();
	        return ret("comment", "comment");
	      } else if (expressionAllowed(stream, state, 1)) {
	        readRegexp(stream);
	        stream.match(/^\b(([gimyu])(?![gimyu]*\2))+\b/);
	        return ret("regexp", "string-2");
	      } else {
	        stream.eatWhile(isOperatorChar);
	        return ret("operator", "operator", stream.current());
	      }
	    } else if (ch == "`") {
	      state.tokenize = tokenQuasi;
	      return tokenQuasi(stream, state);
	    } else if (ch == "#") {
	      stream.skipToEnd();
	      return ret("error", "error");
	    } else if (isOperatorChar.test(ch)) {
	      stream.eatWhile(isOperatorChar);
	      return ret("operator", "operator", stream.current());
	    } else if (wordRE.test(ch)) {
	      stream.eatWhile(wordRE);
	      var word = stream.current(), known = keywords.propertyIsEnumerable(word) && keywords[word];
	      return (known && state.lastType != ".") ? ret(known.type, known.style, word) :
	                     ret("variable", "variable", word);
	    }
	  }
	
	  function tokenString(quote) {
	    return function(stream, state) {
	      var escaped = false, next;
	      if (jsonldMode && stream.peek() == "@" && stream.match(isJsonldKeyword)){
	        state.tokenize = tokenBase;
	        return ret("jsonld-keyword", "meta");
	      }
	      while ((next = stream.next()) != null) {
	        if (next == quote && !escaped) break;
	        escaped = !escaped && next == "\\";
	      }
	      if (!escaped) state.tokenize = tokenBase;
	      return ret("string", "string");
	    };
	  }
	
	  function tokenComment(stream, state) {
	    var maybeEnd = false, ch;
	    while (ch = stream.next()) {
	      if (ch == "/" && maybeEnd) {
	        state.tokenize = tokenBase;
	        break;
	      }
	      maybeEnd = (ch == "*");
	    }
	    return ret("comment", "comment");
	  }
	
	  function tokenQuasi(stream, state) {
	    var escaped = false, next;
	    while ((next = stream.next()) != null) {
	      if (!escaped && (next == "`" || next == "$" && stream.eat("{"))) {
	        state.tokenize = tokenBase;
	        break;
	      }
	      escaped = !escaped && next == "\\";
	    }
	    return ret("quasi", "string-2", stream.current());
	  }
	
	  var brackets = "([{}])";
	  // This is a crude lookahead trick to try and notice that we're
	  // parsing the argument patterns for a fat-arrow function before we
	  // actually hit the arrow token. It only works if the arrow is on
	  // the same line as the arguments and there's no strange noise
	  // (comments) in between. Fallback is to only notice when we hit the
	  // arrow, and not declare the arguments as locals for the arrow
	  // body.
	  function findFatArrow(stream, state) {
	    if (state.fatArrowAt) state.fatArrowAt = null;
	    var arrow = stream.string.indexOf("=>", stream.start);
	    if (arrow < 0) return;
	
	    var depth = 0, sawSomething = false;
	    for (var pos = arrow - 1; pos >= 0; --pos) {
	      var ch = stream.string.charAt(pos);
	      var bracket = brackets.indexOf(ch);
	      if (bracket >= 0 && bracket < 3) {
	        if (!depth) { ++pos; break; }
	        if (--depth == 0) break;
	      } else if (bracket >= 3 && bracket < 6) {
	        ++depth;
	      } else if (wordRE.test(ch)) {
	        sawSomething = true;
	      } else if (/["'\/]/.test(ch)) {
	        return;
	      } else if (sawSomething && !depth) {
	        ++pos;
	        break;
	      }
	    }
	    if (sawSomething && !depth) state.fatArrowAt = pos;
	  }
	
	  // Parser
	
	  var atomicTypes = {"atom": true, "number": true, "variable": true, "string": true, "regexp": true, "this": true, "jsonld-keyword": true};
	
	  function JSLexical(indented, column, type, align, prev, info) {
	    this.indented = indented;
	    this.column = column;
	    this.type = type;
	    this.prev = prev;
	    this.info = info;
	    if (align != null) this.align = align;
	  }
	
	  function inScope(state, varname) {
	    for (var v = state.localVars; v; v = v.next)
	      if (v.name == varname) return true;
	    for (var cx = state.context; cx; cx = cx.prev) {
	      for (var v = cx.vars; v; v = v.next)
	        if (v.name == varname) return true;
	    }
	  }
	
	  function parseJS(state, style, type, content, stream) {
	    var cc = state.cc;
	    // Communicate our context to the combinators.
	    // (Less wasteful than consing up a hundred closures on every call.)
	    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;
	
	    if (!state.lexical.hasOwnProperty("align"))
	      state.lexical.align = true;
	
	    while(true) {
	      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;
	      if (combinator(type, content)) {
	        while(cc.length && cc[cc.length - 1].lex)
	          cc.pop()();
	        if (cx.marked) return cx.marked;
	        if (type == "variable" && inScope(state, content)) return "variable-2";
	        return style;
	      }
	    }
	  }
	
	  // Combinator utils
	
	  var cx = {state: null, column: null, marked: null, cc: null};
	  function pass() {
	    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);
	  }
	  function cont() {
	    pass.apply(null, arguments);
	    return true;
	  }
	  function register(varname) {
	    function inList(list) {
	      for (var v = list; v; v = v.next)
	        if (v.name == varname) return true;
	      return false;
	    }
	    var state = cx.state;
	    cx.marked = "def";
	    if (state.context) {
	      if (inList(state.localVars)) return;
	      state.localVars = {name: varname, next: state.localVars};
	    } else {
	      if (inList(state.globalVars)) return;
	      if (parserConfig.globalVars)
	        state.globalVars = {name: varname, next: state.globalVars};
	    }
	  }
	
	  // Combinators
	
	  var defaultVars = {name: "this", next: {name: "arguments"}};
	  function pushcontext() {
	    cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};
	    cx.state.localVars = defaultVars;
	  }
	  function popcontext() {
	    cx.state.localVars = cx.state.context.vars;
	    cx.state.context = cx.state.context.prev;
	  }
	  function pushlex(type, info) {
	    var result = function() {
	      var state = cx.state, indent = state.indented;
	      if (state.lexical.type == "stat") indent = state.lexical.indented;
	      else for (var outer = state.lexical; outer && outer.type == ")" && outer.align; outer = outer.prev)
	        indent = outer.indented;
	      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);
	    };
	    result.lex = true;
	    return result;
	  }
	  function poplex() {
	    var state = cx.state;
	    if (state.lexical.prev) {
	      if (state.lexical.type == ")")
	        state.indented = state.lexical.indented;
	      state.lexical = state.lexical.prev;
	    }
	  }
	  poplex.lex = true;
	
	  function expect(wanted) {
	    function exp(type) {
	      if (type == wanted) return cont();
	      else if (wanted == ";") return pass();
	      else return cont(exp);
	    };
	    return exp;
	  }
	
	  function statement(type, value) {
	    if (type == "var") return cont(pushlex("vardef", value.length), vardef, expect(";"), poplex);
	    if (type == "keyword a") return cont(pushlex("form"), expression, statement, poplex);
	    if (type == "keyword b") return cont(pushlex("form"), statement, poplex);
	    if (type == "{") return cont(pushlex("}"), block, poplex);
	    if (type == ";") return cont();
	    if (type == "if") {
	      if (cx.state.lexical.info == "else" && cx.state.cc[cx.state.cc.length - 1] == poplex)
	        cx.state.cc.pop()();
	      return cont(pushlex("form"), expression, statement, poplex, maybeelse);
	    }
	    if (type == "function") return cont(functiondef);
	    if (type == "for") return cont(pushlex("form"), forspec, statement, poplex);
	    if (type == "variable") return cont(pushlex("stat"), maybelabel);
	    if (type == "switch") return cont(pushlex("form"), expression, pushlex("}", "switch"), expect("{"),
	                                      block, poplex, poplex);
	    if (type == "case") return cont(expression, expect(":"));
	    if (type == "default") return cont(expect(":"));
	    if (type == "catch") return cont(pushlex("form"), pushcontext, expect("("), funarg, expect(")"),
	                                     statement, poplex, popcontext);
	    if (type == "class") return cont(pushlex("form"), className, poplex);
	    if (type == "export") return cont(pushlex("stat"), afterExport, poplex);
	    if (type == "import") return cont(pushlex("stat"), afterImport, poplex);
	    if (type == "module") return cont(pushlex("form"), pattern, pushlex("}"), expect("{"), block, poplex, poplex)
	    if (type == "async") return cont(statement)
	    return pass(pushlex("stat"), expression, expect(";"), poplex);
	  }
	  function expression(type) {
	    return expressionInner(type, false);
	  }
	  function expressionNoComma(type) {
	    return expressionInner(type, true);
	  }
	  function expressionInner(type, noComma) {
	    if (cx.state.fatArrowAt == cx.stream.start) {
	      var body = noComma ? arrowBodyNoComma : arrowBody;
	      if (type == "(") return cont(pushcontext, pushlex(")"), commasep(pattern, ")"), poplex, expect("=>"), body, popcontext);
	      else if (type == "variable") return pass(pushcontext, pattern, expect("=>"), body, popcontext);
	    }
	
	    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;
	    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);
	    if (type == "function") return cont(functiondef, maybeop);
	    if (type == "keyword c") return cont(noComma ? maybeexpressionNoComma : maybeexpression);
	    if (type == "(") return cont(pushlex(")"), maybeexpression, comprehension, expect(")"), poplex, maybeop);
	    if (type == "operator" || type == "spread") return cont(noComma ? expressionNoComma : expression);
	    if (type == "[") return cont(pushlex("]"), arrayLiteral, poplex, maybeop);
	    if (type == "{") return contCommasep(objprop, "}", null, maybeop);
	    if (type == "quasi") return pass(quasi, maybeop);
	    if (type == "new") return cont(maybeTarget(noComma));
	    return cont();
	  }
	  function maybeexpression(type) {
	    if (type.match(/[;\}\)\],]/)) return pass();
	    return pass(expression);
	  }
	  function maybeexpressionNoComma(type) {
	    if (type.match(/[;\}\)\],]/)) return pass();
	    return pass(expressionNoComma);
	  }
	
	  function maybeoperatorComma(type, value) {
	    if (type == ",") return cont(expression);
	    return maybeoperatorNoComma(type, value, false);
	  }
	  function maybeoperatorNoComma(type, value, noComma) {
	    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;
	    var expr = noComma == false ? expression : expressionNoComma;
	    if (type == "=>") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);
	    if (type == "operator") {
	      if (/\+\+|--/.test(value)) return cont(me);
	      if (value == "?") return cont(expression, expect(":"), expr);
	      return cont(expr);
	    }
	    if (type == "quasi") { return pass(quasi, me); }
	    if (type == ";") return;
	    if (type == "(") return contCommasep(expressionNoComma, ")", "call", me);
	    if (type == ".") return cont(property, me);
	    if (type == "[") return cont(pushlex("]"), maybeexpression, expect("]"), poplex, me);
	  }
	  function quasi(type, value) {
	    if (type != "quasi") return pass();
	    if (value.slice(value.length - 2) != "${") return cont(quasi);
	    return cont(expression, continueQuasi);
	  }
	  function continueQuasi(type) {
	    if (type == "}") {
	      cx.marked = "string-2";
	      cx.state.tokenize = tokenQuasi;
	      return cont(quasi);
	    }
	  }
	  function arrowBody(type) {
	    findFatArrow(cx.stream, cx.state);
	    return pass(type == "{" ? statement : expression);
	  }
	  function arrowBodyNoComma(type) {
	    findFatArrow(cx.stream, cx.state);
	    return pass(type == "{" ? statement : expressionNoComma);
	  }
	  function maybeTarget(noComma) {
	    return function(type) {
	      if (type == ".") return cont(noComma ? targetNoComma : target);
	      else return pass(noComma ? expressionNoComma : expression);
	    };
	  }
	  function target(_, value) {
	    if (value == "target") { cx.marked = "keyword"; return cont(maybeoperatorComma); }
	  }
	  function targetNoComma(_, value) {
	    if (value == "target") { cx.marked = "keyword"; return cont(maybeoperatorNoComma); }
	  }
	  function maybelabel(type) {
	    if (type == ":") return cont(poplex, statement);
	    return pass(maybeoperatorComma, expect(";"), poplex);
	  }
	  function property(type) {
	    if (type == "variable") {cx.marked = "property"; return cont();}
	  }
	  function objprop(type, value) {
	    if (type == "variable" || cx.style == "keyword") {
	      cx.marked = "property";
	      if (value == "get" || value == "set") return cont(getterSetter);
	      return cont(afterprop);
	    } else if (type == "number" || type == "string") {
	      cx.marked = jsonldMode ? "property" : (cx.style + " property");
	      return cont(afterprop);
	    } else if (type == "jsonld-keyword") {
	      return cont(afterprop);
	    } else if (type == "modifier") {
	      return cont(objprop)
	    } else if (type == "[") {
	      return cont(expression, expect("]"), afterprop);
	    } else if (type == "spread") {
	      return cont(expression);
	    }
	  }
	  function getterSetter(type) {
	    if (type != "variable") return pass(afterprop);
	    cx.marked = "property";
	    return cont(functiondef);
	  }
	  function afterprop(type) {
	    if (type == ":") return cont(expressionNoComma);
	    if (type == "(") return pass(functiondef);
	  }
	  function commasep(what, end) {
	    function proceed(type, value) {
	      if (type == ",") {
	        var lex = cx.state.lexical;
	        if (lex.info == "call") lex.pos = (lex.pos || 0) + 1;
	        return cont(what, proceed);
	      }
	      if (type == end || value == end) return cont();
	      return cont(expect(end));
	    }
	    return function(type, value) {
	      if (type == end || value == end) return cont();
	      return pass(what, proceed);
	    };
	  }
	  function contCommasep(what, end, info) {
	    for (var i = 3; i < arguments.length; i++)
	      cx.cc.push(arguments[i]);
	    return cont(pushlex(end, info), commasep(what, end), poplex);
	  }
	  function block(type) {
	    if (type == "}") return cont();
	    return pass(statement, block);
	  }
	  function maybetype(type) {
	    if (isTS && type == ":") return cont(typeexpr);
	  }
	  function maybedefault(_, value) {
	    if (value == "=") return cont(expressionNoComma);
	  }
	  function typeexpr(type) {
	    if (type == "variable") {cx.marked = "variable-3"; return cont(afterType);}
	  }
	  function afterType(type, value) {
	    if (value == "<") return cont(commasep(typeexpr, ">"), afterType)
	    if (type == "[") return cont(expect("]"), afterType)
	  }
	  function vardef() {
	    return pass(pattern, maybetype, maybeAssign, vardefCont);
	  }
	  function pattern(type, value) {
	    if (type == "modifier") return cont(pattern)
	    if (type == "variable") { register(value); return cont(); }
	    if (type == "spread") return cont(pattern);
	    if (type == "[") return contCommasep(pattern, "]");
	    if (type == "{") return contCommasep(proppattern, "}");
	  }
	  function proppattern(type, value) {
	    if (type == "variable" && !cx.stream.match(/^\s*:/, false)) {
	      register(value);
	      return cont(maybeAssign);
	    }
	    if (type == "variable") cx.marked = "property";
	    if (type == "spread") return cont(pattern);
	    if (type == "}") return pass();
	    return cont(expect(":"), pattern, maybeAssign);
	  }
	  function maybeAssign(_type, value) {
	    if (value == "=") return cont(expressionNoComma);
	  }
	  function vardefCont(type) {
	    if (type == ",") return cont(vardef);
	  }
	  function maybeelse(type, value) {
	    if (type == "keyword b" && value == "else") return cont(pushlex("form", "else"), statement, poplex);
	  }
	  function forspec(type) {
	    if (type == "(") return cont(pushlex(")"), forspec1, expect(")"), poplex);
	  }
	  function forspec1(type) {
	    if (type == "var") return cont(vardef, expect(";"), forspec2);
	    if (type == ";") return cont(forspec2);
	    if (type == "variable") return cont(formaybeinof);
	    return pass(expression, expect(";"), forspec2);
	  }
	  function formaybeinof(_type, value) {
	    if (value == "in" || value == "of") { cx.marked = "keyword"; return cont(expression); }
	    return cont(maybeoperatorComma, forspec2);
	  }
	  function forspec2(type, value) {
	    if (type == ";") return cont(forspec3);
	    if (value == "in" || value == "of") { cx.marked = "keyword"; return cont(expression); }
	    return pass(expression, expect(";"), forspec3);
	  }
	  function forspec3(type) {
	    if (type != ")") cont(expression);
	  }
	  function functiondef(type, value) {
	    if (value == "*") {cx.marked = "keyword"; return cont(functiondef);}
	    if (type == "variable") {register(value); return cont(functiondef);}
	    if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, maybetype, statement, popcontext);
	  }
	  function funarg(type) {
	    if (type == "spread") return cont(funarg);
	    return pass(pattern, maybetype, maybedefault);
	  }
	  function className(type, value) {
	    if (type == "variable") {register(value); return cont(classNameAfter);}
	  }
	  function classNameAfter(type, value) {
	    if (value == "extends") return cont(expression, classNameAfter);
	    if (type == "{") return cont(pushlex("}"), classBody, poplex);
	  }
	  function classBody(type, value) {
	    if (type == "variable" || cx.style == "keyword") {
	      if (value == "static") {
	        cx.marked = "keyword";
	        return cont(classBody);
	      }
	      cx.marked = "property";
	      if (value == "get" || value == "set") return cont(classGetterSetter, functiondef, classBody);
	      return cont(functiondef, classBody);
	    }
	    if (value == "*") {
	      cx.marked = "keyword";
	      return cont(classBody);
	    }
	    if (type == ";") return cont(classBody);
	    if (type == "}") return cont();
	  }
	  function classGetterSetter(type) {
	    if (type != "variable") return pass();
	    cx.marked = "property";
	    return cont();
	  }
	  function afterExport(_type, value) {
	    if (value == "*") { cx.marked = "keyword"; return cont(maybeFrom, expect(";")); }
	    if (value == "default") { cx.marked = "keyword"; return cont(expression, expect(";")); }
	    return pass(statement);
	  }
	  function afterImport(type) {
	    if (type == "string") return cont();
	    return pass(importSpec, maybeFrom);
	  }
	  function importSpec(type, value) {
	    if (type == "{") return contCommasep(importSpec, "}");
	    if (type == "variable") register(value);
	    if (value == "*") cx.marked = "keyword";
	    return cont(maybeAs);
	  }
	  function maybeAs(_type, value) {
	    if (value == "as") { cx.marked = "keyword"; return cont(importSpec); }
	  }
	  function maybeFrom(_type, value) {
	    if (value == "from") { cx.marked = "keyword"; return cont(expression); }
	  }
	  function arrayLiteral(type) {
	    if (type == "]") return cont();
	    return pass(expressionNoComma, maybeArrayComprehension);
	  }
	  function maybeArrayComprehension(type) {
	    if (type == "for") return pass(comprehension, expect("]"));
	    if (type == ",") return cont(commasep(maybeexpressionNoComma, "]"));
	    return pass(commasep(expressionNoComma, "]"));
	  }
	  function comprehension(type) {
	    if (type == "for") return cont(forspec, comprehension);
	    if (type == "if") return cont(expression, comprehension);
	  }
	
	  function isContinuedStatement(state, textAfter) {
	    return state.lastType == "operator" || state.lastType == "," ||
	      isOperatorChar.test(textAfter.charAt(0)) ||
	      /[,.]/.test(textAfter.charAt(0));
	  }
	
	  // Interface
	
	  return {
	    startState: function(basecolumn) {
	      var state = {
	        tokenize: tokenBase,
	        lastType: "sof",
	        cc: [],
	        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, "block", false),
	        localVars: parserConfig.localVars,
	        context: parserConfig.localVars && {vars: parserConfig.localVars},
	        indented: basecolumn || 0
	      };
	      if (parserConfig.globalVars && typeof parserConfig.globalVars == "object")
	        state.globalVars = parserConfig.globalVars;
	      return state;
	    },
	
	    token: function(stream, state) {
	      if (stream.sol()) {
	        if (!state.lexical.hasOwnProperty("align"))
	          state.lexical.align = false;
	        state.indented = stream.indentation();
	        findFatArrow(stream, state);
	      }
	      if (state.tokenize != tokenComment && stream.eatSpace()) return null;
	      var style = state.tokenize(stream, state);
	      if (type == "comment") return style;
	      state.lastType = type == "operator" && (content == "++" || content == "--") ? "incdec" : type;
	      return parseJS(state, style, type, content, stream);
	    },
	
	    indent: function(state, textAfter) {
	      if (state.tokenize == tokenComment) return CodeMirror.Pass;
	      if (state.tokenize != tokenBase) return 0;
	      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;
	      // Kludge to prevent 'maybelse' from blocking lexical scope pops
	      if (!/^\s*else\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {
	        var c = state.cc[i];
	        if (c == poplex) lexical = lexical.prev;
	        else if (c != maybeelse) break;
	      }
	      if (lexical.type == "stat" && firstChar == "}") lexical = lexical.prev;
	      if (statementIndent && lexical.type == ")" && lexical.prev.type == "stat")
	        lexical = lexical.prev;
	      var type = lexical.type, closing = firstChar == type;
	
	      if (type == "vardef") return lexical.indented + (state.lastType == "operator" || state.lastType == "," ? lexical.info + 1 : 0);
	      else if (type == "form" && firstChar == "{") return lexical.indented;
	      else if (type == "form") return lexical.indented + indentUnit;
	      else if (type == "stat")
	        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);
	      else if (lexical.info == "switch" && !closing && parserConfig.doubleIndentSwitch != false)
	        return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? indentUnit : 2 * indentUnit);
	      else if (lexical.align) return lexical.column + (closing ? 0 : 1);
	      else return lexical.indented + (closing ? 0 : indentUnit);
	    },
	
	    electricInput: /^\s*(?:case .*?:|default:|\{|\})$/,
	    blockCommentStart: jsonMode ? null : "/*",
	    blockCommentEnd: jsonMode ? null : "*/",
	    lineComment: jsonMode ? null : "//",
	    fold: "brace",
	    closeBrackets: "()[]{}''\"\"``",
	
	    helperType: jsonMode ? "json" : "javascript",
	    jsonldMode: jsonldMode,
	    jsonMode: jsonMode,
	
	    expressionAllowed: expressionAllowed,
	    skipExpression: function(state) {
	      var top = state.cc[state.cc.length - 1]
	      if (top == expression || top == expressionNoComma) state.cc.pop()
	    }
	  };
	});
	
	CodeMirror.registerHelper("wordChars", "javascript", /[\w$]/);
	
	CodeMirror.defineMIME("text/javascript", "javascript");
	CodeMirror.defineMIME("text/ecmascript", "javascript");
	CodeMirror.defineMIME("application/javascript", "javascript");
	CodeMirror.defineMIME("application/x-javascript", "javascript");
	CodeMirror.defineMIME("application/ecmascript", "javascript");
	CodeMirror.defineMIME("application/json", {name: "javascript", json: true});
	CodeMirror.defineMIME("application/x-json", {name: "javascript", json: true});
	CodeMirror.defineMIME("application/ld+json", {name: "javascript", jsonld: true});
	CodeMirror.defineMIME("text/typescript", { name: "javascript", typescript: true });
	CodeMirror.defineMIME("application/typescript", { name: "javascript", typescript: true });
	
	});


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// CodeMirror, copyright (c) by Marijn Haverbeke and others
	// Distributed under an MIT license: http://codemirror.net/LICENSE
	
	/**
	 * Supported keybindings:
	 *   Too many to list. Refer to defaultKeyMap below.
	 *
	 * Supported Ex commands:
	 *   Refer to defaultExCommandMap below.
	 *
	 * Registers: unnamed, -, a-z, A-Z, 0-9
	 *   (Does not respect the special case for number registers when delete
	 *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )
	 *   TODO: Implement the remaining registers.
	 *
	 * Marks: a-z, A-Z, and 0-9
	 *   TODO: Implement the remaining special marks. They have more complex
	 *       behavior.
	 *
	 * Events:
	 *  'vim-mode-change' - raised on the editor anytime the current mode changes,
	 *                      Event object: {mode: "visual", subMode: "linewise"}
	 *
	 * Code structure:
	 *  1. Default keymap
	 *  2. Variable declarations and short basic helpers
	 *  3. Instance (External API) implementation
	 *  4. Internal state tracking objects (input state, counter) implementation
	 *     and instantiation
	 *  5. Key handler (the main command dispatcher) implementation
	 *  6. Motion, operator, and action implementations
	 *  7. Helper functions for the key handler, motions, operators, and actions
	 *  8. Set up Vim to work as a keymap for CodeMirror.
	 *  9. Ex command implementations.
	 */
	
	(function(mod) {
	  if (true) // CommonJS
	    mod(__webpack_require__(35), __webpack_require__(38), __webpack_require__(39), __webpack_require__(40));
	  else if (typeof define == "function" && define.amd) // AMD
	    define(["../lib/codemirror", "../addon/search/searchcursor", "../addon/dialog/dialog", "../addon/edit/matchbrackets"], mod);
	  else // Plain browser env
	    mod(CodeMirror);
	})(function(CodeMirror) {
	  'use strict';
	
	  var defaultKeymap = [
	    // Key to key mapping. This goes first to make it possible to override
	    // existing mappings.
	    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },
	    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },
	    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },
	    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },
	    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },
	    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},
	    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },
	    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },
	    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },
	    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },
	    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },
	    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },
	    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },
	    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },
	    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },
	    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },
	    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },
	    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},
	    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },
	    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },
	    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },
	    { keys: '<End>', type: 'keyToKey', toKeys: '$' },
	    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },
	    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },
	    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },
	    // Motions
	    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},
	    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},
	    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},
	    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},
	    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},
	    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},
	    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},
	    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},
	    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},
	    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},
	    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},
	    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},
	    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},
	    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},
	    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},
	    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},
	    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},
	    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},
	    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},
	    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},
	    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},
	    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},
	    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},
	    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},
	    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},
	    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },
	    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },
	    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},
	    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},
	    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},
	    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},
	    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},
	    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},
	    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},
	    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},
	    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},
	    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},
	    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},
	    { keys: '\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},
	    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},
	    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },
	    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },
	    { keys: ']\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },
	    { keys: '[\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },
	    // the next two aren't motions but must come before more general motion declarations
	    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},
	    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},
	    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},
	    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},
	    { keys: '|', type: 'motion', motion: 'moveToColumn'},
	    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},
	    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},
	    // Operators
	    { keys: 'd', type: 'operator', operator: 'delete' },
	    { keys: 'y', type: 'operator', operator: 'yank' },
	    { keys: 'c', type: 'operator', operator: 'change' },
	    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},
	    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},
	    { keys: 'g~', type: 'operator', operator: 'changeCase' },
	    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },
	    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },
	    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},
	    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},
	    // Operator-Motion dual commands
	    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},
	    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},
	    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},
	    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},
	    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},
	    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},
	    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},
	    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},
	    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},
	    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},
	    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },
	    // Actions
	    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},
	    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},
	    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},
	    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},
	    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },
	    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },
	    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },
	    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },
	    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },
	    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },
	    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },
	    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },
	    { keys: 'v', type: 'action', action: 'toggleVisualMode' },
	    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},
	    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},
	    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},
	    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },
	    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },
	    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},
	    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},
	    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },
	    { keys: '@<character>', type: 'action', action: 'replayMacro' },
	    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },
	    // Handle Replace-mode as a special case of insert mode.
	    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }},
	    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },
	    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },
	    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },
	    { keys: '<C-r>', type: 'action', action: 'redo' },
	    { keys: 'm<character>', type: 'action', action: 'setMark' },
	    { keys: '"<character>', type: 'action', action: 'setRegister' },
	    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},
	    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },
	    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},
	    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },
	    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},
	    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },
	    { keys: '.', type: 'action', action: 'repeatLastEdit' },
	    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},
	    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},
	    // Text object motions
	    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },
	    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},
	    // Search
	    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},
	    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},
	    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},
	    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},
	    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},
	    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},
	    // Ex command
	    { keys: ':', type: 'ex' }
	  ];
	
	  /**
	   * Ex commands
	   * Care must be taken when adding to the default Ex command map. For any
	   * pair of commands that have a shared prefix, at least one of their
	   * shortNames must not match the prefix of the other command.
	   */
	  var defaultExCommandMap = [
	    { name: 'colorscheme', shortName: 'colo' },
	    { name: 'map' },
	    { name: 'imap', shortName: 'im' },
	    { name: 'nmap', shortName: 'nm' },
	    { name: 'vmap', shortName: 'vm' },
	    { name: 'unmap' },
	    { name: 'write', shortName: 'w' },
	    { name: 'undo', shortName: 'u' },
	    { name: 'redo', shortName: 'red' },
	    { name: 'set', shortName: 'se' },
	    { name: 'set', shortName: 'se' },
	    { name: 'setlocal', shortName: 'setl' },
	    { name: 'setglobal', shortName: 'setg' },
	    { name: 'sort', shortName: 'sor' },
	    { name: 'substitute', shortName: 's', possiblyAsync: true },
	    { name: 'nohlsearch', shortName: 'noh' },
	    { name: 'yank', shortName: 'y' },
	    { name: 'delmarks', shortName: 'delm' },
	    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },
	    { name: 'global', shortName: 'g' }
	  ];
	
	  var Pos = CodeMirror.Pos;
	
	  var Vim = function() {
	    function enterVimMode(cm) {
	      cm.setOption('disableInput', true);
	      cm.setOption('showCursorWhenSelecting', false);
	      CodeMirror.signal(cm, "vim-mode-change", {mode: "normal"});
	      cm.on('cursorActivity', onCursorActivity);
	      maybeInitVimState(cm);
	      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));
	    }
	
	    function leaveVimMode(cm) {
	      cm.setOption('disableInput', false);
	      cm.off('cursorActivity', onCursorActivity);
	      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));
	      cm.state.vim = null;
	    }
	
	    function detachVimMap(cm, next) {
	      if (this == CodeMirror.keyMap.vim)
	        CodeMirror.rmClass(cm.getWrapperElement(), "cm-fat-cursor");
	
	      if (!next || next.attach != attachVimMap)
	        leaveVimMode(cm, false);
	    }
	    function attachVimMap(cm, prev) {
	      if (this == CodeMirror.keyMap.vim)
	        CodeMirror.addClass(cm.getWrapperElement(), "cm-fat-cursor");
	
	      if (!prev || prev.attach != attachVimMap)
	        enterVimMode(cm);
	    }
	
	    // Deprecated, simply setting the keymap works again.
	    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {
	      if (val && cm.getOption("keyMap") != "vim")
	        cm.setOption("keyMap", "vim");
	      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption("keyMap")))
	        cm.setOption("keyMap", "default");
	    });
	
	    function cmKey(key, cm) {
	      if (!cm) { return undefined; }
	      var vimKey = cmKeyToVimKey(key);
	      if (!vimKey) {
	        return false;
	      }
	      var cmd = CodeMirror.Vim.findKey(cm, vimKey);
	      if (typeof cmd == 'function') {
	        CodeMirror.signal(cm, 'vim-keypress', vimKey);
	      }
	      return cmd;
	    }
	
	    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};
	    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del'};
	    function cmKeyToVimKey(key) {
	      if (key.charAt(0) == '\'') {
	        // Keypress character binding of format "'a'"
	        return key.charAt(1);
	      }
	      var pieces = key.split(/-(?!$)/);
	      var lastPiece = pieces[pieces.length - 1];
	      if (pieces.length == 1 && pieces[0].length == 1) {
	        // No-modifier bindings use literal character bindings above. Skip.
	        return false;
	      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {
	        // Ignore Shift+char bindings as they should be handled by literal character.
	        return false;
	      }
	      var hasCharacter = false;
	      for (var i = 0; i < pieces.length; i++) {
	        var piece = pieces[i];
	        if (piece in modifiers) { pieces[i] = modifiers[piece]; }
	        else { hasCharacter = true; }
	        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }
	      }
	      if (!hasCharacter) {
	        // Vim does not support modifier only keys.
	        return false;
	      }
	      // TODO: Current bindings expect the character to be lower case, but
	      // it looks like vim key notation uses upper case.
	      if (isUpperCase(lastPiece)) {
	        pieces[pieces.length - 1] = lastPiece.toLowerCase();
	      }
	      return '<' + pieces.join('-') + '>';
	    }
	
	    function getOnPasteFn(cm) {
	      var vim = cm.state.vim;
	      if (!vim.onPasteFn) {
	        vim.onPasteFn = function() {
	          if (!vim.insertMode) {
	            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));
	            actions.enterInsertMode(cm, {}, vim);
	          }
	        };
	      }
	      return vim.onPasteFn;
	    }
	
	    var numberRegex = /[\d]/;
	    var wordCharTest = [CodeMirror.isWordChar, function(ch) {
	      return ch && !CodeMirror.isWordChar(ch) && !/\s/.test(ch);
	    }], bigWordCharTest = [function(ch) {
	      return /\S/.test(ch);
	    }];
	    function makeKeyRange(start, size) {
	      var keys = [];
	      for (var i = start; i < start + size; i++) {
	        keys.push(String.fromCharCode(i));
	      }
	      return keys;
	    }
	    var upperCaseAlphabet = makeKeyRange(65, 26);
	    var lowerCaseAlphabet = makeKeyRange(97, 26);
	    var numbers = makeKeyRange(48, 10);
	    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);
	    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '"', '.', ':', '/']);
	
	    function isLine(cm, line) {
	      return line >= cm.firstLine() && line <= cm.lastLine();
	    }
	    function isLowerCase(k) {
	      return (/^[a-z]$/).test(k);
	    }
	    function isMatchableSymbol(k) {
	      return '()[]{}'.indexOf(k) != -1;
	    }
	    function isNumber(k) {
	      return numberRegex.test(k);
	    }
	    function isUpperCase(k) {
	      return (/^[A-Z]$/).test(k);
	    }
	    function isWhiteSpaceString(k) {
	      return (/^\s*$/).test(k);
	    }
	    function inArray(val, arr) {
	      for (var i = 0; i < arr.length; i++) {
	        if (arr[i] == val) {
	          return true;
	        }
	      }
	      return false;
	    }
	
	    var options = {};
	    function defineOption(name, defaultValue, type, aliases, callback) {
	      if (defaultValue === undefined && !callback) {
	        throw Error('defaultValue is required unless callback is provided');
	      }
	      if (!type) { type = 'string'; }
	      options[name] = {
	        type: type,
	        defaultValue: defaultValue,
	        callback: callback
	      };
	      if (aliases) {
	        for (var i = 0; i < aliases.length; i++) {
	          options[aliases[i]] = options[name];
	        }
	      }
	      if (defaultValue) {
	        setOption(name, defaultValue);
	      }
	    }
	
	    function setOption(name, value, cm, cfg) {
	      var option = options[name];
	      cfg = cfg || {};
	      var scope = cfg.scope;
	      if (!option) {
	        throw Error('Unknown option: ' + name);
	      }
	      if (option.type == 'boolean') {
	        if (value && value !== true) {
	          throw Error('Invalid argument: ' + name + '=' + value);
	        } else if (value !== false) {
	          // Boolean options are set to true if value is not defined.
	          value = true;
	        }
	      }
	      if (option.callback) {
	        if (scope !== 'local') {
	          option.callback(value, undefined);
	        }
	        if (scope !== 'global' && cm) {
	          option.callback(value, cm);
	        }
	      } else {
	        if (scope !== 'local') {
	          option.value = option.type == 'boolean' ? !!value : value;
	        }
	        if (scope !== 'global' && cm) {
	          cm.state.vim.options[name] = {value: value};
	        }
	      }
	    }
	
	    function getOption(name, cm, cfg) {
	      var option = options[name];
	      cfg = cfg || {};
	      var scope = cfg.scope;
	      if (!option) {
	        throw Error('Unknown option: ' + name);
	      }
	      if (option.callback) {
	        var local = cm && option.callback(undefined, cm);
	        if (scope !== 'global' && local !== undefined) {
	          return local;
	        }
	        if (scope !== 'local') {
	          return option.callback();
	        }
	        return;
	      } else {
	        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);
	        return (local || (scope !== 'local') && option || {}).value;
	      }
	    }
	
	    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {
	      // Option is local. Do nothing for global.
	      if (cm === undefined) {
	        return;
	      }
	      // The 'filetype' option proxies to the CodeMirror 'mode' option.
	      if (name === undefined) {
	        var mode = cm.getOption('mode');
	        return mode == 'null' ? '' : mode;
	      } else {
	        var mode = name == '' ? 'null' : name;
	        cm.setOption('mode', mode);
	      }
	    });
	
	    var createCircularJumpList = function() {
	      var size = 100;
	      var pointer = -1;
	      var head = 0;
	      var tail = 0;
	      var buffer = new Array(size);
	      function add(cm, oldCur, newCur) {
	        var current = pointer % size;
	        var curMark = buffer[current];
	        function useNextSlot(cursor) {
	          var next = ++pointer % size;
	          var trashMark = buffer[next];
	          if (trashMark) {
	            trashMark.clear();
	          }
	          buffer[next] = cm.setBookmark(cursor);
	        }
	        if (curMark) {
	          var markPos = curMark.find();
	          // avoid recording redundant cursor position
	          if (markPos && !cursorEqual(markPos, oldCur)) {
	            useNextSlot(oldCur);
	          }
	        } else {
	          useNextSlot(oldCur);
	        }
	        useNextSlot(newCur);
	        head = pointer;
	        tail = pointer - size + 1;
	        if (tail < 0) {
	          tail = 0;
	        }
	      }
	      function move(cm, offset) {
	        pointer += offset;
	        if (pointer > head) {
	          pointer = head;
	        } else if (pointer < tail) {
	          pointer = tail;
	        }
	        var mark = buffer[(size + pointer) % size];
	        // skip marks that are temporarily removed from text buffer
	        if (mark && !mark.find()) {
	          var inc = offset > 0 ? 1 : -1;
	          var newCur;
	          var oldCur = cm.getCursor();
	          do {
	            pointer += inc;
	            mark = buffer[(size + pointer) % size];
	            // skip marks that are the same as current position
	            if (mark &&
	                (newCur = mark.find()) &&
	                !cursorEqual(oldCur, newCur)) {
	              break;
	            }
	          } while (pointer < head && pointer > tail);
	        }
	        return mark;
	      }
	      return {
	        cachedCursor: undefined, //used for # and * jumps
	        add: add,
	        move: move
	      };
	    };
	
	    // Returns an object to track the changes associated insert mode.  It
	    // clones the object that is passed in, or creates an empty object one if
	    // none is provided.
	    var createInsertModeChanges = function(c) {
	      if (c) {
	        // Copy construction
	        return {
	          changes: c.changes,
	          expectCursorActivityForChange: c.expectCursorActivityForChange
	        };
	      }
	      return {
	        // Change list
	        changes: [],
	        // Set to true on change, false on cursorActivity.
	        expectCursorActivityForChange: false
	      };
	    };
	
	    function MacroModeState() {
	      this.latestRegister = undefined;
	      this.isPlaying = false;
	      this.isRecording = false;
	      this.replaySearchQueries = [];
	      this.onRecordingDone = undefined;
	      this.lastInsertModeChanges = createInsertModeChanges();
	    }
	    MacroModeState.prototype = {
	      exitMacroRecordMode: function() {
	        var macroModeState = vimGlobalState.macroModeState;
	        if (macroModeState.onRecordingDone) {
	          macroModeState.onRecordingDone(); // close dialog
	        }
	        macroModeState.onRecordingDone = undefined;
	        macroModeState.isRecording = false;
	      },
	      enterMacroRecordMode: function(cm, registerName) {
	        var register =
	            vimGlobalState.registerController.getRegister(registerName);
	        if (register) {
	          register.clear();
	          this.latestRegister = registerName;
	          if (cm.openDialog) {
	            this.onRecordingDone = cm.openDialog(
	                '(recording)['+registerName+']', null, {bottom:true});
	          }
	          this.isRecording = true;
	        }
	      }
	    };
	
	    function maybeInitVimState(cm) {
	      if (!cm.state.vim) {
	        // Store instance state in the CodeMirror object.
	        cm.state.vim = {
	          inputState: new InputState(),
	          // Vim's input state that triggered the last edit, used to repeat
	          // motions and operators with '.'.
	          lastEditInputState: undefined,
	          // Vim's action command before the last edit, used to repeat actions
	          // with '.' and insert mode repeat.
	          lastEditActionCommand: undefined,
	          // When using jk for navigation, if you move from a longer line to a
	          // shorter line, the cursor may clip to the end of the shorter line.
	          // If j is pressed again and cursor goes to the next line, the
	          // cursor should go back to its horizontal position on the longer
	          // line if it can. This is to keep track of the horizontal position.
	          lastHPos: -1,
	          // Doing the same with screen-position for gj/gk
	          lastHSPos: -1,
	          // The last motion command run. Cleared if a non-motion command gets
	          // executed in between.
	          lastMotion: null,
	          marks: {},
	          // Mark for rendering fake cursor for visual mode.
	          fakeCursor: null,
	          insertMode: false,
	          // Repeat count for changes made in insert mode, triggered by key
	          // sequences like 3,i. Only exists when insertMode is true.
	          insertModeRepeat: undefined,
	          visualMode: false,
	          // If we are in visual line mode. No effect if visualMode is false.
	          visualLine: false,
	          visualBlock: false,
	          lastSelection: null,
	          lastPastedText: null,
	          sel: {},
	          // Buffer-local/window-local values of vim options.
	          options: {}
	        };
	      }
	      return cm.state.vim;
	    }
	    var vimGlobalState;
	    function resetVimGlobalState() {
	      vimGlobalState = {
	        // The current search query.
	        searchQuery: null,
	        // Whether we are searching backwards.
	        searchIsReversed: false,
	        // Replace part of the last substituted pattern
	        lastSubstituteReplacePart: undefined,
	        jumpList: createCircularJumpList(),
	        macroModeState: new MacroModeState,
	        // Recording latest f, t, F or T motion command.
	        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},
	        registerController: new RegisterController({}),
	        // search history buffer
	        searchHistoryController: new HistoryController({}),
	        // ex Command history buffer
	        exCommandHistoryController : new HistoryController({})
	      };
	      for (var optionName in options) {
	        var option = options[optionName];
	        option.value = option.defaultValue;
	      }
	    }
	
	    var lastInsertModeKeyTimer;
	    var vimApi= {
	      buildKeyMap: function() {
	        // TODO: Convert keymap into dictionary format for fast lookup.
	      },
	      // Testing hook, though it might be useful to expose the register
	      // controller anyways.
	      getRegisterController: function() {
	        return vimGlobalState.registerController;
	      },
	      // Testing hook.
	      resetVimGlobalState_: resetVimGlobalState,
	
	      // Testing hook.
	      getVimGlobalState_: function() {
	        return vimGlobalState;
	      },
	
	      // Testing hook.
	      maybeInitVimState_: maybeInitVimState,
	
	      suppressErrorLogging: false,
	
	      InsertModeKey: InsertModeKey,
	      map: function(lhs, rhs, ctx) {
	        // Add user defined key bindings.
	        exCommandDispatcher.map(lhs, rhs, ctx);
	      },
	      unmap: function(lhs, ctx) {
	        exCommandDispatcher.unmap(lhs, ctx);
	      },
	      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace
	      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.
	      setOption: setOption,
	      getOption: getOption,
	      defineOption: defineOption,
	      defineEx: function(name, prefix, func){
	        if (!prefix) {
	          prefix = name;
	        } else if (name.indexOf(prefix) !== 0) {
	          throw new Error('(Vim.defineEx) "'+prefix+'" is not a prefix of "'+name+'", command not registered');
	        }
	        exCommands[name]=func;
	        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};
	      },
	      handleKey: function (cm, key, origin) {
	        var command = this.findKey(cm, key, origin);
	        if (typeof command === 'function') {
	          return command();
	        }
	      },
	      /**
	       * This is the outermost function called by CodeMirror, after keys have
	       * been mapped to their Vim equivalents.
	       *
	       * Finds a command based on the key (and cached keys if there is a
	       * multi-key sequence). Returns `undefined` if no key is matched, a noop
	       * function if a partial match is found (multi-key), and a function to
	       * execute the bound command if a a key is matched. The function always
	       * returns true.
	       */
	      findKey: function(cm, key, origin) {
	        var vim = maybeInitVimState(cm);
	        function handleMacroRecording() {
	          var macroModeState = vimGlobalState.macroModeState;
	          if (macroModeState.isRecording) {
	            if (key == 'q') {
	              macroModeState.exitMacroRecordMode();
	              clearInputState(cm);
	              return true;
	            }
	            if (origin != 'mapping') {
	              logKey(macroModeState, key);
	            }
	          }
	        }
	        function handleEsc() {
	          if (key == '<Esc>') {
	            // Clear input state and get back to normal mode.
	            clearInputState(cm);
	            if (vim.visualMode) {
	              exitVisualMode(cm);
	            } else if (vim.insertMode) {
	              exitInsertMode(cm);
	            }
	            return true;
	          }
	        }
	        function doKeyToKey(keys) {
	          // TODO: prevent infinite recursion.
	          var match;
	          while (keys) {
	            // Pull off one command key, which is either a single character
	            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.
	            match = (/<\w+-.+?>|<\w+>|./).exec(keys);
	            key = match[0];
	            keys = keys.substring(match.index + key.length);
	            CodeMirror.Vim.handleKey(cm, key, 'mapping');
	          }
	        }
	
	        function handleKeyInsertMode() {
	          if (handleEsc()) { return true; }
	          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;
	          var keysAreChars = key.length == 1;
	          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');
	          // Need to check all key substrings in insert mode.
	          while (keys.length > 1 && match.type != 'full') {
	            var keys = vim.inputState.keyBuffer = keys.slice(1);
	            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');
	            if (thisMatch.type != 'none') { match = thisMatch; }
	          }
	          if (match.type == 'none') { clearInputState(cm); return false; }
	          else if (match.type == 'partial') {
	            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }
	            lastInsertModeKeyTimer = window.setTimeout(
	              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },
	              getOption('insertModeEscKeysTimeout'));
	            return !keysAreChars;
	          }
	
	          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }
	          if (keysAreChars) {
	            var here = cm.getCursor();
	            cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');
	          }
	          clearInputState(cm);
	          return match.command;
	        }
	
	        function handleKeyNonInsertMode() {
	          if (handleMacroRecording() || handleEsc()) { return true; };
	
	          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;
	          if (/^[1-9]\d*$/.test(keys)) { return true; }
	
	          var keysMatcher = /^(\d*)(.*)$/.exec(keys);
	          if (!keysMatcher) { clearInputState(cm); return false; }
	          var context = vim.visualMode ? 'visual' :
	                                         'normal';
	          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);
	          if (match.type == 'none') { clearInputState(cm); return false; }
	          else if (match.type == 'partial') { return true; }
	
	          vim.inputState.keyBuffer = '';
	          var keysMatcher = /^(\d*)(.*)$/.exec(keys);
	          if (keysMatcher[1] && keysMatcher[1] != '0') {
	            vim.inputState.pushRepeatDigit(keysMatcher[1]);
	          }
	          return match.command;
	        }
	
	        var command;
	        if (vim.insertMode) { command = handleKeyInsertMode(); }
	        else { command = handleKeyNonInsertMode(); }
	        if (command === false) {
	          return undefined;
	        } else if (command === true) {
	          // TODO: Look into using CodeMirror's multi-key handling.
	          // Return no-op since we are caching the key. Counts as handled, but
	          // don't want act on it just yet.
	          return function() {};
	        } else {
	          return function() {
	            return cm.operation(function() {
	              cm.curOp.isVimOp = true;
	              try {
	                if (command.type == 'keyToKey') {
	                  doKeyToKey(command.toKeys);
	                } else {
	                  commandDispatcher.processCommand(cm, vim, command);
	                }
	              } catch (e) {
	                // clear VIM state in case it's in a bad state.
	                cm.state.vim = undefined;
	                maybeInitVimState(cm);
	                if (!CodeMirror.Vim.suppressErrorLogging) {
	                  console['log'](e);
	                }
	                throw e;
	              }
	              return true;
	            });
	          };
	        }
	      },
	      handleEx: function(cm, input) {
	        exCommandDispatcher.processCommand(cm, input);
	      },
	
	      defineMotion: defineMotion,
	      defineAction: defineAction,
	      defineOperator: defineOperator,
	      mapCommand: mapCommand,
	      _mapCommand: _mapCommand,
	
	      defineRegister: defineRegister,
	
	      exitVisualMode: exitVisualMode,
	      exitInsertMode: exitInsertMode
	    };
	
	    // Represents the current input state.
	    function InputState() {
	      this.prefixRepeat = [];
	      this.motionRepeat = [];
	
	      this.operator = null;
	      this.operatorArgs = null;
	      this.motion = null;
	      this.motionArgs = null;
	      this.keyBuffer = []; // For matching multi-key commands.
	      this.registerName = null; // Defaults to the unnamed register.
	    }
	    InputState.prototype.pushRepeatDigit = function(n) {
	      if (!this.operator) {
	        this.prefixRepeat = this.prefixRepeat.concat(n);
	      } else {
	        this.motionRepeat = this.motionRepeat.concat(n);
	      }
	    };
	    InputState.prototype.getRepeat = function() {
	      var repeat = 0;
	      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {
	        repeat = 1;
	        if (this.prefixRepeat.length > 0) {
	          repeat *= parseInt(this.prefixRepeat.join(''), 10);
	        }
	        if (this.motionRepeat.length > 0) {
	          repeat *= parseInt(this.motionRepeat.join(''), 10);
	        }
	      }
	      return repeat;
	    };
	
	    function clearInputState(cm, reason) {
	      cm.state.vim.inputState = new InputState();
	      CodeMirror.signal(cm, 'vim-command-done', reason);
	    }
	
	    /*
	     * Register stores information about copy and paste registers.  Besides
	     * text, a register must store whether it is linewise (i.e., when it is
	     * pasted, should it insert itself into a new line, or should the text be
	     * inserted at the cursor position.)
	     */
	    function Register(text, linewise, blockwise) {
	      this.clear();
	      this.keyBuffer = [text || ''];
	      this.insertModeChanges = [];
	      this.searchQueries = [];
	      this.linewise = !!linewise;
	      this.blockwise = !!blockwise;
	    }
	    Register.prototype = {
	      setText: function(text, linewise, blockwise) {
	        this.keyBuffer = [text || ''];
	        this.linewise = !!linewise;
	        this.blockwise = !!blockwise;
	      },
	      pushText: function(text, linewise) {
	        // if this register has ever been set to linewise, use linewise.
	        if (linewise) {
	          if (!this.linewise) {
	            this.keyBuffer.push('\n');
	          }
	          this.linewise = true;
	        }
	        this.keyBuffer.push(text);
	      },
	      pushInsertModeChanges: function(changes) {
	        this.insertModeChanges.push(createInsertModeChanges(changes));
	      },
	      pushSearchQuery: function(query) {
	        this.searchQueries.push(query);
	      },
	      clear: function() {
	        this.keyBuffer = [];
	        this.insertModeChanges = [];
	        this.searchQueries = [];
	        this.linewise = false;
	      },
	      toString: function() {
	        return this.keyBuffer.join('');
	      }
	    };
	
	    /**
	     * Defines an external register.
	     *
	     * The name should be a single character that will be used to reference the register.
	     * The register should support setText, pushText, clear, and toString(). See Register
	     * for a reference implementation.
	     */
	    function defineRegister(name, register) {
	      var registers = vimGlobalState.registerController.registers[name];
	      if (!name || name.length != 1) {
	        throw Error('Register name must be 1 character');
	      }
	      if (registers[name]) {
	        throw Error('Register already defined ' + name);
	      }
	      registers[name] = register;
	      validRegisters.push(name);
	    }
	
	    /*
	     * vim registers allow you to keep many independent copy and paste buffers.
	     * See http://usevim.com/2012/04/13/registers/ for an introduction.
	     *
	     * RegisterController keeps the state of all the registers.  An initial
	     * state may be passed in.  The unnamed register '"' will always be
	     * overridden.
	     */
	    function RegisterController(registers) {
	      this.registers = registers;
	      this.unnamedRegister = registers['"'] = new Register();
	      registers['.'] = new Register();
	      registers[':'] = new Register();
	      registers['/'] = new Register();
	    }
	    RegisterController.prototype = {
	      pushText: function(registerName, operator, text, linewise, blockwise) {
	        if (linewise && text.charAt(0) == '\n') {
	          text = text.slice(1) + '\n';
	        }
	        if (linewise && text.charAt(text.length - 1) !== '\n'){
	          text += '\n';
	        }
	        // Lowercase and uppercase registers refer to the same register.
	        // Uppercase just means append.
	        var register = this.isValidRegister(registerName) ?
	            this.getRegister(registerName) : null;
	        // if no register/an invalid register was specified, things go to the
	        // default registers
	        if (!register) {
	          switch (operator) {
	            case 'yank':
	              // The 0 register contains the text from the most recent yank.
	              this.registers['0'] = new Register(text, linewise, blockwise);
	              break;
	            case 'delete':
	            case 'change':
	              if (text.indexOf('\n') == -1) {
	                // Delete less than 1 line. Update the small delete register.
	                this.registers['-'] = new Register(text, linewise);
	              } else {
	                // Shift down the contents of the numbered registers and put the
	                // deleted text into register 1.
	                this.shiftNumericRegisters_();
	                this.registers['1'] = new Register(text, linewise);
	              }
	              break;
	          }
	          // Make sure the unnamed register is set to what just happened
	          this.unnamedRegister.setText(text, linewise, blockwise);
	          return;
	        }
	
	        // If we've gotten to this point, we've actually specified a register
	        var append = isUpperCase(registerName);
	        if (append) {
	          register.pushText(text, linewise);
	        } else {
	          register.setText(text, linewise, blockwise);
	        }
	        // The unnamed register always has the same value as the last used
	        // register.
	        this.unnamedRegister.setText(register.toString(), linewise);
	      },
	      // Gets the register named @name.  If one of @name doesn't already exist,
	      // create it.  If @name is invalid, return the unnamedRegister.
	      getRegister: function(name) {
	        if (!this.isValidRegister(name)) {
	          return this.unnamedRegister;
	        }
	        name = name.toLowerCase();
	        if (!this.registers[name]) {
	          this.registers[name] = new Register();
	        }
	        return this.registers[name];
	      },
	      isValidRegister: function(name) {
	        return name && inArray(name, validRegisters);
	      },
	      shiftNumericRegisters_: function() {
	        for (var i = 9; i >= 2; i--) {
	          this.registers[i] = this.getRegister('' + (i - 1));
	        }
	      }
	    };
	    function HistoryController() {
	        this.historyBuffer = [];
	        this.iterator = 0;
	        this.initialPrefix = null;
	    }
	    HistoryController.prototype = {
	      // the input argument here acts a user entered prefix for a small time
	      // until we start autocompletion in which case it is the autocompleted.
	      nextMatch: function (input, up) {
	        var historyBuffer = this.historyBuffer;
	        var dir = up ? -1 : 1;
	        if (this.initialPrefix === null) this.initialPrefix = input;
	        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {
	          var element = historyBuffer[i];
	          for (var j = 0; j <= element.length; j++) {
	            if (this.initialPrefix == element.substring(0, j)) {
	              this.iterator = i;
	              return element;
	            }
	          }
	        }
	        // should return the user input in case we reach the end of buffer.
	        if (i >= historyBuffer.length) {
	          this.iterator = historyBuffer.length;
	          return this.initialPrefix;
	        }
	        // return the last autocompleted query or exCommand as it is.
	        if (i < 0 ) return input;
	      },
	      pushInput: function(input) {
	        var index = this.historyBuffer.indexOf(input);
	        if (index > -1) this.historyBuffer.splice(index, 1);
	        if (input.length) this.historyBuffer.push(input);
	      },
	      reset: function() {
	        this.initialPrefix = null;
	        this.iterator = this.historyBuffer.length;
	      }
	    };
	    var commandDispatcher = {
	      matchCommand: function(keys, keyMap, inputState, context) {
	        var matches = commandMatches(keys, keyMap, context, inputState);
	        if (!matches.full && !matches.partial) {
	          return {type: 'none'};
	        } else if (!matches.full && matches.partial) {
	          return {type: 'partial'};
	        }
	
	        var bestMatch;
	        for (var i = 0; i < matches.full.length; i++) {
	          var match = matches.full[i];
	          if (!bestMatch) {
	            bestMatch = match;
	          }
	        }
	        if (bestMatch.keys.slice(-11) == '<character>') {
	          inputState.selectedCharacter = lastChar(keys);
	        }
	        return {type: 'full', command: bestMatch};
	      },
	      processCommand: function(cm, vim, command) {
	        vim.inputState.repeatOverride = command.repeatOverride;
	        switch (command.type) {
	          case 'motion':
	            this.processMotion(cm, vim, command);
	            break;
	          case 'operator':
	            this.processOperator(cm, vim, command);
	            break;
	          case 'operatorMotion':
	            this.processOperatorMotion(cm, vim, command);
	            break;
	          case 'action':
	            this.processAction(cm, vim, command);
	            break;
	          case 'search':
	            this.processSearch(cm, vim, command);
	            break;
	          case 'ex':
	          case 'keyToEx':
	            this.processEx(cm, vim, command);
	            break;
	          default:
	            break;
	        }
	      },
	      processMotion: function(cm, vim, command) {
	        vim.inputState.motion = command.motion;
	        vim.inputState.motionArgs = copyArgs(command.motionArgs);
	        this.evalInput(cm, vim);
	      },
	      processOperator: function(cm, vim, command) {
	        var inputState = vim.inputState;
	        if (inputState.operator) {
	          if (inputState.operator == command.operator) {
	            // Typing an operator twice like 'dd' makes the operator operate
	            // linewise
	            inputState.motion = 'expandToLine';
	            inputState.motionArgs = { linewise: true };
	            this.evalInput(cm, vim);
	            return;
	          } else {
	            // 2 different operators in a row doesn't make sense.
	            clearInputState(cm);
	          }
	        }
	        inputState.operator = command.operator;
	        inputState.operatorArgs = copyArgs(command.operatorArgs);
	        if (vim.visualMode) {
	          // Operating on a selection in visual mode. We don't need a motion.
	          this.evalInput(cm, vim);
	        }
	      },
	      processOperatorMotion: function(cm, vim, command) {
	        var visualMode = vim.visualMode;
	        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);
	        if (operatorMotionArgs) {
	          // Operator motions may have special behavior in visual mode.
	          if (visualMode && operatorMotionArgs.visualLine) {
	            vim.visualLine = true;
	          }
	        }
	        this.processOperator(cm, vim, command);
	        if (!visualMode) {
	          this.processMotion(cm, vim, command);
	        }
	      },
	      processAction: function(cm, vim, command) {
	        var inputState = vim.inputState;
	        var repeat = inputState.getRepeat();
	        var repeatIsExplicit = !!repeat;
	        var actionArgs = copyArgs(command.actionArgs) || {};
	        if (inputState.selectedCharacter) {
	          actionArgs.selectedCharacter = inputState.selectedCharacter;
	        }
	        // Actions may or may not have motions and operators. Do these first.
	        if (command.operator) {
	          this.processOperator(cm, vim, command);
	        }
	        if (command.motion) {
	          this.processMotion(cm, vim, command);
	        }
	        if (command.motion || command.operator) {
	          this.evalInput(cm, vim);
	        }
	        actionArgs.repeat = repeat || 1;
	        actionArgs.repeatIsExplicit = repeatIsExplicit;
	        actionArgs.registerName = inputState.registerName;
	        clearInputState(cm);
	        vim.lastMotion = null;
	        if (command.isEdit) {
	          this.recordLastEdit(vim, inputState, command);
	        }
	        actions[command.action](cm, actionArgs, vim);
	      },
	      processSearch: function(cm, vim, command) {
	        if (!cm.getSearchCursor) {
	          // Search depends on SearchCursor.
	          return;
	        }
	        var forward = command.searchArgs.forward;
	        var wholeWordOnly = command.searchArgs.wholeWordOnly;
	        getSearchState(cm).setReversed(!forward);
	        var promptPrefix = (forward) ? '/' : '?';
	        var originalQuery = getSearchState(cm).getQuery();
	        var originalScrollPos = cm.getScrollInfo();
	        function handleQuery(query, ignoreCase, smartCase) {
	          vimGlobalState.searchHistoryController.pushInput(query);
	          vimGlobalState.searchHistoryController.reset();
	          try {
	            updateSearchQuery(cm, query, ignoreCase, smartCase);
	          } catch (e) {
	            showConfirm(cm, 'Invalid regex: ' + query);
	            clearInputState(cm);
	            return;
	          }
	          commandDispatcher.processMotion(cm, vim, {
	            type: 'motion',
	            motion: 'findNext',
	            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }
	          });
	        }
	        function onPromptClose(query) {
	          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);
	          handleQuery(query, true /** ignoreCase */, true /** smartCase */);
	          var macroModeState = vimGlobalState.macroModeState;
	          if (macroModeState.isRecording) {
	            logSearchQuery(macroModeState, query);
	          }
	        }
	        function onPromptKeyUp(e, query, close) {
	          var keyName = CodeMirror.keyName(e), up;
	          if (keyName == 'Up' || keyName == 'Down') {
	            up = keyName == 'Up' ? true : false;
	            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';
	            close(query);
	          } else {
	            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')
	              vimGlobalState.searchHistoryController.reset();
	          }
	          var parsedQuery;
	          try {
	            parsedQuery = updateSearchQuery(cm, query,
	                true /** ignoreCase */, true /** smartCase */);
	          } catch (e) {
	            // Swallow bad regexes for incremental search.
	          }
	          if (parsedQuery) {
	            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);
	          } else {
	            clearSearchHighlight(cm);
	            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);
	          }
	        }
	        function onPromptKeyDown(e, query, close) {
	          var keyName = CodeMirror.keyName(e);
	          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||
	              (keyName == 'Backspace' && query == '')) {
	            vimGlobalState.searchHistoryController.pushInput(query);
	            vimGlobalState.searchHistoryController.reset();
	            updateSearchQuery(cm, originalQuery);
	            clearSearchHighlight(cm);
	            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);
	            CodeMirror.e_stop(e);
	            clearInputState(cm);
	            close();
	            cm.focus();
	          } else if (keyName == 'Ctrl-U') {
	            // Ctrl-U clears input.
	            CodeMirror.e_stop(e);
	            close('');
	          }
	        }
	        switch (command.searchArgs.querySrc) {
	          case 'prompt':
	            var macroModeState = vimGlobalState.macroModeState;
	            if (macroModeState.isPlaying) {
	              var query = macroModeState.replaySearchQueries.shift();
	              handleQuery(query, true /** ignoreCase */, false /** smartCase */);
	            } else {
	              showPrompt(cm, {
	                  onClose: onPromptClose,
	                  prefix: promptPrefix,
	                  desc: searchPromptDesc,
	                  onKeyUp: onPromptKeyUp,
	                  onKeyDown: onPromptKeyDown
	              });
	            }
	            break;
	          case 'wordUnderCursor':
	            var word = expandWordUnderCursor(cm, false /** inclusive */,
	                true /** forward */, false /** bigWord */,
	                true /** noSymbol */);
	            var isKeyword = true;
	            if (!word) {
	              word = expandWordUnderCursor(cm, false /** inclusive */,
	                  true /** forward */, false /** bigWord */,
	                  false /** noSymbol */);
	              isKeyword = false;
	            }
	            if (!word) {
	              return;
	            }
	            var query = cm.getLine(word.start.line).substring(word.start.ch,
	                word.end.ch);
	            if (isKeyword && wholeWordOnly) {
	                query = '\\b' + query + '\\b';
	            } else {
	              query = escapeRegex(query);
	            }
	
	            // cachedCursor is used to save the old position of the cursor
	            // when * or # causes vim to seek for the nearest word and shift
	            // the cursor before entering the motion.
	            vimGlobalState.jumpList.cachedCursor = cm.getCursor();
	            cm.setCursor(word.start);
	
	            handleQuery(query, true /** ignoreCase */, false /** smartCase */);
	            break;
	        }
	      },
	      processEx: function(cm, vim, command) {
	        function onPromptClose(input) {
	          // Give the prompt some time to close so that if processCommand shows
	          // an error, the elements don't overlap.
	          vimGlobalState.exCommandHistoryController.pushInput(input);
	          vimGlobalState.exCommandHistoryController.reset();
	          exCommandDispatcher.processCommand(cm, input);
	        }
	        function onPromptKeyDown(e, input, close) {
	          var keyName = CodeMirror.keyName(e), up;
	          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||
	              (keyName == 'Backspace' && input == '')) {
	            vimGlobalState.exCommandHistoryController.pushInput(input);
	            vimGlobalState.exCommandHistoryController.reset();
	            CodeMirror.e_stop(e);
	            clearInputState(cm);
	            close();
	            cm.focus();
	          }
	          if (keyName == 'Up' || keyName == 'Down') {
	            up = keyName == 'Up' ? true : false;
	            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';
	            close(input);
	          } else if (keyName == 'Ctrl-U') {
	            // Ctrl-U clears input.
	            CodeMirror.e_stop(e);
	            close('');
	          } else {
	            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')
	              vimGlobalState.exCommandHistoryController.reset();
	          }
	        }
	        if (command.type == 'keyToEx') {
	          // Handle user defined Ex to Ex mappings
	          exCommandDispatcher.processCommand(cm, command.exArgs.input);
	        } else {
	          if (vim.visualMode) {
	            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\'<,\'>',
	                onKeyDown: onPromptKeyDown});
	          } else {
	            showPrompt(cm, { onClose: onPromptClose, prefix: ':',
	                onKeyDown: onPromptKeyDown});
	          }
	        }
	      },
	      evalInput: function(cm, vim) {
	        // If the motion command is set, execute both the operator and motion.
	        // Otherwise return.
	        var inputState = vim.inputState;
	        var motion = inputState.motion;
	        var motionArgs = inputState.motionArgs || {};
	        var operator = inputState.operator;
	        var operatorArgs = inputState.operatorArgs || {};
	        var registerName = inputState.registerName;
	        var sel = vim.sel;
	        // TODO: Make sure cm and vim selections are identical outside visual mode.
	        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));
	        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));
	        var oldHead = copyCursor(origHead);
	        var oldAnchor = copyCursor(origAnchor);
	        var newHead, newAnchor;
	        var repeat;
	        if (operator) {
	          this.recordLastEdit(vim, inputState);
	        }
	        if (inputState.repeatOverride !== undefined) {
	          // If repeatOverride is specified, that takes precedence over the
	          // input state's repeat. Used by Ex mode and can be user defined.
	          repeat = inputState.repeatOverride;
	        } else {
	          repeat = inputState.getRepeat();
	        }
	        if (repeat > 0 && motionArgs.explicitRepeat) {
	          motionArgs.repeatIsExplicit = true;
	        } else if (motionArgs.noRepeat ||
	            (!motionArgs.explicitRepeat && repeat === 0)) {
	          repeat = 1;
	          motionArgs.repeatIsExplicit = false;
	        }
	        if (inputState.selectedCharacter) {
	          // If there is a character input, stick it in all of the arg arrays.
	          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =
	              inputState.selectedCharacter;
	        }
	        motionArgs.repeat = repeat;
	        clearInputState(cm);
	        if (motion) {
	          var motionResult = motions[motion](cm, origHead, motionArgs, vim);
	          vim.lastMotion = motions[motion];
	          if (!motionResult) {
	            return;
	          }
	          if (motionArgs.toJumplist) {
	            var jumpList = vimGlobalState.jumpList;
	            // if the current motion is # or *, use cachedCursor
	            var cachedCursor = jumpList.cachedCursor;
	            if (cachedCursor) {
	              recordJumpPosition(cm, cachedCursor, motionResult);
	              delete jumpList.cachedCursor;
	            } else {
	              recordJumpPosition(cm, origHead, motionResult);
	            }
	          }
	          if (motionResult instanceof Array) {
	            newAnchor = motionResult[0];
	            newHead = motionResult[1];
	          } else {
	            newHead = motionResult;
	          }
	          // TODO: Handle null returns from motion commands better.
	          if (!newHead) {
	            newHead = copyCursor(origHead);
	          }
	          if (vim.visualMode) {
	            if (!(vim.visualBlock && newHead.ch === Infinity)) {
	              newHead = clipCursorToContent(cm, newHead, vim.visualBlock);
	            }
	            if (newAnchor) {
	              newAnchor = clipCursorToContent(cm, newAnchor, true);
	            }
	            newAnchor = newAnchor || oldAnchor;
	            sel.anchor = newAnchor;
	            sel.head = newHead;
	            updateCmSelection(cm);
	            updateMark(cm, vim, '<',
	                cursorIsBefore(newAnchor, newHead) ? newAnchor
	                    : newHead);
	            updateMark(cm, vim, '>',
	                cursorIsBefore(newAnchor, newHead) ? newHead
	                    : newAnchor);
	          } else if (!operator) {
	            newHead = clipCursorToContent(cm, newHead);
	            cm.setCursor(newHead.line, newHead.ch);
	          }
	        }
	        if (operator) {
	          if (operatorArgs.lastSel) {
	            // Replaying a visual mode operation
	            newAnchor = oldAnchor;
	            var lastSel = operatorArgs.lastSel;
	            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);
	            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);
	            if (lastSel.visualLine) {
	              // Linewise Visual mode: The same number of lines.
	              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);
	            } else if (lastSel.visualBlock) {
	              // Blockwise Visual mode: The same number of lines and columns.
	              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);
	            } else if (lastSel.head.line == lastSel.anchor.line) {
	              // Normal Visual mode within one line: The same number of characters.
	              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);
	            } else {
	              // Normal Visual mode with several lines: The same number of lines, in the
	              // last line the same number of characters as in the last line the last time.
	              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);
	            }
	            vim.visualMode = true;
	            vim.visualLine = lastSel.visualLine;
	            vim.visualBlock = lastSel.visualBlock;
	            sel = vim.sel = {
	              anchor: newAnchor,
	              head: newHead
	            };
	            updateCmSelection(cm);
	          } else if (vim.visualMode) {
	            operatorArgs.lastSel = {
	              anchor: copyCursor(sel.anchor),
	              head: copyCursor(sel.head),
	              visualBlock: vim.visualBlock,
	              visualLine: vim.visualLine
	            };
	          }
	          var curStart, curEnd, linewise, mode;
	          var cmSel;
	          if (vim.visualMode) {
	            // Init visual op
	            curStart = cursorMin(sel.head, sel.anchor);
	            curEnd = cursorMax(sel.head, sel.anchor);
	            linewise = vim.visualLine || operatorArgs.linewise;
	            mode = vim.visualBlock ? 'block' :
	                   linewise ? 'line' :
	                   'char';
	            cmSel = makeCmSelection(cm, {
	              anchor: curStart,
	              head: curEnd
	            }, mode);
	            if (linewise) {
	              var ranges = cmSel.ranges;
	              if (mode == 'block') {
	                // Linewise operators in visual block mode extend to end of line
	                for (var i = 0; i < ranges.length; i++) {
	                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);
	                }
	              } else if (mode == 'line') {
	                ranges[0].head = Pos(ranges[0].head.line + 1, 0);
	              }
	            }
	          } else {
	            // Init motion op
	            curStart = copyCursor(newAnchor || oldAnchor);
	            curEnd = copyCursor(newHead || oldHead);
	            if (cursorIsBefore(curEnd, curStart)) {
	              var tmp = curStart;
	              curStart = curEnd;
	              curEnd = tmp;
	            }
	            linewise = motionArgs.linewise || operatorArgs.linewise;
	            if (linewise) {
	              // Expand selection to entire line.
	              expandSelectionToLine(cm, curStart, curEnd);
	            } else if (motionArgs.forward) {
	              // Clip to trailing newlines only if the motion goes forward.
	              clipToLine(cm, curStart, curEnd);
	            }
	            mode = 'char';
	            var exclusive = !motionArgs.inclusive || linewise;
	            cmSel = makeCmSelection(cm, {
	              anchor: curStart,
	              head: curEnd
	            }, mode, exclusive);
	          }
	          cm.setSelections(cmSel.ranges, cmSel.primary);
	          vim.lastMotion = null;
	          operatorArgs.repeat = repeat; // For indent in visual mode.
	          operatorArgs.registerName = registerName;
	          // Keep track of linewise as it affects how paste and change behave.
	          operatorArgs.linewise = linewise;
	          var operatorMoveTo = operators[operator](
	            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);
	          if (vim.visualMode) {
	            exitVisualMode(cm, operatorMoveTo != null);
	          }
	          if (operatorMoveTo) {
	            cm.setCursor(operatorMoveTo);
	          }
	        }
	      },
	      recordLastEdit: function(vim, inputState, actionCommand) {
	        var macroModeState = vimGlobalState.macroModeState;
	        if (macroModeState.isPlaying) { return; }
	        vim.lastEditInputState = inputState;
	        vim.lastEditActionCommand = actionCommand;
	        macroModeState.lastInsertModeChanges.changes = [];
	        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;
	      }
	    };
	
	    /**
	     * typedef {Object{line:number,ch:number}} Cursor An object containing the
	     *     position of the cursor.
	     */
	    // All of the functions below return Cursor objects.
	    var motions = {
	      moveToTopLine: function(cm, _head, motionArgs) {
	        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;
	        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));
	      },
	      moveToMiddleLine: function(cm) {
	        var range = getUserVisibleLines(cm);
	        var line = Math.floor((range.top + range.bottom) * 0.5);
	        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));
	      },
	      moveToBottomLine: function(cm, _head, motionArgs) {
	        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;
	        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));
	      },
	      expandToLine: function(_cm, head, motionArgs) {
	        // Expands forward to end of line, and then to next line if repeat is
	        // >1. Does not handle backward motion!
	        var cur = head;
	        return Pos(cur.line + motionArgs.repeat - 1, Infinity);
	      },
	      findNext: function(cm, _head, motionArgs) {
	        var state = getSearchState(cm);
	        var query = state.getQuery();
	        if (!query) {
	          return;
	        }
	        var prev = !motionArgs.forward;
	        // If search is initiated with ? instead of /, negate direction.
	        prev = (state.isReversed()) ? !prev : prev;
	        highlightSearchMatches(cm, query);
	        return findNext(cm, prev/** prev */, query, motionArgs.repeat);
	      },
	      goToMark: function(cm, _head, motionArgs, vim) {
	        var mark = vim.marks[motionArgs.selectedCharacter];
	        if (mark) {
	          var pos = mark.find();
	          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;
	        }
	        return null;
	      },
	      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {
	        if (vim.visualBlock && motionArgs.sameLine) {
	          var sel = vim.sel;
	          return [
	            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),
	            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))
	          ];
	        } else {
	          return ([vim.sel.head, vim.sel.anchor]);
	        }
	      },
	      jumpToMark: function(cm, head, motionArgs, vim) {
	        var best = head;
	        for (var i = 0; i < motionArgs.repeat; i++) {
	          var cursor = best;
	          for (var key in vim.marks) {
	            if (!isLowerCase(key)) {
	              continue;
	            }
	            var mark = vim.marks[key].find();
	            var isWrongDirection = (motionArgs.forward) ?
	              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);
	
	            if (isWrongDirection) {
	              continue;
	            }
	            if (motionArgs.linewise && (mark.line == cursor.line)) {
	              continue;
	            }
	
	            var equal = cursorEqual(cursor, best);
	            var between = (motionArgs.forward) ?
	              cursorIsBetween(cursor, mark, best) :
	              cursorIsBetween(best, mark, cursor);
	
	            if (equal || between) {
	              best = mark;
	            }
	          }
	        }
	
	        if (motionArgs.linewise) {
	          // Vim places the cursor on the first non-whitespace character of
	          // the line if there is one, else it places the cursor at the end
	          // of the line, regardless of whether a mark was found.
	          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));
	        }
	        return best;
	      },
	      moveByCharacters: function(_cm, head, motionArgs) {
	        var cur = head;
	        var repeat = motionArgs.repeat;
	        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;
	        return Pos(cur.line, ch);
	      },
	      moveByLines: function(cm, head, motionArgs, vim) {
	        var cur = head;
	        var endCh = cur.ch;
	        // Depending what our last motion was, we may want to do different
	        // things. If our last motion was moving vertically, we want to
	        // preserve the HPos from our last horizontal move.  If our last motion
	        // was going to the end of a line, moving vertically we should go to
	        // the end of the line, etc.
	        switch (vim.lastMotion) {
	          case this.moveByLines:
	          case this.moveByDisplayLines:
	          case this.moveByScroll:
	          case this.moveToColumn:
	          case this.moveToEol:
	            endCh = vim.lastHPos;
	            break;
	          default:
	            vim.lastHPos = endCh;
	        }
	        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);
	        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;
	        var first = cm.firstLine();
	        var last = cm.lastLine();
	        // Vim go to line begin or line end when cursor at first/last line and
	        // move to previous/next line is triggered.
	        if (line < first && cur.line == first){
	          return this.moveToStartOfLine(cm, head, motionArgs, vim);
	        }else if (line > last && cur.line == last){
	            return this.moveToEol(cm, head, motionArgs, vim);
	        }
	        if (motionArgs.toFirstChar){
	          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));
	          vim.lastHPos = endCh;
	        }
	        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;
	        return Pos(line, endCh);
	      },
	      moveByDisplayLines: function(cm, head, motionArgs, vim) {
	        var cur = head;
	        switch (vim.lastMotion) {
	          case this.moveByDisplayLines:
	          case this.moveByScroll:
	          case this.moveByLines:
	          case this.moveToColumn:
	          case this.moveToEol:
	            break;
	          default:
	            vim.lastHSPos = cm.charCoords(cur,'div').left;
	        }
	        var repeat = motionArgs.repeat;
	        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);
	        if (res.hitSide) {
	          if (motionArgs.forward) {
	            var lastCharCoords = cm.charCoords(res, 'div');
	            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };
	            var res = cm.coordsChar(goalCoords, 'div');
	          } else {
	            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');
	            resCoords.left = vim.lastHSPos;
	            res = cm.coordsChar(resCoords, 'div');
	          }
	        }
	        vim.lastHPos = res.ch;
	        return res;
	      },
	      moveByPage: function(cm, head, motionArgs) {
	        // CodeMirror only exposes functions that move the cursor page down, so
	        // doing this bad hack to move the cursor and move it back. evalInput
	        // will move the cursor to where it should be in the end.
	        var curStart = head;
	        var repeat = motionArgs.repeat;
	        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');
	      },
	      moveByParagraph: function(cm, head, motionArgs) {
	        var dir = motionArgs.forward ? 1 : -1;
	        return findParagraph(cm, head, motionArgs.repeat, dir);
	      },
	      moveByScroll: function(cm, head, motionArgs, vim) {
	        var scrollbox = cm.getScrollInfo();
	        var curEnd = null;
	        var repeat = motionArgs.repeat;
	        if (!repeat) {
	          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());
	        }
	        var orig = cm.charCoords(head, 'local');
	        motionArgs.repeat = repeat;
	        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);
	        if (!curEnd) {
	          return null;
	        }
	        var dest = cm.charCoords(curEnd, 'local');
	        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);
	        return curEnd;
	      },
	      moveByWords: function(cm, head, motionArgs) {
	        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,
	            !!motionArgs.wordEnd, !!motionArgs.bigWord);
	      },
	      moveTillCharacter: function(cm, _head, motionArgs) {
	        var repeat = motionArgs.repeat;
	        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,
	            motionArgs.selectedCharacter);
	        var increment = motionArgs.forward ? -1 : 1;
	        recordLastCharacterSearch(increment, motionArgs);
	        if (!curEnd) return null;
	        curEnd.ch += increment;
	        return curEnd;
	      },
	      moveToCharacter: function(cm, head, motionArgs) {
	        var repeat = motionArgs.repeat;
	        recordLastCharacterSearch(0, motionArgs);
	        return moveToCharacter(cm, repeat, motionArgs.forward,
	            motionArgs.selectedCharacter) || head;
	      },
	      moveToSymbol: function(cm, head, motionArgs) {
	        var repeat = motionArgs.repeat;
	        return findSymbol(cm, repeat, motionArgs.forward,
	            motionArgs.selectedCharacter) || head;
	      },
	      moveToColumn: function(cm, head, motionArgs, vim) {
	        var repeat = motionArgs.repeat;
	        // repeat is equivalent to which column we want to move to!
	        vim.lastHPos = repeat - 1;
	        vim.lastHSPos = cm.charCoords(head,'div').left;
	        return moveToColumn(cm, repeat);
	      },
	      moveToEol: function(cm, head, motionArgs, vim) {
	        var cur = head;
	        vim.lastHPos = Infinity;
	        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);
	        var end=cm.clipPos(retval);
	        end.ch--;
	        vim.lastHSPos = cm.charCoords(end,'div').left;
	        return retval;
	      },
	      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {
	        // Go to the start of the line where the text begins, or the end for
	        // whitespace-only lines
	        var cursor = head;
	        return Pos(cursor.line,
	                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));
	      },
	      moveToMatchedSymbol: function(cm, head) {
	        var cursor = head;
	        var line = cursor.line;
	        var ch = cursor.ch;
	        var lineText = cm.getLine(line);
	        var symbol;
	        do {
	          symbol = lineText.charAt(ch++);
	          if (symbol && isMatchableSymbol(symbol)) {
	            var style = cm.getTokenTypeAt(Pos(line, ch));
	            if (style !== "string" && style !== "comment") {
	              break;
	            }
	          }
	        } while (symbol);
	        if (symbol) {
	          var matched = cm.findMatchingBracket(Pos(line, ch));
	          return matched.to;
	        } else {
	          return cursor;
	        }
	      },
	      moveToStartOfLine: function(_cm, head) {
	        return Pos(head.line, 0);
	      },
	      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {
	        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();
	        if (motionArgs.repeatIsExplicit) {
	          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');
	        }
	        return Pos(lineNum,
	                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));
	      },
	      textObjectManipulation: function(cm, head, motionArgs, vim) {
	        // TODO: lots of possible exceptions that can be thrown here. Try da(
	        //     outside of a () block.
	
	        // TODO: adding <> >< to this map doesn't work, presumably because
	        // they're operators
	        var mirroredPairs = {'(': ')', ')': '(',
	                             '{': '}', '}': '{',
	                             '[': ']', ']': '['};
	        var selfPaired = {'\'': true, '"': true};
	
	        var character = motionArgs.selectedCharacter;
	        // 'b' refers to  '()' block.
	        // 'B' refers to  '{}' block.
	        if (character == 'b') {
	          character = '(';
	        } else if (character == 'B') {
	          character = '{';
	        }
	
	        // Inclusive is the difference between a and i
	        // TODO: Instead of using the additional text object map to perform text
	        //     object operations, merge the map into the defaultKeyMap and use
	        //     motionArgs to define behavior. Define separate entries for 'aw',
	        //     'iw', 'a[', 'i[', etc.
	        var inclusive = !motionArgs.textObjectInner;
	
	        var tmp;
	        if (mirroredPairs[character]) {
	          tmp = selectCompanionObject(cm, head, character, inclusive);
	        } else if (selfPaired[character]) {
	          tmp = findBeginningAndEnd(cm, head, character, inclusive);
	        } else if (character === 'W') {
	          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,
	                                                     true /** bigWord */);
	        } else if (character === 'w') {
	          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,
	                                                     false /** bigWord */);
	        } else if (character === 'p') {
	          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);
	          motionArgs.linewise = true;
	          if (vim.visualMode) {
	            if (!vim.visualLine) { vim.visualLine = true; }
	          } else {
	            var operatorArgs = vim.inputState.operatorArgs;
	            if (operatorArgs) { operatorArgs.linewise = true; }
	            tmp.end.line--;
	          }
	        } else {
	          // No text object defined for this, don't move.
	          return null;
	        }
	
	        if (!cm.state.vim.visualMode) {
	          return [tmp.start, tmp.end];
	        } else {
	          return expandSelection(cm, tmp.start, tmp.end);
	        }
	      },
	
	      repeatLastCharacterSearch: function(cm, head, motionArgs) {
	        var lastSearch = vimGlobalState.lastCharacterSearch;
	        var repeat = motionArgs.repeat;
	        var forward = motionArgs.forward === lastSearch.forward;
	        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);
	        cm.moveH(-increment, 'char');
	        motionArgs.inclusive = forward ? true : false;
	        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);
	        if (!curEnd) {
	          cm.moveH(increment, 'char');
	          return head;
	        }
	        curEnd.ch += increment;
	        return curEnd;
	      }
	    };
	
	    function defineMotion(name, fn) {
	      motions[name] = fn;
	    }
	
	    function fillArray(val, times) {
	      var arr = [];
	      for (var i = 0; i < times; i++) {
	        arr.push(val);
	      }
	      return arr;
	    }
	    /**
	     * An operator acts on a text selection. It receives the list of selections
	     * as input. The corresponding CodeMirror selection is guaranteed to
	    * match the input selection.
	     */
	    var operators = {
	      change: function(cm, args, ranges) {
	        var finalHead, text;
	        var vim = cm.state.vim;
	        vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock = vim.visualBlock;
	        if (!vim.visualMode) {
	          var anchor = ranges[0].anchor,
	              head = ranges[0].head;
	          text = cm.getRange(anchor, head);
	          var lastState = vim.lastEditInputState || {};
	          if (lastState.motion == "moveByWords" && !isWhiteSpaceString(text)) {
	            // Exclude trailing whitespace if the range is not all whitespace.
	            var match = (/\s+$/).exec(text);
	            if (match && lastState.motionArgs && lastState.motionArgs.forward) {
	              head = offsetCursor(head, 0, - match[0].length);
	              text = text.slice(0, - match[0].length);
	            }
	          }
	          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);
	          var wasLastLine = cm.firstLine() == cm.lastLine();
	          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {
	            cm.replaceRange('', prevLineEnd, head);
	          } else {
	            cm.replaceRange('', anchor, head);
	          }
	          if (args.linewise) {
	            // Push the next line back down, if there is a next line.
	            if (!wasLastLine) {
	              cm.setCursor(prevLineEnd);
	              CodeMirror.commands.newlineAndIndent(cm);
	            }
	            // make sure cursor ends up at the end of the line.
	            anchor.ch = Number.MAX_VALUE;
	          }
	          finalHead = anchor;
	        } else {
	          text = cm.getSelection();
	          var replacement = fillArray('', ranges.length);
	          cm.replaceSelections(replacement);
	          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);
	        }
	        vimGlobalState.registerController.pushText(
	            args.registerName, 'change', text,
	            args.linewise, ranges.length > 1);
	        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);
	      },
	      // delete is a javascript keyword.
	      'delete': function(cm, args, ranges) {
	        var finalHead, text;
	        var vim = cm.state.vim;
	        if (!vim.visualBlock) {
	          var anchor = ranges[0].anchor,
	              head = ranges[0].head;
	          if (args.linewise &&
	              head.line != cm.firstLine() &&
	              anchor.line == cm.lastLine() &&
	              anchor.line == head.line - 1) {
	            // Special case for dd on last line (and first line).
	            if (anchor.line == cm.firstLine()) {
	              anchor.ch = 0;
	            } else {
	              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));
	            }
	          }
	          text = cm.getRange(anchor, head);
	          cm.replaceRange('', anchor, head);
	          finalHead = anchor;
	          if (args.linewise) {
	            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);
	          }
	        } else {
	          text = cm.getSelection();
	          var replacement = fillArray('', ranges.length);
	          cm.replaceSelections(replacement);
	          finalHead = ranges[0].anchor;
	        }
	        vimGlobalState.registerController.pushText(
	            args.registerName, 'delete', text,
	            args.linewise, vim.visualBlock);
	        return clipCursorToContent(cm, finalHead);
	      },
	      indent: function(cm, args, ranges) {
	        var vim = cm.state.vim;
	        var startLine = ranges[0].anchor.line;
	        var endLine = vim.visualBlock ?
	          ranges[ranges.length - 1].anchor.line :
	          ranges[0].head.line;
	        // In visual mode, n> shifts the selection right n times, instead of
	        // shifting n lines right once.
	        var repeat = (vim.visualMode) ? args.repeat : 1;
	        if (args.linewise) {
	          // The only way to delete a newline is to delete until the start of
	          // the next line, so in linewise mode evalInput will include the next
	          // line. We don't want this in indent, so we go back a line.
	          endLine--;
	        }
	        for (var i = startLine; i <= endLine; i++) {
	          for (var j = 0; j < repeat; j++) {
	            cm.indentLine(i, args.indentRight);
	          }
	        }
	        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);
	      },
	      changeCase: function(cm, args, ranges, oldAnchor, newHead) {
	        var selections = cm.getSelections();
	        var swapped = [];
	        var toLower = args.toLower;
	        for (var j = 0; j < selections.length; j++) {
	          var toSwap = selections[j];
	          var text = '';
	          if (toLower === true) {
	            text = toSwap.toLowerCase();
	          } else if (toLower === false) {
	            text = toSwap.toUpperCase();
	          } else {
	            for (var i = 0; i < toSwap.length; i++) {
	              var character = toSwap.charAt(i);
	              text += isUpperCase(character) ? character.toLowerCase() :
	                  character.toUpperCase();
	            }
	          }
	          swapped.push(text);
	        }
	        cm.replaceSelections(swapped);
	        if (args.shouldMoveCursor){
	          return newHead;
	        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {
	          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);
	        } else if (args.linewise){
	          return oldAnchor;
	        } else {
	          return cursorMin(ranges[0].anchor, ranges[0].head);
	        }
	      },
	      yank: function(cm, args, ranges, oldAnchor) {
	        var vim = cm.state.vim;
	        var text = cm.getSelection();
	        var endPos = vim.visualMode
	          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)
	          : oldAnchor;
	        vimGlobalState.registerController.pushText(
	            args.registerName, 'yank',
	            text, args.linewise, vim.visualBlock);
	        return endPos;
	      }
	    };
	
	    function defineOperator(name, fn) {
	      operators[name] = fn;
	    }
	
	    var actions = {
	      jumpListWalk: function(cm, actionArgs, vim) {
	        if (vim.visualMode) {
	          return;
	        }
	        var repeat = actionArgs.repeat;
	        var forward = actionArgs.forward;
	        var jumpList = vimGlobalState.jumpList;
	
	        var mark = jumpList.move(cm, forward ? repeat : -repeat);
	        var markPos = mark ? mark.find() : undefined;
	        markPos = markPos ? markPos : cm.getCursor();
	        cm.setCursor(markPos);
	      },
	      scroll: function(cm, actionArgs, vim) {
	        if (vim.visualMode) {
	          return;
	        }
	        var repeat = actionArgs.repeat || 1;
	        var lineHeight = cm.defaultTextHeight();
	        var top = cm.getScrollInfo().top;
	        var delta = lineHeight * repeat;
	        var newPos = actionArgs.forward ? top + delta : top - delta;
	        var cursor = copyCursor(cm.getCursor());
	        var cursorCoords = cm.charCoords(cursor, 'local');
	        if (actionArgs.forward) {
	          if (newPos > cursorCoords.top) {
	             cursor.line += (newPos - cursorCoords.top) / lineHeight;
	             cursor.line = Math.ceil(cursor.line);
	             cm.setCursor(cursor);
	             cursorCoords = cm.charCoords(cursor, 'local');
	             cm.scrollTo(null, cursorCoords.top);
	          } else {
	             // Cursor stays within bounds.  Just reposition the scroll window.
	             cm.scrollTo(null, newPos);
	          }
	        } else {
	          var newBottom = newPos + cm.getScrollInfo().clientHeight;
	          if (newBottom < cursorCoords.bottom) {
	             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;
	             cursor.line = Math.floor(cursor.line);
	             cm.setCursor(cursor);
	             cursorCoords = cm.charCoords(cursor, 'local');
	             cm.scrollTo(
	                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);
	          } else {
	             // Cursor stays within bounds.  Just reposition the scroll window.
	             cm.scrollTo(null, newPos);
	          }
	        }
	      },
	      scrollToCursor: function(cm, actionArgs) {
	        var lineNum = cm.getCursor().line;
	        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');
	        var height = cm.getScrollInfo().clientHeight;
	        var y = charCoords.top;
	        var lineHeight = charCoords.bottom - y;
	        switch (actionArgs.position) {
	          case 'center': y = y - (height / 2) + lineHeight;
	            break;
	          case 'bottom': y = y - height + lineHeight;
	            break;
	        }
	        cm.scrollTo(null, y);
	      },
	      replayMacro: function(cm, actionArgs, vim) {
	        var registerName = actionArgs.selectedCharacter;
	        var repeat = actionArgs.repeat;
	        var macroModeState = vimGlobalState.macroModeState;
	        if (registerName == '@') {
	          registerName = macroModeState.latestRegister;
	        }
	        while(repeat--){
	          executeMacroRegister(cm, vim, macroModeState, registerName);
	        }
	      },
	      enterMacroRecordMode: function(cm, actionArgs) {
	        var macroModeState = vimGlobalState.macroModeState;
	        var registerName = actionArgs.selectedCharacter;
	        macroModeState.enterMacroRecordMode(cm, registerName);
	      },
	      enterInsertMode: function(cm, actionArgs, vim) {
	        if (cm.getOption('readOnly')) { return; }
	        vim.insertMode = true;
	        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;
	        var insertAt = (actionArgs) ? actionArgs.insertAt : null;
	        var sel = vim.sel;
	        var head = actionArgs.head || cm.getCursor('head');
	        var height = cm.listSelections().length;
	        if (insertAt == 'eol') {
	          head = Pos(head.line, lineLength(cm, head.line));
	        } else if (insertAt == 'charAfter') {
	          head = offsetCursor(head, 0, 1);
	        } else if (insertAt == 'firstNonBlank') {
	          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);
	        } else if (insertAt == 'startOfSelectedArea') {
	          if (!vim.visualBlock) {
	            if (sel.head.line < sel.anchor.line) {
	              head = sel.head;
	            } else {
	              head = Pos(sel.anchor.line, 0);
	            }
	          } else {
	            head = Pos(
	                Math.min(sel.head.line, sel.anchor.line),
	                Math.min(sel.head.ch, sel.anchor.ch));
	            height = Math.abs(sel.head.line - sel.anchor.line) + 1;
	          }
	        } else if (insertAt == 'endOfSelectedArea') {
	          if (!vim.visualBlock) {
	            if (sel.head.line >= sel.anchor.line) {
	              head = offsetCursor(sel.head, 0, 1);
	            } else {
	              head = Pos(sel.anchor.line, 0);
	            }
	          } else {
	            head = Pos(
	                Math.min(sel.head.line, sel.anchor.line),
	                Math.max(sel.head.ch + 1, sel.anchor.ch));
	            height = Math.abs(sel.head.line - sel.anchor.line) + 1;
	          }
	        } else if (insertAt == 'inplace') {
	          if (vim.visualMode){
	            return;
	          }
	        }
	        cm.setOption('keyMap', 'vim-insert');
	        cm.setOption('disableInput', false);
	        if (actionArgs && actionArgs.replace) {
	          // Handle Replace-mode as a special case of insert mode.
	          cm.toggleOverwrite(true);
	          cm.setOption('keyMap', 'vim-replace');
	          CodeMirror.signal(cm, "vim-mode-change", {mode: "replace"});
	        } else {
	          cm.setOption('keyMap', 'vim-insert');
	          CodeMirror.signal(cm, "vim-mode-change", {mode: "insert"});
	        }
	        if (!vimGlobalState.macroModeState.isPlaying) {
	          // Only record if not replaying.
	          cm.on('change', onChange);
	          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);
	        }
	        if (vim.visualMode) {
	          exitVisualMode(cm);
	        }
	        selectForInsert(cm, head, height);
	      },
	      toggleVisualMode: function(cm, actionArgs, vim) {
	        var repeat = actionArgs.repeat;
	        var anchor = cm.getCursor();
	        var head;
	        // TODO: The repeat should actually select number of characters/lines
	        //     equal to the repeat times the size of the previous visual
	        //     operation.
	        if (!vim.visualMode) {
	          // Entering visual mode
	          vim.visualMode = true;
	          vim.visualLine = !!actionArgs.linewise;
	          vim.visualBlock = !!actionArgs.blockwise;
	          head = clipCursorToContent(
	              cm, Pos(anchor.line, anchor.ch + repeat - 1),
	              true /** includeLineBreak */);
	          vim.sel = {
	            anchor: anchor,
	            head: head
	          };
	          CodeMirror.signal(cm, "vim-mode-change", {mode: "visual", subMode: vim.visualLine ? "linewise" : vim.visualBlock ? "blockwise" : ""});
	          updateCmSelection(cm);
	          updateMark(cm, vim, '<', cursorMin(anchor, head));
	          updateMark(cm, vim, '>', cursorMax(anchor, head));
	        } else if (vim.visualLine ^ actionArgs.linewise ||
	            vim.visualBlock ^ actionArgs.blockwise) {
	          // Toggling between modes
	          vim.visualLine = !!actionArgs.linewise;
	          vim.visualBlock = !!actionArgs.blockwise;
	          CodeMirror.signal(cm, "vim-mode-change", {mode: "visual", subMode: vim.visualLine ? "linewise" : vim.visualBlock ? "blockwise" : ""});
	          updateCmSelection(cm);
	        } else {
	          exitVisualMode(cm);
	        }
	      },
	      reselectLastSelection: function(cm, _actionArgs, vim) {
	        var lastSelection = vim.lastSelection;
	        if (vim.visualMode) {
	          updateLastSelection(cm, vim);
	        }
	        if (lastSelection) {
	          var anchor = lastSelection.anchorMark.find();
	          var head = lastSelection.headMark.find();
	          if (!anchor || !head) {
	            // If the marks have been destroyed due to edits, do nothing.
	            return;
	          }
	          vim.sel = {
	            anchor: anchor,
	            head: head
	          };
	          vim.visualMode = true;
	          vim.visualLine = lastSelection.visualLine;
	          vim.visualBlock = lastSelection.visualBlock;
	          updateCmSelection(cm);
	          updateMark(cm, vim, '<', cursorMin(anchor, head));
	          updateMark(cm, vim, '>', cursorMax(anchor, head));
	          CodeMirror.signal(cm, 'vim-mode-change', {
	            mode: 'visual',
	            subMode: vim.visualLine ? 'linewise' :
	                     vim.visualBlock ? 'blockwise' : ''});
	        }
	      },
	      joinLines: function(cm, actionArgs, vim) {
	        var curStart, curEnd;
	        if (vim.visualMode) {
	          curStart = cm.getCursor('anchor');
	          curEnd = cm.getCursor('head');
	          if (cursorIsBefore(curEnd, curStart)) {
	            var tmp = curEnd;
	            curEnd = curStart;
	            curStart = tmp;
	          }
	          curEnd.ch = lineLength(cm, curEnd.line) - 1;
	        } else {
	          // Repeat is the number of lines to join. Minimum 2 lines.
	          var repeat = Math.max(actionArgs.repeat, 2);
	          curStart = cm.getCursor();
	          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,
	                                               Infinity));
	        }
	        var finalCh = 0;
	        for (var i = curStart.line; i < curEnd.line; i++) {
	          finalCh = lineLength(cm, curStart.line);
	          var tmp = Pos(curStart.line + 1,
	                        lineLength(cm, curStart.line + 1));
	          var text = cm.getRange(curStart, tmp);
	          text = text.replace(/\n\s*/g, ' ');
	          cm.replaceRange(text, curStart, tmp);
	        }
	        var curFinalPos = Pos(curStart.line, finalCh);
	        if (vim.visualMode) {
	          exitVisualMode(cm, false);
	        }
	        cm.setCursor(curFinalPos);
	      },
	      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {
	        vim.insertMode = true;
	        var insertAt = copyCursor(cm.getCursor());
	        if (insertAt.line === cm.firstLine() && !actionArgs.after) {
	          // Special case for inserting newline before start of document.
	          cm.replaceRange('\n', Pos(cm.firstLine(), 0));
	          cm.setCursor(cm.firstLine(), 0);
	        } else {
	          insertAt.line = (actionArgs.after) ? insertAt.line :
	              insertAt.line - 1;
	          insertAt.ch = lineLength(cm, insertAt.line);
	          cm.setCursor(insertAt);
	          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||
	              CodeMirror.commands.newlineAndIndent;
	          newlineFn(cm);
	        }
	        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);
	      },
	      paste: function(cm, actionArgs, vim) {
	        var cur = copyCursor(cm.getCursor());
	        var register = vimGlobalState.registerController.getRegister(
	            actionArgs.registerName);
	        var text = register.toString();
	        if (!text) {
	          return;
	        }
	        if (actionArgs.matchIndent) {
	          var tabSize = cm.getOption("tabSize");
	          // length that considers tabs and tabSize
	          var whitespaceLength = function(str) {
	            var tabs = (str.split("\t").length - 1);
	            var spaces = (str.split(" ").length - 1);
	            return tabs * tabSize + spaces * 1;
	          };
	          var currentLine = cm.getLine(cm.getCursor().line);
	          var indent = whitespaceLength(currentLine.match(/^\s*/)[0]);
	          // chomp last newline b/c don't want it to match /^\s*/gm
	          var chompedText = text.replace(/\n$/, '');
	          var wasChomped = text !== chompedText;
	          var firstIndent = whitespaceLength(text.match(/^\s*/)[0]);
	          var text = chompedText.replace(/^\s*/gm, function(wspace) {
	            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);
	            if (newIndent < 0) {
	              return "";
	            }
	            else if (cm.getOption("indentWithTabs")) {
	              var quotient = Math.floor(newIndent / tabSize);
	              return Array(quotient + 1).join('\t');
	            }
	            else {
	              return Array(newIndent + 1).join(' ');
	            }
	          });
	          text += wasChomped ? "\n" : "";
	        }
	        if (actionArgs.repeat > 1) {
	          var text = Array(actionArgs.repeat + 1).join(text);
	        }
	        var linewise = register.linewise;
	        var blockwise = register.blockwise;
	        if (linewise) {
	          if(vim.visualMode) {
	            text = vim.visualLine ? text.slice(0, -1) : '\n' + text.slice(0, text.length - 1) + '\n';
	          } else if (actionArgs.after) {
	            // Move the newline at the end to the start instead, and paste just
	            // before the newline character of the line we are on right now.
	            text = '\n' + text.slice(0, text.length - 1);
	            cur.ch = lineLength(cm, cur.line);
	          } else {
	            cur.ch = 0;
	          }
	        } else {
	          if (blockwise) {
	            text = text.split('\n');
	            for (var i = 0; i < text.length; i++) {
	              text[i] = (text[i] == '') ? ' ' : text[i];
	            }
	          }
	          cur.ch += actionArgs.after ? 1 : 0;
	        }
	        var curPosFinal;
	        var idx;
	        if (vim.visualMode) {
	          //  save the pasted text for reselection if the need arises
	          vim.lastPastedText = text;
	          var lastSelectionCurEnd;
	          var selectedArea = getSelectedAreaRange(cm, vim);
	          var selectionStart = selectedArea[0];
	          var selectionEnd = selectedArea[1];
	          var selectedText = cm.getSelection();
	          var selections = cm.listSelections();
	          var emptyStrings = new Array(selections.length).join('1').split('1');
	          // save the curEnd marker before it get cleared due to cm.replaceRange.
	          if (vim.lastSelection) {
	            lastSelectionCurEnd = vim.lastSelection.headMark.find();
	          }
	          // push the previously selected text to unnamed register
	          vimGlobalState.registerController.unnamedRegister.setText(selectedText);
	          if (blockwise) {
	            // first delete the selected text
	            cm.replaceSelections(emptyStrings);
	            // Set new selections as per the block length of the yanked text
	            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);
	            cm.setCursor(selectionStart);
	            selectBlock(cm, selectionEnd);
	            cm.replaceSelections(text);
	            curPosFinal = selectionStart;
	          } else if (vim.visualBlock) {
	            cm.replaceSelections(emptyStrings);
	            cm.setCursor(selectionStart);
	            cm.replaceRange(text, selectionStart, selectionStart);
	            curPosFinal = selectionStart;
	          } else {
	            cm.replaceRange(text, selectionStart, selectionEnd);
	            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);
	          }
	          // restore the the curEnd marker
	          if(lastSelectionCurEnd) {
	            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);
	          }
	          if (linewise) {
	            curPosFinal.ch=0;
	          }
	        } else {
	          if (blockwise) {
	            cm.setCursor(cur);
	            for (var i = 0; i < text.length; i++) {
	              var line = cur.line+i;
	              if (line > cm.lastLine()) {
	                cm.replaceRange('\n',  Pos(line, 0));
	              }
	              var lastCh = lineLength(cm, line);
	              if (lastCh < cur.ch) {
	                extendLineToColumn(cm, line, cur.ch);
	              }
	            }
	            cm.setCursor(cur);
	            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));
	            cm.replaceSelections(text);
	            curPosFinal = cur;
	          } else {
	            cm.replaceRange(text, cur);
	            // Now fine tune the cursor to where we want it.
	            if (linewise && actionArgs.after) {
	              curPosFinal = Pos(
	              cur.line + 1,
	              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));
	            } else if (linewise && !actionArgs.after) {
	              curPosFinal = Pos(
	                cur.line,
	                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));
	            } else if (!linewise && actionArgs.after) {
	              idx = cm.indexFromPos(cur);
	              curPosFinal = cm.posFromIndex(idx + text.length - 1);
	            } else {
	              idx = cm.indexFromPos(cur);
	              curPosFinal = cm.posFromIndex(idx + text.length);
	            }
	          }
	        }
	        if (vim.visualMode) {
	          exitVisualMode(cm, false);
	        }
	        cm.setCursor(curPosFinal);
	      },
	      undo: function(cm, actionArgs) {
	        cm.operation(function() {
	          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();
	          cm.setCursor(cm.getCursor('anchor'));
	        });
	      },
	      redo: function(cm, actionArgs) {
	        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();
	      },
	      setRegister: function(_cm, actionArgs, vim) {
	        vim.inputState.registerName = actionArgs.selectedCharacter;
	      },
	      setMark: function(cm, actionArgs, vim) {
	        var markName = actionArgs.selectedCharacter;
	        updateMark(cm, vim, markName, cm.getCursor());
	      },
	      replace: function(cm, actionArgs, vim) {
	        var replaceWith = actionArgs.selectedCharacter;
	        var curStart = cm.getCursor();
	        var replaceTo;
	        var curEnd;
	        var selections = cm.listSelections();
	        if (vim.visualMode) {
	          curStart = cm.getCursor('start');
	          curEnd = cm.getCursor('end');
	        } else {
	          var line = cm.getLine(curStart.line);
	          replaceTo = curStart.ch + actionArgs.repeat;
	          if (replaceTo > line.length) {
	            replaceTo=line.length;
	          }
	          curEnd = Pos(curStart.line, replaceTo);
	        }
	        if (replaceWith=='\n') {
	          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);
	          // special case, where vim help says to replace by just one line-break
	          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);
	        } else {
	          var replaceWithStr = cm.getRange(curStart, curEnd);
	          //replace all characters in range by selected, but keep linebreaks
	          replaceWithStr = replaceWithStr.replace(/[^\n]/g, replaceWith);
	          if (vim.visualBlock) {
	            // Tabs are split in visua block before replacing
	            var spaces = new Array(cm.getOption("tabSize")+1).join(' ');
	            replaceWithStr = cm.getSelection();
	            replaceWithStr = replaceWithStr.replace(/\t/g, spaces).replace(/[^\n]/g, replaceWith).split('\n');
	            cm.replaceSelections(replaceWithStr);
	          } else {
	            cm.replaceRange(replaceWithStr, curStart, curEnd);
	          }
	          if (vim.visualMode) {
	            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?
	                         selections[0].anchor : selections[0].head;
	            cm.setCursor(curStart);
	            exitVisualMode(cm, false);
	          } else {
	            cm.setCursor(offsetCursor(curEnd, 0, -1));
	          }
	        }
	      },
	      incrementNumberToken: function(cm, actionArgs) {
	        var cur = cm.getCursor();
	        var lineStr = cm.getLine(cur.line);
	        var re = /-?\d+/g;
	        var match;
	        var start;
	        var end;
	        var numberStr;
	        var token;
	        while ((match = re.exec(lineStr)) !== null) {
	          token = match[0];
	          start = match.index;
	          end = start + token.length;
	          if (cur.ch < end)break;
	        }
	        if (!actionArgs.backtrack && (end <= cur.ch))return;
	        if (token) {
	          var increment = actionArgs.increase ? 1 : -1;
	          var number = parseInt(token) + (increment * actionArgs.repeat);
	          var from = Pos(cur.line, start);
	          var to = Pos(cur.line, end);
	          numberStr = number.toString();
	          cm.replaceRange(numberStr, from, to);
	        } else {
	          return;
	        }
	        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));
	      },
	      repeatLastEdit: function(cm, actionArgs, vim) {
	        var lastEditInputState = vim.lastEditInputState;
	        if (!lastEditInputState) { return; }
	        var repeat = actionArgs.repeat;
	        if (repeat && actionArgs.repeatIsExplicit) {
	          vim.lastEditInputState.repeatOverride = repeat;
	        } else {
	          repeat = vim.lastEditInputState.repeatOverride || repeat;
	        }
	        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);
	      },
	      exitInsertMode: exitInsertMode
	    };
	
	    function defineAction(name, fn) {
	      actions[name] = fn;
	    }
	
	    /*
	     * Below are miscellaneous utility functions used by vim.js
	     */
	
	    /**
	     * Clips cursor to ensure that line is within the buffer's range
	     * If includeLineBreak is true, then allow cur.ch == lineLength.
	     */
	    function clipCursorToContent(cm, cur, includeLineBreak) {
	      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );
	      var maxCh = lineLength(cm, line) - 1;
	      maxCh = (includeLineBreak) ? maxCh + 1 : maxCh;
	      var ch = Math.min(Math.max(0, cur.ch), maxCh);
	      return Pos(line, ch);
	    }
	    function copyArgs(args) {
	      var ret = {};
	      for (var prop in args) {
	        if (args.hasOwnProperty(prop)) {
	          ret[prop] = args[prop];
	        }
	      }
	      return ret;
	    }
	    function offsetCursor(cur, offsetLine, offsetCh) {
	      if (typeof offsetLine === 'object') {
	        offsetCh = offsetLine.ch;
	        offsetLine = offsetLine.line;
	      }
	      return Pos(cur.line + offsetLine, cur.ch + offsetCh);
	    }
	    function getOffset(anchor, head) {
	      return {
	        line: head.line - anchor.line,
	        ch: head.line - anchor.line
	      };
	    }
	    function commandMatches(keys, keyMap, context, inputState) {
	      // Partial matches are not applied. They inform the key handler
	      // that the current key sequence is a subsequence of a valid key
	      // sequence, so that the key buffer is not cleared.
	      var match, partial = [], full = [];
	      for (var i = 0; i < keyMap.length; i++) {
	        var command = keyMap[i];
	        if (context == 'insert' && command.context != 'insert' ||
	            command.context && command.context != context ||
	            inputState.operator && command.type == 'action' ||
	            !(match = commandMatch(keys, command.keys))) { continue; }
	        if (match == 'partial') { partial.push(command); }
	        if (match == 'full') { full.push(command); }
	      }
	      return {
	        partial: partial.length && partial,
	        full: full.length && full
	      };
	    }
	    function commandMatch(pressed, mapped) {
	      if (mapped.slice(-11) == '<character>') {
	        // Last character matches anything.
	        var prefixLen = mapped.length - 11;
	        var pressedPrefix = pressed.slice(0, prefixLen);
	        var mappedPrefix = mapped.slice(0, prefixLen);
	        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :
	               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;
	      } else {
	        return pressed == mapped ? 'full' :
	               mapped.indexOf(pressed) == 0 ? 'partial' : false;
	      }
	    }
	    function lastChar(keys) {
	      var match = /^.*(<[\w\-]+>)$/.exec(keys);
	      var selectedCharacter = match ? match[1] : keys.slice(-1);
	      if (selectedCharacter.length > 1){
	        switch(selectedCharacter){
	          case '<CR>':
	            selectedCharacter='\n';
	            break;
	          case '<Space>':
	            selectedCharacter=' ';
	            break;
	          default:
	            break;
	        }
	      }
	      return selectedCharacter;
	    }
	    function repeatFn(cm, fn, repeat) {
	      return function() {
	        for (var i = 0; i < repeat; i++) {
	          fn(cm);
	        }
	      };
	    }
	    function copyCursor(cur) {
	      return Pos(cur.line, cur.ch);
	    }
	    function cursorEqual(cur1, cur2) {
	      return cur1.ch == cur2.ch && cur1.line == cur2.line;
	    }
	    function cursorIsBefore(cur1, cur2) {
	      if (cur1.line < cur2.line) {
	        return true;
	      }
	      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {
	        return true;
	      }
	      return false;
	    }
	    function cursorMin(cur1, cur2) {
	      if (arguments.length > 2) {
	        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));
	      }
	      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;
	    }
	    function cursorMax(cur1, cur2) {
	      if (arguments.length > 2) {
	        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));
	      }
	      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;
	    }
	    function cursorIsBetween(cur1, cur2, cur3) {
	      // returns true if cur2 is between cur1 and cur3.
	      var cur1before2 = cursorIsBefore(cur1, cur2);
	      var cur2before3 = cursorIsBefore(cur2, cur3);
	      return cur1before2 && cur2before3;
	    }
	    function lineLength(cm, lineNum) {
	      return cm.getLine(lineNum).length;
	    }
	    function trim(s) {
	      if (s.trim) {
	        return s.trim();
	      }
	      return s.replace(/^\s+|\s+$/g, '');
	    }
	    function escapeRegex(s) {
	      return s.replace(/([.?*+$\[\]\/\\(){}|\-])/g, '\\$1');
	    }
	    function extendLineToColumn(cm, lineNum, column) {
	      var endCh = lineLength(cm, lineNum);
	      var spaces = new Array(column-endCh+1).join(' ');
	      cm.setCursor(Pos(lineNum, endCh));
	      cm.replaceRange(spaces, cm.getCursor());
	    }
	    // This functions selects a rectangular block
	    // of text with selectionEnd as any of its corner
	    // Height of block:
	    // Difference in selectionEnd.line and first/last selection.line
	    // Width of the block:
	    // Distance between selectionEnd.ch and any(first considered here) selection.ch
	    function selectBlock(cm, selectionEnd) {
	      var selections = [], ranges = cm.listSelections();
	      var head = copyCursor(cm.clipPos(selectionEnd));
	      var isClipped = !cursorEqual(selectionEnd, head);
	      var curHead = cm.getCursor('head');
	      var primIndex = getIndex(ranges, curHead);
	      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);
	      var max = ranges.length - 1;
	      var index = max - primIndex > primIndex ? max : 0;
	      var base = ranges[index].anchor;
	
	      var firstLine = Math.min(base.line, head.line);
	      var lastLine = Math.max(base.line, head.line);
	      var baseCh = base.ch, headCh = head.ch;
	
	      var dir = ranges[index].head.ch - baseCh;
	      var newDir = headCh - baseCh;
	      if (dir > 0 && newDir <= 0) {
	        baseCh++;
	        if (!isClipped) { headCh--; }
	      } else if (dir < 0 && newDir >= 0) {
	        baseCh--;
	        if (!wasClipped) { headCh++; }
	      } else if (dir < 0 && newDir == -1) {
	        baseCh--;
	        headCh++;
	      }
	      for (var line = firstLine; line <= lastLine; line++) {
	        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};
	        selections.push(range);
	      }
	      primIndex = head.line == lastLine ? selections.length - 1 : 0;
	      cm.setSelections(selections);
	      selectionEnd.ch = headCh;
	      base.ch = baseCh;
	      return base;
	    }
	    function selectForInsert(cm, head, height) {
	      var sel = [];
	      for (var i = 0; i < height; i++) {
	        var lineHead = offsetCursor(head, i, 0);
	        sel.push({anchor: lineHead, head: lineHead});
	      }
	      cm.setSelections(sel, 0);
	    }
	    // getIndex returns the index of the cursor in the selections.
	    function getIndex(ranges, cursor, end) {
	      for (var i = 0; i < ranges.length; i++) {
	        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);
	        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);
	        if (atAnchor || atHead) {
	          return i;
	        }
	      }
	      return -1;
	    }
	    function getSelectedAreaRange(cm, vim) {
	      var lastSelection = vim.lastSelection;
	      var getCurrentSelectedAreaRange = function() {
	        var selections = cm.listSelections();
	        var start =  selections[0];
	        var end = selections[selections.length-1];
	        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;
	        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;
	        return [selectionStart, selectionEnd];
	      };
	      var getLastSelectedAreaRange = function() {
	        var selectionStart = cm.getCursor();
	        var selectionEnd = cm.getCursor();
	        var block = lastSelection.visualBlock;
	        if (block) {
	          var width = block.width;
	          var height = block.height;
	          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);
	          var selections = [];
	          // selectBlock creates a 'proper' rectangular block.
	          // We do not want that in all cases, so we manually set selections.
	          for (var i = selectionStart.line; i < selectionEnd.line; i++) {
	            var anchor = Pos(i, selectionStart.ch);
	            var head = Pos(i, selectionEnd.ch);
	            var range = {anchor: anchor, head: head};
	            selections.push(range);
	          }
	          cm.setSelections(selections);
	        } else {
	          var start = lastSelection.anchorMark.find();
	          var end = lastSelection.headMark.find();
	          var line = end.line - start.line;
	          var ch = end.ch - start.ch;
	          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};
	          if (lastSelection.visualLine) {
	            selectionStart = Pos(selectionStart.line, 0);
	            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));
	          }
	          cm.setSelection(selectionStart, selectionEnd);
	        }
	        return [selectionStart, selectionEnd];
	      };
	      if (!vim.visualMode) {
	      // In case of replaying the action.
	        return getLastSelectedAreaRange();
	      } else {
	        return getCurrentSelectedAreaRange();
	      }
	    }
	    // Updates the previous selection with the current selection's values. This
	    // should only be called in visual mode.
	    function updateLastSelection(cm, vim) {
	      var anchor = vim.sel.anchor;
	      var head = vim.sel.head;
	      // To accommodate the effect of lastPastedText in the last selection
	      if (vim.lastPastedText) {
	        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);
	        vim.lastPastedText = null;
	      }
	      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),
	                           'headMark': cm.setBookmark(head),
	                           'anchor': copyCursor(anchor),
	                           'head': copyCursor(head),
	                           'visualMode': vim.visualMode,
	                           'visualLine': vim.visualLine,
	                           'visualBlock': vim.visualBlock};
	    }
	    function expandSelection(cm, start, end) {
	      var sel = cm.state.vim.sel;
	      var head = sel.head;
	      var anchor = sel.anchor;
	      var tmp;
	      if (cursorIsBefore(end, start)) {
	        tmp = end;
	        end = start;
	        start = tmp;
	      }
	      if (cursorIsBefore(head, anchor)) {
	        head = cursorMin(start, head);
	        anchor = cursorMax(anchor, end);
	      } else {
	        anchor = cursorMin(start, anchor);
	        head = cursorMax(head, end);
	        head = offsetCursor(head, 0, -1);
	        if (head.ch == -1 && head.line != cm.firstLine()) {
	          head = Pos(head.line - 1, lineLength(cm, head.line - 1));
	        }
	      }
	      return [anchor, head];
	    }
	    /**
	     * Updates the CodeMirror selection to match the provided vim selection.
	     * If no arguments are given, it uses the current vim selection state.
	     */
	    function updateCmSelection(cm, sel, mode) {
	      var vim = cm.state.vim;
	      sel = sel || vim.sel;
	      var mode = mode ||
	        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';
	      var cmSel = makeCmSelection(cm, sel, mode);
	      cm.setSelections(cmSel.ranges, cmSel.primary);
	      updateFakeCursor(cm);
	    }
	    function makeCmSelection(cm, sel, mode, exclusive) {
	      var head = copyCursor(sel.head);
	      var anchor = copyCursor(sel.anchor);
	      if (mode == 'char') {
	        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;
	        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;
	        head = offsetCursor(sel.head, 0, headOffset);
	        anchor = offsetCursor(sel.anchor, 0, anchorOffset);
	        return {
	          ranges: [{anchor: anchor, head: head}],
	          primary: 0
	        };
	      } else if (mode == 'line') {
	        if (!cursorIsBefore(sel.head, sel.anchor)) {
	          anchor.ch = 0;
	
	          var lastLine = cm.lastLine();
	          if (head.line > lastLine) {
	            head.line = lastLine;
	          }
	          head.ch = lineLength(cm, head.line);
	        } else {
	          head.ch = 0;
	          anchor.ch = lineLength(cm, anchor.line);
	        }
	        return {
	          ranges: [{anchor: anchor, head: head}],
	          primary: 0
	        };
	      } else if (mode == 'block') {
	        var top = Math.min(anchor.line, head.line),
	            left = Math.min(anchor.ch, head.ch),
	            bottom = Math.max(anchor.line, head.line),
	            right = Math.max(anchor.ch, head.ch) + 1;
	        var height = bottom - top + 1;
	        var primary = head.line == top ? 0 : height - 1;
	        var ranges = [];
	        for (var i = 0; i < height; i++) {
	          ranges.push({
	            anchor: Pos(top + i, left),
	            head: Pos(top + i, right)
	          });
	        }
	        return {
	          ranges: ranges,
	          primary: primary
	        };
	      }
	    }
	    function getHead(cm) {
	      var cur = cm.getCursor('head');
	      if (cm.getSelection().length == 1) {
	        // Small corner case when only 1 character is selected. The "real"
	        // head is the left of head and anchor.
	        cur = cursorMin(cur, cm.getCursor('anchor'));
	      }
	      return cur;
	    }
	
	    /**
	     * If moveHead is set to false, the CodeMirror selection will not be
	     * touched. The caller assumes the responsibility of putting the cursor
	    * in the right place.
	     */
	    function exitVisualMode(cm, moveHead) {
	      var vim = cm.state.vim;
	      if (moveHead !== false) {
	        cm.setCursor(clipCursorToContent(cm, vim.sel.head));
	      }
	      updateLastSelection(cm, vim);
	      vim.visualMode = false;
	      vim.visualLine = false;
	      vim.visualBlock = false;
	      CodeMirror.signal(cm, "vim-mode-change", {mode: "normal"});
	      if (vim.fakeCursor) {
	        vim.fakeCursor.clear();
	      }
	    }
	
	    // Remove any trailing newlines from the selection. For
	    // example, with the caret at the start of the last word on the line,
	    // 'dw' should word, but not the newline, while 'w' should advance the
	    // caret to the first character of the next line.
	    function clipToLine(cm, curStart, curEnd) {
	      var selection = cm.getRange(curStart, curEnd);
	      // Only clip if the selection ends with trailing newline + whitespace
	      if (/\n\s*$/.test(selection)) {
	        var lines = selection.split('\n');
	        // We know this is all whitespace.
	        lines.pop();
	
	        // Cases:
	        // 1. Last word is an empty line - do not clip the trailing '\n'
	        // 2. Last word is not an empty line - clip the trailing '\n'
	        var line;
	        // Find the line containing the last word, and clip all whitespace up
	        // to it.
	        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {
	          curEnd.line--;
	          curEnd.ch = 0;
	        }
	        // If the last word is not an empty line, clip an additional newline
	        if (line) {
	          curEnd.line--;
	          curEnd.ch = lineLength(cm, curEnd.line);
	        } else {
	          curEnd.ch = 0;
	        }
	      }
	    }
	
	    // Expand the selection to line ends.
	    function expandSelectionToLine(_cm, curStart, curEnd) {
	      curStart.ch = 0;
	      curEnd.ch = 0;
	      curEnd.line++;
	    }
	
	    function findFirstNonWhiteSpaceCharacter(text) {
	      if (!text) {
	        return 0;
	      }
	      var firstNonWS = text.search(/\S/);
	      return firstNonWS == -1 ? text.length : firstNonWS;
	    }
	
	    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {
	      var cur = getHead(cm);
	      var line = cm.getLine(cur.line);
	      var idx = cur.ch;
	
	      // Seek to first word or non-whitespace character, depending on if
	      // noSymbol is true.
	      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];
	      while (!test(line.charAt(idx))) {
	        idx++;
	        if (idx >= line.length) { return null; }
	      }
	
	      if (bigWord) {
	        test = bigWordCharTest[0];
	      } else {
	        test = wordCharTest[0];
	        if (!test(line.charAt(idx))) {
	          test = wordCharTest[1];
	        }
	      }
	
	      var end = idx, start = idx;
	      while (test(line.charAt(end)) && end < line.length) { end++; }
	      while (test(line.charAt(start)) && start >= 0) { start--; }
	      start++;
	
	      if (inclusive) {
	        // If present, include all whitespace after word.
	        // Otherwise, include all whitespace before word, except indentation.
	        var wordEnd = end;
	        while (/\s/.test(line.charAt(end)) && end < line.length) { end++; }
	        if (wordEnd == end) {
	          var wordStart = start;
	          while (/\s/.test(line.charAt(start - 1)) && start > 0) { start--; }
	          if (!start) { start = wordStart; }
	        }
	      }
	      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };
	    }
	
	    function recordJumpPosition(cm, oldCur, newCur) {
	      if (!cursorEqual(oldCur, newCur)) {
	        vimGlobalState.jumpList.add(cm, oldCur, newCur);
	      }
	    }
	
	    function recordLastCharacterSearch(increment, args) {
	        vimGlobalState.lastCharacterSearch.increment = increment;
	        vimGlobalState.lastCharacterSearch.forward = args.forward;
	        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;
	    }
	
	    var symbolToMode = {
	        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',
	        '[': 'section', ']': 'section',
	        '*': 'comment', '/': 'comment',
	        'm': 'method', 'M': 'method',
	        '#': 'preprocess'
	    };
	    var findSymbolModes = {
	      bracket: {
	        isComplete: function(state) {
	          if (state.nextCh === state.symb) {
	            state.depth++;
	            if (state.depth >= 1)return true;
	          } else if (state.nextCh === state.reverseSymb) {
	            state.depth--;
	          }
	          return false;
	        }
	      },
	      section: {
	        init: function(state) {
	          state.curMoveThrough = true;
	          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';
	        },
	        isComplete: function(state) {
	          return state.index === 0 && state.nextCh === state.symb;
	        }
	      },
	      comment: {
	        isComplete: function(state) {
	          var found = state.lastCh === '*' && state.nextCh === '/';
	          state.lastCh = state.nextCh;
	          return found;
	        }
	      },
	      // TODO: The original Vim implementation only operates on level 1 and 2.
	      // The current implementation doesn't check for code block level and
	      // therefore it operates on any levels.
	      method: {
	        init: function(state) {
	          state.symb = (state.symb === 'm' ? '{' : '}');
	          state.reverseSymb = state.symb === '{' ? '}' : '{';
	        },
	        isComplete: function(state) {
	          if (state.nextCh === state.symb)return true;
	          return false;
	        }
	      },
	      preprocess: {
	        init: function(state) {
	          state.index = 0;
	        },
	        isComplete: function(state) {
	          if (state.nextCh === '#') {
	            var token = state.lineText.match(/#(\w+)/)[1];
	            if (token === 'endif') {
	              if (state.forward && state.depth === 0) {
	                return true;
	              }
	              state.depth++;
	            } else if (token === 'if') {
	              if (!state.forward && state.depth === 0) {
	                return true;
	              }
	              state.depth--;
	            }
	            if (token === 'else' && state.depth === 0)return true;
	          }
	          return false;
	        }
	      }
	    };
	    function findSymbol(cm, repeat, forward, symb) {
	      var cur = copyCursor(cm.getCursor());
	      var increment = forward ? 1 : -1;
	      var endLine = forward ? cm.lineCount() : -1;
	      var curCh = cur.ch;
	      var line = cur.line;
	      var lineText = cm.getLine(line);
	      var state = {
	        lineText: lineText,
	        nextCh: lineText.charAt(curCh),
	        lastCh: null,
	        index: curCh,
	        symb: symb,
	        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],
	        forward: forward,
	        depth: 0,
	        curMoveThrough: false
	      };
	      var mode = symbolToMode[symb];
	      if (!mode)return cur;
	      var init = findSymbolModes[mode].init;
	      var isComplete = findSymbolModes[mode].isComplete;
	      if (init) { init(state); }
	      while (line !== endLine && repeat) {
	        state.index += increment;
	        state.nextCh = state.lineText.charAt(state.index);
	        if (!state.nextCh) {
	          line += increment;
	          state.lineText = cm.getLine(line) || '';
	          if (increment > 0) {
	            state.index = 0;
	          } else {
	            var lineLen = state.lineText.length;
	            state.index = (lineLen > 0) ? (lineLen-1) : 0;
	          }
	          state.nextCh = state.lineText.charAt(state.index);
	        }
	        if (isComplete(state)) {
	          cur.line = line;
	          cur.ch = state.index;
	          repeat--;
	        }
	      }
	      if (state.nextCh || state.curMoveThrough) {
	        return Pos(line, state.index);
	      }
	      return cur;
	    }
	
	    /**
	     * Returns the boundaries of the next word. If the cursor in the middle of
	     * the word, then returns the boundaries of the current word, starting at
	     * the cursor. If the cursor is at the start/end of a word, and we are going
	     * forward/backward, respectively, find the boundaries of the next word.
	     *
	     * @param {CodeMirror} cm CodeMirror object.
	     * @param {Cursor} cur The cursor position.
	     * @param {boolean} forward True to search forward. False to search
	     *     backward.
	     * @param {boolean} bigWord True if punctuation count as part of the word.
	     *     False if only [a-zA-Z0-9] characters count as part of the word.
	     * @param {boolean} emptyLineIsWord True if empty lines should be treated
	     *     as words.
	     * @return {Object{from:number, to:number, line: number}} The boundaries of
	     *     the word, or null if there are no more words.
	     */
	    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {
	      var lineNum = cur.line;
	      var pos = cur.ch;
	      var line = cm.getLine(lineNum);
	      var dir = forward ? 1 : -1;
	      var charTests = bigWord ? bigWordCharTest: wordCharTest;
	
	      if (emptyLineIsWord && line == '') {
	        lineNum += dir;
	        line = cm.getLine(lineNum);
	        if (!isLine(cm, lineNum)) {
	          return null;
	        }
	        pos = (forward) ? 0 : line.length;
	      }
	
	      while (true) {
	        if (emptyLineIsWord && line == '') {
	          return { from: 0, to: 0, line: lineNum };
	        }
	        var stop = (dir > 0) ? line.length : -1;
	        var wordStart = stop, wordEnd = stop;
	        // Find bounds of next word.
	        while (pos != stop) {
	          var foundWord = false;
	          for (var i = 0; i < charTests.length && !foundWord; ++i) {
	            if (charTests[i](line.charAt(pos))) {
	              wordStart = pos;
	              // Advance to end of word.
	              while (pos != stop && charTests[i](line.charAt(pos))) {
	                pos += dir;
	              }
	              wordEnd = pos;
	              foundWord = wordStart != wordEnd;
	              if (wordStart == cur.ch && lineNum == cur.line &&
	                  wordEnd == wordStart + dir) {
	                // We started at the end of a word. Find the next one.
	                continue;
	              } else {
	                return {
	                  from: Math.min(wordStart, wordEnd + 1),
	                  to: Math.max(wordStart, wordEnd),
	                  line: lineNum };
	              }
	            }
	          }
	          if (!foundWord) {
	            pos += dir;
	          }
	        }
	        // Advance to next/prev line.
	        lineNum += dir;
	        if (!isLine(cm, lineNum)) {
	          return null;
	        }
	        line = cm.getLine(lineNum);
	        pos = (dir > 0) ? 0 : line.length;
	      }
	    }
	
	    /**
	     * @param {CodeMirror} cm CodeMirror object.
	     * @param {Pos} cur The position to start from.
	     * @param {int} repeat Number of words to move past.
	     * @param {boolean} forward True to search forward. False to search
	     *     backward.
	     * @param {boolean} wordEnd True to move to end of word. False to move to
	     *     beginning of word.
	     * @param {boolean} bigWord True if punctuation count as part of the word.
	     *     False if only alphabet characters count as part of the word.
	     * @return {Cursor} The position the cursor should move to.
	     */
	    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {
	      var curStart = copyCursor(cur);
	      var words = [];
	      if (forward && !wordEnd || !forward && wordEnd) {
	        repeat++;
	      }
	      // For 'e', empty lines are not considered words, go figure.
	      var emptyLineIsWord = !(forward && wordEnd);
	      for (var i = 0; i < repeat; i++) {
	        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);
	        if (!word) {
	          var eodCh = lineLength(cm, cm.lastLine());
	          words.push(forward
	              ? {line: cm.lastLine(), from: eodCh, to: eodCh}
	              : {line: 0, from: 0, to: 0});
	          break;
	        }
	        words.push(word);
	        cur = Pos(word.line, forward ? (word.to - 1) : word.from);
	      }
	      var shortCircuit = words.length != repeat;
	      var firstWord = words[0];
	      var lastWord = words.pop();
	      if (forward && !wordEnd) {
	        // w
	        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {
	          // We did not start in the middle of a word. Discard the extra word at the end.
	          lastWord = words.pop();
	        }
	        return Pos(lastWord.line, lastWord.from);
	      } else if (forward && wordEnd) {
	        return Pos(lastWord.line, lastWord.to - 1);
	      } else if (!forward && wordEnd) {
	        // ge
	        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {
	          // We did not start in the middle of a word. Discard the extra word at the end.
	          lastWord = words.pop();
	        }
	        return Pos(lastWord.line, lastWord.to);
	      } else {
	        // b
	        return Pos(lastWord.line, lastWord.from);
	      }
	    }
	
	    function moveToCharacter(cm, repeat, forward, character) {
	      var cur = cm.getCursor();
	      var start = cur.ch;
	      var idx;
	      for (var i = 0; i < repeat; i ++) {
	        var line = cm.getLine(cur.line);
	        idx = charIdxInLine(start, line, character, forward, true);
	        if (idx == -1) {
	          return null;
	        }
	        start = idx;
	      }
	      return Pos(cm.getCursor().line, idx);
	    }
	
	    function moveToColumn(cm, repeat) {
	      // repeat is always >= 1, so repeat - 1 always corresponds
	      // to the column we want to go to.
	      var line = cm.getCursor().line;
	      return clipCursorToContent(cm, Pos(line, repeat - 1));
	    }
	
	    function updateMark(cm, vim, markName, pos) {
	      if (!inArray(markName, validMarks)) {
	        return;
	      }
	      if (vim.marks[markName]) {
	        vim.marks[markName].clear();
	      }
	      vim.marks[markName] = cm.setBookmark(pos);
	    }
	
	    function charIdxInLine(start, line, character, forward, includeChar) {
	      // Search for char in line.
	      // motion_options: {forward, includeChar}
	      // If includeChar = true, include it too.
	      // If forward = true, search forward, else search backwards.
	      // If char is not found on this line, do nothing
	      var idx;
	      if (forward) {
	        idx = line.indexOf(character, start + 1);
	        if (idx != -1 && !includeChar) {
	          idx -= 1;
	        }
	      } else {
	        idx = line.lastIndexOf(character, start - 1);
	        if (idx != -1 && !includeChar) {
	          idx += 1;
	        }
	      }
	      return idx;
	    }
	
	    function findParagraph(cm, head, repeat, dir, inclusive) {
	      var line = head.line;
	      var min = cm.firstLine();
	      var max = cm.lastLine();
	      var start, end, i = line;
	      function isEmpty(i) { return !cm.getLine(i); }
	      function isBoundary(i, dir, any) {
	        if (any) { return isEmpty(i) != isEmpty(i + dir); }
	        return !isEmpty(i) && isEmpty(i + dir);
	      }
	      if (dir) {
	        while (min <= i && i <= max && repeat > 0) {
	          if (isBoundary(i, dir)) { repeat--; }
	          i += dir;
	        }
	        return new Pos(i, 0);
	      }
	
	      var vim = cm.state.vim;
	      if (vim.visualLine && isBoundary(line, 1, true)) {
	        var anchor = vim.sel.anchor;
	        if (isBoundary(anchor.line, -1, true)) {
	          if (!inclusive || anchor.line != line) {
	            line += 1;
	          }
	        }
	      }
	      var startState = isEmpty(line);
	      for (i = line; i <= max && repeat; i++) {
	        if (isBoundary(i, 1, true)) {
	          if (!inclusive || isEmpty(i) != startState) {
	            repeat--;
	          }
	        }
	      }
	      end = new Pos(i, 0);
	      // select boundary before paragraph for the last one
	      if (i > max && !startState) { startState = true; }
	      else { inclusive = false; }
	      for (i = line; i > min; i--) {
	        if (!inclusive || isEmpty(i) == startState || i == line) {
	          if (isBoundary(i, -1, true)) { break; }
	        }
	      }
	      start = new Pos(i, 0);
	      return { start: start, end: end };
	    }
	
	    // TODO: perhaps this finagling of start and end positions belonds
	    // in codemirror/replaceRange?
	    function selectCompanionObject(cm, head, symb, inclusive) {
	      var cur = head, start, end;
	
	      var bracketRegexp = ({
	        '(': /[()]/, ')': /[()]/,
	        '[': /[[\]]/, ']': /[[\]]/,
	        '{': /[{}]/, '}': /[{}]/})[symb];
	      var openSym = ({
	        '(': '(', ')': '(',
	        '[': '[', ']': '[',
	        '{': '{', '}': '{'})[symb];
	      var curChar = cm.getLine(cur.line).charAt(cur.ch);
	      // Due to the behavior of scanForBracket, we need to add an offset if the
	      // cursor is on a matching open bracket.
	      var offset = curChar === openSym ? 1 : 0;
	
	      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, null, {'bracketRegex': bracketRegexp});
	      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, null, {'bracketRegex': bracketRegexp});
	
	      if (!start || !end) {
	        return { start: cur, end: cur };
	      }
	
	      start = start.pos;
	      end = end.pos;
	
	      if ((start.line == end.line && start.ch > end.ch)
	          || (start.line > end.line)) {
	        var tmp = start;
	        start = end;
	        end = tmp;
	      }
	
	      if (inclusive) {
	        end.ch += 1;
	      } else {
	        start.ch += 1;
	      }
	
	      return { start: start, end: end };
	    }
	
	    // Takes in a symbol and a cursor and tries to simulate text objects that
	    // have identical opening and closing symbols
	    // TODO support across multiple lines
	    function findBeginningAndEnd(cm, head, symb, inclusive) {
	      var cur = copyCursor(head);
	      var line = cm.getLine(cur.line);
	      var chars = line.split('');
	      var start, end, i, len;
	      var firstIndex = chars.indexOf(symb);
	
	      // the decision tree is to always look backwards for the beginning first,
	      // but if the cursor is in front of the first instance of the symb,
	      // then move the cursor forward
	      if (cur.ch < firstIndex) {
	        cur.ch = firstIndex;
	        // Why is this line even here???
	        // cm.setCursor(cur.line, firstIndex+1);
	      }
	      // otherwise if the cursor is currently on the closing symbol
	      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {
	        end = cur.ch; // assign end to the current cursor
	        --cur.ch; // make sure to look backwards
	      }
	
	      // if we're currently on the symbol, we've got a start
	      if (chars[cur.ch] == symb && !end) {
	        start = cur.ch + 1; // assign start to ahead of the cursor
	      } else {
	        // go backwards to find the start
	        for (i = cur.ch; i > -1 && !start; i--) {
	          if (chars[i] == symb) {
	            start = i + 1;
	          }
	        }
	      }
	
	      // look forwards for the end symbol
	      if (start && !end) {
	        for (i = start, len = chars.length; i < len && !end; i++) {
	          if (chars[i] == symb) {
	            end = i;
	          }
	        }
	      }
	
	      // nothing found
	      if (!start || !end) {
	        return { start: cur, end: cur };
	      }
	
	      // include the symbols
	      if (inclusive) {
	        --start; ++end;
	      }
	
	      return {
	        start: Pos(cur.line, start),
	        end: Pos(cur.line, end)
	      };
	    }
	
	    // Search functions
	    defineOption('pcre', true, 'boolean');
	    function SearchState() {}
	    SearchState.prototype = {
	      getQuery: function() {
	        return vimGlobalState.query;
	      },
	      setQuery: function(query) {
	        vimGlobalState.query = query;
	      },
	      getOverlay: function() {
	        return this.searchOverlay;
	      },
	      setOverlay: function(overlay) {
	        this.searchOverlay = overlay;
	      },
	      isReversed: function() {
	        return vimGlobalState.isReversed;
	      },
	      setReversed: function(reversed) {
	        vimGlobalState.isReversed = reversed;
	      },
	      getScrollbarAnnotate: function() {
	        return this.annotate;
	      },
	      setScrollbarAnnotate: function(annotate) {
	        this.annotate = annotate;
	      }
	    };
	    function getSearchState(cm) {
	      var vim = cm.state.vim;
	      return vim.searchState_ || (vim.searchState_ = new SearchState());
	    }
	    function dialog(cm, template, shortText, onClose, options) {
	      if (cm.openDialog) {
	        cm.openDialog(template, onClose, { bottom: true, value: options.value,
	            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,
	            selectValueOnOpen: false});
	      }
	      else {
	        onClose(prompt(shortText, ''));
	      }
	    }
	    function splitBySlash(argString) {
	      var slashes = findUnescapedSlashes(argString) || [];
	      if (!slashes.length) return [];
	      var tokens = [];
	      // in case of strings like foo/bar
	      if (slashes[0] !== 0) return;
	      for (var i = 0; i < slashes.length; i++) {
	        if (typeof slashes[i] == 'number')
	          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));
	      }
	      return tokens;
	    }
	
	    function findUnescapedSlashes(str) {
	      var escapeNextChar = false;
	      var slashes = [];
	      for (var i = 0; i < str.length; i++) {
	        var c = str.charAt(i);
	        if (!escapeNextChar && c == '/') {
	          slashes.push(i);
	        }
	        escapeNextChar = !escapeNextChar && (c == '\\');
	      }
	      return slashes;
	    }
	
	    // Translates a search string from ex (vim) syntax into javascript form.
	    function translateRegex(str) {
	      // When these match, add a '\' if unescaped or remove one if escaped.
	      var specials = '|(){';
	      // Remove, but never add, a '\' for these.
	      var unescape = '}';
	      var escapeNextChar = false;
	      var out = [];
	      for (var i = -1; i < str.length; i++) {
	        var c = str.charAt(i) || '';
	        var n = str.charAt(i+1) || '';
	        var specialComesNext = (n && specials.indexOf(n) != -1);
	        if (escapeNextChar) {
	          if (c !== '\\' || !specialComesNext) {
	            out.push(c);
	          }
	          escapeNextChar = false;
	        } else {
	          if (c === '\\') {
	            escapeNextChar = true;
	            // Treat the unescape list as special for removing, but not adding '\'.
	            if (n && unescape.indexOf(n) != -1) {
	              specialComesNext = true;
	            }
	            // Not passing this test means removing a '\'.
	            if (!specialComesNext || n === '\\') {
	              out.push(c);
	            }
	          } else {
	            out.push(c);
	            if (specialComesNext && n !== '\\') {
	              out.push('\\');
	            }
	          }
	        }
	      }
	      return out.join('');
	    }
	
	    // Translates the replace part of a search and replace from ex (vim) syntax into
	    // javascript form.  Similar to translateRegex, but additionally fixes back references
	    // (translates '\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.
	    var charUnescapes = {'\\n': '\n', '\\r': '\r', '\\t': '\t'};
	    function translateRegexReplace(str) {
	      var escapeNextChar = false;
	      var out = [];
	      for (var i = -1; i < str.length; i++) {
	        var c = str.charAt(i) || '';
	        var n = str.charAt(i+1) || '';
	        if (charUnescapes[c + n]) {
	          out.push(charUnescapes[c+n]);
	          i++;
	        } else if (escapeNextChar) {
	          // At any point in the loop, escapeNextChar is true if the previous
	          // character was a '\' and was not escaped.
	          out.push(c);
	          escapeNextChar = false;
	        } else {
	          if (c === '\\') {
	            escapeNextChar = true;
	            if ((isNumber(n) || n === '$')) {
	              out.push('$');
	            } else if (n !== '/' && n !== '\\') {
	              out.push('\\');
	            }
	          } else {
	            if (c === '$') {
	              out.push('$');
	            }
	            out.push(c);
	            if (n === '/') {
	              out.push('\\');
	            }
	          }
	        }
	      }
	      return out.join('');
	    }
	
	    // Unescape \ and / in the replace part, for PCRE mode.
	    var unescapes = {'\\/': '/', '\\\\': '\\', '\\n': '\n', '\\r': '\r', '\\t': '\t'};
	    function unescapeRegexReplace(str) {
	      var stream = new CodeMirror.StringStream(str);
	      var output = [];
	      while (!stream.eol()) {
	        // Search for \.
	        while (stream.peek() && stream.peek() != '\\') {
	          output.push(stream.next());
	        }
	        var matched = false;
	        for (var matcher in unescapes) {
	          if (stream.match(matcher, true)) {
	            matched = true;
	            output.push(unescapes[matcher]);
	            break;
	          }
	        }
	        if (!matched) {
	          // Don't change anything
	          output.push(stream.next());
	        }
	      }
	      return output.join('');
	    }
	
	    /**
	     * Extract the regular expression from the query and return a Regexp object.
	     * Returns null if the query is blank.
	     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.
	     * If smartCase is passed in, and the query contains upper case letters,
	     *   then ignoreCase is overridden, and the 'i' flag will not be set.
	     * If the query contains the /i in the flag part of the regular expression,
	     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed
	     *   through to the Regex object.
	     */
	    function parseQuery(query, ignoreCase, smartCase) {
	      // First update the last search register
	      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');
	      lastSearchRegister.setText(query);
	      // Check if the query is already a regex.
	      if (query instanceof RegExp) { return query; }
	      // First try to extract regex + flags from the input. If no flags found,
	      // extract just the regex. IE does not accept flags directly defined in
	      // the regex string in the form /regex/flags
	      var slashes = findUnescapedSlashes(query);
	      var regexPart;
	      var forceIgnoreCase;
	      if (!slashes.length) {
	        // Query looks like 'regexp'
	        regexPart = query;
	      } else {
	        // Query looks like 'regexp/...'
	        regexPart = query.substring(0, slashes[0]);
	        var flagsPart = query.substring(slashes[0]);
	        forceIgnoreCase = (flagsPart.indexOf('i') != -1);
	      }
	      if (!regexPart) {
	        return null;
	      }
	      if (!getOption('pcre')) {
	        regexPart = translateRegex(regexPart);
	      }
	      if (smartCase) {
	        ignoreCase = (/^[^A-Z]*$/).test(regexPart);
	      }
	      var regexp = new RegExp(regexPart,
	          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);
	      return regexp;
	    }
	    function showConfirm(cm, text) {
	      if (cm.openNotification) {
	        cm.openNotification('<span style="color: red">' + text + '</span>',
	                            {bottom: true, duration: 5000});
	      } else {
	        alert(text);
	      }
	    }
	    function makePrompt(prefix, desc) {
	      var raw = '<span style="font-family: monospace; white-space: pre">' +
	          (prefix || "") + '<input type="text"></span>';
	      if (desc)
	        raw += ' <span style="color: #888">' + desc + '</span>';
	      return raw;
	    }
	    var searchPromptDesc = '(Javascript regexp)';
	    function showPrompt(cm, options) {
	      var shortText = (options.prefix || '') + ' ' + (options.desc || '');
	      var prompt = makePrompt(options.prefix, options.desc);
	      dialog(cm, prompt, shortText, options.onClose, options);
	    }
	    function regexEqual(r1, r2) {
	      if (r1 instanceof RegExp && r2 instanceof RegExp) {
	          var props = ['global', 'multiline', 'ignoreCase', 'source'];
	          for (var i = 0; i < props.length; i++) {
	              var prop = props[i];
	              if (r1[prop] !== r2[prop]) {
	                  return false;
	              }
	          }
	          return true;
	      }
	      return false;
	    }
	    // Returns true if the query is valid.
	    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {
	      if (!rawQuery) {
	        return;
	      }
	      var state = getSearchState(cm);
	      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);
	      if (!query) {
	        return;
	      }
	      highlightSearchMatches(cm, query);
	      if (regexEqual(query, state.getQuery())) {
	        return query;
	      }
	      state.setQuery(query);
	      return query;
	    }
	    function searchOverlay(query) {
	      if (query.source.charAt(0) == '^') {
	        var matchSol = true;
	      }
	      return {
	        token: function(stream) {
	          if (matchSol && !stream.sol()) {
	            stream.skipToEnd();
	            return;
	          }
	          var match = stream.match(query, false);
	          if (match) {
	            if (match[0].length == 0) {
	              // Matched empty string, skip to next.
	              stream.next();
	              return 'searching';
	            }
	            if (!stream.sol()) {
	              // Backtrack 1 to match \b
	              stream.backUp(1);
	              if (!query.exec(stream.next() + match[0])) {
	                stream.next();
	                return null;
	              }
	            }
	            stream.match(query);
	            return 'searching';
	          }
	          while (!stream.eol()) {
	            stream.next();
	            if (stream.match(query, false)) break;
	          }
	        },
	        query: query
	      };
	    }
	    function highlightSearchMatches(cm, query) {
	      var searchState = getSearchState(cm);
	      var overlay = searchState.getOverlay();
	      if (!overlay || query != overlay.query) {
	        if (overlay) {
	          cm.removeOverlay(overlay);
	        }
	        overlay = searchOverlay(query);
	        cm.addOverlay(overlay);
	        if (cm.showMatchesOnScrollbar) {
	          if (searchState.getScrollbarAnnotate()) {
	            searchState.getScrollbarAnnotate().clear();
	          }
	          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));
	        }
	        searchState.setOverlay(overlay);
	      }
	    }
	    function findNext(cm, prev, query, repeat) {
	      if (repeat === undefined) { repeat = 1; }
	      return cm.operation(function() {
	        var pos = cm.getCursor();
	        var cursor = cm.getSearchCursor(query, pos);
	        for (var i = 0; i < repeat; i++) {
	          var found = cursor.find(prev);
	          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }
	          if (!found) {
	            // SearchCursor may have returned null because it hit EOF, wrap
	            // around and try again.
	            cursor = cm.getSearchCursor(query,
	                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );
	            if (!cursor.find(prev)) {
	              return;
	            }
	          }
	        }
	        return cursor.from();
	      });
	    }
	    function clearSearchHighlight(cm) {
	      var state = getSearchState(cm);
	      cm.removeOverlay(getSearchState(cm).getOverlay());
	      state.setOverlay(null);
	      if (state.getScrollbarAnnotate()) {
	        state.getScrollbarAnnotate().clear();
	        state.setScrollbarAnnotate(null);
	      }
	    }
	    /**
	     * Check if pos is in the specified range, INCLUSIVE.
	     * Range can be specified with 1 or 2 arguments.
	     * If the first range argument is an array, treat it as an array of line
	     * numbers. Match pos against any of the lines.
	     * If the first range argument is a number,
	     *   if there is only 1 range argument, check if pos has the same line
	     *       number
	     *   if there are 2 range arguments, then check if pos is in between the two
	     *       range arguments.
	     */
	    function isInRange(pos, start, end) {
	      if (typeof pos != 'number') {
	        // Assume it is a cursor position. Get the line number.
	        pos = pos.line;
	      }
	      if (start instanceof Array) {
	        return inArray(pos, start);
	      } else {
	        if (end) {
	          return (pos >= start && pos <= end);
	        } else {
	          return pos == start;
	        }
	      }
	    }
	    function getUserVisibleLines(cm) {
	      var scrollInfo = cm.getScrollInfo();
	      var occludeToleranceTop = 6;
	      var occludeToleranceBottom = 10;
	      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');
	      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;
	      var to = cm.coordsChar({left:0, top: bottomY}, 'local');
	      return {top: from.line, bottom: to.line};
	    }
	
	    var ExCommandDispatcher = function() {
	      this.buildCommandMap_();
	    };
	    ExCommandDispatcher.prototype = {
	      processCommand: function(cm, input, opt_params) {
	        var that = this;
	        cm.operation(function () {
	          cm.curOp.isVimOp = true;
	          that._processCommand(cm, input, opt_params);
	        });
	      },
	      _processCommand: function(cm, input, opt_params) {
	        var vim = cm.state.vim;
	        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');
	        var previousCommand = commandHistoryRegister.toString();
	        if (vim.visualMode) {
	          exitVisualMode(cm);
	        }
	        var inputStream = new CodeMirror.StringStream(input);
	        // update ": with the latest command whether valid or invalid
	        commandHistoryRegister.setText(input);
	        var params = opt_params || {};
	        params.input = input;
	        try {
	          this.parseInput_(cm, inputStream, params);
	        } catch(e) {
	          showConfirm(cm, e);
	          throw e;
	        }
	        var command;
	        var commandName;
	        if (!params.commandName) {
	          // If only a line range is defined, move to the line.
	          if (params.line !== undefined) {
	            commandName = 'move';
	          }
	        } else {
	          command = this.matchCommand_(params.commandName);
	          if (command) {
	            commandName = command.name;
	            if (command.excludeFromCommandHistory) {
	              commandHistoryRegister.setText(previousCommand);
	            }
	            this.parseCommandArgs_(inputStream, params, command);
	            if (command.type == 'exToKey') {
	              // Handle Ex to Key mapping.
	              for (var i = 0; i < command.toKeys.length; i++) {
	                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');
	              }
	              return;
	            } else if (command.type == 'exToEx') {
	              // Handle Ex to Ex mapping.
	              this.processCommand(cm, command.toInput);
	              return;
	            }
	          }
	        }
	        if (!commandName) {
	          showConfirm(cm, 'Not an editor command ":' + input + '"');
	          return;
	        }
	        try {
	          exCommands[commandName](cm, params);
	          // Possibly asynchronous commands (e.g. substitute, which might have a
	          // user confirmation), are responsible for calling the callback when
	          // done. All others have it taken care of for them here.
	          if ((!command || !command.possiblyAsync) && params.callback) {
	            params.callback();
	          }
	        } catch(e) {
	          showConfirm(cm, e);
	          throw e;
	        }
	      },
	      parseInput_: function(cm, inputStream, result) {
	        inputStream.eatWhile(':');
	        // Parse range.
	        if (inputStream.eat('%')) {
	          result.line = cm.firstLine();
	          result.lineEnd = cm.lastLine();
	        } else {
	          result.line = this.parseLineSpec_(cm, inputStream);
	          if (result.line !== undefined && inputStream.eat(',')) {
	            result.lineEnd = this.parseLineSpec_(cm, inputStream);
	          }
	        }
	
	        // Parse command name.
	        var commandMatch = inputStream.match(/^(\w+)/);
	        if (commandMatch) {
	          result.commandName = commandMatch[1];
	        } else {
	          result.commandName = inputStream.match(/.*/)[0];
	        }
	
	        return result;
	      },
	      parseLineSpec_: function(cm, inputStream) {
	        var numberMatch = inputStream.match(/^(\d+)/);
	        if (numberMatch) {
	          return parseInt(numberMatch[1], 10) - 1;
	        }
	        switch (inputStream.next()) {
	          case '.':
	            return cm.getCursor().line;
	          case '$':
	            return cm.lastLine();
	          case '\'':
	            var mark = cm.state.vim.marks[inputStream.next()];
	            if (mark && mark.find()) {
	              return mark.find().line;
	            }
	            throw new Error('Mark not set');
	          default:
	            inputStream.backUp(1);
	            return undefined;
	        }
	      },
	      parseCommandArgs_: function(inputStream, params, command) {
	        if (inputStream.eol()) {
	          return;
	        }
	        params.argString = inputStream.match(/.*/)[0];
	        // Parse command-line arguments
	        var delim = command.argDelimiter || /\s+/;
	        var args = trim(params.argString).split(delim);
	        if (args.length && args[0]) {
	          params.args = args;
	        }
	      },
	      matchCommand_: function(commandName) {
	        // Return the command in the command map that matches the shortest
	        // prefix of the passed in command name. The match is guaranteed to be
	        // unambiguous if the defaultExCommandMap's shortNames are set up
	        // correctly. (see @code{defaultExCommandMap}).
	        for (var i = commandName.length; i > 0; i--) {
	          var prefix = commandName.substring(0, i);
	          if (this.commandMap_[prefix]) {
	            var command = this.commandMap_[prefix];
	            if (command.name.indexOf(commandName) === 0) {
	              return command;
	            }
	          }
	        }
	        return null;
	      },
	      buildCommandMap_: function() {
	        this.commandMap_ = {};
	        for (var i = 0; i < defaultExCommandMap.length; i++) {
	          var command = defaultExCommandMap[i];
	          var key = command.shortName || command.name;
	          this.commandMap_[key] = command;
	        }
	      },
	      map: function(lhs, rhs, ctx) {
	        if (lhs != ':' && lhs.charAt(0) == ':') {
	          if (ctx) { throw Error('Mode not supported for ex mappings'); }
	          var commandName = lhs.substring(1);
	          if (rhs != ':' && rhs.charAt(0) == ':') {
	            // Ex to Ex mapping
	            this.commandMap_[commandName] = {
	              name: commandName,
	              type: 'exToEx',
	              toInput: rhs.substring(1),
	              user: true
	            };
	          } else {
	            // Ex to key mapping
	            this.commandMap_[commandName] = {
	              name: commandName,
	              type: 'exToKey',
	              toKeys: rhs,
	              user: true
	            };
	          }
	        } else {
	          if (rhs != ':' && rhs.charAt(0) == ':') {
	            // Key to Ex mapping.
	            var mapping = {
	              keys: lhs,
	              type: 'keyToEx',
	              exArgs: { input: rhs.substring(1) },
	              user: true};
	            if (ctx) { mapping.context = ctx; }
	            defaultKeymap.unshift(mapping);
	          } else {
	            // Key to key mapping
	            var mapping = {
	              keys: lhs,
	              type: 'keyToKey',
	              toKeys: rhs,
	              user: true
	            };
	            if (ctx) { mapping.context = ctx; }
	            defaultKeymap.unshift(mapping);
	          }
	        }
	      },
	      unmap: function(lhs, ctx) {
	        if (lhs != ':' && lhs.charAt(0) == ':') {
	          // Ex to Ex or Ex to key mapping
	          if (ctx) { throw Error('Mode not supported for ex mappings'); }
	          var commandName = lhs.substring(1);
	          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {
	            delete this.commandMap_[commandName];
	            return;
	          }
	        } else {
	          // Key to Ex or key to key mapping
	          var keys = lhs;
	          for (var i = 0; i < defaultKeymap.length; i++) {
	            if (keys == defaultKeymap[i].keys
	                && defaultKeymap[i].context === ctx
	                && defaultKeymap[i].user) {
	              defaultKeymap.splice(i, 1);
	              return;
	            }
	          }
	        }
	        throw Error('No such mapping.');
	      }
	    };
	
	    var exCommands = {
	      colorscheme: function(cm, params) {
	        if (!params.args || params.args.length < 1) {
	          showConfirm(cm, cm.getOption('theme'));
	          return;
	        }
	        cm.setOption('theme', params.args[0]);
	      },
	      map: function(cm, params, ctx) {
	        var mapArgs = params.args;
	        if (!mapArgs || mapArgs.length < 2) {
	          if (cm) {
	            showConfirm(cm, 'Invalid mapping: ' + params.input);
	          }
	          return;
	        }
	        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);
	      },
	      imap: function(cm, params) { this.map(cm, params, 'insert'); },
	      nmap: function(cm, params) { this.map(cm, params, 'normal'); },
	      vmap: function(cm, params) { this.map(cm, params, 'visual'); },
	      unmap: function(cm, params, ctx) {
	        var mapArgs = params.args;
	        if (!mapArgs || mapArgs.length < 1) {
	          if (cm) {
	            showConfirm(cm, 'No such mapping: ' + params.input);
	          }
	          return;
	        }
	        exCommandDispatcher.unmap(mapArgs[0], ctx);
	      },
	      move: function(cm, params) {
	        commandDispatcher.processCommand(cm, cm.state.vim, {
	            type: 'motion',
	            motion: 'moveToLineOrEdgeOfDocument',
	            motionArgs: { forward: false, explicitRepeat: true,
	              linewise: true },
	            repeatOverride: params.line+1});
	      },
	      set: function(cm, params) {
	        var setArgs = params.args;
	        // Options passed through to the setOption/getOption calls. May be passed in by the
	        // local/global versions of the set command
	        var setCfg = params.setCfg || {};
	        if (!setArgs || setArgs.length < 1) {
	          if (cm) {
	            showConfirm(cm, 'Invalid mapping: ' + params.input);
	          }
	          return;
	        }
	        var expr = setArgs[0].split('=');
	        var optionName = expr[0];
	        var value = expr[1];
	        var forceGet = false;
	
	        if (optionName.charAt(optionName.length - 1) == '?') {
	          // If post-fixed with ?, then the set is actually a get.
	          if (value) { throw Error('Trailing characters: ' + params.argString); }
	          optionName = optionName.substring(0, optionName.length - 1);
	          forceGet = true;
	        }
	        if (value === undefined && optionName.substring(0, 2) == 'no') {
	          // To set boolean options to false, the option name is prefixed with
	          // 'no'.
	          optionName = optionName.substring(2);
	          value = false;
	        }
	
	        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';
	        if (optionIsBoolean && value == undefined) {
	          // Calling set with a boolean option sets it to true.
	          value = true;
	        }
	        // If no value is provided, then we assume this is a get.
	        if (!optionIsBoolean && value === undefined || forceGet) {
	          var oldValue = getOption(optionName, cm, setCfg);
	          if (oldValue === true || oldValue === false) {
	            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);
	          } else {
	            showConfirm(cm, '  ' + optionName + '=' + oldValue);
	          }
	        } else {
	          setOption(optionName, value, cm, setCfg);
	        }
	      },
	      setlocal: function (cm, params) {
	        // setCfg is passed through to setOption
	        params.setCfg = {scope: 'local'};
	        this.set(cm, params);
	      },
	      setglobal: function (cm, params) {
	        // setCfg is passed through to setOption
	        params.setCfg = {scope: 'global'};
	        this.set(cm, params);
	      },
	      registers: function(cm, params) {
	        var regArgs = params.args;
	        var registers = vimGlobalState.registerController.registers;
	        var regInfo = '----------Registers----------<br><br>';
	        if (!regArgs) {
	          for (var registerName in registers) {
	            var text = registers[registerName].toString();
	            if (text.length) {
	              regInfo += '"' + registerName + '    ' + text + '<br>';
	            }
	          }
	        } else {
	          var registerName;
	          regArgs = regArgs.join('');
	          for (var i = 0; i < regArgs.length; i++) {
	            registerName = regArgs.charAt(i);
	            if (!vimGlobalState.registerController.isValidRegister(registerName)) {
	              continue;
	            }
	            var register = registers[registerName] || new Register();
	            regInfo += '"' + registerName + '    ' + register.toString() + '<br>';
	          }
	        }
	        showConfirm(cm, regInfo);
	      },
	      sort: function(cm, params) {
	        var reverse, ignoreCase, unique, number;
	        function parseArgs() {
	          if (params.argString) {
	            var args = new CodeMirror.StringStream(params.argString);
	            if (args.eat('!')) { reverse = true; }
	            if (args.eol()) { return; }
	            if (!args.eatSpace()) { return 'Invalid arguments'; }
	            var opts = args.match(/[a-z]+/);
	            if (opts) {
	              opts = opts[0];
	              ignoreCase = opts.indexOf('i') != -1;
	              unique = opts.indexOf('u') != -1;
	              var decimal = opts.indexOf('d') != -1 && 1;
	              var hex = opts.indexOf('x') != -1 && 1;
	              var octal = opts.indexOf('o') != -1 && 1;
	              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }
	              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';
	            }
	            if (args.match(/\/.*\//)) { return 'patterns not supported'; }
	          }
	        }
	        var err = parseArgs();
	        if (err) {
	          showConfirm(cm, err + ': ' + params.argString);
	          return;
	        }
	        var lineStart = params.line || cm.firstLine();
	        var lineEnd = params.lineEnd || params.line || cm.lastLine();
	        if (lineStart == lineEnd) { return; }
	        var curStart = Pos(lineStart, 0);
	        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));
	        var text = cm.getRange(curStart, curEnd).split('\n');
	        var numberRegex = (number == 'decimal') ? /(-?)([\d]+)/ :
	           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :
	           (number == 'octal') ? /([0-7]+)/ : null;
	        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;
	        var numPart = [], textPart = [];
	        if (number) {
	          for (var i = 0; i < text.length; i++) {
	            if (numberRegex.exec(text[i])) {
	              numPart.push(text[i]);
	            } else {
	              textPart.push(text[i]);
	            }
	          }
	        } else {
	          textPart = text;
	        }
	        function compareFn(a, b) {
	          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }
	          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }
	          var anum = number && numberRegex.exec(a);
	          var bnum = number && numberRegex.exec(b);
	          if (!anum) { return a < b ? -1 : 1; }
	          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);
	          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);
	          return anum - bnum;
	        }
	        numPart.sort(compareFn);
	        textPart.sort(compareFn);
	        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);
	        if (unique) { // Remove duplicate lines
	          var textOld = text;
	          var lastLine;
	          text = [];
	          for (var i = 0; i < textOld.length; i++) {
	            if (textOld[i] != lastLine) {
	              text.push(textOld[i]);
	            }
	            lastLine = textOld[i];
	          }
	        }
	        cm.replaceRange(text.join('\n'), curStart, curEnd);
	      },
	      global: function(cm, params) {
	        // a global command is of the form
	        // :[range]g/pattern/[cmd]
	        // argString holds the string /pattern/[cmd]
	        var argString = params.argString;
	        if (!argString) {
	          showConfirm(cm, 'Regular Expression missing from global');
	          return;
	        }
	        // range is specified here
	        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();
	        var lineEnd = params.lineEnd || params.line || cm.lastLine();
	        // get the tokens from argString
	        var tokens = splitBySlash(argString);
	        var regexPart = argString, cmd;
	        if (tokens.length) {
	          regexPart = tokens[0];
	          cmd = tokens.slice(1, tokens.length).join('/');
	        }
	        if (regexPart) {
	          // If regex part is empty, then use the previous query. Otherwise
	          // use the regex part as the new query.
	          try {
	           updateSearchQuery(cm, regexPart, true /** ignoreCase */,
	             true /** smartCase */);
	          } catch (e) {
	           showConfirm(cm, 'Invalid regex: ' + regexPart);
	           return;
	          }
	        }
	        // now that we have the regexPart, search for regex matches in the
	        // specified range of lines
	        var query = getSearchState(cm).getQuery();
	        var matchedLines = [], content = '';
	        for (var i = lineStart; i <= lineEnd; i++) {
	          var matched = query.test(cm.getLine(i));
	          if (matched) {
	            matchedLines.push(i+1);
	            content+= cm.getLine(i) + '<br>';
	          }
	        }
	        // if there is no [cmd], just display the list of matched lines
	        if (!cmd) {
	          showConfirm(cm, content);
	          return;
	        }
	        var index = 0;
	        var nextCommand = function() {
	          if (index < matchedLines.length) {
	            var command = matchedLines[index] + cmd;
	            exCommandDispatcher.processCommand(cm, command, {
	              callback: nextCommand
	            });
	          }
	          index++;
	        };
	        nextCommand();
	      },
	      substitute: function(cm, params) {
	        if (!cm.getSearchCursor) {
	          throw new Error('Search feature not available. Requires searchcursor.js or ' +
	              'any other getSearchCursor implementation.');
	        }
	        var argString = params.argString;
	        var tokens = argString ? splitBySlash(argString) : [];
	        var regexPart, replacePart = '', trailing, flagsPart, count;
	        var confirm = false; // Whether to confirm each replace.
	        var global = false; // True to replace all instances on a line, false to replace only 1.
	        if (tokens.length) {
	          regexPart = tokens[0];
	          replacePart = tokens[1];
	          if (replacePart !== undefined) {
	            if (getOption('pcre')) {
	              replacePart = unescapeRegexReplace(replacePart);
	            } else {
	              replacePart = translateRegexReplace(replacePart);
	            }
	            vimGlobalState.lastSubstituteReplacePart = replacePart;
	          }
	          trailing = tokens[2] ? tokens[2].split(' ') : [];
	        } else {
	          // either the argString is empty or its of the form ' hello/world'
	          // actually splitBySlash returns a list of tokens
	          // only if the string starts with a '/'
	          if (argString && argString.length) {
	            showConfirm(cm, 'Substitutions should be of the form ' +
	                ':s/pattern/replace/');
	            return;
	          }
	        }
	        // After the 3rd slash, we can have flags followed by a space followed
	        // by count.
	        if (trailing) {
	          flagsPart = trailing[0];
	          count = parseInt(trailing[1]);
	          if (flagsPart) {
	            if (flagsPart.indexOf('c') != -1) {
	              confirm = true;
	              flagsPart.replace('c', '');
	            }
	            if (flagsPart.indexOf('g') != -1) {
	              global = true;
	              flagsPart.replace('g', '');
	            }
	            regexPart = regexPart + '/' + flagsPart;
	          }
	        }
	        if (regexPart) {
	          // If regex part is empty, then use the previous query. Otherwise use
	          // the regex part as the new query.
	          try {
	            updateSearchQuery(cm, regexPart, true /** ignoreCase */,
	              true /** smartCase */);
	          } catch (e) {
	            showConfirm(cm, 'Invalid regex: ' + regexPart);
	            return;
	          }
	        }
	        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;
	        if (replacePart === undefined) {
	          showConfirm(cm, 'No previous substitute regular expression');
	          return;
	        }
	        var state = getSearchState(cm);
	        var query = state.getQuery();
	        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;
	        var lineEnd = params.lineEnd || lineStart;
	        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {
	          lineEnd = Infinity;
	        }
	        if (count) {
	          lineStart = lineEnd;
	          lineEnd = lineStart + count - 1;
	        }
	        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));
	        var cursor = cm.getSearchCursor(query, startPos);
	        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);
	      },
	      redo: CodeMirror.commands.redo,
	      undo: CodeMirror.commands.undo,
	      write: function(cm) {
	        if (CodeMirror.commands.save) {
	          // If a save command is defined, call it.
	          CodeMirror.commands.save(cm);
	        } else if (cm.save) {
	          // Saves to text area if no save command is defined and cm.save() is available.
	          cm.save();
	        }
	      },
	      nohlsearch: function(cm) {
	        clearSearchHighlight(cm);
	      },
	      yank: function (cm) {
	        var cur = copyCursor(cm.getCursor());
	        var line = cur.line;
	        var lineText = cm.getLine(line);
	        vimGlobalState.registerController.pushText(
	          '0', 'yank', lineText, true, true);
	      },
	      delmarks: function(cm, params) {
	        if (!params.argString || !trim(params.argString)) {
	          showConfirm(cm, 'Argument required');
	          return;
	        }
	
	        var state = cm.state.vim;
	        var stream = new CodeMirror.StringStream(trim(params.argString));
	        while (!stream.eol()) {
	          stream.eatSpace();
	
	          // Record the streams position at the beginning of the loop for use
	          // in error messages.
	          var count = stream.pos;
	
	          if (!stream.match(/[a-zA-Z]/, false)) {
	            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));
	            return;
	          }
	
	          var sym = stream.next();
	          // Check if this symbol is part of a range
	          if (stream.match('-', true)) {
	            // This symbol is part of a range.
	
	            // The range must terminate at an alphabetic character.
	            if (!stream.match(/[a-zA-Z]/, false)) {
	              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));
	              return;
	            }
	
	            var startMark = sym;
	            var finishMark = stream.next();
	            // The range must terminate at an alphabetic character which
	            // shares the same case as the start of the range.
	            if (isLowerCase(startMark) && isLowerCase(finishMark) ||
	                isUpperCase(startMark) && isUpperCase(finishMark)) {
	              var start = startMark.charCodeAt(0);
	              var finish = finishMark.charCodeAt(0);
	              if (start >= finish) {
	                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));
	                return;
	              }
	
	              // Because marks are always ASCII values, and we have
	              // determined that they are the same case, we can use
	              // their char codes to iterate through the defined range.
	              for (var j = 0; j <= finish - start; j++) {
	                var mark = String.fromCharCode(start + j);
	                delete state.marks[mark];
	              }
	            } else {
	              showConfirm(cm, 'Invalid argument: ' + startMark + '-');
	              return;
	            }
	          } else {
	            // This symbol is a valid mark, and is not part of a range.
	            delete state.marks[sym];
	          }
	        }
	      }
	    };
	
	    var exCommandDispatcher = new ExCommandDispatcher();
	
	    /**
	    * @param {CodeMirror} cm CodeMirror instance we are in.
	    * @param {boolean} confirm Whether to confirm each replace.
	    * @param {Cursor} lineStart Line to start replacing from.
	    * @param {Cursor} lineEnd Line to stop replacing at.
	    * @param {RegExp} query Query for performing matches with.
	    * @param {string} replaceWith Text to replace matches with. May contain $1,
	    *     $2, etc for replacing captured groups using Javascript replace.
	    * @param {function()} callback A callback for when the replace is done.
	    */
	    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,
	        replaceWith, callback) {
	      // Set up all the functions.
	      cm.state.vim.exMode = true;
	      var done = false;
	      var lastPos = searchCursor.from();
	      function replaceAll() {
	        cm.operation(function() {
	          while (!done) {
	            replace();
	            next();
	          }
	          stop();
	        });
	      }
	      function replace() {
	        var text = cm.getRange(searchCursor.from(), searchCursor.to());
	        var newText = text.replace(query, replaceWith);
	        searchCursor.replace(newText);
	      }
	      function next() {
	        // The below only loops to skip over multiple occurrences on the same
	        // line when 'global' is not true.
	        while(searchCursor.findNext() &&
	              isInRange(searchCursor.from(), lineStart, lineEnd)) {
	          if (!global && lastPos && searchCursor.from().line == lastPos.line) {
	            continue;
	          }
	          cm.scrollIntoView(searchCursor.from(), 30);
	          cm.setSelection(searchCursor.from(), searchCursor.to());
	          lastPos = searchCursor.from();
	          done = false;
	          return;
	        }
	        done = true;
	      }
	      function stop(close) {
	        if (close) { close(); }
	        cm.focus();
	        if (lastPos) {
	          cm.setCursor(lastPos);
	          var vim = cm.state.vim;
	          vim.exMode = false;
	          vim.lastHPos = vim.lastHSPos = lastPos.ch;
	        }
	        if (callback) { callback(); }
	      }
	      function onPromptKeyDown(e, _value, close) {
	        // Swallow all keys.
	        CodeMirror.e_stop(e);
	        var keyName = CodeMirror.keyName(e);
	        switch (keyName) {
	          case 'Y':
	            replace(); next(); break;
	          case 'N':
	            next(); break;
	          case 'A':
	            // replaceAll contains a call to close of its own. We don't want it
	            // to fire too early or multiple times.
	            var savedCallback = callback;
	            callback = undefined;
	            cm.operation(replaceAll);
	            callback = savedCallback;
	            break;
	          case 'L':
	            replace();
	            // fall through and exit.
	          case 'Q':
	          case 'Esc':
	          case 'Ctrl-C':
	          case 'Ctrl-[':
	            stop(close);
	            break;
	        }
	        if (done) { stop(close); }
	        return true;
	      }
	
	      // Actually do replace.
	      next();
	      if (done) {
	        showConfirm(cm, 'No matches for ' + query.source);
	        return;
	      }
	      if (!confirm) {
	        replaceAll();
	        if (callback) { callback(); };
	        return;
	      }
	      showPrompt(cm, {
	        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',
	        onKeyDown: onPromptKeyDown
	      });
	    }
	
	    CodeMirror.keyMap.vim = {
	      attach: attachVimMap,
	      detach: detachVimMap,
	      call: cmKey
	    };
	
	    function exitInsertMode(cm) {
	      var vim = cm.state.vim;
	      var macroModeState = vimGlobalState.macroModeState;
	      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');
	      var isPlaying = macroModeState.isPlaying;
	      var lastChange = macroModeState.lastInsertModeChanges;
	      // In case of visual block, the insertModeChanges are not saved as a
	      // single word, so we convert them to a single word
	      // so as to update the ". register as expected in real vim.
	      var text = [];
	      if (!isPlaying) {
	        var selLength = lastChange.inVisualBlock ? vim.lastSelection.visualBlock.height : 1;
	        var changes = lastChange.changes;
	        var text = [];
	        var i = 0;
	        // In case of multiple selections in blockwise visual,
	        // the inserted text, for example: 'f<Backspace>oo', is stored as
	        // 'f', 'f', InsertModeKey 'o', 'o', 'o', 'o'. (if you have a block with 2 lines).
	        // We push the contents of the changes array as per the following:
	        // 1. In case of InsertModeKey, just increment by 1.
	        // 2. In case of a character, jump by selLength (2 in the example).
	        while (i < changes.length) {
	          // This loop will convert 'ff<bs>oooo' to 'f<bs>oo'.
	          text.push(changes[i]);
	          if (changes[i] instanceof InsertModeKey) {
	             i++;
	          } else {
	             i+= selLength;
	          }
	        }
	        lastChange.changes = text;
	        cm.off('change', onChange);
	        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);
	      }
	      if (!isPlaying && vim.insertModeRepeat > 1) {
	        // Perform insert mode repeat for commands like 3,a and 3,o.
	        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,
	            true /** repeatForInsert */);
	        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;
	      }
	      delete vim.insertModeRepeat;
	      vim.insertMode = false;
	      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);
	      cm.setOption('keyMap', 'vim');
	      cm.setOption('disableInput', true);
	      cm.toggleOverwrite(false); // exit replace mode if we were in it.
	      // update the ". register before exiting insert mode
	      insertModeChangeRegister.setText(lastChange.changes.join(''));
	      CodeMirror.signal(cm, "vim-mode-change", {mode: "normal"});
	      if (macroModeState.isRecording) {
	        logInsertModeChange(macroModeState);
	      }
	    }
	
	    function _mapCommand(command) {
	      defaultKeymap.unshift(command);
	    }
	
	    function mapCommand(keys, type, name, args, extra) {
	      var command = {keys: keys, type: type};
	      command[type] = name;
	      command[type + "Args"] = args;
	      for (var key in extra)
	        command[key] = extra[key];
	      _mapCommand(command);
	    }
	
	    // The timeout in milliseconds for the two-character ESC keymap should be
	    // adjusted according to your typing speed to prevent false positives.
	    defineOption('insertModeEscKeysTimeout', 200, 'number');
	
	    CodeMirror.keyMap['vim-insert'] = {
	      // TODO: override navigation keys so that Esc will cancel automatic
	      // indentation from o, O, i_<CR>
	      'Ctrl-N': 'autocomplete',
	      'Ctrl-P': 'autocomplete',
	      'Enter': function(cm) {
	        var fn = CodeMirror.commands.newlineAndIndentContinueComment ||
	            CodeMirror.commands.newlineAndIndent;
	        fn(cm);
	      },
	      fallthrough: ['default'],
	      attach: attachVimMap,
	      detach: detachVimMap,
	      call: cmKey
	    };
	
	    CodeMirror.keyMap['vim-replace'] = {
	      'Backspace': 'goCharLeft',
	      fallthrough: ['vim-insert'],
	      attach: attachVimMap,
	      detach: detachVimMap,
	      call: cmKey
	    };
	
	    function executeMacroRegister(cm, vim, macroModeState, registerName) {
	      var register = vimGlobalState.registerController.getRegister(registerName);
	      if (registerName == ':') {
	        // Read-only register containing last Ex command.
	        if (register.keyBuffer[0]) {
	          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);
	        }
	        macroModeState.isPlaying = false;
	        return;
	      }
	      var keyBuffer = register.keyBuffer;
	      var imc = 0;
	      macroModeState.isPlaying = true;
	      macroModeState.replaySearchQueries = register.searchQueries.slice(0);
	      for (var i = 0; i < keyBuffer.length; i++) {
	        var text = keyBuffer[i];
	        var match, key;
	        while (text) {
	          // Pull off one command key, which is either a single character
	          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.
	          match = (/<\w+-.+?>|<\w+>|./).exec(text);
	          key = match[0];
	          text = text.substring(match.index + key.length);
	          CodeMirror.Vim.handleKey(cm, key, 'macro');
	          if (vim.insertMode) {
	            var changes = register.insertModeChanges[imc++].changes;
	            vimGlobalState.macroModeState.lastInsertModeChanges.changes =
	                changes;
	            repeatInsertModeChanges(cm, changes, 1);
	            exitInsertMode(cm);
	          }
	        }
	      };
	      macroModeState.isPlaying = false;
	    }
	
	    function logKey(macroModeState, key) {
	      if (macroModeState.isPlaying) { return; }
	      var registerName = macroModeState.latestRegister;
	      var register = vimGlobalState.registerController.getRegister(registerName);
	      if (register) {
	        register.pushText(key);
	      }
	    }
	
	    function logInsertModeChange(macroModeState) {
	      if (macroModeState.isPlaying) { return; }
	      var registerName = macroModeState.latestRegister;
	      var register = vimGlobalState.registerController.getRegister(registerName);
	      if (register && register.pushInsertModeChanges) {
	        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);
	      }
	    }
	
	    function logSearchQuery(macroModeState, query) {
	      if (macroModeState.isPlaying) { return; }
	      var registerName = macroModeState.latestRegister;
	      var register = vimGlobalState.registerController.getRegister(registerName);
	      if (register && register.pushSearchQuery) {
	        register.pushSearchQuery(query);
	      }
	    }
	
	    /**
	     * Listens for changes made in insert mode.
	     * Should only be active in insert mode.
	     */
	    function onChange(_cm, changeObj) {
	      var macroModeState = vimGlobalState.macroModeState;
	      var lastChange = macroModeState.lastInsertModeChanges;
	      if (!macroModeState.isPlaying) {
	        while(changeObj) {
	          lastChange.expectCursorActivityForChange = true;
	          if (changeObj.origin == '+input' || changeObj.origin == 'paste'
	              || changeObj.origin === undefined /* only in testing */) {
	            var text = changeObj.text.join('\n');
	            lastChange.changes.push(text);
	          }
	          // Change objects may be chained with next.
	          changeObj = changeObj.next;
	        }
	      }
	    }
	
	    /**
	    * Listens for any kind of cursor activity on CodeMirror.
	    */
	    function onCursorActivity(cm) {
	      var vim = cm.state.vim;
	      if (vim.insertMode) {
	        // Tracking cursor activity in insert mode (for macro support).
	        var macroModeState = vimGlobalState.macroModeState;
	        if (macroModeState.isPlaying) { return; }
	        var lastChange = macroModeState.lastInsertModeChanges;
	        if (lastChange.expectCursorActivityForChange) {
	          lastChange.expectCursorActivityForChange = false;
	        } else {
	          // Cursor moved outside the context of an edit. Reset the change.
	          lastChange.changes = [];
	        }
	      } else if (!cm.curOp.isVimOp) {
	        handleExternalSelection(cm, vim);
	      }
	      if (vim.visualMode) {
	        updateFakeCursor(cm);
	      }
	    }
	    function updateFakeCursor(cm) {
	      var vim = cm.state.vim;
	      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));
	      var to = offsetCursor(from, 0, 1);
	      if (vim.fakeCursor) {
	        vim.fakeCursor.clear();
	      }
	      vim.fakeCursor = cm.markText(from, to, {className: 'cm-animate-fat-cursor'});
	    }
	    function handleExternalSelection(cm, vim) {
	      var anchor = cm.getCursor('anchor');
	      var head = cm.getCursor('head');
	      // Enter or exit visual mode to match mouse selection.
	      if (vim.visualMode && !cm.somethingSelected()) {
	        exitVisualMode(cm, false);
	      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {
	        vim.visualMode = true;
	        vim.visualLine = false;
	        CodeMirror.signal(cm, "vim-mode-change", {mode: "visual"});
	      }
	      if (vim.visualMode) {
	        // Bind CodeMirror selection model to vim selection model.
	        // Mouse selections are considered visual characterwise.
	        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;
	        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;
	        head = offsetCursor(head, 0, headOffset);
	        anchor = offsetCursor(anchor, 0, anchorOffset);
	        vim.sel = {
	          anchor: anchor,
	          head: head
	        };
	        updateMark(cm, vim, '<', cursorMin(head, anchor));
	        updateMark(cm, vim, '>', cursorMax(head, anchor));
	      } else if (!vim.insertMode) {
	        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.
	        vim.lastHPos = cm.getCursor().ch;
	      }
	    }
	
	    /** Wrapper for special keys pressed in insert mode */
	    function InsertModeKey(keyName) {
	      this.keyName = keyName;
	    }
	
	    /**
	    * Handles raw key down events from the text area.
	    * - Should only be active in insert mode.
	    * - For recording deletes in insert mode.
	    */
	    function onKeyEventTargetKeyDown(e) {
	      var macroModeState = vimGlobalState.macroModeState;
	      var lastChange = macroModeState.lastInsertModeChanges;
	      var keyName = CodeMirror.keyName(e);
	      if (!keyName) { return; }
	      function onKeyFound() {
	        lastChange.changes.push(new InsertModeKey(keyName));
	        return true;
	      }
	      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {
	        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);
	      }
	    }
	
	    /**
	     * Repeats the last edit, which includes exactly 1 command and at most 1
	     * insert. Operator and motion commands are read from lastEditInputState,
	     * while action commands are read from lastEditActionCommand.
	     *
	     * If repeatForInsert is true, then the function was called by
	     * exitInsertMode to repeat the insert mode changes the user just made. The
	     * corresponding enterInsertMode call was made with a count.
	     */
	    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {
	      var macroModeState = vimGlobalState.macroModeState;
	      macroModeState.isPlaying = true;
	      var isAction = !!vim.lastEditActionCommand;
	      var cachedInputState = vim.inputState;
	      function repeatCommand() {
	        if (isAction) {
	          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);
	        } else {
	          commandDispatcher.evalInput(cm, vim);
	        }
	      }
	      function repeatInsert(repeat) {
	        if (macroModeState.lastInsertModeChanges.changes.length > 0) {
	          // For some reason, repeat cw in desktop VIM does not repeat
	          // insert mode changes. Will conform to that behavior.
	          repeat = !vim.lastEditActionCommand ? 1 : repeat;
	          var changeObject = macroModeState.lastInsertModeChanges;
	          repeatInsertModeChanges(cm, changeObject.changes, repeat);
	        }
	      }
	      vim.inputState = vim.lastEditInputState;
	      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {
	        // o and O repeat have to be interlaced with insert repeats so that the
	        // insertions appear on separate lines instead of the last line.
	        for (var i = 0; i < repeat; i++) {
	          repeatCommand();
	          repeatInsert(1);
	        }
	      } else {
	        if (!repeatForInsert) {
	          // Hack to get the cursor to end up at the right place. If I is
	          // repeated in insert mode repeat, cursor will be 1 insert
	          // change set left of where it should be.
	          repeatCommand();
	        }
	        repeatInsert(repeat);
	      }
	      vim.inputState = cachedInputState;
	      if (vim.insertMode && !repeatForInsert) {
	        // Don't exit insert mode twice. If repeatForInsert is set, then we
	        // were called by an exitInsertMode call lower on the stack.
	        exitInsertMode(cm);
	      }
	      macroModeState.isPlaying = false;
	    };
	
	    function repeatInsertModeChanges(cm, changes, repeat) {
	      function keyHandler(binding) {
	        if (typeof binding == 'string') {
	          CodeMirror.commands[binding](cm);
	        } else {
	          binding(cm);
	        }
	        return true;
	      }
	      var head = cm.getCursor('head');
	      var inVisualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.inVisualBlock;
	      if (inVisualBlock) {
	        // Set up block selection again for repeating the changes.
	        var vim = cm.state.vim;
	        var lastSel = vim.lastSelection;
	        var offset = getOffset(lastSel.anchor, lastSel.head);
	        selectForInsert(cm, head, offset.line + 1);
	        repeat = cm.listSelections().length;
	        cm.setCursor(head);
	      }
	      for (var i = 0; i < repeat; i++) {
	        if (inVisualBlock) {
	          cm.setCursor(offsetCursor(head, i, 0));
	        }
	        for (var j = 0; j < changes.length; j++) {
	          var change = changes[j];
	          if (change instanceof InsertModeKey) {
	            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);
	          } else {
	            var cur = cm.getCursor();
	            cm.replaceRange(change, cur, cur);
	          }
	        }
	      }
	      if (inVisualBlock) {
	        cm.setCursor(offsetCursor(head, 0, 1));
	      }
	    }
	
	    resetVimGlobalState();
	    return vimApi;
	  };
	  // Initialize Vim and make it available as an API.
	  CodeMirror.Vim = Vim();
	});


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// CodeMirror, copyright (c) by Marijn Haverbeke and others
	// Distributed under an MIT license: http://codemirror.net/LICENSE
	
	(function(mod) {
	  if (true) // CommonJS
	    mod(__webpack_require__(35));
	  else if (typeof define == "function" && define.amd) // AMD
	    define(["../../lib/codemirror"], mod);
	  else // Plain browser env
	    mod(CodeMirror);
	})(function(CodeMirror) {
	  "use strict";
	  var Pos = CodeMirror.Pos;
	
	  function SearchCursor(doc, query, pos, caseFold) {
	    this.atOccurrence = false; this.doc = doc;
	    if (caseFold == null && typeof query == "string") caseFold = false;
	
	    pos = pos ? doc.clipPos(pos) : Pos(0, 0);
	    this.pos = {from: pos, to: pos};
	
	    // The matches method is filled in based on the type of query.
	    // It takes a position and a direction, and returns an object
	    // describing the next occurrence of the query, or null if no
	    // more matches were found.
	    if (typeof query != "string") { // Regexp match
	      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? "ig" : "g");
	      this.matches = function(reverse, pos) {
	        if (reverse) {
	          query.lastIndex = 0;
	          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;
	          for (;;) {
	            query.lastIndex = cutOff;
	            var newMatch = query.exec(line);
	            if (!newMatch) break;
	            match = newMatch;
	            start = match.index;
	            cutOff = match.index + (match[0].length || 1);
	            if (cutOff == line.length) break;
	          }
	          var matchLen = (match && match[0].length) || 0;
	          if (!matchLen) {
	            if (start == 0 && line.length == 0) {match = undefined;}
	            else if (start != doc.getLine(pos.line).length) {
	              matchLen++;
	            }
	          }
	        } else {
	          query.lastIndex = pos.ch;
	          var line = doc.getLine(pos.line), match = query.exec(line);
	          var matchLen = (match && match[0].length) || 0;
	          var start = match && match.index;
	          if (start + matchLen != line.length && !matchLen) matchLen = 1;
	        }
	        if (match && matchLen)
	          return {from: Pos(pos.line, start),
	                  to: Pos(pos.line, start + matchLen),
	                  match: match};
	      };
	    } else { // String query
	      var origQuery = query;
	      if (caseFold) query = query.toLowerCase();
	      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};
	      var target = query.split("\n");
	      // Different methods for single-line and multi-line queries
	      if (target.length == 1) {
	        if (!query.length) {
	          // Empty string would match anything and never progress, so
	          // we define it to match nothing instead.
	          this.matches = function() {};
	        } else {
	          this.matches = function(reverse, pos) {
	            if (reverse) {
	              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);
	              var match = line.lastIndexOf(query);
	              if (match > -1) {
	                match = adjustPos(orig, line, match);
	                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};
	              }
	             } else {
	               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);
	               var match = line.indexOf(query);
	               if (match > -1) {
	                 match = adjustPos(orig, line, match) + pos.ch;
	                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};
	               }
	            }
	          };
	        }
	      } else {
	        var origTarget = origQuery.split("\n");
	        this.matches = function(reverse, pos) {
	          var last = target.length - 1;
	          if (reverse) {
	            if (pos.line - (target.length - 1) < doc.firstLine()) return;
	            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;
	            var to = Pos(pos.line, origTarget[last].length);
	            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)
	              if (target[i] != fold(doc.getLine(ln))) return;
	            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;
	            if (fold(line.slice(cut)) != target[0]) return;
	            return {from: Pos(ln, cut), to: to};
	          } else {
	            if (pos.line + (target.length - 1) > doc.lastLine()) return;
	            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;
	            if (fold(line.slice(cut)) != target[0]) return;
	            var from = Pos(pos.line, cut);
	            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)
	              if (target[i] != fold(doc.getLine(ln))) return;
	            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;
	            return {from: from, to: Pos(ln, origTarget[last].length)};
	          }
	        };
	      }
	    }
	  }
	
	  SearchCursor.prototype = {
	    findNext: function() {return this.find(false);},
	    findPrevious: function() {return this.find(true);},
	
	    find: function(reverse) {
	      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);
	      function savePosAndFail(line) {
	        var pos = Pos(line, 0);
	        self.pos = {from: pos, to: pos};
	        self.atOccurrence = false;
	        return false;
	      }
	
	      for (;;) {
	        if (this.pos = this.matches(reverse, pos)) {
	          this.atOccurrence = true;
	          return this.pos.match || true;
	        }
	        if (reverse) {
	          if (!pos.line) return savePosAndFail(0);
	          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);
	        }
	        else {
	          var maxLine = this.doc.lineCount();
	          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);
	          pos = Pos(pos.line + 1, 0);
	        }
	      }
	    },
	
	    from: function() {if (this.atOccurrence) return this.pos.from;},
	    to: function() {if (this.atOccurrence) return this.pos.to;},
	
	    replace: function(newText, origin) {
	      if (!this.atOccurrence) return;
	      var lines = CodeMirror.splitLines(newText);
	      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);
	      this.pos.to = Pos(this.pos.from.line + lines.length - 1,
	                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));
	    }
	  };
	
	  // Maps a position in a case-folded line back to a position in the original line
	  // (compensating for codepoints increasing in number during folding)
	  function adjustPos(orig, folded, pos) {
	    if (orig.length == folded.length) return pos;
	    for (var pos1 = Math.min(pos, orig.length);;) {
	      var len1 = orig.slice(0, pos1).toLowerCase().length;
	      if (len1 < pos) ++pos1;
	      else if (len1 > pos) --pos1;
	      else return pos1;
	    }
	  }
	
	  CodeMirror.defineExtension("getSearchCursor", function(query, pos, caseFold) {
	    return new SearchCursor(this.doc, query, pos, caseFold);
	  });
	  CodeMirror.defineDocExtension("getSearchCursor", function(query, pos, caseFold) {
	    return new SearchCursor(this, query, pos, caseFold);
	  });
	
	  CodeMirror.defineExtension("selectMatches", function(query, caseFold) {
	    var ranges = [];
	    var cur = this.getSearchCursor(query, this.getCursor("from"), caseFold);
	    while (cur.findNext()) {
	      if (CodeMirror.cmpPos(cur.to(), this.getCursor("to")) > 0) break;
	      ranges.push({anchor: cur.from(), head: cur.to()});
	    }
	    if (ranges.length)
	      this.setSelections(ranges, 0);
	  });
	});


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	// CodeMirror, copyright (c) by Marijn Haverbeke and others
	// Distributed under an MIT license: http://codemirror.net/LICENSE
	
	// Open simple dialogs on top of an editor. Relies on dialog.css.
	
	(function(mod) {
	  if (true) // CommonJS
	    mod(__webpack_require__(35));
	  else if (typeof define == "function" && define.amd) // AMD
	    define(["../../lib/codemirror"], mod);
	  else // Plain browser env
	    mod(CodeMirror);
	})(function(CodeMirror) {
	  function dialogDiv(cm, template, bottom) {
	    var wrap = cm.getWrapperElement();
	    var dialog;
	    dialog = wrap.appendChild(document.createElement("div"));
	    if (bottom)
	      dialog.className = "CodeMirror-dialog CodeMirror-dialog-bottom";
	    else
	      dialog.className = "CodeMirror-dialog CodeMirror-dialog-top";
	
	    if (typeof template == "string") {
	      dialog.innerHTML = template;
	    } else { // Assuming it's a detached DOM element.
	      dialog.appendChild(template);
	    }
	    return dialog;
	  }
	
	  function closeNotification(cm, newVal) {
	    if (cm.state.currentNotificationClose)
	      cm.state.currentNotificationClose();
	    cm.state.currentNotificationClose = newVal;
	  }
	
	  CodeMirror.defineExtension("openDialog", function(template, callback, options) {
	    if (!options) options = {};
	
	    closeNotification(this, null);
	
	    var dialog = dialogDiv(this, template, options.bottom);
	    var closed = false, me = this;
	    function close(newVal) {
	      if (typeof newVal == 'string') {
	        inp.value = newVal;
	      } else {
	        if (closed) return;
	        closed = true;
	        dialog.parentNode.removeChild(dialog);
	        me.focus();
	
	        if (options.onClose) options.onClose(dialog);
	      }
	    }
	
	    var inp = dialog.getElementsByTagName("input")[0], button;
	    if (inp) {
	      inp.focus();
	
	      if (options.value) {
	        inp.value = options.value;
	        if (options.selectValueOnOpen !== false) {
	          inp.select();
	        }
	      }
	
	      if (options.onInput)
	        CodeMirror.on(inp, "input", function(e) { options.onInput(e, inp.value, close);});
	      if (options.onKeyUp)
	        CodeMirror.on(inp, "keyup", function(e) {options.onKeyUp(e, inp.value, close);});
	
	      CodeMirror.on(inp, "keydown", function(e) {
	        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }
	        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {
	          inp.blur();
	          CodeMirror.e_stop(e);
	          close();
	        }
	        if (e.keyCode == 13) callback(inp.value, e);
	      });
	
	      if (options.closeOnBlur !== false) CodeMirror.on(inp, "blur", close);
	    } else if (button = dialog.getElementsByTagName("button")[0]) {
	      CodeMirror.on(button, "click", function() {
	        close();
	        me.focus();
	      });
	
	      if (options.closeOnBlur !== false) CodeMirror.on(button, "blur", close);
	
	      button.focus();
	    }
	    return close;
	  });
	
	  CodeMirror.defineExtension("openConfirm", function(template, callbacks, options) {
	    closeNotification(this, null);
	    var dialog = dialogDiv(this, template, options && options.bottom);
	    var buttons = dialog.getElementsByTagName("button");
	    var closed = false, me = this, blurring = 1;
	    function close() {
	      if (closed) return;
	      closed = true;
	      dialog.parentNode.removeChild(dialog);
	      me.focus();
	    }
	    buttons[0].focus();
	    for (var i = 0; i < buttons.length; ++i) {
	      var b = buttons[i];
	      (function(callback) {
	        CodeMirror.on(b, "click", function(e) {
	          CodeMirror.e_preventDefault(e);
	          close();
	          if (callback) callback(me);
	        });
	      })(callbacks[i]);
	      CodeMirror.on(b, "blur", function() {
	        --blurring;
	        setTimeout(function() { if (blurring <= 0) close(); }, 200);
	      });
	      CodeMirror.on(b, "focus", function() { ++blurring; });
	    }
	  });
	
	  /*
	   * openNotification
	   * Opens a notification, that can be closed with an optional timer
	   * (default 5000ms timer) and always closes on click.
	   *
	   * If a notification is opened while another is opened, it will close the
	   * currently opened one and open the new one immediately.
	   */
	  CodeMirror.defineExtension("openNotification", function(template, options) {
	    closeNotification(this, close);
	    var dialog = dialogDiv(this, template, options && options.bottom);
	    var closed = false, doneTimer;
	    var duration = options && typeof options.duration !== "undefined" ? options.duration : 5000;
	
	    function close() {
	      if (closed) return;
	      closed = true;
	      clearTimeout(doneTimer);
	      dialog.parentNode.removeChild(dialog);
	    }
	
	    CodeMirror.on(dialog, 'click', function(e) {
	      CodeMirror.e_preventDefault(e);
	      close();
	    });
	
	    if (duration)
	      doneTimer = setTimeout(close, duration);
	
	    return close;
	  });
	});


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// CodeMirror, copyright (c) by Marijn Haverbeke and others
	// Distributed under an MIT license: http://codemirror.net/LICENSE
	
	(function(mod) {
	  if (true) // CommonJS
	    mod(__webpack_require__(35));
	  else if (typeof define == "function" && define.amd) // AMD
	    define(["../../lib/codemirror"], mod);
	  else // Plain browser env
	    mod(CodeMirror);
	})(function(CodeMirror) {
	  var ie_lt8 = /MSIE \d/.test(navigator.userAgent) &&
	    (document.documentMode == null || document.documentMode < 8);
	
	  var Pos = CodeMirror.Pos;
	
	  var matching = {"(": ")>", ")": "(<", "[": "]>", "]": "[<", "{": "}>", "}": "{<"};
	
	  function findMatchingBracket(cm, where, strict, config) {
	    var line = cm.getLineHandle(where.line), pos = where.ch - 1;
	    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];
	    if (!match) return null;
	    var dir = match.charAt(1) == ">" ? 1 : -1;
	    if (strict && (dir > 0) != (pos == where.ch)) return null;
	    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));
	
	    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);
	    if (found == null) return null;
	    return {from: Pos(where.line, pos), to: found && found.pos,
	            match: found && found.ch == match.charAt(0), forward: dir > 0};
	  }
	
	  // bracketRegex is used to specify which type of bracket to scan
	  // should be a regexp, e.g. /[[\]]/
	  //
	  // Note: If "where" is on an open bracket, then this bracket is ignored.
	  //
	  // Returns false when no bracket was found, null when it reached
	  // maxScanLines and gave up
	  function scanForBracket(cm, where, dir, style, config) {
	    var maxScanLen = (config && config.maxScanLineLength) || 10000;
	    var maxScanLines = (config && config.maxScanLines) || 1000;
	
	    var stack = [];
	    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\]]/;
	    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)
	                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);
	    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {
	      var line = cm.getLine(lineNo);
	      if (!line) continue;
	      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;
	      if (line.length > maxScanLen) continue;
	      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);
	      for (; pos != end; pos += dir) {
	        var ch = line.charAt(pos);
	        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {
	          var match = matching[ch];
	          if ((match.charAt(1) == ">") == (dir > 0)) stack.push(ch);
	          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};
	          else stack.pop();
	        }
	      }
	    }
	    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;
	  }
	
	  function matchBrackets(cm, autoclear, config) {
	    // Disable brace matching in long lines, since it'll cause hugely slow updates
	    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;
	    var marks = [], ranges = cm.listSelections();
	    for (var i = 0; i < ranges.length; i++) {
	      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);
	      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {
	        var style = match.match ? "CodeMirror-matchingbracket" : "CodeMirror-nonmatchingbracket";
	        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));
	        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)
	          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));
	      }
	    }
	
	    if (marks.length) {
	      // Kludge to work around the IE bug from issue #1193, where text
	      // input stops going to the textare whever this fires.
	      if (ie_lt8 && cm.state.focused) cm.focus();
	
	      var clear = function() {
	        cm.operation(function() {
	          for (var i = 0; i < marks.length; i++) marks[i].clear();
	        });
	      };
	      if (autoclear) setTimeout(clear, 800);
	      else return clear;
	    }
	  }
	
	  var currentlyHighlighted = null;
	  function doMatchBrackets(cm) {
	    cm.operation(function() {
	      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}
	      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);
	    });
	  }
	
	  CodeMirror.defineOption("matchBrackets", false, function(cm, val, old) {
	    if (old && old != CodeMirror.Init)
	      cm.off("cursorActivity", doMatchBrackets);
	    if (val) {
	      cm.state.matchBrackets = typeof val == "object" ? val : {};
	      cm.on("cursorActivity", doMatchBrackets);
	    }
	  });
	
	  CodeMirror.defineExtension("matchBrackets", function() {matchBrackets(this, true);});
	  CodeMirror.defineExtension("findMatchingBracket", function(pos, strict, config){
	    return findMatchingBracket(this, pos, strict, config);
	  });
	  CodeMirror.defineExtension("scanForBracket", function(pos, dir, style, config){
	    return scanForBracket(this, pos, dir, style, config);
	  });
	});


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	// CodeMirror, copyright (c) by Marijn Haverbeke and others
	// Distributed under an MIT license: http://codemirror.net/LICENSE
	
	(function(mod) {
	  if (true) // CommonJS
	    mod(__webpack_require__(35));
	  else if (typeof define == "function" && define.amd) // AMD
	    define(["../../lib/codemirror"], mod);
	  else // Plain browser env
	    mod(CodeMirror);
	})(function(CodeMirror) {
	  "use strict";
	
	  function Bar(cls, orientation, scroll) {
	    this.orientation = orientation;
	    this.scroll = scroll;
	    this.screen = this.total = this.size = 1;
	    this.pos = 0;
	
	    this.node = document.createElement("div");
	    this.node.className = cls + "-" + orientation;
	    this.inner = this.node.appendChild(document.createElement("div"));
	
	    var self = this;
	    CodeMirror.on(this.inner, "mousedown", function(e) {
	      if (e.which != 1) return;
	      CodeMirror.e_preventDefault(e);
	      var axis = self.orientation == "horizontal" ? "pageX" : "pageY";
	      var start = e[axis], startpos = self.pos;
	      function done() {
	        CodeMirror.off(document, "mousemove", move);
	        CodeMirror.off(document, "mouseup", done);
	      }
	      function move(e) {
	        if (e.which != 1) return done();
	        self.moveTo(startpos + (e[axis] - start) * (self.total / self.size));
	      }
	      CodeMirror.on(document, "mousemove", move);
	      CodeMirror.on(document, "mouseup", done);
	    });
	
	    CodeMirror.on(this.node, "click", function(e) {
	      CodeMirror.e_preventDefault(e);
	      var innerBox = self.inner.getBoundingClientRect(), where;
	      if (self.orientation == "horizontal")
	        where = e.clientX < innerBox.left ? -1 : e.clientX > innerBox.right ? 1 : 0;
	      else
	        where = e.clientY < innerBox.top ? -1 : e.clientY > innerBox.bottom ? 1 : 0;
	      self.moveTo(self.pos + where * self.screen);
	    });
	
	    function onWheel(e) {
	      var moved = CodeMirror.wheelEventPixels(e)[self.orientation == "horizontal" ? "x" : "y"];
	      var oldPos = self.pos;
	      self.moveTo(self.pos + moved);
	      if (self.pos != oldPos) CodeMirror.e_preventDefault(e);
	    }
	    CodeMirror.on(this.node, "mousewheel", onWheel);
	    CodeMirror.on(this.node, "DOMMouseScroll", onWheel);
	  }
	
	  Bar.prototype.setPos = function(pos, force) {
	    if (pos < 0) pos = 0;
	    if (pos > this.total - this.screen) pos = this.total - this.screen;
	    if (!force && pos == this.pos) return false;
	    this.pos = pos;
	    this.inner.style[this.orientation == "horizontal" ? "left" : "top"] =
	      (pos * (this.size / this.total)) + "px";
	    return true
	  };
	
	  Bar.prototype.moveTo = function(pos) {
	    if (this.setPos(pos)) this.scroll(pos, this.orientation);
	  }
	
	  var minButtonSize = 10;
	
	  Bar.prototype.update = function(scrollSize, clientSize, barSize) {
	    var sizeChanged = this.screen != clientSize || this.total != scrollSize || this.size != barSize
	    if (sizeChanged) {
	      this.screen = clientSize;
	      this.total = scrollSize;
	      this.size = barSize;
	    }
	
	    var buttonSize = this.screen * (this.size / this.total);
	    if (buttonSize < minButtonSize) {
	      this.size -= minButtonSize - buttonSize;
	      buttonSize = minButtonSize;
	    }
	    this.inner.style[this.orientation == "horizontal" ? "width" : "height"] =
	      buttonSize + "px";
	    this.setPos(this.pos, sizeChanged);
	  };
	
	  function SimpleScrollbars(cls, place, scroll) {
	    this.addClass = cls;
	    this.horiz = new Bar(cls, "horizontal", scroll);
	    place(this.horiz.node);
	    this.vert = new Bar(cls, "vertical", scroll);
	    place(this.vert.node);
	    this.width = null;
	  }
	
	  SimpleScrollbars.prototype.update = function(measure) {
	    if (this.width == null) {
	      var style = window.getComputedStyle ? window.getComputedStyle(this.horiz.node) : this.horiz.node.currentStyle;
	      if (style) this.width = parseInt(style.height);
	    }
	    var width = this.width || 0;
	
	    var needsH = measure.scrollWidth > measure.clientWidth + 1;
	    var needsV = measure.scrollHeight > measure.clientHeight + 1;
	    this.vert.node.style.display = needsV ? "block" : "none";
	    this.horiz.node.style.display = needsH ? "block" : "none";
	
	    if (needsV) {
	      this.vert.update(measure.scrollHeight, measure.clientHeight,
	                       measure.viewHeight - (needsH ? width : 0));
	      this.vert.node.style.bottom = needsH ? width + "px" : "0";
	    }
	    if (needsH) {
	      this.horiz.update(measure.scrollWidth, measure.clientWidth,
	                        measure.viewWidth - (needsV ? width : 0) - measure.barLeft);
	      this.horiz.node.style.right = needsV ? width + "px" : "0";
	      this.horiz.node.style.left = measure.barLeft + "px";
	    }
	
	    return {right: needsV ? width : 0, bottom: needsH ? width : 0};
	  };
	
	  SimpleScrollbars.prototype.setScrollTop = function(pos) {
	    this.vert.setPos(pos);
	  };
	
	  SimpleScrollbars.prototype.setScrollLeft = function(pos) {
	    this.horiz.setPos(pos);
	  };
	
	  SimpleScrollbars.prototype.clear = function() {
	    var parent = this.horiz.node.parentNode;
	    parent.removeChild(this.horiz.node);
	    parent.removeChild(this.vert.node);
	  };
	
	  CodeMirror.scrollbarModel.simple = function(place, scroll) {
	    return new SimpleScrollbars("CodeMirror-simplescroll", place, scroll);
	  };
	  CodeMirror.scrollbarModel.overlay = function(place, scroll) {
	    return new SimpleScrollbars("CodeMirror-overlayscroll", place, scroll);
	  };
	});


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// CodeMirror, copyright (c) by Marijn Haverbeke and others
	// Distributed under an MIT license: http://codemirror.net/LICENSE
	
	(function(mod) {
	  if (true) // CommonJS
	    mod(__webpack_require__(35));
	  else if (typeof define == "function" && define.amd) // AMD
	    define(["../../lib/codemirror"], mod);
	  else // Plain browser env
	    mod(CodeMirror);
	})(function(CodeMirror) {
	"use strict";
	
	CodeMirror.runMode = function(string, modespec, callback, options) {
	  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);
	  var ie = /MSIE \d/.test(navigator.userAgent);
	  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);
	
	  if (callback.appendChild) {
	    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;
	    var node = callback, col = 0;
	    node.innerHTML = "";
	    callback = function(text, style) {
	      if (text == "\n") {
	        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.
	        // Emitting a carriage return makes everything ok.
	        node.appendChild(document.createTextNode(ie_lt9 ? '\r' : text));
	        col = 0;
	        return;
	      }
	      var content = "";
	      // replace tabs
	      for (var pos = 0;;) {
	        var idx = text.indexOf("\t", pos);
	        if (idx == -1) {
	          content += text.slice(pos);
	          col += text.length - pos;
	          break;
	        } else {
	          col += idx - pos;
	          content += text.slice(pos, idx);
	          var size = tabSize - col % tabSize;
	          col += size;
	          for (var i = 0; i < size; ++i) content += " ";
	          pos = idx + 1;
	        }
	      }
	
	      if (style) {
	        var sp = node.appendChild(document.createElement("span"));
	        sp.className = "cm-" + style.replace(/ +/g, " cm-");
	        sp.appendChild(document.createTextNode(content));
	      } else {
	        node.appendChild(document.createTextNode(content));
	      }
	    };
	  }
	
	  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);
	  for (var i = 0, e = lines.length; i < e; ++i) {
	    if (i) callback("\n");
	    var stream = new CodeMirror.StringStream(lines[i]);
	    if (!stream.string && mode.blankLine) mode.blankLine(state);
	    while (!stream.eol()) {
	      var style = mode.token(stream, state);
	      callback(stream.current(), style, i, stream.start, state);
	      stream.start = stream.pos;
	    }
	  }
	};
	
	});


/***/ },
/* 43 */
/***/ function(module, exports) {

	// Object.assign polyfill
	// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	"use strict";
	var Immutable;
	(function (Immutable) {
	    Immutable.merge = function (t, s) {
	        return Object.freeze(Object.assign({}, t, s));
	    };
	    Immutable.remove = function (t, k) {
	        // copy
	        const res = Object.assign({}, t);
	        delete res[k];
	        return Object.freeze(res);
	    };
	    Immutable.append = function (t, s, f) {
	        const res = [...t, s];
	        if (f) {
	            res.sort(f);
	        }
	        return Object.freeze(res);
	    };
	    Immutable.insert = function (t, pos, s) {
	        const res = [];
	        const len = t.length;
	        let p = pos < 0 ? len + pos + 1 : pos;
	        if (p > len) {
	            const r = [...t];
	            let i = len;
	            while (i < p) {
	                r.push(null);
	                i += 1;
	            }
	            r.push(s);
	            return Object.freeze(r);
	        }
	        else if (p < 0) {
	            p = 0;
	        }
	        let di = 0;
	        for (let i = 0; i < len + 1; i += 1) {
	            if (i === p) {
	                res[i] = s;
	                if (t[i] === null) {
	                    continue;
	                }
	                else {
	                    di = 1;
	                }
	            }
	            if (i < len) {
	                res[i + di] = t[i];
	            }
	        }
	        return Object.freeze(res);
	    };
	    Immutable.aset = function (t, p, s) {
	        const res = [];
	        const len = Math.max(t.length, p + 1);
	        if (p < 0) {
	            throw `Cannot set indice ${p} in array of length ${len}.`;
	        }
	        for (let i = 0; i < len; i += 1) {
	            if (i === p) {
	                res[i] = s;
	            }
	            else {
	                // fill with null values if t [ i ] does not exist
	                res[i] = t[i] || null;
	            }
	        }
	        return Object.freeze(res);
	    };
	    const doUpdate = function (t, keys, pos, s) {
	        const k = keys[pos];
	        if (pos === keys.length - 1) {
	            // last
	            if (typeof s === 'function') {
	                const v = s(t[k]);
	                return Immutable.merge(t, { [k]: v });
	            }
	            else {
	                return Immutable.merge(t, { [k]: s });
	            }
	        }
	        let tv = t[k];
	        if (tv === undefined) {
	            tv = {};
	        }
	        return Immutable.merge(t, { [k]: doUpdate(tv, keys, pos + 1, s) });
	    };
	    Immutable.update = function (t, ...args) {
	        const value = args.pop();
	        const keys = args;
	        return doUpdate(t, keys, 0, value);
	    };
	    Immutable.sort = function (t, f) {
	        const res = [...t];
	        res.sort(f);
	        return Object.freeze(res);
	    };
	})(Immutable = exports.Immutable || (exports.Immutable = {}));


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(45));
	exports.Playback = (options = {}) => {
	    return (module, controller) => {
	        module.addState({ $main: function () { },
	            $visible: true
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const CodeHelper_1 = __webpack_require__(30);
	const Graph_1 = __webpack_require__(46);
	const Midi_1 = __webpack_require__(53);
	const ControlHelper_1 = __webpack_require__(71);
	const midi = Midi_1.MidiHelper.midiState();
	// This is the context defined before calling main.
	exports.MAIN_CONTEXT = 
	// midiState contains values for current ctrl and notes
	{ midi: 'midi.State'
	};
	const rootNodeId = Graph_1.NodeHelper.rootNodeId;
	const DUMMY = { 'text:string': 'dummy.emptyText'
	};
	var PlaybackHelper;
	(function (PlaybackHelper) {
	    const updateCache = (graph, cache) => {
	        const nodecache = cache.nodecache;
	        const scrub = cache.scrub;
	        for (const nodeId in graph.nodesById) {
	            const node = graph.nodesById[nodeId];
	            if (!node) {
	                throw (`Error in graph: missing '${nodeId}'.`);
	            }
	            const block = graph.blocksById[node.blockId];
	            let n = nodecache[nodeId];
	            if (node.invalid) {
	                // ignore
	                continue;
	            }
	            let js = block.js;
	            if (node.blockId === scrub) {
	                if (!n.scrubjs || js !== n.scrubjsOrig) {
	                    // update scrubjs
	                    n.scrubjsOrig = js;
	                    n.scrubber = {};
	                    n.scrubjs = CodeHelper_1.CodeHelper.transpile(block.source, n.scrubber);
	                }
	                // Use special 'scrubbing' js.
	                js = n.scrubjs;
	                // Update scrubber
	                Object.assign(cache.scrubber, n.scrubber);
	            }
	            if (!n || n.js !== js) {
	                if (!n) {
	                    n = nodecache[nodeId] = { exports: {} };
	                }
	                else {
	                    // clear
	                    n.exports = {};
	                }
	                const exports = n.exports;
	                try {
	                    const codefunc = new Function('exports', CodeHelper_1.SCRUBBER_VAR, js);
	                    // We now run the code. The exports is the cache.
	                    const scrub = n.scrubber ? n.scrubber.values : null;
	                    codefunc(exports, scrub);
	                    n.js = block.js;
	                }
	                catch (err) {
	                    // TODO: proper error handling
	                    console.log(`${block.name} error: ${err}`);
	                }
	                if (block.meta.update && !exports.update) {
	                    exports.update = () => { console.log(`${block.name} error: has update type '${block.meta.update}' but no update function.`); };
	                }
	            }
	        }
	        // Now every updating node is ready for runtime
	    };
	    const detach = (cache, oldgraph, newgraph, helpers, nodeId, parentDisconnected) => {
	        const onode = oldgraph.nodesById[nodeId];
	        const nnode = newgraph.nodesById[nodeId];
	        let detached = parentDisconnected
	            || !nnode // = removed
	            || nnode.parent !== onode.parent;
	        // Parse children
	        for (const childId of onode.children) {
	            if (childId) {
	                detach(cache, oldgraph, newgraph, helpers, childId, detached);
	            }
	        }
	        // detach after children (depth-first)
	        if (detached) {
	            const nc = cache.nodecache[nodeId];
	            const init = nc.exports.init;
	            if (init) {
	                // clear previous controls
	                nc.controls = [];
	                try {
	                    init(nc.helpers);
	                }
	                catch (err) {
	                    // FIXME: proper error handling
	                    console.log('detach error:', err);
	                }
	                // clear cache
	                nc.cache = {};
	                // clear controls
	                nc.controls = [];
	            }
	        }
	    };
	    const initDo = (cache, graph, context, ohelpers, nodeId) => {
	        const nodecache = cache.nodecache;
	        const nc = nodecache[nodeId];
	        const init = nc.exports.init;
	        const nodesById = graph.nodesById;
	        const node = nodesById[nodeId];
	        let subctx = context;
	        if (init) {
	            const helpers = Object.assign({}, ohelpers);
	            if (!nc.cache) {
	                // cache passed in init call
	                nc.cache = {};
	                nc.control = ControlHelper_1.ControlHelper.make(nc);
	            }
	            helpers.cache = nc.cache;
	            helpers.context = context;
	            helpers.control = nc.control;
	            let children = [];
	            if (node.all) {
	                const list = node.all.map((childId) => {
	                    return nodecache[childId].exports.update;
	                });
	                children.all = () => {
	                    for (const f of list) {
	                        f();
	                    }
	                };
	            }
	            else if (node.childrenm) {
	                children = node.childrenm.map((childId) => {
	                    return nodecache[childId].exports.update;
	                });
	            }
	            helpers.children = children;
	            nc.controls = [];
	            nc.helpers = helpers;
	            if (cache.scrub === node.blockId) {
	                cache.scrubber.init = () => {
	                    init(helpers);
	                };
	            }
	            try {
	                const r = init(helpers);
	                if (r) {
	                    if (typeof r !== 'object') {
	                        console.log(`Init return value must be an object`);
	                    }
	                    else {
	                        subctx = context.set(r);
	                    }
	                }
	            }
	            catch (err) {
	                // TODO: capture missing required assets and libraries
	                // and do proper error handling for init code.
	                console.log('init error:', err);
	                // abort init operation
	                return;
	            }
	        }
	        else if (nc.cache) {
	            // No init function = clear cached context and init cache
	            delete nc.cache;
	            delete nc.helpers;
	        }
	        const block = graph.blocksById[node.blockId];
	        // Trigger init in children with sub context
	        for (const childId of node.children) {
	            if (childId) {
	                initDo(cache, graph, subctx, ohelpers, childId);
	            }
	        }
	    };
	    PlaybackHelper.detachCheck = (graph, cache, context // extra elements for update context
	        , helpers) => {
	        // 1. detach if needed
	        if (cache.graph && cache.graph !== graph) {
	            const h = Object.assign({}, helpers, { detached: true, children: [] });
	            detach(cache, cache.graph, graph, h, rootNodeId, false);
	        }
	    };
	    PlaybackHelper.compile = (graph, cache) => {
	        const output = [];
	        if (!cache.nodecache) {
	            cache.nodecache = {};
	        }
	        // make sure to update functions for valid nodes if their source file changed.
	        updateCache(graph, cache);
	        // save current graph to compare on detach.
	        cache.graph = graph;
	    };
	    PlaybackHelper.init = (graph, context // extra elements for update context
	        , cache, helpers) => {
	        const c = PlaybackHelper.mainContext(context);
	        const h = Object.assign({}, helpers);
	        initDo(cache, graph, c, h, rootNodeId);
	    };
	    PlaybackHelper.run = (graph, context = {} // extra elements for update context
	        , cache = { nodecache: {} }, helpers = {}) => {
	        if (cache.graph === graph && !cache.scrub) {
	            // nothing to recompile, update
	            return;
	        }
	        // 1. detach if needed
	        PlaybackHelper.detachCheck(graph, cache, context, helpers);
	        // 2. compile
	        PlaybackHelper.compile(graph, cache);
	        // 3. init
	        PlaybackHelper.init(graph, context, cache, helpers);
	        // 4. run
	        const root = graph.nodesById[rootNodeId];
	        if (!root.invalid) {
	            const main = cache.nodecache[rootNodeId].exports.update;
	            if (main) {
	                cache.main = main;
	                main(context);
	            }
	        }
	        else {
	            cache.main = null;
	        }
	    };
	    class Context {
	        constructor(b, n) {
	            Object.assign(this, b, n);
	            Object.freeze(this);
	        }
	        set(n) {
	            return new Context(this, n);
	        }
	    }
	    PlaybackHelper.context = (base) => {
	        return new Context({}, base);
	    };
	    PlaybackHelper.mainContext = (extra = {}) => {
	        return new Context({ midi }, extra);
	    };
	    // context type
	    PlaybackHelper.mainContextProvide = PlaybackHelper.context(exports.MAIN_CONTEXT);
	    PlaybackHelper.defaultMeta = Object.freeze({ provide: Object.freeze({}),
	        expect: Object.freeze({})
	    });
	})(PlaybackHelper = exports.PlaybackHelper || (exports.PlaybackHelper = {}));


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(47));
	exports.Graph = (options = {}) => {
	    return (module, controller) => {
	        return {}; // meta information
	    };
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(48));
	__export(__webpack_require__(49));
	__export(__webpack_require__(25));
	__export(__webpack_require__(26));
	// FIXME: Immutable should be in 'utils'
	__export(__webpack_require__(43));


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const uilayout_1 = __webpack_require__(49);
	const NodeHelper_1 = __webpack_require__(26);
	const nextNodeId = NodeHelper_1.NodeHelper.nextNodeId;
	const rootNodeId = NodeHelper_1.NodeHelper.rootNodeId;
	const minSize_1 = __webpack_require__(51);
	const stringhash = __webpack_require__(52);
	/** Compute svg path of a box with up and down slots.
	 * The sizes have to be computed first in the 'info' field.
	 */
	const path = function (boxdef, layout) {
	    const { size, sextra } = boxdef;
	    const { us, ds, w, wd, wde, wu, h } = size;
	    const r = layout.RADIUS;
	    // path starts at top-left corner + RADIUS in x direction.
	    // top-left is (0,0) because we translate with a <g> tag.
	    const res = [`M${r} 0`];
	    for (let i = 0; i < us; i += 1) {
	        res.push(`h${layout.SPAD}`);
	        res.push(`l${layout.SLOT} ${-layout.SLOT}`);
	        res.push(`l${layout.SLOT} ${layout.SLOT}`);
	    }
	    // SPAD   /\  SPAD  /\
	    // +-----+  +------+  +-----------+
	    // |--------- wu ----------|
	    // |--------- w  -----------------|
	    const rpadu = w - wu;
	    if (rpadu > 0) {
	        res.push(`h${rpadu + layout.SPAD}`);
	    }
	    else {
	        res.push(`h${layout.SPAD}`);
	    }
	    res.push(`a${r} ${r} 0 0 1 ${r} ${r}`);
	    res.push(`v${h - 2 * r}`);
	    res.push(`a${r} ${r} 0 0 1 ${-r} ${r}`);
	    const rpadd = w - wd - wde + (sextra[ds] || 0);
	    if (rpadd > 0) {
	        res.push(`h${-rpadd - layout.SPAD}`);
	    }
	    else {
	        res.push(`h${-layout.SPAD}`);
	    }
	    for (let i = ds - 1; i >= 0; i -= 1) {
	        res.push(`l${-layout.SLOT} ${-layout.SLOT}`);
	        res.push(`l${-layout.SLOT} ${layout.SLOT}`);
	        res.push(`h${-layout.SPAD - (sextra[i] || 0)}`);
	    }
	    res.push(`a${r} ${r} 0 0 1 ${-r} ${-r}`);
	    res.push(`v${-h + 2 * r}`);
	    res.push(`a${r} ${r} 0 0 1 ${r} ${-r}`);
	    // res.push ( `a50 50 0 0 1 50 50` )
	    // res.push ( `l50 50` )
	    return res.join(' ');
	};
	const className = (objName, layout) => {
	    const name = objName.split('.')[0];
	    let num = 9 + stringhash(name);
	    return `box${1 + num % layout.PCOUNT}`;
	};
	/** Compute box position.
	 */
	const boxPosition = (graph, id, layout, uigraph, ctx) => {
	    const node = graph.nodesById[id];
	    const block = graph.blocksById[node.blockId];
	    // store our position given by ctx
	    uigraph.uiNodeById[id].pos = ctx;
	    const dy = layout.HEIGHT + layout.VPAD;
	    let x = ctx.x;
	    const uinode = uigraph.uiNodeById[id];
	    const ds = uinode.size.ds;
	    const sextra = uinode.sextra;
	    // get children
	    let cheight = 0;
	    for (let i = 0; i < ds + 1; i += 1) {
	        const childId = node.children[i];
	        const wtonext = (sextra[i] || 0) + layout.SPAD + 2 * layout.SLOT;
	        if (childId) {
	            const h = boxPosition(graph, childId, layout, uigraph, { x, y: ctx.y + dy });
	            cheight = Math.max(cheight, h);
	            x += layout.BPAD + uigraph.uiNodeById[childId].size.w;
	        }
	        else if (childId === null) {
	            // empty slot, add padding and click width
	            x += layout.SCLICKW / 2 + layout.SPAD + 2 * layout.SLOT;
	        }
	    }
	    return dy + cheight;
	};
	const uimapOne = function (graph, id, ghostId, nodeId, layout, uigraph) {
	    uigraph.uiNodeById[id] = { id };
	    const uibox = uigraph.uiNodeById[id];
	    const node = graph.nodesById[id];
	    const block = graph.blocksById[node.blockId];
	    uibox.name = block.name;
	    if (ghostId === id) {
	        uibox.isghost = ghostId;
	        ghostId = 'ghost';
	    }
	    else if (nodeId === id) {
	        ghostId = null;
	    }
	    else if (ghostId === 'ghost') {
	        // for children of starting ghost, we set nodeId so that
	        // hovering with mouse during drag operation triggers a new
	        // drop preview.
	        uibox.isghost = ghostId;
	    }
	    if (block.name === 'main') {
	        uibox.className = 'main';
	    }
	    else {
	        uibox.className = className(block.name, layout);
	    }
	    const size = minSize_1.minSize(block, node, layout);
	    size.wde = 0;
	    const childrenTypes = block.meta.children;
	    const slots = [];
	    const sl = layout.SLOT;
	    const sextra = [0]; // extra spacing before slots
	    // first has 0 extra spacing
	    // second has spacing dependent on first child, etc
	    const ds = size.ds;
	    if (ds > 0) {
	        let x = layout.RADIUS + layout.SPAD;
	        const y = layout.HEIGHT;
	        // Compute sizes for all children
	        const sline = `M${-sl} ${0} h${2 * sl}`;
	        const spath = `M${-sl} ${0} l${sl} ${-sl} l${sl} ${sl}`;
	        const plus = `M${-sl} ${2 * sl} h${2 * sl} M${0} ${sl} v${2 * sl}`;
	        const r = layout.RADIUS;
	        const cw = layout.SCLICKW;
	        const ch = layout.SCLICKH;
	        // start top left below rounded corner
	        const clickp = [`M${-cw / 2} ${-sl + r}`];
	        clickp.push(`a${r} ${r} 0 0 1 ${r} ${-r}`);
	        clickp.push(`h${cw - 2 * r}`);
	        clickp.push(`a${r} ${r} 0 0 1 ${r} ${r}`);
	        clickp.push(`v${ch - 2 * r}`);
	        clickp.push(`a${r} ${r} 0 0 1 ${-r} ${r}`);
	        clickp.push(`h${-cw + 2 * r}`);
	        clickp.push(`a${r} ${r} 0 0 1 ${-r} ${-r}`);
	        clickp.push(`v${-ch + 2 * r} z`);
	        const click = clickp.join('');
	        const slotpad = layout.SPAD + 2 * layout.SLOT;
	        const serr = node.serr;
	        for (let i = 0; i < ds; i += 1) {
	            const childId = node.children[i];
	            const pos = { x: x + sl, y };
	            const free = !childId;
	            const incompatible = serr && serr[i] ? true : false;
	            // TODO: could we use slot error 'serr' here ?
	            if (childrenTypes && !childrenTypes[i]) {
	                // extra links outside of inputs...
	                slots.push({ path: sline,
	                    idx: i,
	                    pos,
	                    plus,
	                    click,
	                    flags: { detached: true }
	                });
	            }
	            else if (incompatible) {
	                slots.push({ path: sline,
	                    idx: i,
	                    pos,
	                    plus,
	                    click,
	                    flags: { free, incompatible }
	                });
	            }
	            else {
	                slots.push({ path: spath,
	                    idx: i,
	                    pos,
	                    plus,
	                    click,
	                    flags: { free }
	                });
	            }
	            if (childId) {
	                const nodes = uigraph.nodes;
	                // We push in sextra the delta for slot i
	                const w = uimapOne(graph, childId, ghostId, nodeId, layout, uigraph);
	                if (i === ds - 1) {
	                    // last
	                    sextra.push(w + layout.BPAD - 2 * slotpad);
	                }
	                else {
	                    sextra.push(w + layout.BPAD - slotpad);
	                }
	                x += w;
	            }
	            else {
	                // empty slot
	                if (i === ds - 1) {
	                    sextra.push(0);
	                }
	                else {
	                    // empty slot adds extra padding for click
	                    const w = layout.SCLICKW / 2 + slotpad;
	                    x += w; // layout.SPAD + 2 * layout.SLOT
	                    sextra.push(w + layout.BPAD - slotpad);
	                }
	            }
	        }
	        // Compute extra size for this box depending on i-1 children ( last child
	        // does not change slot position )
	        if (sextra.length > 0) {
	            size.wde = sextra.reduce((sum, e) => sum + e);
	        }
	        // sextra.pop ()
	        size.w = Math.max(size.w, size.wd + size.wde);
	    }
	    uibox.sextra = sextra;
	    uibox.size = size;
	    uibox.path = path(uibox, layout);
	    uibox.slots = slots;
	    // draw nodes from child to parent
	    uigraph.nodes.push(id);
	    return uibox.size.w;
	};
	/** Compute the layout of a graph.
	 */
	exports.uimap = (graph, ghostId // start considering as ghost from here
	    , nodeId // stop considering as ghost from here
	    , alayout) => {
	    const layout = alayout || uilayout_1.defaultUILayout;
	    const startpos = { x: 0.5,
	        y: 0.5 + layout.SLOT + layout.RADIUS
	    };
	    const uigraph = { nodes: [],
	        grabpos: { x: startpos.x + layout.RADIUS + layout.SPAD + layout.SLOT,
	            y: startpos.y + layout.HEIGHT / 2 - 6 // 6 = pointer size
	        },
	        uiNodeById: {},
	        size: { width: 0, height: 0 }
	    };
	    uimapOne(graph, rootNodeId, ghostId, nodeId, layout, uigraph);
	    const height = boxPosition(graph, rootNodeId, layout, uigraph, startpos) +
	        layout.SCLICKH +
	        layout.SLOT + 1;
	    const width = uigraph.uiNodeById[rootNodeId].size.w + 1;
	    uigraph.size = { width, height };
	    return uigraph;
	};


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const getTextSizeCanvas_1 = __webpack_require__(50);
	/** Some constants for graph layout.
	 * These could live in a settings object when
	 * calling boxLayout and path.
	 */
	const DEFAULT_LAYOUT = { GRIDH: 6,
	    HEIGHT: 26,
	    THEIGHT: 20,
	    RADIUS: 5,
	    SLOT: 5,
	    SPAD: 16 // slot pad
	    ,
	    SCLICKW: 0 // (computed from SLOT and SPAD ) slot click rect width
	    ,
	    SCLICKH: 0 // (computed from HEIGHT) slot click rect height
	    ,
	    TPAD: 8,
	    BPAD: 0 // pad between siblings
	    ,
	    PCOUNT: 12 // palette color count must be the same as _palettee.scss
	    ,
	    SUBPADX: 0 // (computed  = 2 * GRIDH) pad in sub assets
	    ,
	    SUBPADY: 4 // (computed  = 2 * GRIDH) pad in sub assets
	    ,
	    VPAD: 0 // vertical padding between boxes
	    ,
	    tsizer: null
	};
	exports.UILayout = (o) => {
	    const res = Object.assign({}, DEFAULT_LAYOUT, o || {});
	    res.SUBPADX = 2 * res.GRIDH;
	    res.SCLICKW = res.SPAD + 2 * res.SLOT;
	    res.SCLICKH = 1.2 * res.HEIGHT;
	    if (!res.tsizer) {
	        res.tsizer = getTextSizeCanvas_1.getTextSizeCanvas('10pt Avenir Next');
	    }
	    return res;
	};
	exports.defaultUILayout = exports.UILayout();


/***/ },
/* 50 */
/***/ function(module, exports) {

	"use strict";
	exports.getTextSizeCanvas = (font) => {
	    const canvas = document.createElement('canvas');
	    const context = canvas.getContext('2d');
	    context.font = font;
	    return (text) => {
	        const w = context.measureText(text);
	        return { width: Math.ceil(w.width) };
	    };
	};


/***/ },
/* 51 */
/***/ function(module, exports) {

	"use strict";
	/** Compute the minimum size to display the element.
	 */
	exports.minSize = (block, node, layout) => {
	    const ds = block.meta.children
	        ? Math.max(block.meta.children.length, node.children.length)
	        : node.children.length + 1;
	    const us = 1; // alwasy show up slot.
	    // has update = block.meta.isvoid || block.meta.update ? 1 : 0
	    const tb = layout.tsizer(block.name);
	    let w = tb.width + 2 * layout.TPAD;
	    // width down (taken by inlets)
	    const wd = layout.RADIUS +
	        ds * (layout.SPAD + 2 * layout.SLOT) +
	        layout.SPAD + layout.RADIUS;
	    // width up (taken by outlets)
	    const wu = layout.RADIUS +
	        us * (layout.SPAD + 2 * layout.SLOT) +
	        layout.SPAD + layout.RADIUS;
	    w = Math.ceil(Math.max(w, wd, wu) / layout.GRIDH) * layout.GRIDH;
	    return { cacheName: block.name // cache reference
	        ,
	        w,
	        h: layout.HEIGHT,
	        tx: layout.TPAD,
	        ty: layout.HEIGHT / 2 + layout.THEIGHT / 4,
	        wd,
	        wu,
	        ds,
	        us,
	        wde: 0
	    };
	};


/***/ },
/* 52 */
/***/ function(module, exports) {

	module.exports = function(str) {
	  var hash = 5381,
	      i    = str.length
	
	  while(i)
	    hash = (hash * 33) ^ str.charCodeAt(--i)
	
	  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
	   * integers. Since we want the results to be always positive, if the high bit
	   * is set, unset it and add it back in through (64-bit IEEE) addition. */
	  return hash >= 0 ? hash : (hash & 0x7FFFFFFF) + 0x80000000
	}


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	const init_1 = __webpack_require__(54);
	__export(__webpack_require__(56));
	exports.Midi = (options = {}) => {
	    return (module, controller) => {
	        module.addState();
	        module.addSignals({ init: init_1.init
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const initAction_1 = __webpack_require__(55);
	const Status_1 = __webpack_require__(57);
	const set = __webpack_require__(60);
	exports.init = [initAction_1.initAction,
	    { success: [Status_1.status,
	            set('state:/$midi.status', 'on')
	        ],
	        error: [Status_1.status,
	            set('state:/$midi.status', 'off')
	        ]
	    }
	];


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const MidiHelper_1 = __webpack_require__(56);
	exports.initAction = ({ state, output }) => {
	    MidiHelper_1.MidiHelper.init()
	        .then((message) => {
	        output.success({ status: 'ok', message });
	    })
	        .catch((message) => {
	        output.error({ status: 'error', message });
	    });
	};
	exports.initAction['async'] = true;


/***/ },
/* 56 */
/***/ function(module, exports) {

	"use strict";
	let midi;
	const makeValues = (chan, val) => {
	    const notes = [];
	    for (let i = 0; i < 128; ++i) {
	        notes[i] = val;
	    }
	    return notes;
	};
	const makeChannels = (count, clbk, val) => {
	    const channels = [];
	    for (let i = 1; i <= count; ++i) {
	        channels[i] = clbk(i, val);
	    }
	    return channels;
	};
	const mstate = { note: makeChannels(16, makeValues, 0),
	    ctrl: makeChannels(16, makeValues, 0)
	};
	const NOTE_OFF = 0x80;
	const NOTE_ON = 0x90;
	const CTRL = 0xB0;
	const receive = (m) => {
	    const s = m.data[0];
	    const c = 1 + (s & 0x0f);
	    const type = s & 0xf0;
	    const key = m.data[1] & 0x7f;
	    const value = m.data[2] & 0x7f;
	    console.log(type, key, value);
	    switch (type) {
	        case NOTE_OFF:
	            mstate.note[c][key] = 0;
	            break;
	        case NOTE_ON:
	            mstate.note[c][key] = value;
	            break;
	        case CTRL:
	            mstate.ctrl[c][key] = value;
	            break;
	    }
	};
	const nav = navigator;
	var MidiHelper;
	(function (MidiHelper) {
	    MidiHelper.midiState = () => {
	        return mstate;
	    };
	    MidiHelper.init = () => {
	        return new Promise((resolve, reject) => {
	            if (nav.requestMIDIAccess) {
	                nav.requestMIDIAccess()
	                    .then((m) => {
	                    midi = m;
	                    for (const input of m.inputs.values()) {
	                        input.onmidimessage = receive;
	                    }
	                })
	                    .catch((err) => {
	                    reject(`NO MIDI (${err})`);
	                });
	                resolve('MIDI support detected');
	            }
	            else {
	                reject('NO MIDI support');
	            }
	        });
	    };
	})(MidiHelper = exports.MidiHelper || (exports.MidiHelper = {}));


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(3));
	const changed_1 = __webpack_require__(58);
	const toggledDetail_1 = __webpack_require__(59);
	exports.Status = (options = {}) => {
	    return (module, controller) => {
	        module.addState({ list: [],
	            detail: {},
	            showDetail: false
	        });
	        module.addSignals({ changed: changed_1.changed,
	            toggledDetail: toggledDetail_1.toggledDetail
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const status_1 = __webpack_require__(3);
	exports.changed = [status_1.status
	];


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const toggleDetail_1 = __webpack_require__(4);
	exports.toggledDetail = [toggleDetail_1.toggleDetail
	];


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(61).default


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (path, value) {
	  var setValue = (0, _set2.default)(path);
	
	  var set = function set(args) {
	    var response = setValue(args, value);
	    if (response && typeof response.then === 'function') {
	      response.then(args.output.success).catch(args.output.error);
	    }
	  };
	
	  set.displayName = 'addons.set(' + (0, _toDisplayName2.default)(path, setValue) + ', ' + JSON.stringify(value) + ')';
	
	  return set;
	};
	
	var _set = __webpack_require__(62);
	
	var _set2 = _interopRequireDefault(_set);
	
	var _toDisplayName = __webpack_require__(70);
	
	var _toDisplayName2 = _interopRequireDefault(_toDisplayName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(63).default


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = compile;
	
	var _compiler = __webpack_require__(64);
	
	var _compiler2 = _interopRequireDefault(_compiler);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function compile(path) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? 'set' : arguments[1];
	
	  return (0, _compiler2.default)(path, fn, false);
	}

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = compile;
	
	var _input = __webpack_require__(65);
	
	var _input2 = _interopRequireDefault(_input);
	
	var _output = __webpack_require__(67);
	
	var _output2 = _interopRequireDefault(_output);
	
	var _state = __webpack_require__(68);
	
	var _state2 = _interopRequireDefault(_state);
	
	var _parseUrl = __webpack_require__(69);
	
	var _parseUrl2 = _interopRequireDefault(_parseUrl);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function compile(path, fn, isGetter) {
	  if (typeof path === 'string') {
	    // check if the string is a url
	    var url = (0, _parseUrl2.default)(path);
	    if (url) {
	      var urlPath = url.path && url.path.split('.') || [];
	      if (url.scheme === 'input' && fn === 'get') {
	        return (0, _input2.default)(path, url, urlPath);
	      } else if (url.scheme === 'output' && fn === 'set') {
	        return (0, _output2.default)(path, url, urlPath);
	      } else if (url.scheme === 'state') {
	        return (0, _state2.default)(path, url, urlPath, fn, isGetter);
	      } else {
	        return console.error(path + ' : not supported by input, output or state.' + fn);
	      }
	    }
	  } else if (typeof path === 'function') {
	    // for functions simply return them
	    return path;
	  }
	  // other values (probably an array or non-url string) are passed through to state.fn
	  var stateFn = function state(_ref) {
	    var state = _ref.state;
	
	    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      values[_key - 1] = arguments[_key];
	    }
	
	    if (isGetter) {
	      return path ? state[fn].apply(state, [path].concat(values)) : state[fn].apply(state, values);
	    } else {
	      if (path) {
	        state[fn].apply(state, [path].concat(values));
	      } else {
	        state[fn].apply(state, values);
	      }
	      return values.length === 1 ? values[0] : values;
	    }
	  };
	  stateFn.displayName = 'state.' + fn;
	  return stateFn;
	}

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _objectPath = __webpack_require__(66);
	
	exports.default = function (path, url, urlPath) {
	  // get the value from the input object
	  return function input(_ref) {
	    var input = _ref.input;
	
	    return urlPath ? (0, _objectPath.getPathValue)(input, urlPath) : input;
	  };
	};

/***/ },
/* 66 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getPathValue = getPathValue;
	exports.setPathValue = setPathValue;
	function getPathValue(obj, path) {
	  var value = undefined;
	  if (obj && path) {
	    if (Array.isArray(path)) {
	      value = obj;
	      path.forEach(function (key) {
	        if (value) {
	          value = value[key];
	        }
	      });
	    } else {
	      value = obj[path];
	    }
	  }
	  return value;
	}
	
	function setPathValue(obj, path, value) {
	  if (obj && path) {
	    if (Array.isArray(path)) {
	      (function () {
	        var node = obj;
	        path.forEach(function (key, index) {
	          node = node[key] = index + 1 < path.length ? node[key] || {} : value;
	        });
	      })();
	    } else {
	      obj[path] = value;
	    }
	  }
	}

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _objectPath = __webpack_require__(66);
	
	exports.default = function (path, url, urlPath) {
	  // add the value to the input object and pass it to output
	  return function output(_ref, value) {
	    var input = _ref.input;
	    var output = _ref.output;
	
	    var outputValue = value && typeof value.toJS === 'function' ? value.toJS() : value && value.constructor === Object && Object.isFrozen(value) ? JSON.parse(JSON.stringify(value)) : value;
	    if (urlPath) {
	      (0, _objectPath.setPathValue)(input, urlPath, outputValue);
	      output(input);
	    } else {
	      output(outputValue);
	    }
	    return value;
	  };
	};

/***/ },
/* 68 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	var execute = function execute(state, values, urlPath, fn, isGetter) {
	  if (isGetter) {
	    return urlPath ? state[fn].apply(state, [urlPath].concat(_toConsumableArray(values))) : state[fn].apply(state, _toConsumableArray(values));
	  } else {
	    if (urlPath) {
	      state[fn].apply(state, [urlPath].concat(_toConsumableArray(values)));
	    } else {
	      state[fn].apply(state, _toConsumableArray(values));
	    }
	    return values.length === 1 ? values[0] : values;
	  }
	};
	
	exports.default = function (path, url, urlPath, fn, isGetter) {
	  if (url.host) {
	    // process on the named module
	    var moduleFn = function moduleState(_ref) {
	      var modules = _ref.modules;
	      var state = _ref.state;
	
	      var module = modules[url.host];
	      if (!module) {
	        return console.error(path + " : module was not found.");
	      }
	
	      for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        values[_key - 1] = arguments[_key];
	      }
	
	      return execute(state, values, [].concat(_toConsumableArray(module.path), _toConsumableArray(urlPath)), fn, isGetter);
	    };
	    moduleFn.displayName = "module.state." + fn;
	    return moduleFn;
	  } else {
	    // process on the global state
	    var stateFn = function state(_ref2) {
	      var state = _ref2.state;
	
	      for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        values[_key2 - 1] = arguments[_key2];
	      }
	
	      return execute(state, values, urlPath, fn, isGetter);
	    };
	    stateFn.displayName = "state." + fn;
	    return stateFn;
	  }
	};

/***/ },
/* 69 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = parseUrl;
	var regex = /^(\w+):(\/\/([^\/]+))?\/([^\/][^\?]*)?(\?(.*))?$/;
	
	function parseUrl(url) {
	  var match = regex.exec(url);
	  return !match ? null : {
	    scheme: match[1],
	    host: match[3],
	    path: match[4]
	  };
	}

/***/ },
/* 70 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (path, getter) {
	  return typeof path === 'function' ? getter.displayName || getter.name : JSON.stringify(path);
	};

/***/ },
/* 71 */
/***/ function(module, exports) {

	"use strict";
	var ControlHelper;
	(function (ControlHelper) {
	    ControlHelper.make = (nc) => {
	        const Slider = (name, callback) => {
	            const values = [0];
	            const set = ([v]) => {
	                values[0] = v;
	                callback(v);
	            };
	            nc.controls.push({ type: 'Slider',
	                values,
	                labels: [name],
	                set
	            });
	        };
	        const Pad = (namex, namey, callback) => {
	            const values = [0, 0];
	            const set = ([x, y]) => {
	                values[0] = x;
	                values[1] = y;
	                callback(x, y);
	            };
	            nc.controls.push({ type: 'Pad',
	                values,
	                labels: [namex, namey],
	                set
	            });
	        };
	        return { Slider, Pad };
	    };
	})(ControlHelper = exports.ControlHelper || (exports.ControlHelper = {}));


/***/ },
/* 72 */
/***/ function(module, exports) {

	module.exports = "/**\n */\n\nexport const init =\n( { context, require, children, cache, detached } ) => {\n\n}\n\nexport const update =\n() => {\n\n}\n\nexport const meta =\n{ description: ''\n, tags: []\n, author: ''\n, origin: ''\n}\n"

/***/ },
/* 73 */
/***/ function(module, exports) {

	module.exports = "/**\n */\nlet updateAll\n\nexport const init =\n( { children } ) => {\n  updateAll = children.all\n}\n\nexport const update =\n() => {\n  updateAll ()\n}\n\nexport const meta =\n{ description: 'Update all children on.'\n, tags: [ 'main' ]\n, origin: 'lucidity.io/main'\n, children: 'all'\n}\n"

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const addAction_1 = __webpack_require__(75);
	const save_1 = __webpack_require__(76);
	exports.add = [addAction_1.addAction,
	    ...save_1.save
	];


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Immutable_1 = __webpack_require__(43);
	// FIXME: why is this 'undefined' if imported from 'Graph' above ?
	const GraphHelper_1 = __webpack_require__(25);
	const BlockHelper_1 = __webpack_require__(29);
	const rootBlockId = BlockHelper_1.BlockHelper.rootBlockId;
	exports.addAction = ({ state, input, output }) => {
	    const { pos, parentId, ownerType, componentId } = input;
	    const owner = state.get([ownerType]);
	    let child;
	    if (componentId) {
	        child = state.get(['data', 'component', componentId]).graph;
	    }
	    else {
	        // if we have a block named 'default' in library, we use this
	        const library = state.get(['data', 'component']);
	        for (const k in library) {
	            if (library[k].name === 'default') {
	                child = Immutable_1.Immutable.update(library[k].graph, 'blocksById', rootBlockId, 'name', 'new block');
	                break;
	            }
	        }
	        if (!child) {
	            child = GraphHelper_1.GraphHelper.create('new block');
	        }
	    }
	    const graph = GraphHelper_1.GraphHelper.insert(owner.graph, parentId, pos, child);
	    const ownerupdate = Object.assign({}, owner, { graph });
	    if (state.get('$block')) {
	        const nid = graph.nodesById[parentId].children[pos];
	        const id = graph.nodesById[nid].blockId;
	        // if editor is open, start editing name
	        state.set('$factory.block.add', id);
	    }
	    output({ doc: ownerupdate });
	};


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const saveAction_1 = __webpack_require__(77);
	const status_1 = __webpack_require__(3);
	exports.save = [saveAction_1.saveAction,
	    { success: [],
	        error: [status_1.status]
	    }
	];


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const check = __webpack_require__(24);
	exports.saveAction = ({ state, input: { doc, docs }, services: { data: { db } }, output }) => {
	    if (docs) {
	        db.bulkDocs(docs, (err) => {
	            if (err) {
	                output.error({ status: { type: 'error', message: err } });
	            }
	            else {
	                output.success({ status: { type: 'success',
	                        message: `Saved ${docs[0].type}`
	                    }
	                });
	            }
	        });
	    }
	    else if (doc) {
	        // setTimeout ( () => {
	        db.put(doc, (err) => {
	            if (err) {
	                output.error({ status: { type: 'error', message: err.message } });
	            }
	            else {
	                output.success({ status: { type: 'success', message: `Saved ${doc.type}` } });
	            }
	        });
	    }
	    else {
	        throw 'Missing "docs" or "doc" in Data.save';
	    }
	};
	exports.saveAction['async'] = true;
	// Cerebral type checking
	const mdoc = { _id: 'string', type: 'string' };
	exports.saveAction['input'] = (v) => {
	    return check.maybe.like(v.doc, mdoc)
	        && check.maybe.array.of.like(v.docs, mdoc);
	};


/***/ },
/* 78 */
/***/ function(module, exports) {

	"use strict";
	exports.AnySlot = 'any';


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(118);

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const copy = __webpack_require__(81);
	exports.controls = [copy('input:/controls', 'state:/$controls')
	];


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(82).default


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (fromPath) {
	  var getValue = (0, _get2.default)(fromPath);
	
	  for (var _len = arguments.length, toPaths = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    toPaths[_key - 1] = arguments[_key];
	  }
	
	  var setValues = toPaths.map(function (toPath) {
	    return (0, _set2.default)(toPath);
	  });
	
	  var copyTo = function copyTo(setters, args, value, async) {
	    if (setters.length === 0) {
	      if (async) {
	        args.output.success(value);
	      }
	    } else {
	      var response = setters[0](args, value);
	      if (response && typeof response.then === 'function') {
	        response.then(function (val) {
	          return copyTo(setters.slice(1), args, val, true);
	        }).catch(args.output.error);
	      } else {
	        copyTo(setters.slice(1), args, response, async);
	      }
	    }
	  };
	
	  var copy = function copyFrom(args) {
	    var value = getValue(args);
	    if (value && typeof value.then === 'function') {
	      value.then(function (val) {
	        return copyTo(setValues, args, val, true);
	      }).catch(args.output.error);
	    } else {
	      copyTo(setValues, args, value);
	    }
	  };
	
	  copy.displayName = 'addons.copy(' + (0, _toDisplayName2.default)(fromPath, getValue) + ', ' + toPaths.map(function (path, index) {
	    return (0, _toDisplayName2.default)(path, setValues[index]);
	  }).join(', ') + ')';
	
	  return copy;
	};
	
	var _get = __webpack_require__(83);
	
	var _get2 = _interopRequireDefault(_get);
	
	var _set = __webpack_require__(62);
	
	var _set2 = _interopRequireDefault(_set);
	
	var _toDisplayName = __webpack_require__(70);
	
	var _toDisplayName2 = _interopRequireDefault(_toDisplayName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(84).default


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = compile;
	
	var _compiler = __webpack_require__(64);
	
	var _compiler2 = _interopRequireDefault(_compiler);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function compile(path) {
	  var fn = arguments.length <= 1 || arguments[1] === undefined ? 'get' : arguments[1];
	
	  return (0, _compiler2.default)(path, fn, true);
	}

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const nameAction_1 = __webpack_require__(86);
	const save_1 = __webpack_require__(76);
	const set = __webpack_require__(60);
	exports.name = [nameAction_1.nameAction,
	    set('state:/$factory.block.close', true),
	    ...save_1.save
	];


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const _1 = __webpack_require__(27);
	const Graph_1 = __webpack_require__(46);
	exports.nameAction = ({ state, input: { value }, output }) => {
	    const path = ['block', 'name'];
	    // close editable
	    state.set(['$factory', 'editing'], false);
	    // mark element as 'saving'
	    state.set(['$factory', ...path, 'saving'], true);
	    // temporary value during save
	    state.set(['$factory', ...path, 'value'], value);
	    const select = state.get(['$block']);
	    if (!select) {
	        // no block selected
	        return;
	    }
	    const doc = Graph_1.Immutable.update(state.get([select.ownerType]), 'graph', 'blocksById', select.id, (block) => _1.BlockHelper.update(block, { name: value }));
	    output({ doc });
	};


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const nameAction_1 = __webpack_require__(86);
	const save_1 = __webpack_require__(76);
	const selectAction_1 = __webpack_require__(88);
	// import { source } from '../signals/source'
	exports.select = [selectAction_1.selectAction,
	    { error: [nameAction_1.nameAction,
	            ...save_1.save,
	            selectAction_1.selectAction
	        ],
	        success: []
	    }
	];


/***/ },
/* 88 */
/***/ function(module, exports) {

	"use strict";
	exports.selectAction = ({ state, input: { doc, select, selectDone }, output }) => {
	    const sel = state.get(['$block']);
	    if (select) {
	        // simple select
	        if (select.id === '' ||
	            (sel && select.id == sel.id && select.ownerType == sel.ownerType)) {
	            // close
	            state.unset(['$block']);
	        }
	        else {
	            const editing = state.get(['$factory', 'block', 'name']);
	            if (typeof editing === 'string' && !selectDone) {
	                // writing changes, we must save this name before
	                // selecting new element
	                output.error({ value: editing, selectDone: true });
	            }
	            else {
	                state.set(['$block'], select);
	            }
	        }
	    }
	    else if (doc) {
	        const graph = doc.graph;
	        if (sel) {
	            // only select if block is visible
	            state.set(['$block'], { id: graph.blockId, ownerType: doc.type });
	        }
	    }
	};


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const sourceAction_1 = __webpack_require__(90);
	const save_1 = __webpack_require__(76);
	const throttle = __webpack_require__(91);
	exports.source = [sourceAction_1.sourceAction,
	    { success: [throttle(500, [...save_1.save])],
	        error: []
	    }
	];


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Graph_1 = __webpack_require__(46);
	const GraphHelper_1 = __webpack_require__(25);
	exports.sourceAction = ({ state, input: { value }, output }) => {
	    const select = state.get(['$block']);
	    if (!select) {
	        // no block visible
	        return;
	    }
	    const odoc = state.get(select.ownerType);
	    const graph = odoc.graph;
	    const source = graph.blocksById[select.id].source;
	    if (source === value) {
	        output.error({});
	        return;
	    }
	    try {
	        // updateSource throws an exception if the source is invalid.
	        // FIXME: Bubble this error up to state => Editor
	        const doc = Graph_1.Immutable.update(odoc, 'graph', GraphHelper_1.GraphHelper.updateSource(graph, select.id, value));
	        output.success({ doc });
	    }
	    catch (err) {
	        console.log(err);
	    }
	};


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(92).default


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _debounce = __webpack_require__(93);
	
	var _debounce2 = _interopRequireDefault(_debounce);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (time, continueChain) {
	  var options = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	  return (0, _debounce2.default)(time, continueChain, Object.assign({
	    terminateChain: []
	  }, options, {
	    immediate: true,
	    throttle: true,
	    _displayName: 'throttle'
	  }));
	};

/***/ },
/* 93 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (time, continueChain) {
	  var options = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	
	  var id = Symbol('id');
	
	  if (options === null) {
	    console.warn('cerebral-addons: calling debounce() without options has been temporarily deprecated. https://gist.github.com/garth/c1ff94b9cb41ad1b107d');
	  }
	
	  var _ref = options || {};
	
	  var _ref$terminateChain = _ref.terminateChain;
	  var terminateChain = _ref$terminateChain === undefined ? [] : _ref$terminateChain;
	  var _ref$immediate = _ref.immediate;
	  var immediate = _ref$immediate === undefined ? true : _ref$immediate;
	  var _ref$throttle = _ref.throttle;
	  var throttle = _ref$throttle === undefined ? true : _ref$throttle;
	  var _ref$_displayName = _ref._displayName;
	
	  var _displayName = _ref$_displayName === undefined ? 'debounce' : _ref$_displayName;
	
	  var timeout = function debounceTimeout() {
	    if (pending[id].continue) {
	      // continue the final signal
	      pending[id].continue();
	      // immediate debounce should wait until time before sending immediate again
	      if (immediate) {
	        pending[id] = {
	          timeout: setTimeout(timeout, time)
	        };
	      } else {
	        delete pending[id];
	      }
	    } else {
	      // no pending signals
	      delete pending[id];
	    }
	  };
	
	  var debounce = function debounce(_ref2) {
	    var output = _ref2.output;
	
	    if (pending[id]) {
	      // not first time
	      if (pending[id].terminate) {
	        // terminate the previous signal
	        pending[id].terminate();
	
	        // convert from throttle to a debounce
	        // todo: this flag should eventually be removed
	        if (!throttle) {
	          clearTimeout(pending[id].timeout);
	          pending[id] = {
	            timeout: setTimeout(timeout, time)
	          };
	        }
	      }
	      // replace previous signal with this one
	      pending[id].continue = output.continue;
	      pending[id].terminate = output.terminate;
	    } else {
	      // first time
	      pending[id] = {
	        timeout: setTimeout(timeout, time)
	      };
	      if (!immediate) {
	        // queue the signal
	        pending[id].continue = output.continue;
	        pending[id].terminate = output.terminate;
	      } else {
	        // continue the signal
	        output.continue();
	      }
	    }
	  };
	
	  debounce.outputs = ['continue', 'terminate'];
	
	  debounce.displayName = 'addons.' + _displayName + '(' + time + ', ...)';
	
	  return [debounce, {
	    continue: continueChain,
	    terminate: terminateChain
	  }];
	};
	
	var pending = {};

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const copy = __webpack_require__(81);
	exports.tab = [copy('input:/value', 'state:/$blocktab')
	];


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const valuesAction_1 = __webpack_require__(96);
	exports.values = [valuesAction_1.valuesAction
	];


/***/ },
/* 96 */
/***/ function(module, exports) {

	"use strict";
	exports.valuesAction = ({ state, input: { values, pos } }) => {
	    state.set(['$playback', 'ctrl', pos], values);
	};


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Block_1 = __webpack_require__(27);
	const Factory_1 = __webpack_require__(10);
	const GraphHelper_1 = __webpack_require__(25);
	const rootBlockId = Block_1.BlockHelper.rootBlockId;
	var SceneHelper;
	(function (SceneHelper) {
	    SceneHelper.create = () => {
	        const _id = Factory_1.makeId();
	        const graph = GraphHelper_1.GraphHelper.create();
	        return Object.freeze({ _id,
	            type: 'scene',
	            name: 'New scene',
	            graph,
	            blockId: rootBlockId
	        });
	    };
	    SceneHelper.select = (state, user, scene) => {
	        if (!scene) {
	            return Object.assign({}, user, { sceneId: null
	            });
	        }
	        return Object.assign({}, user, { sceneId: scene._id
	        });
	    };
	})(SceneHelper = exports.SceneHelper || (exports.SceneHelper = {}));


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const check = __webpack_require__(24);
	exports.selectAction = ({ state, input: { _id }, output, services }) => {
	    const project = state.get(['data', 'project', _id]);
	    state.set(['$projectId'], _id);
	    if (!project) {
	        // FIXME: redirect is bad. We should find another way of showing
	        // that the project is not available.
	        return;
	    }
	    const sceneId = state.get(['$sceneId']);
	    if (project.scenes.indexOf(sceneId) >= 0) {
	    }
	    else {
	        state.set(['$sceneId'], project.scenes[0]);
	    }
	};
	exports.selectAction['input'] =
	    { _id: check.string
	    };


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const addAction_1 = __webpack_require__(100);
	const save_1 = __webpack_require__(76);
	exports.add = [addAction_1.addAction,
	    ...save_1.save
	];


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Project_1 = __webpack_require__(8);
	exports.addAction = ({ state, input: {  }, output }) => {
	    const { project, scene } = Project_1.ProjectHelper.create();
	    const docs = [scene, project];
	    // This is a flag that will set name editing after db object
	    // is selected.
	    state.set(['$factory', 'editing'], project._id);
	    // add to user's projects
	    const user = state.get(['user']);
	    const projects = [project._id, ...(user.projects || [])];
	    docs.push(Object.assign({}, user, { projectId: project._id, sceneId: scene._id }));
	    output({ docs });
	};


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const saveDoc_1 = __webpack_require__(102);
	const set = __webpack_require__(60);
	exports.name = [set('output:/type', 'project'),
	    set('output:/key', 'name'),
	    set('state:/$factory.project.close', true),
	    ...saveDoc_1.saveDoc
	];


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const docAction_1 = __webpack_require__(103);
	const save_1 = __webpack_require__(76);
	exports.saveDoc = [docAction_1.docAction,
	    ...save_1.save
	];


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const check = __webpack_require__(24);
	exports.docAction = ({ state, input: { key, type, value }, output }) => {
	    // prepare doc
	    const doc = Object.assign({}, state.get([type]), { [key]: value });
	    const path = [type, key];
	    // mark element as 'saving'
	    state.set(['$factory', ...path, 'saving'], true);
	    // temporary value during save
	    state.set(['$factory', ...path, 'value'], value);
	    output({ doc });
	};
	exports.docAction['input'] =
	    { type: check.string,
	        key: check.string,
	        value: check.string
	    };


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const selectAction_1 = __webpack_require__(98);
	const save_1 = __webpack_require__(76);
	exports.select = 
	// prepare things to add
	[selectAction_1.selectAction,
	    ...save_1.save
	];
	// FIXME: remove (has been replaced by selectProject in app)


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(106).default


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var _get = __webpack_require__(83);
	
	var _get2 = _interopRequireDefault(_get);
	
	var _toDisplayName = __webpack_require__(70);
	
	var _toDisplayName2 = _interopRequireDefault(_toDisplayName);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var truthy = Symbol('truthy');
	var falsy = Symbol('falsy');
	var otherwise = Symbol('otherwise');
	
	function when(path) {
	  var conditions = arguments.length <= 1 || arguments[1] === undefined ? { 'true': truthy, 'false': otherwise } : arguments[1];
	
	  var getValue = (0, _get2.default)(path);
	
	  // prepare the output conditions
	  var otherwisePath = null;
	  var outputConditions = {};
	  if (Array.isArray(conditions)) {
	    conditions.forEach(function (condition) {
	      outputConditions[condition] = condition;
	    });
	  } else {
	    for (var _path in conditions) {
	      outputConditions[_path] = conditions[_path];
	      otherwisePath = otherwisePath || conditions[_path] === otherwise && _path;
	    }
	  }
	  if (!otherwisePath) {
	    outputConditions['otherwise'] = otherwise;
	    otherwisePath = 'otherwise';
	  }
	
	  // test the getter returned value
	  var whenTest = function whenTest(args, value) {
	    // treat objects with no keys as falsy
	    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.keys(value).length === 0) {
	      value = false;
	    }
	
	    var outputPath = void 0;
	
	    for (var _path2 in outputConditions) {
	      var test = outputConditions[_path2];
	      if (test !== otherwise && (test === value || test === truthy && value || test === falsy && !value)) {
	        outputPath = _path2;
	        break;
	      }
	    }
	
	    args.output[outputPath || otherwisePath]();
	  };
	
	  // define the action
	  var action = function whenRead(args) {
	    var value = getValue(args);
	    if (value && typeof value.then === 'function') {
	      value.then(function (val) {
	        return whenTest(args, val);
	      }).catch(function (error) {
	        console.error(action.displayName + ' caught an error whilst getting a value to test', error);
	      });
	    } else {
	      whenTest(args, value);
	    }
	  };
	
	  action.outputs = Object.keys(outputConditions);
	
	  action.displayName = 'addons.when(' + (0, _toDisplayName2.default)(path, getValue) + ')';
	
	  return action;
	}
	
	when.truthy = truthy;
	when.falsy = falsy;
	when.otherwise = otherwise;
	
	exports.default = when;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const testing_1 = __webpack_require__(108);
	const runall_1 = __webpack_require__(109);
	const stats_1 = __webpack_require__(135);
	const status_1 = __webpack_require__(3);
	exports.runtests = [testing_1.testing,
	    status_1.status,
	    [runall_1.runall, { success: [stats_1.stats, { success: [status_1.status] }] }] // async
	];


/***/ },
/* 108 */
/***/ function(module, exports) {

	"use strict";
	exports.testing = ({ state, output }) => {
	    output({ status: { type: 'info', message: 'Started testing' } });
	};


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(110);
	const runner_1 = __webpack_require__(112);
	exports.runall = ({ state, output }) => {
	    runner_1.run((stats) => {
	        output.success({ stats });
	    });
	};
	exports.runall['async'] = true;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(111);
	__webpack_require__(116);
	__webpack_require__(120);
	__webpack_require__(122);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(127);
	__webpack_require__(128);
	__webpack_require__(129);
	__webpack_require__(130);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(134);


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Component_1 = __webpack_require__(12);
	const runner_1 = __webpack_require__(112);
	const e = (sel, klass, obj) => {
	    const o = Object.assign({ sel, data: {}, children: [] }, obj || {});
	    if (klass) {
	        o.data.class = { [klass]: true };
	    }
	    return o;
	};
	runner_1.describe('Component.createElement', (it) => {
	    it('should be a function', (assert) => {
	        assert.equal(typeof Component_1.Component.createElement, 'function');
	    });
	    it('should create simple object', (assert) => {
	        assert.equal(Component_1.Component.createElement("foo", null), e('foo'));
	    });
	    it('should accept class string', (assert) => {
	        assert.equal(Component_1.Component.createElement("div", {class: 'foo bar'}), { sel: 'div',
	            data: { class: { foo: true, bar: true }
	            },
	            children: []
	        });
	    });
	    it('should accept style string', (assert) => {
	        assert.equal(Component_1.Component.createElement("div", {style: 'color:#555'}), { sel: 'div',
	            data: { style: { color: '#555' }
	            },
	            children: []
	        });
	    });
	    it('should accept mixed children', (assert) => {
	        assert.equal(Component_1.Component.createElement("ol", null, 
	            [Component_1.Component.createElement("li", {class: 'one'}), Component_1.Component.createElement("li", {class: 'two'})], 
	            Component_1.Component.createElement("li", {class: 'three'}), 
	            [Component_1.Component.createElement("li", {class: 'four'})]), { sel: 'ol',
	            data: {},
	            children: [e('li', 'one'),
	                e('li', 'two'),
	                e('li', 'three'),
	                e('li', 'four')
	            ]
	        });
	    });
	    it('should move data-xx in attrs', (assert) => {
	        assert.equal(Component_1.Component.createElement("foo", {"data-bing": 'top'}), { sel: 'foo',
	            data: { attrs: { ['data-bing']: 'top' } },
	            children: []
	        });
	    });
	    it('should move data-xx in attrs for svg', (assert) => {
	        const r = Component_1.Component.createElement("svg", null, 
	            Component_1.Component.createElement("path", {"data-bing": 'top'})
	        );
	        assert.equal(r.children[0].data.attrs, { ['data-bing']: 'top'
	        });
	    });
	    it('should optimize through key', (assert) => {
	        const Foo = Component_1.Component({}, ({  }) => Component_1.Component.createElement("div", null));
	        const a = Component_1.Component.createElement(Foo, {key: 'bar'});
	        const b = Component_1.Component.createElement(Foo, {key: 'bar'});
	        const c = Component_1.Component.createElement(Foo, {key: 'bing'});
	        const d = Component_1.Component.createElement(Foo, null);
	        assert.same(a, b);
	        assert.notSame(a, c);
	        assert.notSame(a, d);
	    });
	    it('should wrap props', (assert) => {
	        assert.equal(Component_1.Component.createElement("foo", {bing: 'top'}), { sel: 'foo',
	            data: { props: { bing: 'top' } },
	            children: []
	        });
	    });
	    it('should parse hooks in sub components', (assert) => {
	        const SubComp = (opts) => opts;
	        assert.equal(Component_1.Component.createElement("foo", null, 
	            Component_1.Component.createElement(SubComp, {foo: 'hop', "on-change": 'bang'})
	        ), { sel: 'foo',
	            data: {},
	            children: [{ on: { change: 'bang' },
	                    foo: 'hop'
	                }
	            ]
	        });
	    });
	    it('should wrap svg without attrs', (assert) => {
	        const ns = 'http://www.w3.org/2000/svg';
	        assert.equal(Component_1.Component.createElement("svg", null, 
	            Component_1.Component.createElement("foo", {bing: 'top'})
	        ), { sel: 'svg',
	            data: { ns, attrs: {} },
	            children: [{ sel: 'foo',
	                    data: { ns, attrs: { bing: 'top' } },
	                    children: []
	                }
	            ]
	        });
	    });
	    it('should wrap svg with attrs', (assert) => {
	        const ns = 'http://www.w3.org/2000/svg';
	        assert.equal(Component_1.Component.createElement("svg", {width: '10'}, 
	            Component_1.Component.createElement("foo", {bing: 'top'})
	        ), { sel: 'svg',
	            data: { ns, attrs: { width: '10' } },
	            children: [{ sel: 'foo',
	                    data: { ns, attrs: { bing: 'top' } },
	                    children: []
	                }
	            ]
	        });
	    });
	    it('should allow rows.map', (assert) => {
	        const rows = ['a', 'b'];
	        const rmap = (r) => Component_1.Component.createElement("li", null, r);
	        assert.equal((Component_1.Component.createElement("ul", null, rows.map(rmap))).children, [e('li', null, { children: [{ text: 'a' }] }),
	            e('li', null, { children: [{ text: 'b' }] })
	        ]);
	    });
	    it('should allow rows.map with mixed', (assert) => {
	        const rows = ['a', 'b'];
	        const rmap = (r) => Component_1.Component.createElement("li", null, r);
	        assert.equal((Component_1.Component.createElement("ul", null, 
	            Component_1.Component.createElement("li", null, "foo"), 
	            rows.map(rmap))).children, [e('li', null, { children: [{ text: 'foo' }] }),
	            e('li', null, { children: [{ text: 'a' }] }),
	            e('li', null, { children: [{ text: 'b' }] })
	        ]);
	    });
	});


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const deepEqual = __webpack_require__(113);
	const DEFAULT_TIMEOUT = 3000;
	const NO_ERR = { message: 'did not throw' };
	const suites = [];
	exports.describe = function (name, clbk) {
	    const suite = { name, tests: [] };
	    suites.push(suite);
	    const it = (testname, test) => {
	        suite.tests.push({ suiteName: name,
	            testName: testname,
	            test,
	            async: test.length === 2
	        });
	    };
	    clbk(it);
	};
	const defaultSuccess = ({ suiteName, testName }) => {
	    // console.log ( `PASS: ${ suiteName } ${ testName }` )
	};
	const defaultPending = ({ suiteName, testName, actual }) => {
	    console.log(`PEND: ${suiteName} ${testName}`);
	    console.log(actual);
	    return true;
	};
	exports.failureMessage = (f) => {
	    const m = [];
	    m.push(`FAIL: ${f.suiteName} ${f.testName}`);
	    switch (f.assertion) {
	        case 'timeout':
	            m.push('timeout exceeded', f.actual);
	            break;
	        case 'notSame':
	            m.push('expected', f.actual);
	            m.push('to not be', f.expected);
	            break;
	        case 'same':
	            m.push('expected', f.actual);
	            m.push('to be', f.expected);
	            break;
	        case 'equal':
	            m.push('expected');
	            m.push(JSON.stringify(f.actual, null, 2));
	            m.push('to equal');
	            m.push(JSON.stringify(f.expected, null, 2));
	            break;
	        default:
	        case 'throws':
	            m.push(f.assertion);
	    }
	    m.push(f.error);
	    return m.join('\n'); // continue
	};
	const defaultFail = (f) => {
	    console.log(exports.failureMessage(f));
	    return true; // continue
	};
	const makeAssert = function (f, stats) {
	    return {
	        same(a, b) {
	            stats.assertCount += 1;
	            f.assertion = 'same';
	            f.actual = a;
	            f.expected = b;
	            if (a !== b) {
	                f.error = new Error(`${a} !== ${b}`);
	                if (f.async) {
	                }
	                else {
	                    throw f.error;
	                }
	            }
	        },
	        notSame(a, b) {
	            stats.assertCount += 1;
	            f.assertion = 'notSame';
	            f.actual = a;
	            f.expected = b;
	            if (a === b) {
	                f.error = new Error(`${a} === ${b}`);
	                if (f.async) {
	                }
	                else {
	                    throw f.error;
	                }
	            }
	        },
	        equal(a, b) {
	            stats.assertCount += 1;
	            f.assertion = 'equal';
	            f.actual = a;
	            f.expected = b;
	            if (!deepEqual(a, b, { strict: true })) {
	                f.error = new Error(`!deepEqual ( ${a}, ${b} )`);
	                if (f.async) {
	                }
	                else {
	                    throw f.error;
	                }
	            }
	        },
	        throws(func, regex) {
	            f.assertion = 'throws';
	            f.expected = regex;
	            let err = NO_ERR;
	            try {
	                func();
	            }
	            catch (e) {
	                err = e;
	            }
	            if (err === NO_ERR || (regex && !regex.test(err.message))) {
	                if (regex) {
	                    f.error = new Error(`${err.message} does not match ${regex}`);
	                }
	                else {
	                    f.error = new Error(`${err.message}`);
	                }
	                if (f.async) {
	                }
	                else {
	                    throw f.error;
	                }
	            }
	        },
	        pending(m) {
	            f.assertion = 'pending';
	            f.actual = m;
	            f.error = new Error(m);
	            if (f.async) {
	            }
	            else {
	                throw f.error;
	            }
	        }
	    };
	};
	const runNext = function (gen, f) {
	    const tim = gen.next().value;
	    if (tim) {
	        // async yield
	        setTimeout(() => tim.next ? f() : null, tim.timeout);
	    }
	    // done ( onfinish called from generator )
	};
	exports.run = function (onfinish, opts) {
	    let gen;
	    const f = () => runNext(gen, f);
	    gen = testGen(onfinish, opts || {}, f);
	    f();
	};
	const testGen = function* (onfinish, { onsuccess = defaultSuccess, onfail = defaultFail, onpending = defaultPending, onsuite, ontest }, forward) {
	    let failures = [];
	    const stats = { testCount: 0, failCount: 0, passCount: 0, pendingCount: 0,
	        assertCount: 0,
	        failures
	    };
	    let failure = {};
	    let assert = makeAssert(failure, stats);
	    const pass = (test) => {
	        // PASS
	        stats.passCount += 1;
	        onsuccess(test);
	    };
	    const fail = (test, error) => {
	        Object.assign(failure, { error }, test);
	        failures.push(failure);
	        if (failure.assertion === 'pending') {
	            stats.pendingCount += 1;
	            onpending(failure);
	        }
	        else {
	            stats.failCount += 1;
	            if (!onfail(failure)) {
	                // abort
	                onfinish(stats);
	                return true;
	            }
	        }
	        failure = {};
	        assert = makeAssert(failure, stats);
	        return false;
	    };
	    const done = () => {
	        // clear
	        failure.async = false;
	        forward();
	    };
	    for (const suite of suites) {
	        if (onsuite) {
	            onsuite(suite);
	        }
	        for (const test of suite.tests) {
	            stats.testCount += 1;
	            if (ontest) {
	                ontest(test);
	            }
	            try {
	                if (test.async) {
	                    test.test(assert, done);
	                    // continue with async
	                    failure.async = true;
	                    const tim = { timeout: DEFAULT_TIMEOUT,
	                        next: true // call next on timeout
	                    };
	                    yield tim;
	                    if (failure.async) {
	                        // timed out
	                        failure.assertion = 'timeout';
	                        failure.actual = DEFAULT_TIMEOUT;
	                        if (fail(test, 'timeout')) {
	                            yield; // abort
	                        }
	                    }
	                    else if (failure.error) {
	                        tim.next = false; // on timeout do nothing
	                        // assertion failure
	                        if (fail(test, failure.error)) {
	                            yield; // abort
	                        }
	                    }
	                    else {
	                        tim.next = false;
	                        // pass
	                        pass(test);
	                    }
	                }
	                else {
	                    test.test(assert);
	                    pass(test);
	                }
	            }
	            catch (error) {
	                // FAIL
	                if (!failure.error) {
	                    // exception in user code
	                    failure.assertion = 'exception';
	                }
	                if (fail(test, error)) {
	                    yield; // abort
	                }
	            }
	        }
	    }
	    // all done
	    onfinish(stats);
	};


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(114);
	var isArguments = __webpack_require__(115);
	
	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	
	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();
	
	  // 7.3. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
	    return opts.strict ? actual === expected : actual == expected;
	
	  // 7.4. For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected, opts);
	  }
	}
	
	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}
	
	function isBuffer (x) {
	  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}
	
	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return typeof a === typeof b;
	}


/***/ },
/* 114 */
/***/ function(module, exports) {

	exports = module.exports = typeof Object.keys === 'function'
	  ? Object.keys : shim;
	
	exports.shim = shim;
	function shim (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}


/***/ },
/* 115 */
/***/ function(module, exports) {

	var supportsArgumentsClass = (function(){
	  return Object.prototype.toString.call(arguments)
	})() == '[object Arguments]';
	
	exports = module.exports = supportsArgumentsClass ? supported : unsupported;
	
	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};
	
	exports.unsupported = unsupported;
	function unsupported(object){
	  return object &&
	    typeof object == 'object' &&
	    typeof object.length == 'number' &&
	    Object.prototype.hasOwnProperty.call(object, 'callee') &&
	    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
	    false;
	};


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Test_1 = __webpack_require__(117);
	const CodeHelper_1 = __webpack_require__(30);
	Test_1.describe('CodeHelper.scrubParse', (it) => {
	    const source = `// This is a comment
	   export const init =
	   ( { context } ) => {
	     context.test.a = 10
	     context.test.b = -20
	     context.test.x = x - 30
	     context.test.y = - 40
	     foo ( -  50 , 60 )
	     const bar = { x: -70, y: [ - 80, 90, 100 - 110 ] }
	   }
	
	   export const update =
	   () => {
	     return 120
	   }
	  `;
	    const literals = [];
	    const scrubjs = CodeHelper_1.CodeHelper.scrubParse(source, literals);
	    it('should get values with unary minus', (assert) => {
	        assert.equal(literals.map(l => l.value), [10, -20, 30, -40, -50, 60, -70, -80, 90, 100, 110, 120]);
	    });
	    const lit = [];
	    CodeHelper_1.CodeHelper.scrubParse("import { Init, Update, Meta } from 'lucidity' // and this goes beyond...\n\n// THis is ok\nexport const init: Init =\n( { context, control, cache, detached } ) => {\n  const position = context.object3d.position\n  \n  const x = -1\n  position.x = x\n  position.y = 1\n  position.z = -3\n  \n  if ( detached ) {\n    position.x = 0\n  }\n}\n\nconst PI2 = Math.PI * 2\n\nexport const meta: Meta =\n{ description: \"Move the current 3D object along x axis.\"\n, tags: [ '3D' , 'three.js', 'position', 'x' ]\n, author: 'Gaspard Bucher <gaspard@lucidity.io>'\n, origin: 'lucidity.io/three.Rotation.x'\n, version: '1.0'\n, expect: { object3d: 'THREE.Object3D' }\n}\n\n// hello ?\n// what", lit);
	    console.log(lit);
	    it('should get literal position', (assert) => {
	        assert.equal(literals.map(l => l.line), [3, 4, 5, 6, 7, 7, 8, 8, 8, 8, 8, 13]);
	    });
	});


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(118));
	__export(__webpack_require__(112));
	exports.Test = (options = {}) => {
	    return (module, controller) => {
	        /*
	        module.addState
	        ( { type: 'info'
	          , message: ''
	          }
	        )
	    
	        module.addSignals
	        ( {
	          }
	        )
	        */
	        return {}; // meta information
	    };
	};


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// modules
	"use strict";
	const Controller = __webpack_require__(119);
	const Model = __webpack_require__(79);
	const testModule = (signal) => (module, controller) => {
	    module.addSignals({ signal });
	};
	exports.signalTest = (state, asignal, services) => {
	    const model = Model(state || {});
	    const controller = Controller(model);
	    const mod = testModule(asignal);
	    controller.addModules({ mod
	    });
	    if (services) {
	        controller.addServices(services);
	    }
	    const signal = controller.getSignals().mod.signal;
	    const send = (input, clbk) => {
	        controller.on('signalEnd', () => clbk(controller));
	        signal(input);
	    };
	    return send;
	};


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(1);

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const saveAction_1 = __webpack_require__(77);
	const Baobab = __webpack_require__(121);
	runner_1.describe('Data save action', (it) => {
	    it('should save to db', (assert) => {
	        const state = new Baobab({ project: { _id: 'foobar' }
	        });
	        let res;
	        const output = { success(args) { res = args; }
	        };
	        const put = (doc, clbk) => clbk();
	        const data = { db: { put } };
	        const services = { data };
	        saveAction_1.saveAction({ state,
	            output,
	            services,
	            input: { doc: { type: 'foobar', name: 'newname' } }
	        });
	        assert.equal(res, { status: { type: 'success', message: 'Saved foobar' } });
	    });
	    it('should send error out', (assert) => {
	        const state = new Baobab({ project: { _id: 'foobar' }
	        });
	        let res;
	        const output = { error(args) { res = args; }
	        };
	        const put = (doc, clbk) => clbk({ message: 'no good' });
	        const services = { data: { db: { put } } };
	        saveAction_1.saveAction({ state, output, services, input: { doc: { name: 'newname' } } });
	        assert.equal(res, { status: { type: 'error', message: 'no good' } });
	    });
	});


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(119);

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const makeDoc_action_1 = __webpack_require__(123);
	const Baobab = __webpack_require__(121);
	runner_1.describe('Factory makeDoc action', (it) => {
	    it('should prepare for db', (assert) => {
	        const state = new Baobab({ data: { main: { foo: { value: 'bong', _rev: '1-x' } } } });
	        let res;
	        const output = (arg) => { res = arg.doc; };
	        makeDoc_action_1.makeDoc({ state,
	            input: { path: ['data', 'main', 'foo', 'value'], value: 'bing' },
	            output
	        });
	        assert.equal(res, { _id: 'foo',
	            type: 'main',
	            _rev: '1-x',
	            value: 'bing'
	        });
	    });
	});


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const check = __webpack_require__(24);
	exports.makeDoc = ({ state, input: { path, value }, output }) => {
	    // prepare doc
	    const base = path.slice(0, path.length - 1);
	    const key = path[path.length - 1];
	    const doc = Object.assign({}, state.get(base), { [key]: value, type: path[1], _id: path[2] });
	    output({ doc });
	};
	exports.makeDoc['input'] =
	    { path: check.array.of.string,
	        value: check.assigned
	    };


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const set_action_1 = __webpack_require__(23);
	const Baobab = __webpack_require__(121);
	runner_1.describe('Factory set action', (it) => {
	    it('should set state', (assert) => {
	        const state = new Baobab({ foo: { bar: true, bing: 'bong' } });
	        let res;
	        const output = { save(arg) { res = arg; } };
	        set_action_1.setAction({ state,
	            input: { path: ['foo', 'bar'], value: 'baz' },
	            output
	        });
	        assert.equal(state.get(), { foo: { bar: 'baz',
	                bing: 'bong'
	            }
	        });
	    });
	});


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const BlockHelper_1 = __webpack_require__(29);
	const SOURCE_A = `
	/** Comment, show main context change { foo }
	 */
	export const update =
	() => {
	
	}
	
	export const meta: Meta =
	{ description: 'Do something'
	, tags: [ '3D', 'three.js' ]
	, author: 'John Difool'
	, origin: 'lucidity.io/some.Test'
	, version: '1.0'
	// If we use context changes
	// we set this:
	, expect: { bar: 'some.BarType' }
	, provide: { foo: 'some.FooType' }
	// If we use input/output return values,
	// we set this:
	, children: [ '():some.Type' ]
	, update: '( a: number ):some.OtherType'
	}
	`;
	const SOURCE_B = `
	let child
	export const init =
	( { children } ) => {
	  child = children [ 0 ]
	}
	export const update =
	() => {
	  child ()
	}
	export const meta =
	{ children: [ '():b.Type' ]
	}
	`;
	const meta = { description: 'Do something',
	    tags: ['3D', 'three.js'],
	    author: 'John Difool',
	    origin: 'lucidity.io/some.Test',
	    version: '1.0',
	    expect: { bar: 'some.BarType' },
	    provide: { foo: 'some.FooType' },
	    children: ['():some.Type'],
	    update: '( a: number ):some.OtherType'
	};
	runner_1.describe('BlockHelper.create', (it) => {
	    it('should set new _id', (assert) => {
	        const node = BlockHelper_1.BlockHelper.create('hello', SOURCE_A);
	        assert.equal(typeof node.id, 'string');
	    });
	    it('should set name', (assert) => {
	        const node = BlockHelper_1.BlockHelper.create('hello', SOURCE_A);
	        assert.equal(node.name, 'hello');
	    });
	    it('should set source', (assert) => {
	        const node = BlockHelper_1.BlockHelper.create('hello', SOURCE_A);
	        assert.equal(node.source, SOURCE_A);
	    });
	    it('should compile js', (assert) => {
	        const node = BlockHelper_1.BlockHelper.create('hello', `export const render = () => 'hop'`);
	        assert.equal(node.js, "\"use strict\";\r\nexports.render = function () { return 'hop'; };\r\n");
	    });
	    it('should be immutable', (assert) => {
	        const node = BlockHelper_1.BlockHelper.create('hello', SOURCE_A);
	        assert.throws(() => { node.name = 'foobar'; });
	    });
	    it('should parse source', (assert) => {
	        const node = BlockHelper_1.BlockHelper.create('hello', SOURCE_A);
	        assert.equal(typeof node.js, 'string');
	        assert.equal(node.meta, BlockHelper_1.BlockHelper.parseMeta({ meta, update() { } }));
	    });
	    it('should set isvoid', (assert) => {
	        const node = BlockHelper_1.BlockHelper.create('voodoo', 'export const update = () => {}');
	        assert.same(node.meta.isvoid, true);
	    });
	});
	runner_1.describe('BlockHelper.update', (it) => {
	    const n = BlockHelper_1.BlockHelper.create('hello', SOURCE_A);
	    const node = BlockHelper_1.BlockHelper.update(n, { name: 'new name', source: SOURCE_B });
	    it('should set name', (assert) => {
	        assert.equal(node.name, 'new name');
	    });
	    it('should set source', (assert) => {
	        assert.equal(node.source, SOURCE_B);
	    });
	    it('should parse source', (assert) => {
	        assert.notSame(node.js, n.js);
	        assert.same(node.meta.update, undefined);
	        assert.same(node.meta.isvoid, true);
	    });
	    it('should set isvoid', (assert) => {
	        const node = BlockHelper_1.BlockHelper.update(n, { source: 'export const update = () => {}' });
	        assert.same(node.meta.isvoid, true);
	    });
	});
	runner_1.describe('BlockHelper.normalizeType', (it) => {
	    const n = BlockHelper_1.BlockHelper.normalizeType;
	    it('should remove white space and variable names', (assert) => {
	        assert.same(n(' ( a : number , b : some.Type ) : bar.Foo'), '(number,some.Type):bar.Foo');
	    });
	    it('should allow type without arguments', (assert) => {
	        assert.same(n(' ( ) : number '), '():number');
	    });
	    it('should allow type no return value', (assert) => {
	        assert.same(n(' (a:number, b:boolean ) : void'), '(number,boolean):void');
	    });
	    it('should reject invalid types', (assert) => {
	        assert.throws(() => n('(a:number, b:boolean  : void'));
	        assert.throws(() => n(' a:number, b:boolean  : void'));
	        assert.throws(() => n(' a:number, b:boolean) : void'));
	        assert.throws(() => n('(a, b) : void'));
	        assert.throws(() => n('(a: number) void'));
	        assert.throws(() => n('(a: number)'));
	    });
	});
	runner_1.describe('BlockHelper.parseMeta', (it) => {
	    const m = BlockHelper_1.BlockHelper.parseMeta({ meta, update() { } });
	    it('should normalize children types', (assert) => {
	        assert.equal(m.children, ['():some.Type']);
	    });
	    it('should set all on children: all', (assert) => {
	        const meta2 = Object.assign({}, meta, { children: 'all' });
	        const m = BlockHelper_1.BlockHelper.parseMeta({ meta: meta2, update() { } });
	        assert.equal(m.provide, { foo: 'some.FooType' });
	    });
	    it('should normalize update type', (assert) => {
	        assert.equal(m.update, '(number):some.OtherType');
	    });
	    it('should normalize expect type map', (assert) => {
	        assert.equal(m.expect, { bar: 'some.BarType' });
	    });
	    it('should normalize provide type map', (assert) => {
	        assert.equal(m.provide, { foo: 'some.FooType' });
	    });
	});


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const GraphHelper_1 = __webpack_require__(25);
	const NodeHelper_1 = __webpack_require__(26);
	const Block_1 = __webpack_require__(27);
	const rootNodeId = NodeHelper_1.NodeHelper.rootNodeId;
	const rootBlockId = Block_1.BlockHelper.rootBlockId;
	// [ main ]
	// [ bar ]
	// [ baz ] [ bong ]
	// [ foo ]
	const SOURCE_main = `export const render = ( ctx, child ) => {
	  child ( ctx.set ( { bar: 'bad' } ) )
	}
	export const meta =
	{ provide: { bar: 'bar.bad' }
	}
	`;
	const SOURCE_bar = `export const render = ( ctx, child, child2 ) => {}
	export const meta =
	{ provide: { bar: 'bar.type' }
	}
	`;
	const SOURCE_baz = `export const render = ( ctx, child, child2 ) => {}
	export const meta =
	{ provide: { baz: 'baz.type' }
	, expect: { bar: 'bar.type' }
	}
	`;
	const SOURCE_bong = `export const render = ( ctx, child, child2 ) => {}
	`;
	const SOURCE_foo = `export const render = ( ctx, child, child2 ) => {}
	export const meta =
	{ expect: { bar: 'bar.type', baz: 'baz.type' }
	}
	`;
	const traverse = (graph) => {
	    const res = [];
	    const op = (nid, s = '') => {
	        if (nid) {
	            const node = graph.nodesById[nid];
	            const block = graph.blocksById[node.blockId];
	            res.push(`${s}${nid}:${node.blockId}:${block.name}`);
	            for (const k of node.children) {
	                op(k, s + ' ');
	            }
	        }
	        else {
	            res.push(`${s}${nid}`);
	        }
	    };
	    op(rootNodeId);
	    return res;
	};
	runner_1.describe('GraphHelper.check of expect', (it) => {
	    // This graph has two objects and will be inserted in graph
	    // between root and 'foo'
	    // [ bar ]
	    // [ baz ] [ bong ]
	    const baz = GraphHelper_1.GraphHelper.create('baz', SOURCE_baz);
	    const bong = GraphHelper_1.GraphHelper.create('bong', SOURCE_bong);
	    let bar = GraphHelper_1.GraphHelper.create('bar', SOURCE_bar);
	    bar = GraphHelper_1.GraphHelper.insert(bar, rootNodeId, 0, baz);
	    bar = GraphHelper_1.GraphHelper.insert(bar, rootNodeId, 1, bong);
	    // [ main ]
	    // [ foo ]
	    let graph1 = GraphHelper_1.GraphHelper.create('main', SOURCE_main);
	    const foo = GraphHelper_1.GraphHelper.create('foo', SOURCE_foo);
	    graph1 = GraphHelper_1.GraphHelper.insert(graph1, rootNodeId, 0, foo);
	    it('should disable invalid node', (assert) => {
	        const node = graph1.nodesById['n1'];
	        const block = graph1.blocksById[node.blockId];
	        assert.equal(node.invalid, true);
	        assert.equal(node.cerr, ["invalid 'bar': bar.bad instead of bar.type",
	            "missing 'baz': baz.type"
	        ]);
	    });
	    const graph2 = GraphHelper_1.GraphHelper.slip(graph1, rootNodeId, 0, bar);
	    // [ main ]
	    // [ bar ]
	    // [ baz ] [ bong ]
	    // [ foo ]
	    const nid = {};
	    for (const k in graph2.nodesById) {
	        const node = graph2.nodesById[k];
	        const name = graph2.blocksById[node.blockId].name;
	        nid[name] = k;
	    }
	    it('should update node check', (assert) => {
	        const node = graph2.nodesById[nid.foo];
	        assert.same(node.invalid, undefined);
	    });
	});


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const GraphHelper_1 = __webpack_require__(25);
	const NodeHelper_1 = __webpack_require__(26);
	const Block_1 = __webpack_require__(27);
	const rootNodeId = NodeHelper_1.NodeHelper.rootNodeId;
	const rootBlockId = Block_1.BlockHelper.rootBlockId;
	// [ main: [():string], ():void ]
	// [ bar: [():number], ():string ]
	// [ baz: [():number], ():number ] [ bong: *, ():void ]
	// [ give: [():number], ():void ] <== lets foo be also used by baz
	// [ foo: *, ():number ]
	const SOURCE_main = `export const update = () => {
	
	}
	export const meta =
	{ children: [ '():string' ]
	}
	`;
	const SOURCE_bar = `export const update = () => {}
	export const meta =
	{ children: [ '():number' ]
	, update: '():string'
	}
	`;
	const SOURCE_baz = `export const update = () => {}
	export const meta =
	{ children: [ '():number' ]
	, update: '():number'
	}
	`;
	const SOURCE_bong = `export const update = () => {}
	`;
	const SOURCE_foo = `export const update = () => {}
	export const meta =
	{ update: '():number'
	}
	`;
	const SOURCE_give = `export const update = () => {}
	export const meta =
	{ children: [ '():number' ]
	}
	`;
	const traverse = (graph) => {
	    const res = [];
	    const op = (nid, s = '') => {
	        if (nid) {
	            const node = graph.nodesById[nid];
	            const block = graph.blocksById[node.blockId];
	            res.push(`${s}${nid}:${node.blockId}:${block.name}`);
	            for (const k of node.children) {
	                op(k, s + ' ');
	            }
	        }
	        else {
	            res.push(`${s}${nid}`);
	        }
	    };
	    op(rootNodeId);
	    return res;
	};
	runner_1.describe('GraphHelper.check of children', (it) => {
	    // This graph has two objects and will be inserted in graph
	    // between root and 'foo'
	    // [ bar ]
	    // [ baz ] [ bong ]
	    const baz = GraphHelper_1.GraphHelper.create('baz', SOURCE_baz);
	    const bong = GraphHelper_1.GraphHelper.create('bong', SOURCE_bong);
	    let bar = GraphHelper_1.GraphHelper.create('bar', SOURCE_bar);
	    bar = GraphHelper_1.GraphHelper.insert(bar, rootNodeId, 0, baz);
	    bar = GraphHelper_1.GraphHelper.insert(bar, rootNodeId, 1, bong);
	    // [ main ]
	    // [ foo ]
	    let graph1 = GraphHelper_1.GraphHelper.create('main', SOURCE_main);
	    const foo = GraphHelper_1.GraphHelper.create('foo', SOURCE_foo);
	    graph1 = GraphHelper_1.GraphHelper.insert(graph1, rootNodeId, 0, foo);
	    it('should disable invalid node', (assert) => {
	        const node = graph1.nodesById['n0'];
	        assert.equal(node.invalid, true);
	        assert.equal(node.serr, ["invalid child 1: ():number instead of ():string"
	        ]);
	    });
	    const graph2 = GraphHelper_1.GraphHelper.slip(graph1, rootNodeId, 0, bar);
	    // [ main ]
	    // [ bar ]
	    // [ baz ] [ bong ]
	    // [ foo ]
	    const nid = {};
	    for (const k in graph2.nodesById) {
	        const node = graph2.nodesById[k];
	        const name = graph2.blocksById[node.blockId].name;
	        nid[name] = k;
	    }
	    it('should check on update', (assert) => {
	        const node = graph2.nodesById[nid.foo];
	        assert.same(node.invalid, undefined);
	    });
	    it('should invalidate detached node', (assert) => {
	        const node = graph2.nodesById[nid.bong];
	        assert.same(node.invalid, true);
	    });
	    it('should steal child from children', (assert) => {
	        const give = GraphHelper_1.GraphHelper.create('give', SOURCE_give);
	        const graph3 = GraphHelper_1.GraphHelper.slip(graph2, nid.baz, 0, give);
	        // [ main ]
	        // [ bar  ]
	        // [ baz  ] [ bong ]
	        // [ give ]
	        // [ foo ]
	        // Now 'baz' uses 'foo' during processing
	        const node = graph3.nodesById[nid.baz];
	        assert.same(node.invalid, undefined);
	        assert.equal(nid.foo, node.childrenm[0]);
	    });
	});


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const GraphHelper_1 = __webpack_require__(25);
	const NodeHelper_1 = __webpack_require__(26);
	const Block_1 = __webpack_require__(27);
	const rootNodeId = NodeHelper_1.NodeHelper.rootNodeId;
	const rootBlockId = Block_1.BlockHelper.rootBlockId;
	const SOURCE_A = `export const render = ( ctx, child, child2 ) => {}
	`;
	const SOURCE_foo = `export const render = ( ctx, child, child2 ) => {}
	export const meta =
	{ expect: { bar: 'bar.type', baz: 'baz.type' }
	}`;
	const traverse = (graph) => {
	    const res = [];
	    const op = (nid, s = '') => {
	        if (nid) {
	            const node = graph.nodesById[nid];
	            const block = graph.blocksById[node.blockId];
	            res.push(`${s}${nid}:${node.blockId}:${block.name}`);
	            for (const k of node.children) {
	                op(k, s + ' ');
	            }
	        }
	        else {
	            res.push(`${s}${nid}`);
	        }
	    };
	    op(rootNodeId);
	    return res;
	};
	runner_1.describe('GraphHelper.create', (it) => {
	    const graph = GraphHelper_1.GraphHelper.create();
	    it('create node for block', (assert) => {
	        assert.equal(graph.nodesById[rootNodeId], { id: rootNodeId,
	            blockId: rootBlockId,
	            parent: null,
	            children: []
	        });
	    });
	    it('should select block', (assert) => {
	        assert.equal(graph.blockId, rootBlockId);
	    });
	    it('should save block', (assert) => {
	        assert.equal(graph.blocksById[rootBlockId].name, 'main');
	        assert.equal(graph.blocksById[rootBlockId].id, rootBlockId);
	    });
	    it('should be immutable', (assert) => {
	        assert.throws(function () {
	            graph.nodesById['foo'] =
	                NodeHelper_1.NodeHelper.create('abc', 'idid', null);
	        });
	    });
	    it('should set meta', (assert) => {
	        const graph = GraphHelper_1.GraphHelper.create('foo', SOURCE_foo);
	        assert.equal(graph.blocksById[rootBlockId].meta, { expect: { bar: 'bar.type',
	                baz: 'baz.type'
	            }
	        });
	    });
	});
	runner_1.describe('GraphHelper.append', (it) => {
	    let graph = GraphHelper_1.GraphHelper.create();
	    const graph2 = GraphHelper_1.GraphHelper.create('foo', SOURCE_A);
	    graph = GraphHelper_1.GraphHelper.append(graph, rootNodeId, graph2);
	    it('should append child in parent', (assert) => {
	        assert.equal(graph.nodesById[rootNodeId].children, ['n1']);
	    });
	    it('should select block', (assert) => {
	        assert.equal(graph.blockId, 'b1' // graph2 blockId
	        );
	    });
	    it('should add block', (assert) => {
	        assert.equal(graph.blocksById['b1'].name, 'foo');
	    });
	    it('add new node in nodesById', (assert) => {
	        assert.equal(graph.nodesById['n1'], { id: 'n1',
	            blockId: 'b1',
	            parent: rootNodeId,
	            children: []
	        });
	    });
	});
	runner_1.describe('GraphHelper.insert', (it) => {
	    let graph = GraphHelper_1.GraphHelper.create('main', SOURCE_A);
	    const g1 = GraphHelper_1.GraphHelper.create('foo', SOURCE_A);
	    const g2 = GraphHelper_1.GraphHelper.create('bar', SOURCE_A);
	    graph = GraphHelper_1.GraphHelper.insert(graph, rootNodeId, 0, g1);
	    graph = GraphHelper_1.GraphHelper.insert(graph, rootNodeId, 0, g2);
	    it('insert child in parent', (assert) => {
	        assert.equal(graph.nodesById[rootNodeId].children, ['n2', 'n1']);
	    });
	    it('should select block', (assert) => {
	        assert.equal(graph.blockId, 'b2' // g2 block id
	        );
	    });
	    it('should insert null', (assert) => {
	        let graph = GraphHelper_1.GraphHelper.create();
	        graph = GraphHelper_1.GraphHelper.insert(graph, rootNodeId, 1, g1);
	        assert.equal(graph.nodesById[rootNodeId].children, [null, 'n1']);
	    });
	    it('should replace null', (assert) => {
	        let graph = GraphHelper_1.GraphHelper.create();
	        graph = GraphHelper_1.GraphHelper.insert(graph, rootNodeId, 1, g1);
	        graph = GraphHelper_1.GraphHelper.insert(graph, rootNodeId, 0, g2);
	        assert.equal(graph.nodesById[rootNodeId].children, ['n2', 'n1']);
	    });
	    it('should add blocks', (assert) => {
	        assert.equal(Object.keys(graph.blocksById).sort(), ['b0', 'b1', 'b2']);
	    });
	    it('should set child in nodesById', (assert) => {
	        assert.equal(graph.nodesById['n1'], { blockId: 'b1',
	            id: 'n1',
	            parent: rootNodeId,
	            children: []
	        });
	    });
	});
	runner_1.describe('GraphHelper.slip', (it) => {
	    // This graph has two objects and will be inserted in graph
	    // between root and 'foo'
	    // [ bar ]
	    // [ baz ] [ bong ]
	    const baz = GraphHelper_1.GraphHelper.create('baz', SOURCE_A);
	    const bong = GraphHelper_1.GraphHelper.create('bong', SOURCE_A);
	    let bar = GraphHelper_1.GraphHelper.create('bar', SOURCE_A);
	    bar = GraphHelper_1.GraphHelper.insert(bar, rootNodeId, 0, baz);
	    bar = GraphHelper_1.GraphHelper.insert(bar, rootNodeId, 1, bong);
	    // [ main ]
	    // [ foo ]
	    let graph = GraphHelper_1.GraphHelper.create();
	    const foo = GraphHelper_1.GraphHelper.create('foo', SOURCE_A);
	    graph = GraphHelper_1.GraphHelper.insert(graph, rootNodeId, 0, foo);
	    graph = GraphHelper_1.GraphHelper.slip(graph, rootNodeId, 0, bar);
	    const nid = {};
	    for (const k in graph.nodesById) {
	        const node = graph.nodesById[k];
	        const name = graph.blocksById[node.blockId].name;
	        nid[name] = k;
	    }
	    // [ main ]
	    // [ bar ]
	    // [ baz ] [ bong ]
	    // [ foo ]
	    it('should select block', (assert) => {
	        assert.equal(graph.blockId, graph.nodesById[nid.bar].blockId);
	    });
	    it('should set blocks', (assert) => {
	        assert.equal(traverse(graph), ['n0:b0:main',
	            ' n2:b2:bar',
	            '  n3:b3:baz',
	            '   n1:b1:foo',
	            '  n4:b4:bong'
	        ]);
	    });
	    it('should set child in parent', (assert) => {
	        assert.equal(graph.nodesById[rootNodeId].children, [nid.bar]);
	    });
	    it('should set previous child in new child', (assert) => {
	        assert.equal(graph.nodesById[nid.baz].children, [nid.foo]);
	    });
	    it('should set parent', (assert) => {
	        assert.equal(graph.nodesById[nid.foo].parent, nid.baz);
	        assert.equal(graph.nodesById[nid.baz].parent, nid.bar);
	        assert.equal(graph.nodesById[nid.bong].parent, nid.bar);
	        assert.equal(graph.nodesById[nid.bar].parent, rootNodeId);
	    });
	});
	runner_1.describe('GraphHelper.cut', (it) => {
	    let graph = GraphHelper_1.GraphHelper.create();
	    let g1 = GraphHelper_1.GraphHelper.create('foo', SOURCE_A);
	    let g2 = GraphHelper_1.GraphHelper.create('bar', SOURCE_A);
	    g1 = GraphHelper_1.GraphHelper.insert(g1, rootNodeId, 0, g2);
	    graph = GraphHelper_1.GraphHelper.insert(graph, rootNodeId, 1, g1);
	    // [ graph ] 'n0'
	    //   null  [ foo ] 'n1'
	    //         [ bar ] 'n2'
	    graph = GraphHelper_1.GraphHelper.cut(graph, 'n1');
	    // [ foo ]
	    // [ bar ]
	    it('create smaller graph', (assert) => {
	        assert.equal(Object.keys(graph.nodesById).sort(), ['n0', 'n1']);
	        assert.equal(traverse(graph), ['n0:b0:foo',
	            ' n1:b1:bar'
	        ]);
	    });
	    it('should select block', (assert) => {
	        assert.equal(graph.blockId, rootBlockId);
	    });
	});
	runner_1.describe('GraphHelper.drop', (it) => {
	    let graph = GraphHelper_1.GraphHelper.create();
	    let g1 = GraphHelper_1.GraphHelper.create('foo', SOURCE_A);
	    let g2 = GraphHelper_1.GraphHelper.create('bar', SOURCE_A);
	    g1 = GraphHelper_1.GraphHelper.insert(g1, rootNodeId, 0, g2);
	    graph = GraphHelper_1.GraphHelper.insert(graph, rootNodeId, 1, g1);
	    // [ graph ] 'n0'
	    //   null  [ foo ] 'n1'
	    //         [ bar ] 'n2'
	    graph = GraphHelper_1.GraphHelper.drop(graph, 'n1');
	    // [ graph ] 'n0'
	    it('create smaller graph', (assert) => {
	        assert.equal(traverse(graph), ['n0:b0:main']);
	    });
	    it('should select block', (assert) => {
	        assert.equal(graph.blockId, rootBlockId);
	    });
	});


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const Immutable_1 = __webpack_require__(43);
	runner_1.describe('IM.merge', (it) => {
	    it('should create new object', (assert) => {
	        const a = {};
	        const b = {};
	        assert.notSame(Immutable_1.Immutable.merge(a, b), a);
	        assert.notSame(Immutable_1.Immutable.merge(a, b), b);
	    });
	    it('should create frozen object', (assert) => {
	        const a = Immutable_1.Immutable.merge({ name: 'hello' }, {});
	        assert.throws(function () {
	            a.name = 'hop';
	        });
	    });
	    it('should merge new values', (assert) => {
	        const a = { a: 3 };
	        const b = { x: 1 };
	        assert.equal(Immutable_1.Immutable.merge(a, b), { a: 3, x: 1 });
	    });
	    it('should replace values', (assert) => {
	        const a = { a: 3, x: 3 };
	        const b = { x: 1 };
	        assert.equal(Immutable_1.Immutable.merge(a, b), { a: 3, x: 1 });
	    });
	});
	runner_1.describe('IM.remove', (it) => {
	    const a = { a: 3, b: { c: 4, d: 5 }, e: 6 };
	    it('should create new object', (assert) => {
	        assert.notSame(Immutable_1.Immutable.remove(a, 'b'), a);
	    });
	    it('should create frozen object', (assert) => {
	        const b = Immutable_1.Immutable.remove(a, 'b');
	        assert.throws(function () {
	            b.a = 34;
	        });
	    });
	    it('should delete value', (assert) => {
	        assert.equal(Immutable_1.Immutable.remove(a, 'b'), { a: 3, e: 6 });
	    });
	});
	runner_1.describe('IM.append', (it) => {
	    it('should create new object', (assert) => {
	        const a = [10];
	        const b = 20;
	        assert.notSame(Immutable_1.Immutable.append(a, b), a);
	    });
	    it('should create frozen object', (assert) => {
	        const a = Immutable_1.Immutable.append([], 1);
	        assert.throws(function () {
	            a[0] = 100;
	        });
	    });
	    it('should append new values', (assert) => {
	        const a = [10, 20];
	        const b = 30;
	        assert.equal(Immutable_1.Immutable.append(a, b), [10, 20, 30]);
	    });
	    it('should append and sort', (assert) => {
	        const a = [10, 20];
	        const b = 15;
	        assert.equal(Immutable_1.Immutable.append(a, b, (a, b) => a < b ? -1 : 1), [10, 15, 20]);
	    });
	});
	runner_1.describe('IM.insert', (it) => {
	    it('should create new object', (assert) => {
	        const a = [10];
	        const b = 20;
	        assert.notSame(Immutable_1.Immutable.insert(a, 0, b), a);
	    });
	    it('should create frozen object', (assert) => {
	        const a = Immutable_1.Immutable.insert([], 0, 1);
	        assert.throws(function () {
	            a[0] = 100;
	        });
	    });
	    it('should insert new value', (assert) => {
	        const a = [10, 20];
	        const b = 30;
	        assert.equal(Immutable_1.Immutable.insert(a, 1, b), [10, 30, 20]);
	    });
	    it('should insert null if value out of array', (assert) => {
	        const a = [10, 20];
	        const b = 30;
	        assert.equal(Immutable_1.Immutable.insert(a, 3, b), [10, 20, null, 30]);
	    });
	    it('should replace null', (assert) => {
	        const a = [10, null, 20];
	        const b = 30;
	        assert.equal(Immutable_1.Immutable.insert(a, 1, b), [10, 30, 20]);
	    });
	});
	runner_1.describe('IM.aset', (it) => {
	    it('should create new object', (assert) => {
	        const a = [10];
	        const b = 20;
	        assert.notSame(Immutable_1.Immutable.aset(a, 0, b), a);
	    });
	    it('should create frozen object', (assert) => {
	        const a = Immutable_1.Immutable.aset([0], 0, 1);
	        assert.throws(function () {
	            a[0] = 100;
	        });
	    });
	    it('should set new value', (assert) => {
	        const a = [10, 20];
	        const b = 30;
	        assert.equal(Immutable_1.Immutable.aset(a, 1, b), [10, 30]);
	    });
	    it('should set outside array', (assert) => {
	        const a = [10, 20];
	        const b = 30;
	        assert.equal(Immutable_1.Immutable.aset(a, 3, b), [10, 20, null, 30]);
	    });
	    it('should not set with neg indice', (assert) => {
	        assert.throws(function () {
	            const a = [10, 20];
	            const b = 30;
	            Immutable_1.Immutable.aset(a, -1, b);
	        });
	    });
	});
	runner_1.describe('IM.update', (it) => {
	    const a = { x: { y: 1 }, z: 2 };
	    const b = { b: 'b' };
	    it('should create new object', (assert) => {
	        assert.notSame(Immutable_1.Immutable.update(a, 'x', 'y', 3), a);
	    });
	    it('should create frozen object', (assert) => {
	        const c = Immutable_1.Immutable.update(a, 'x', 'y', 3);
	        assert.throws(function () {
	            c.x.y = 4;
	        });
	    });
	    it('should set new value', (assert) => {
	        assert.equal(Immutable_1.Immutable.update(a, 'x', 'y', 3), { x: { y: 3 }, z: 2 });
	    });
	    it('should set new value with function', (assert) => {
	        const a = { x: { y: { z: [1, 2] } }, w: 3 };
	        const r = Immutable_1.Immutable.update(a, 'x', 'y', 'z', (z) => {
	            return Immutable_1.Immutable.insert(z, 1, 33);
	        });
	        assert.equal(r, { x: { y: { z: [1, 33, 2] } }, w: 3 });
	    });
	    it('should create required objects', (assert) => {
	        const a = { x: { y: 1 }, z: 2 };
	        assert.equal(Immutable_1.Immutable.update(a, 'x', 'z', 'w', 3), { x: { y: 1, z: { w: 3 } }, z: 2 });
	    });
	});
	runner_1.describe('IM.sort', (it) => {
	    const comp = (a, b) => a < b ? -1 : 1;
	    const a = [3, 4, 2];
	    it('should create new object', (assert) => {
	        assert.notSame(Immutable_1.Immutable.sort(a, comp), a);
	    });
	    it('should create frozen object', (assert) => {
	        const o = Immutable_1.Immutable.sort(a, comp);
	        assert.throws(function () {
	            o[0] = 12;
	        });
	    });
	    it('should sort', (assert) => {
	        assert.equal(Immutable_1.Immutable.sort(a, comp), [2, 3, 4]);
	    });
	});


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const NodeHelper_1 = __webpack_require__(26);
	runner_1.describe('NodeHelper.create', (it) => {
	    it('should set defaults', (assert) => {
	        const node = NodeHelper_1.NodeHelper.create('blockxx', 'n0', 'pa');
	        assert.equal(node, { id: 'n0',
	            blockId: 'blockxx',
	            parent: 'pa',
	            children: []
	        });
	    });
	    it('should set values', (assert) => {
	        const node = NodeHelper_1.NodeHelper.create('blockxx', 'id99', 'n0', ['id7', 'id8']);
	        assert.equal(node, { id: 'id99',
	            blockId: 'blockxx',
	            parent: 'n0',
	            children: ['id7', 'id8']
	        });
	    });
	});
	runner_1.describe('NodeHelper.nextNodeId', (it) => {
	    it('should return id0 on empty map', (assert) => {
	        assert.equal(NodeHelper_1.NodeHelper.nextNodeId({}), 'n0');
	    });
	    it('should return first free in graph', (assert) => {
	        const n = NodeHelper_1.NodeHelper.create('foo', '', '');
	        assert.equal(NodeHelper_1.NodeHelper.nextNodeId({ n0: n, n3: n }), 'n1');
	    });
	});


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	runner_1.describe('uimap cache', (it) => {
	    // When and what can be reused ?
	    // Can reuse what does not depend on children:
	    //   * minSize (depends on #children)
	    //   * className (depends on ghost ?)
	    it('should reuse uibox if same box type', (assert) => {
	    });
	    it('should reuse text size cache with same text', (assert) => {
	    });
	});


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Test_1 = __webpack_require__(117);
	const GraphHelper_1 = __webpack_require__(25);
	const PlaybackHelper_1 = __webpack_require__(45);
	const GRAPH = __webpack_require__(133);
	/** GRAPH structure
	[ main        ]
	[ join        ]
	[ a     ] [ b ] 'b' ==> calls child with an empty slot
	[ cache ]       ==> calls init
	*/
	Test_1.describe('PlaybackHelper.compile', (it) => {
	    /* TODO: create graph here, eventually with
	    const graph = GraphHelper.fromYAML
	    ( `name: foo
	       source: |
	         this is the
	         source of this
	         thing.
	       children:
	         - name: child1
	           source: ...
	         - name: child2
	           source: ...
	      `
	    )
	    /*
	    let counter = 0
	    // simulate preloaded libraries
	    const PRELOADED = { counter () { return ++counter } }
	    // mock playback require for now
	    const require = ( name ) => {
	      return PRELOADED [ name ]
	    }
	  
	    const graph: GraphType = JSON.parse ( GRAPH )
	    const cache: any = {}
	    PlaybackHelper.compile ( graph, cache )
	    // node cache
	    const nca: any = {}
	    for ( const k in graph.nodesById ) {
	      const node = graph.nodesById [ k ]
	      const block = graph.blocksById [ node.blockId ]
	      nca [ block.name ] = cache.nodecache [ k ]
	    }
	  
	    it ( 'should run init', ( assert ) => {
	      PlaybackHelper.init ( graph, cache, {}, { require } )
	      assert.equal ( nca.cache.cache, { foo: 1 } )
	    })
	  
	    it ( 'should reuse cache in init', ( assert ) => {
	      PlaybackHelper.init ( graph, cache, {}, { require } )
	      PlaybackHelper.init ( graph, cache, {}, { require } )
	      assert.equal ( nca.cache.cache, { foo: 1 } )
	      assert.equal ( 1, counter )
	    })
	  
	    it ( 'should compile graph into a function', ( assert ) => {
	      assert.equal ( 'function' , typeof cache.main )
	    })
	  
	    it ( 'should run main', ( assert ) => {
	      const res = cache.main ()
	      assert.equal ( '1bnull', res )
	    })
	    */
	    it('should be fixed', (assert) => {
	        assert.pending('build graph from yaml to fix compile tests');
	    });
	});
	Test_1.describe('PlaybackHelper.context', (it) => {
	    const context = PlaybackHelper_1.PlaybackHelper.context({ foo: 'bar' });
	    it('should be immutable', (assert) => {
	        assert.throws(() => { context.foo = 'baz'; });
	    });
	    it('should create new object on set', (assert) => {
	        const c = context.set({ camera: 'hello' });
	        assert.notSame(c, context);
	        assert.equal({ camera: 'hello', foo: 'bar' }, c);
	    });
	});
	Test_1.describe('PlaybackHelper.controls Slider ', (it) => {
	    const graph = GraphHelper_1.GraphHelper.create('main', `export const init =
	     ( { context, control } ) => {
	       control.Slider ( 'foo', ( v ) => {
	         context.test.v = v
	       })
	     }`);
	    const cache = { nodecache: {} };
	    const context = { test: {} };
	    PlaybackHelper_1.PlaybackHelper.run(graph, context, cache);
	    const nc = cache.nodecache['n0'];
	    it('should extract controls', (assert) => {
	        const ctrl = nc.controls[0];
	        assert.equal(ctrl.type, 'Slider');
	        assert.equal(ctrl.labels, ['foo']);
	        assert.equal(ctrl.values, [0]);
	        assert.equal(typeof ctrl.set, 'function');
	    });
	    it('set should call callback', (assert) => {
	        const test = context.test;
	        test.v = 0;
	        const ctrl = nc.controls[0];
	        ctrl.set([15]);
	        assert.equal(context.test.v, 15);
	        assert.equal(ctrl.values, [15]);
	    });
	});
	Test_1.describe('PlaybackHelper.controls Pad', (it) => {
	    const graph = GraphHelper_1.GraphHelper.create('main', `export const init =
	     ( { context, control } ) => {
	       control.Pad ( 'foo', 'bar', ( x, y ) => {
	         context.test.x = x
	         context.test.y = y
	       })
	     }`);
	    const cache = { nodecache: {} };
	    const context = { test: {} };
	    PlaybackHelper_1.PlaybackHelper.run(graph, context, cache);
	    const nc = cache.nodecache['n0'];
	    it('should extract controls', (assert) => {
	        const ctrl = nc.controls[0];
	        assert.equal(ctrl.type, 'Pad');
	        assert.equal(ctrl.labels, ['foo', 'bar']);
	        assert.equal(ctrl.values, [0, 0]);
	        assert.equal(typeof ctrl.set, 'function');
	    });
	    it('set should call callback', (assert) => {
	        const test = context.test;
	        test.x = 0;
	        test.y = 0;
	        const ctrl = nc.controls[0];
	        ctrl.set([10, 20]);
	        assert.equal(context.test, { x: 10, y: 20 });
	        assert.equal(ctrl.values, [10, 20]);
	    });
	});
	Test_1.describe('PlaybackHelper.controls many', (it) => {
	    const graph = GraphHelper_1.GraphHelper.create('main', `export const init =
	     ( { context, control } ) => {
	       control.Slider ( 'a', ( v ) => {
	         context.test.a = v
	       })
	       control.Slider ( 'b', ( v ) => {
	         context.test.b = v
	       })
	       control.Pad ( 'foo', 'bar', ( x, y ) => {
	         context.test.x = x
	         context.test.y = y
	       })
	     }`);
	    const cache = { nodecache: {} };
	    const context = { test: {} };
	    PlaybackHelper_1.PlaybackHelper.run(graph, context, cache);
	    // simulate change
	    const graph2 = { nodesById: graph.nodesById, blocksById: graph.blocksById };
	    PlaybackHelper_1.PlaybackHelper.run(graph2, context, cache);
	    const nc = cache.nodecache['n0'];
	    it('should extract many controls', (assert) => {
	        const ctrl = nc.controls[0];
	        assert.equal(3, nc.controls.length);
	        assert.equal([['a'], ['b'], ['foo', 'bar']], nc.controls.map((c) => c.labels));
	    });
	});
	/*
	describe ( 'PlaybackHelper.compile scrub', ( it ) => {
	  const graph = GraphHelper.create
	  ( 'main'
	  , `export const init =
	     ( { context } ) => {
	       context.test.a = 10
	       context.test.b = 20
	       context.test.x = 30
	       context.test.y = 40
	     }
	
	     export const update =
	     () => {
	       return 10
	     }
	    `
	  )
	  const cache = { nodecache: {}, scrub: 'b0' }
	  const context: any = { test: {} }
	  PlaybackHelper.run ( graph, context, cache )
	  // the js source for this node is now a special parsing with the scrubber '$l$' instead of the values.
	  // simulate change
	  const graph2: GraphType = { nodesById: graph.nodesById, blocksById: graph.blocksById }
	  PlaybackHelper.run ( graph2, context, cache )
	  const nc = cache.nodecache [ 'n0' ]
	
	  it ( 'should extract many controls', ( assert ) => {
	    const ctrl: PlaybackControl = nc.controls [ 0 ]
	    assert.equal ( 3, nc.controls.length )
	    assert.equal
	    ( [ [ 'a' ], [ 'b' ], [ 'foo', 'bar' ] ]
	    , nc.controls.map ( ( c ) => c.labels )
	    )
	  })
	
	})
	*/


/***/ },
/* 133 */
/***/ function(module, exports) {

	module.exports = "{\n  \"nodesById\": {\n    \"n0\": {\n      \"id\": \"n0\",\n      \"blockId\": \"b0\",\n      \"parent\": null,\n      \"children\": [\n        \"n1\"\n      ]\n    },\n    \"n1\": {\n      \"id\": \"n1\",\n      \"blockId\": \"b1\",\n      \"parent\": \"n0\",\n      \"children\": [\n        \"n2\",\n        \"n3\"\n      ]\n    },\n    \"n2\": {\n      \"id\": \"n2\",\n      \"blockId\": \"b2\",\n      \"parent\": \"n1\",\n      \"children\": [\n        \"n4\"\n      ]\n    },\n    \"n3\": {\n      \"id\": \"n3\",\n      \"blockId\": \"b3\",\n      \"parent\": \"n1\",\n      \"children\": []\n    },\n    \"n4\": {\n      \"id\": \"n4\",\n      \"blockId\": \"b4\",\n      \"parent\": \"n2\",\n      \"children\": []\n    }\n  },\n  \"blocksById\": {\n    \"b0\": {\n      \"id\": \"b0\",\n      \"name\": \"main\",\n      \"source\": \"export const render =\\n( ctx, child ) => {\\n  return child ()\\n}\\n\",\n      \"input\": [\n        \"string\"\n      ],\n      \"js\": \"\\\"use strict\\\";\\nexports.render = function (ctx, child) {\\n return child();\\n};\\n\",\n      \"output\": \"string\",\n      \"init\": false\n    },\n    \"b1\": {\n      \"id\": \"b1\",\n      \"name\": \"join\",\n      \"source\": \"export const render =\\n( ctx, child, child2 ) => {\\n  return `${child()}${child2()}`\\n}\\n\",\n      \"input\": [\n        \"string\",\n        \"string\"\n      ],\n      \"js\": \"\\\"use strict\\\";\\nexports.render = function (ctx, child, child2) {\\n    return \\\"\\\" + child() + child2();\\n};\\n\",\n      \"output\": \"string\",\n      \"init\": false\n    },\n    \"b2\": {\n      \"id\": \"b2\",\n      \"name\": \"a\",\n      \"source\": \"export const render =\\n( ctx, child ) => {\\n  return child ( ctx )\\n}\\n\",\n      \"input\": [\n        \"string\"\n      ],\n      \"js\": \"\\\"use strict\\\";\\nexports.render = function (ctx, child) {\\n    return child(ctx);\\n};\\n\",\n      \"output\": \"string\",\n      \"init\": false\n    },\n    \"b3\": {\n      \"id\": \"b3\",\n      \"name\": \"b\",\n      \"source\": \"export const render =\\n( ctx, child ) => {\\n  return 'b' + child ()\\n}\\n\",\n      \"input\": [ \"string\" ],\n      \"js\": \"\\\"use strict\\\";\\nexports.render = function (ctx,child) {\\n    return 'b' + child ();\\n};\\n\",\n      \"output\": \"string\",\n      \"init\": false\n    },\n    \"b4\": {\n      \"id\": \"b4\",\n      \"name\": \"cache\",\n      \"source\": \"// Test that init is called with\\n// cache and require.\\n\\nlet foo\\n\\nexport const init =\\n( ctx, { cache, require } ) => {\\n  const counter = require ( 'counter' )\\n  if ( !cache.foo ) {\\n    cache.foo = counter ()\\n  }\\n  foo = cache.foo\\n}\\n\\nexport const render =\\n( ctx ) => {\\n  return foo\\n}\\n\\n\",\n      \"input\": [],\n      \"js\": \"// Test that init is called with\\n// cache and require.\\n\\\"use strict\\\";\\nvar foo;\\nexports.init = function (ctx, _a) {\\n    var cache = _a.cache, require = _a.require;\\n    var counter = require('counter');\\n    if (!cache.foo) {\\n        cache.foo = counter();\\n    }\\n    foo = cache.foo;\\n};\\nexports.render = function (ctx) {\\n    return foo;\\n};\\n\",\n      \"output\": \"string\",\n      \"init\": true\n    }\n  },\n  \"blockId\": \"b4\"\n}\n"

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	const status_1 = __webpack_require__(3);
	const Baobab = __webpack_require__(121);
	runner_1.describe('Status set action', (it) => {
	    it('should set status in state', (assert) => {
	        status_1.resetRef();
	        const state = new Baobab({ $status: { list: [] } });
	        status_1.status({ state,
	            input: { status: { type: 'success', message: 'Good' } }
	        });
	        assert.equal(state.get(status_1.HISTORY_PATH), [{ type: 'success', message: 'Good', ref: 1 }
	        ]);
	    });
	    it('should not grow history beyond max', (assert) => {
	        status_1.resetRef();
	        const list = [];
	        for (let i = 0; i < status_1.MAX_STATUS_HISTORY; ++i) {
	            list.push({ type: 'success', message: `${i}-message` });
	        }
	        const state = new Baobab({ $status: { list } });
	        status_1.status({ state,
	            input: { status: { type: 'success', message: 'Good' } }
	        });
	        const hist = state.get();
	        assert.equal(state.get(status_1.HISTORY_PATH).length, status_1.MIN_STATUS_HISTORY);
	    });
	});


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const runner_1 = __webpack_require__(112);
	exports.stats = ({ state, input, output }) => {
	    const stats = input.stats;
	    const m = [`${stats.passCount}/${stats.testCount} tests pass`];
	    if (stats.failCount) {
	        m.push(`${stats.failCount} fail`);
	    }
	    if (stats.pendingCount) {
	        m.push(`${stats.pendingCount} pending`);
	    }
	    const s = { type: 'success', message: m.join(',') };
	    if (stats.passCount !== stats.testCount) {
	        s.detail = stats.failures.map(runner_1.failureMessage);
	        if (stats.failCount) {
	            s.type = 'error';
	        }
	        else {
	            s.type = 'warn';
	        }
	    }
	    output.success({ status: s });
	};


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const set = __webpack_require__(60);
	exports.homeUrl = [set('state:/$route', 'home')
	];


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Project_1 = __webpack_require__(8);
	const set = __webpack_require__(60);
	exports.projectUrl = [set('state:/$route', 'project'),
	    Project_1.selectAction
	];


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const set = __webpack_require__(60);
	exports.projectsUrl = [set('state:/$route', 'projects'),
	    set('state:/$projectId', '')
	];


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const set = __webpack_require__(60);
	exports.userUrl = [set('state:/$route', 'user')
	];


/***/ },
/* 140 */
/***/ function(module, exports) {

	"use strict";
	exports.Code = (options = {}) => {
	    return (module, controller) => {
	        module.addState({});
	        module.addSignals({});
	        return {}; // meta information
	    };
	};


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const db_1 = __webpack_require__(142);
	const dbChanged_1 = __webpack_require__(145);
	const reload_1 = __webpack_require__(5);
	const save_1 = __webpack_require__(76);
	exports.Data = (options = {}) => {
	    return (module, controller) => {
	        // This state is where we read and write to
	        // the database
	        module.addState({ project: {}
	        });
	        // This service is only used in Data actions.
	        module.addServices({ db: db_1.db
	        });
	        module.addSignals({ dbChanged: dbChanged_1.dbChanged,
	            reload: reload_1.reload,
	            save: save_1.save
	        });
	        const changed = controller.getSignals().data.dbChanged;
	        const r = db_1.db.changes({ live: true,
	            include_docs: true,
	            since: 'now'
	        }).on('change', (change) => changed({ change }));
	        // FIXME: could use r.cancel to stop listening to
	        // changes
	        return {}; // meta information
	    };
	};


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const PouchDB = __webpack_require__(143);
	const PouchDBAuthentication = __webpack_require__(144);
	// https://github.com/nolanlawson/pouchdb-authentication
	PouchDB.plugin(PouchDBAuthentication);
	exports.db = new PouchDB('lucidity');


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(140);

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(154);

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const update_1 = __webpack_require__(146);
	const saved_1 = __webpack_require__(147);
	const edit_1 = __webpack_require__(148);
	const Status_1 = __webpack_require__(57);
	exports.dbChanged = [update_1.update,
	    Status_1.status,
	    saved_1.saved,
	    edit_1.edit // open name for editing (depends on a flag in $factory)
	];


/***/ },
/* 146 */
/***/ function(module, exports) {

	"use strict";
	const getVerb = (doc) => (doc._deleted ?
	    'Deleted'
	    : (doc._rev.split('-')[0] === '1' ?
	        'New'
	        : 'Updated'));
	// Could be removed: no need for so much operation noise or have something
	// more interesting...
	const getStatus = (doc) => ({ type: 'info', message: `${getVerb(doc)} ${doc.type} '${doc.name || ''}'` });
	exports.update = ({ state, input: { change }, output }) => {
	    const doc = change.doc;
	    const { _id, type } = doc;
	    const status = type === 'main' ? undefined : getStatus(doc);
	    let saved;
	    const cid = state.get([type, '_id']);
	    if (doc._deleted) {
	        state.unset(['data', type, _id]);
	        if (_id === cid) {
	            state.unset([type]);
	        }
	    }
	    else {
	        state.set(['data', type, _id], doc);
	        if (_id === cid || cid === undefined) {
	            saved = type;
	        }
	    }
	    output({ saved, status, doc });
	};


/***/ },
/* 147 */
/***/ function(module, exports) {

	"use strict";
	exports.saved = ({ state, input: { saved } }) => {
	    if (saved) {
	        const close = state.get(['$factory', saved, 'close']);
	        if (close) {
	            // Clear all 'saving' flags
	            state.unset(['$factory', saved]);
	            // Clear drop after saving 'scene' or 'project'.
	            state.unset(['$dragdrop', 'drop']);
	        }
	        if (saved === 'project' || saved === 'scene') {
	            // Clear block operation
	            const close = state.get(['$factory', 'block', 'close']);
	            if (close) {
	                state.unset(['$factory', 'block']);
	            }
	            // Edit name after creation
	            const id = state.get('$factory.block.add');
	            if (id) {
	                state.unset('$factory.block.add');
	                state.set('$block', { id, ownerType: saved });
	                state.set('$factory.block.name', true);
	            }
	        }
	    }
	};


/***/ },
/* 148 */
/***/ function(module, exports) {

	"use strict";
	const editables = ['project', 'scene', 'block'];
	exports.edit = ({ state, input: { doc } }) => {
	    if (doc && doc.type == 'user') {
	        const editing = state.get(['$factory', 'editing']);
	        for (const k of editables) {
	            // sceneId, blockId, projectId
	            if (doc[`${k}Id`] === editing) {
	                // trigger name edit
	                state.set(['$factory', 'editing'], `${k}-name`);
	                return;
	            }
	        }
	    }
	};


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(150));
	const drag_1 = __webpack_require__(151);
	const drop_1 = __webpack_require__(153);
	const move_1 = __webpack_require__(249);
	exports.DragDrop = (options = {}) => {
	    return (module, controller) => {
	        // $dragdrop:
	        module.addState({});
	        module.addSignals({ drag: drag_1.drag,
	            drop: drop_1.drop,
	            move: move_1.move
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 150 */
/***/ function(module, exports) {

	"use strict";
	const MIN_DRAG_DIST = 4; // manhattan distance to trigger a drag
	const startDrag = (signals) => {
	    const doc = document.documentElement;
	    const dragel = document.getElementById('drag');
	    let getElementUnderMouse;
	    if (dragel.tagName === 'svg') {
	        getElementUnderMouse = (e) => {
	            const baseclass = dragel.getAttribute('class');
	            dragel.setAttribute('class', baseclass + ' drag-hide');
	            const el = document.elementFromPoint(e.clientX, e.clientY);
	            dragel.setAttribute('class', baseclass);
	            return el;
	        };
	    }
	    else {
	        getElementUnderMouse = (e) => {
	            const baseclass = dragel.className;
	            dragel.className = baseclass + ' drag-hide';
	            const el = document.elementFromPoint(e.clientX, e.clientY);
	            dragel.className = baseclass;
	            return el;
	        };
	    }
	    // mouse move detected document wide
	    const mousemove = (e) => {
	        e.preventDefault();
	        const el = getElementUnderMouse(e);
	        const target = el.getAttribute('data-drop');
	        const clientPos = { x: e.clientX, y: e.clientY };
	        signals.$dragdrop.move({ move: { target, clientPos, copy: e.altKey } });
	    };
	    const mouseup = (e) => {
	        e.stopPropagation();
	        e.preventDefault();
	        doc.removeEventListener('mousemove', mousemove);
	        doc.removeEventListener('mouseup', mouseup);
	        signals.$dragdrop.drop();
	    };
	    doc.addEventListener('mousemove', mousemove);
	    doc.addEventListener('mouseup', mouseup);
	};
	var DragDropHelper;
	(function (DragDropHelper) {
	    DragDropHelper.drag = (signals, dragclbk, clickClbk) => {
	        let evstate = 'up';
	        let clickpos, nodePos;
	        const mouseup = (e) => {
	            e.preventDefault();
	            // Do not stopPropagation here or we miss drag release.
	            if (evstate === 'down') {
	                // Only handle simple click here. The drop operation happens in
	                // docup.
	                clickClbk(e);
	            }
	            evstate = 'up';
	        };
	        const mousedown = (e) => {
	            e.stopPropagation();
	            e.preventDefault();
	            const target = e.target;
	            const rect = target.getBoundingClientRect();
	            clickpos = { x: e.clientX, y: e.clientY };
	            nodePos = { x: e.pageX - rect.left,
	                y: e.pageY - rect.top
	            };
	            evstate = 'down';
	        };
	        // mouse move on element (just used to trigger drag)
	        const mousemove = (e) => {
	            e.preventDefault();
	            const clientPos = { x: e.clientX, y: e.clientY };
	            if (evstate === 'down') {
	                if (Math.abs(clientPos.x - clickpos.x)
	                    + Math.abs(clientPos.y - clickpos.y) < MIN_DRAG_DIST) {
	                    return;
	                }
	                evstate = 'dragging';
	                dragclbk(nodePos, e.altKey);
	                startDrag(signals);
	            }
	        };
	        const click = (e) => {
	            e.preventDefault();
	            e.stopPropagation();
	        };
	        return { click, mousedown, mousemove, mouseup };
	    };
	})(DragDropHelper = exports.DragDropHelper || (exports.DragDropHelper = {}));


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const dragAction_1 = __webpack_require__(152);
	exports.drag = [dragAction_1.dragAction
	];


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const NodeHelper_1 = __webpack_require__(26);
	const GraphHelper_1 = __webpack_require__(25);
	const uimap_1 = __webpack_require__(48);
	const dragp = ['$dragdrop', 'drag'];
	const rootNodeId = NodeHelper_1.NodeHelper.rootNodeId;
	exports.dragAction = ({ state, input, output }) => {
	    const drag = Object.assign({}, input.drag);
	    if (drag.ownerType === 'library') {
	        drag.dgraph = state.get(['data', 'component', drag.componentId, 'graph']);
	    }
	    else {
	        let graph = state.get([drag.ownerType, 'graph']);
	        const otype = drag.ownerType === 'project' ? 'scene' : 'project';
	        drag.dgraph = GraphHelper_1.GraphHelper.cut(graph, drag.nodeId);
	        drag.rgraph = GraphHelper_1.GraphHelper.drop(graph, drag.nodeId);
	    }
	    drag.uigraph = uimap_1.uimap(drag.dgraph);
	    state.set(dragp, drag);
	};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const dropAction_1 = __webpack_require__(154);
	const save_1 = __webpack_require__(76);
	exports.drop = [dropAction_1.dropAction,
	    { success: [...save_1.save]
	    }
	];


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Graph_1 = __webpack_require__(46);
	const Library_1 = __webpack_require__(155);
	const dragp = ['$dragdrop', 'drag'];
	const movep = ['$dragdrop', 'move'];
	const dropp = ['$dragdrop', 'drop'];
	const rootNodeId = Graph_1.NodeHelper.rootNodeId;
	exports.dropAction = ({ state, input, output }) => {
	    const drag = state.get(dragp);
	    const drop = state.get(dropp);
	    const copy = drag.copy || (drop && drop.copy);
	    state.unset(dragp);
	    state.unset(movep);
	    let odoc;
	    if (drag.ownerType !== 'library' && !copy) {
	        odoc = Graph_1.Immutable.update(state.get([drag.ownerType]), 'graph', drag.rgraph);
	    }
	    if (!drop) {
	        // Not dropping on a valid zone.
	        if (odoc) {
	            // Remove
	            state.set(['$factory', odoc.type, 'close'], true);
	            output.success({ doc: odoc });
	        }
	        return;
	    }
	    if (drop.ownerType === 'library') {
	        // Do we have a block with same name in the library ?
	        const node = drag.dgraph.nodesById[rootNodeId];
	        const name = drag.dgraph.blocksById[node.blockId].name;
	        const library = state.get(['data', 'component']);
	        let doc;
	        for (const k in library) {
	            const b = library[k];
	            if (b.name === name) {
	                // replace
	                doc = Object.assign({}, b, { graph: drag.dgraph });
	                break;
	            }
	        }
	        if (!doc) {
	            // new component
	            doc = Library_1.ComponentHelper.create(drag.dgraph);
	        }
	        state.set(['$factory', doc.type, 'close'], true);
	        output.success({ doc });
	    }
	    else {
	        let doc = state.get([drop.ownerType]);
	        doc = Graph_1.Immutable.update(doc, 'graph', drop.graph);
	        state.set(['$factory', doc.type, 'close'], true);
	        const docs = [doc];
	        if (drop.ownerType !== drag.ownerType && odoc) {
	            // transfer from one graph to another
	            // also change origin
	            state.set(['$factory', odoc.type, 'close'], true);
	            docs.push(odoc);
	        }
	        output.success({ docs });
	    }
	};


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(156));
	const Model = __webpack_require__(79);
	const zip_1 = __webpack_require__(158);
	const sortByName = (a, b) => a.name > b.name ? 1 : -1;
	const LibraryRows = Model.monkey({ cursors: { components: ['data', 'component']
	    },
	    get(state) {
	        const components = state.components || {};
	        const list = [];
	        for (const k in components) {
	            list.push(components[k]);
	        }
	        list.sort(sortByName);
	        return list;
	    }
	});
	exports.Library = (options = {}) => {
	    return (module, controller) => {
	        module.addState({ $rows: LibraryRows
	        });
	        module.addSignals({ zip: zip_1.zip
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(157));


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Factory_1 = __webpack_require__(10);
	const Graph_1 = __webpack_require__(46);
	const rootNodeId = Graph_1.NodeHelper.rootNodeId;
	var ComponentHelper;
	(function (ComponentHelper) {
	    ComponentHelper.create = (graph) => {
	        const node = graph.nodesById[rootNodeId];
	        const block = graph.blocksById[node.blockId];
	        return { _id: Factory_1.makeId(),
	            name: block.name,
	            type: 'component',
	            graph
	        };
	    };
	})(ComponentHelper = exports.ComponentHelper || (exports.ComponentHelper = {}));


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const zipAction_1 = __webpack_require__(159);
	const downloadAction_1 = __webpack_require__(248);
	exports.zip = [zipAction_1.zipAction,
	    { success: [downloadAction_1.downloadAction] }
	];


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const LibraryHelper_1 = __webpack_require__(160);
	exports.zipAction = ({ state, output }) => {
	    const library = state.get(['data', 'component']);
	    LibraryHelper_1.LibraryHelper.zip(library, (source) => {
	        output.success({ filename: 'library.zip', mime: 'application/zip', content: source });
	    });
	};
	exports.zipAction['async'] = true;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const GraphHelper_1 = __webpack_require__(25);
	const JSZip = __webpack_require__(161);
	/*
	var zip = new JSZip ()
	zip.file("Hello.txt", "Hello World\n");
	var img = zip.folder("images");
	img.file("smile.gif", imgData, {base64: true});
	zip.generateAsync({type:"blob"})
	.then(function(content) {
	    // see FileSaver.js
	    saveAs(content, "example.zip");
	});
	*/
	const zipfile = (zip, name, source) => {
	    zip.file(name, source);
	};
	const zipfolder = (zip, name) => {
	    return zip.folder(name);
	};
	var LibraryHelper;
	(function (LibraryHelper) {
	    LibraryHelper.zip = (components, doneClbk) => {
	        const jszip = new JSZip();
	        for (const k in components) {
	            const comp = components[k];
	            GraphHelper_1.GraphHelper.exportGraph(comp.graph, jszip, zipfile, zipfolder);
	        }
	        const p = jszip.generateAsync({ compression: 'DEFLATE', type: 'base64' });
	        if (doneClbk) {
	            p.then(doneClbk);
	        }
	        else {
	            return p;
	        }
	    };
	})(LibraryHelper = exports.LibraryHelper || (exports.LibraryHelper = {}));


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Representation a of zip file in js
	 * @constructor
	 */
	function JSZip() {
	    // if this constructor is used without `new`, it adds `new` before itself:
	    if(!(this instanceof JSZip)) {
	        return new JSZip();
	    }
	
	    if(arguments.length) {
	        throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
	    }
	
	    // object containing the files :
	    // {
	    //   "folder/" : {...},
	    //   "folder/data.txt" : {...}
	    // }
	    this.files = {};
	
	    this.comment = null;
	
	    // Where we are in the hierarchy
	    this.root = "";
	    this.clone = function() {
	        var newObj = new JSZip();
	        for (var i in this) {
	            if (typeof this[i] !== "function") {
	                newObj[i] = this[i];
	            }
	        }
	        return newObj;
	    };
	}
	JSZip.prototype = __webpack_require__(162);
	JSZip.prototype.loadAsync = __webpack_require__(239);
	JSZip.support = __webpack_require__(165);
	JSZip.defaults = __webpack_require__(210);
	
	JSZip.loadAsync = function (content, options) {
	    return new JSZip().loadAsync(content, options);
	};
	
	JSZip.external = __webpack_require__(202);
	module.exports = JSZip;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var utf8 = __webpack_require__(163);
	var utils = __webpack_require__(164);
	var GenericWorker = __webpack_require__(207);
	var StreamHelper = __webpack_require__(208);
	var defaults = __webpack_require__(210);
	var CompressedObject = __webpack_require__(211);
	var ZipObject = __webpack_require__(216);
	var generate = __webpack_require__(217);
	var nodejsUtils = __webpack_require__(199);
	var NodejsStreamInputAdapter = __webpack_require__(238);
	
	
	/**
	 * Add a file in the current folder.
	 * @private
	 * @param {string} name the name of the file
	 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
	 * @param {Object} o the options of the file
	 * @return {Object} the new file.
	 */
	var fileAdd = function(name, data, o) {
	    // be sure sub folders exist
	    var dataType = utils.getTypeOf(data),
	        parent;
	
	
	    /*
	     * Correct options.
	     */
	
	    o = utils.extend(o || {}, defaults);
	    o.date = o.date || new Date();
	    if (o.compression !== null) {
	        o.compression = o.compression.toUpperCase();
	    }
	
	    if (typeof o.unixPermissions === "string") {
	        o.unixPermissions = parseInt(o.unixPermissions, 8);
	    }
	
	    // UNX_IFDIR  0040000 see zipinfo.c
	    if (o.unixPermissions && (o.unixPermissions & 0x4000)) {
	        o.dir = true;
	    }
	    // Bit 4    Directory
	    if (o.dosPermissions && (o.dosPermissions & 0x0010)) {
	        o.dir = true;
	    }
	
	    if (o.dir) {
	        name = forceTrailingSlash(name);
	    }
	    if (o.createFolders && (parent = parentFolder(name))) {
	        folderAdd.call(this, parent, true);
	    }
	
	    var isUnicodeString = dataType === "string" && o.binary === false && o.base64 === false;
	    o.binary = !isUnicodeString;
	
	
	    var isCompressedEmpty = (data instanceof CompressedObject) && data.uncompressedSize === 0;
	
	    if (isCompressedEmpty || o.dir || !data || data.length === 0) {
	        o.base64 = false;
	        o.binary = true;
	        data = "";
	        o.compression = "STORE";
	        dataType = "string";
	    }
	
	    /*
	     * Convert content to fit.
	     */
	
	    var zipObjectContent = null;
	    if (data instanceof CompressedObject || data instanceof GenericWorker) {
	        zipObjectContent = data;
	    } else if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {
	        zipObjectContent = new NodejsStreamInputAdapter(name, data);
	    } else {
	        zipObjectContent = utils.prepareContent(name, data, o.binary, o.optimizedBinaryString, o.base64);
	    }
	
	    var object = new ZipObject(name, zipObjectContent, o);
	    this.files[name] = object;
	    /*
	    TODO: we can't throw an exception because we have async promises
	    (we can have a promise of a Date() for example) but returning a
	    promise is useless because file(name, data) returns the JSZip
	    object for chaining. Should we break that to allow the user
	    to catch the error ?
	
	    return external.Promise.resolve(zipObjectContent)
	    .then(function () {
	        return object;
	    });
	    */
	};
	
	/**
	 * Find the parent folder of the path.
	 * @private
	 * @param {string} path the path to use
	 * @return {string} the parent folder, or ""
	 */
	var parentFolder = function (path) {
	    if (path.slice(-1) === '/') {
	        path = path.substring(0, path.length - 1);
	    }
	    var lastSlash = path.lastIndexOf('/');
	    return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
	};
	
	/**
	 * Returns the path with a slash at the end.
	 * @private
	 * @param {String} path the path to check.
	 * @return {String} the path with a trailing slash.
	 */
	var forceTrailingSlash = function(path) {
	    // Check the name ends with a /
	    if (path.slice(-1) !== "/") {
	        path += "/"; // IE doesn't like substr(-1)
	    }
	    return path;
	};
	
	/**
	 * Add a (sub) folder in the current folder.
	 * @private
	 * @param {string} name the folder's name
	 * @param {boolean=} [createFolders] If true, automatically create sub
	 *  folders. Defaults to false.
	 * @return {Object} the new folder.
	 */
	var folderAdd = function(name, createFolders) {
	    createFolders = (typeof createFolders !== 'undefined') ? createFolders : defaults.createFolders;
	
	    name = forceTrailingSlash(name);
	
	    // Does this folder already exist?
	    if (!this.files[name]) {
	        fileAdd.call(this, name, null, {
	            dir: true,
	            createFolders: createFolders
	        });
	    }
	    return this.files[name];
	};
	
	/**
	* Cross-window, cross-Node-context regular expression detection
	* @param  {Object}  object Anything
	* @return {Boolean}        true if the object is a regular expression,
	* false otherwise
	*/
	function isRegExp(object) {
	    return Object.prototype.toString.call(object) === "[object RegExp]";
	}
	
	// return the actual prototype of JSZip
	var out = {
	    /**
	     * @see loadAsync
	     */
	    load: function() {
	        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
	    },
	
	
	    /**
	     * Call a callback function for each entry at this folder level.
	     * @param {Function} cb the callback function:
	     * function (relativePath, file) {...}
	     * It takes 2 arguments : the relative path and the file.
	     */
	    forEach: function(cb) {
	        var filename, relativePath, file;
	        for (filename in this.files) {
	            if (!this.files.hasOwnProperty(filename)) {
	                continue;
	            }
	            file = this.files[filename];
	            relativePath = filename.slice(this.root.length, filename.length);
	            if (relativePath && filename.slice(0, this.root.length) === this.root) { // the file is in the current root
	                cb(relativePath, file); // TODO reverse the parameters ? need to be clean AND consistent with the filter search fn...
	            }
	        }
	    },
	
	    /**
	     * Filter nested files/folders with the specified function.
	     * @param {Function} search the predicate to use :
	     * function (relativePath, file) {...}
	     * It takes 2 arguments : the relative path and the file.
	     * @return {Array} An array of matching elements.
	     */
	    filter: function(search) {
	        var result = [];
	        this.forEach(function (relativePath, entry) {
	            if (search(relativePath, entry)) { // the file matches the function
	                result.push(entry);
	            }
	
	        });
	        return result;
	    },
	
	    /**
	     * Add a file to the zip file, or search a file.
	     * @param   {string|RegExp} name The name of the file to add (if data is defined),
	     * the name of the file to find (if no data) or a regex to match files.
	     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
	     * @param   {Object} o     File options
	     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
	     * a file (when searching by string) or an array of files (when searching by regex).
	     */
	    file: function(name, data, o) {
	        if (arguments.length === 1) {
	            if (isRegExp(name)) {
	                var regexp = name;
	                return this.filter(function(relativePath, file) {
	                    return !file.dir && regexp.test(relativePath);
	                });
	            }
	            else { // text
	                var obj = this.files[this.root + name];
	                if (obj && !obj.dir) {
	                    return obj;
	                } else {
	                    return null;
	                }
	            }
	        }
	        else { // more than one argument : we have data !
	            name = this.root + name;
	            fileAdd.call(this, name, data, o);
	        }
	        return this;
	    },
	
	    /**
	     * Add a directory to the zip file, or search.
	     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
	     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
	     */
	    folder: function(arg) {
	        if (!arg) {
	            return this;
	        }
	
	        if (isRegExp(arg)) {
	            return this.filter(function(relativePath, file) {
	                return file.dir && arg.test(relativePath);
	            });
	        }
	
	        // else, name is a new folder
	        var name = this.root + arg;
	        var newFolder = folderAdd.call(this, name);
	
	        // Allow chaining by returning a new object with this folder as the root
	        var ret = this.clone();
	        ret.root = newFolder.name;
	        return ret;
	    },
	
	    /**
	     * Delete a file, or a directory and all sub-files, from the zip
	     * @param {string} name the name of the file to delete
	     * @return {JSZip} this JSZip object
	     */
	    remove: function(name) {
	        name = this.root + name;
	        var file = this.files[name];
	        if (!file) {
	            // Look for any folders
	            if (name.slice(-1) !== "/") {
	                name += "/";
	            }
	            file = this.files[name];
	        }
	
	        if (file && !file.dir) {
	            // file
	            delete this.files[name];
	        } else {
	            // maybe a folder, delete recursively
	            var kids = this.filter(function(relativePath, file) {
	                return file.name.slice(0, name.length) === name;
	            });
	            for (var i = 0; i < kids.length; i++) {
	                delete this.files[kids[i].name];
	            }
	        }
	
	        return this;
	    },
	
	    /**
	     * Generate the complete zip file
	     * @param {Object} options the options to generate the zip file :
	     * - compression, "STORE" by default.
	     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
	     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
	     */
	    generate: function(options) {
	        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
	    },
	
	    /**
	     * Generate the complete zip file as an internal stream.
	     * @param {Object} options the options to generate the zip file :
	     * - compression, "STORE" by default.
	     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
	     * @return {StreamHelper} the streamed zip file.
	     */
	    generateInternalStream: function(options) {
	      var worker, opts = {};
	      try {
	          opts = utils.extend(options || {}, {
	              streamFiles: false,
	              compression: "STORE",
	              compressionOptions : null,
	              type: "",
	              platform: "DOS",
	              comment: null,
	              mimeType: 'application/zip',
	              encodeFileName: utf8.utf8encode
	          });
	
	          opts.type = opts.type.toLowerCase();
	          opts.compression = opts.compression.toUpperCase();
	
	          // "binarystring" is prefered but the internals use "string".
	          if(opts.type === "binarystring") {
	            opts.type = "string";
	          }
	
	          if (!opts.type) {
	            throw new Error("No output type specified.");
	          }
	
	          utils.checkSupport(opts.type);
	
	          // accept nodejs `process.platform`
	          if(
	              options.platform === 'darwin' ||
	              options.platform === 'freebsd' ||
	              options.platform === 'linux' ||
	              options.platform === 'sunos'
	          ) {
	              options.platform = "UNIX";
	          }
	          if (options.platform === 'win32') {
	              options.platform = "DOS";
	          }
	
	          var comment = opts.comment || this.comment || "";
	          worker = generate.generateWorker(this, opts, comment);
	      } catch (e) {
	        worker = new GenericWorker("error");
	        worker.error(e);
	      }
	      return new StreamHelper(worker, opts.type || "string", opts.mimeType);
	    },
	    /**
	     * Generate the complete zip file asynchronously.
	     * @see generateInternalStream
	     */
	    generateAsync: function(options, onUpdate) {
	        return this.generateInternalStream(options).accumulate(onUpdate);
	    },
	    /**
	     * Generate the complete zip file asynchronously.
	     * @see generateInternalStream
	     */
	    generateNodeStream: function(options, onUpdate) {
	        options = options || {};
	        if (!options.type) {
	            options.type = "nodebuffer";
	        }
	        return this.generateInternalStream(options).toNodejsStream(onUpdate);
	    }
	};
	module.exports = out;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(164);
	var support = __webpack_require__(165);
	var nodejsUtils = __webpack_require__(199);
	var GenericWorker = __webpack_require__(207);
	
	/**
	 * The following functions come from pako, from pako/lib/utils/strings
	 * released under the MIT license, see pako https://github.com/nodeca/pako/
	 */
	
	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new Array(256);
	for (var i=0; i<256; i++) {
	  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
	}
	_utf8len[254]=_utf8len[254]=1; // Invalid sequence start
	
	// convert string to array (typed, when possible)
	var string2buf = function (str) {
	    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
	
	    // count binary size
	    for (m_pos = 0; m_pos < str_len; m_pos++) {
	        c = str.charCodeAt(m_pos);
	        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
	            c2 = str.charCodeAt(m_pos+1);
	            if ((c2 & 0xfc00) === 0xdc00) {
	                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	                m_pos++;
	            }
	        }
	        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	    }
	
	    // allocate buffer
	    if (support.uint8array) {
	        buf = new Uint8Array(buf_len);
	    } else {
	        buf = new Array(buf_len);
	    }
	
	    // convert
	    for (i=0, m_pos = 0; i < buf_len; m_pos++) {
	        c = str.charCodeAt(m_pos);
	        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
	            c2 = str.charCodeAt(m_pos+1);
	            if ((c2 & 0xfc00) === 0xdc00) {
	                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	                m_pos++;
	            }
	        }
	        if (c < 0x80) {
	            /* one byte */
	            buf[i++] = c;
	        } else if (c < 0x800) {
	            /* two bytes */
	            buf[i++] = 0xC0 | (c >>> 6);
	            buf[i++] = 0x80 | (c & 0x3f);
	        } else if (c < 0x10000) {
	            /* three bytes */
	            buf[i++] = 0xE0 | (c >>> 12);
	            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	            buf[i++] = 0x80 | (c & 0x3f);
	        } else {
	            /* four bytes */
	            buf[i++] = 0xf0 | (c >>> 18);
	            buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	            buf[i++] = 0x80 | (c & 0x3f);
	        }
	    }
	
	    return buf;
	};
	
	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	var utf8border = function(buf, max) {
	    var pos;
	
	    max = max || buf.length;
	    if (max > buf.length) { max = buf.length; }
	
	    // go back from last position, until start of sequence found
	    pos = max-1;
	    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }
	
	    // Fuckup - very small and broken sequence,
	    // return max, because we should return something anyway.
	    if (pos < 0) { return max; }
	
	    // If we came to start of buffer - that means vuffer is too small,
	    // return max too.
	    if (pos === 0) { return max; }
	
	    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};
	
	// convert array to string
	var buf2string = function (buf) {
	    var str, i, out, c, c_len;
	    var len = buf.length;
	
	    // Reserve max possible length (2 words per char)
	    // NB: by unknown reasons, Array is significantly faster for
	    //     String.fromCharCode.apply than Uint16Array.
	    var utf16buf = new Array(len*2);
	
	    for (out=0, i=0; i<len;) {
	        c = buf[i++];
	        // quick process ascii
	        if (c < 0x80) { utf16buf[out++] = c; continue; }
	
	        c_len = _utf8len[c];
	        // skip 5 & 6 byte codes
	        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }
	
	        // apply mask on first byte
	        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	        // join the rest
	        while (c_len > 1 && i < len) {
	            c = (c << 6) | (buf[i++] & 0x3f);
	            c_len--;
	        }
	
	        // terminated by end of string?
	        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }
	
	        if (c < 0x10000) {
	            utf16buf[out++] = c;
	        } else {
	            c -= 0x10000;
	            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	            utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	        }
	    }
	
	    // shrinkBuf(utf16buf, out)
	    if (utf16buf.length !== out) {
	        if(utf16buf.subarray) {
	            utf16buf = utf16buf.subarray(0, out);
	        } else {
	            utf16buf.length = out;
	        }
	    }
	
	    // return String.fromCharCode.apply(null, utf16buf);
	    return utils.applyFromCharCode(utf16buf);
	};
	
	
	// That's all for the pako functions.
	
	
	/**
	 * Transform a javascript string into an array (typed if possible) of bytes,
	 * UTF-8 encoded.
	 * @param {String} str the string to encode
	 * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
	 */
	exports.utf8encode = function utf8encode(str) {
	    if (support.nodebuffer) {
	        return nodejsUtils.newBuffer(str, "utf-8");
	    }
	
	    return string2buf(str);
	};
	
	
	/**
	 * Transform a bytes array (or a representation) representing an UTF-8 encoded
	 * string into a javascript string.
	 * @param {Array|Uint8Array|Buffer} buf the data de decode
	 * @return {String} the decoded string.
	 */
	exports.utf8decode = function utf8decode(buf) {
	    if (support.nodebuffer) {
	        return utils.transformTo("nodebuffer", buf).toString("utf-8");
	    }
	
	    buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);
	
	    return buf2string(buf);
	};
	
	/**
	 * A worker to decode utf8 encoded binary chunks into string chunks.
	 * @constructor
	 */
	function Utf8DecodeWorker() {
	    GenericWorker.call(this, "utf-8 decode");
	    // the last bytes if a chunk didn't end with a complete codepoint.
	    this.leftOver = null;
	}
	utils.inherits(Utf8DecodeWorker, GenericWorker);
	
	/**
	 * @see GenericWorker.processChunk
	 */
	Utf8DecodeWorker.prototype.processChunk = function (chunk) {
	
	    var data = utils.transformTo(support.uint8array ? "uint8array" : "array", chunk.data);
	
	    // 1st step, re-use what's left of the previous chunk
	    if (this.leftOver && this.leftOver.length) {
	        if(support.uint8array) {
	            var previousData = data;
	            data = new Uint8Array(previousData.length + this.leftOver.length);
	            data.set(this.leftOver, 0);
	            data.set(previousData, this.leftOver.length);
	        } else {
	            data = this.leftOver.concat(data);
	        }
	        this.leftOver = null;
	    }
	
	    var nextBoundary = utf8border(data);
	    var usableData = data;
	    if (nextBoundary !== data.length) {
	        if (support.uint8array) {
	            usableData = data.subarray(0, nextBoundary);
	            this.leftOver = data.subarray(nextBoundary, data.length);
	        } else {
	            usableData = data.slice(0, nextBoundary);
	            this.leftOver = data.slice(nextBoundary, data.length);
	        }
	    }
	
	    this.push({
	        data : exports.utf8decode(usableData),
	        meta : chunk.meta
	    });
	};
	
	/**
	 * @see GenericWorker.flush
	 */
	Utf8DecodeWorker.prototype.flush = function () {
	    if(this.leftOver && this.leftOver.length) {
	        this.push({
	            data : exports.utf8decode(this.leftOver),
	            meta : {}
	        });
	        this.leftOver = null;
	    }
	};
	exports.Utf8DecodeWorker = Utf8DecodeWorker;
	
	/**
	 * A worker to endcode string chunks into utf8 encoded binary chunks.
	 * @constructor
	 */
	function Utf8EncodeWorker() {
	    GenericWorker.call(this, "utf-8 encode");
	}
	utils.inherits(Utf8EncodeWorker, GenericWorker);
	
	/**
	 * @see GenericWorker.processChunk
	 */
	Utf8EncodeWorker.prototype.processChunk = function (chunk) {
	    this.push({
	        data : exports.utf8encode(chunk.data),
	        meta : chunk.meta
	    });
	};
	exports.Utf8EncodeWorker = Utf8EncodeWorker;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var support = __webpack_require__(165);
	var base64 = __webpack_require__(198);
	var nodejsUtils = __webpack_require__(199);
	var asap = __webpack_require__(200);
	var external = __webpack_require__(202);
	
	
	/**
	 * Convert a string that pass as a "binary string": it should represent a byte
	 * array but may have > 255 char codes. Be sure to take only the first byte
	 * and returns the byte array.
	 * @param {String} str the string to transform.
	 * @return {Array|Uint8Array} the string in a binary format.
	 */
	function string2binary(str) {
	    var result = null;
	    if (support.uint8array) {
	      result = new Uint8Array(str.length);
	    } else {
	      result = new Array(str.length);
	    }
	    return stringToArrayLike(str, result);
	}
	
	/**
	 * Create a new blob with the given content and the given type.
	 * @param {String|ArrayBuffer} part the content to put in the blob. DO NOT use
	 * an Uint8Array because the stock browser of android 4 won't accept it (it
	 * will be silently converted to a string, "[object Uint8Array]").
	 * @param {String} type the mime type of the blob.
	 * @return {Blob} the created blob.
	 */
	exports.newBlob = function(part, type) {
	    exports.checkSupport("blob");
	
	    try {
	        // Blob constructor
	        return new Blob([part], {
	            type: type
	        });
	    }
	    catch (e) {
	
	        try {
	            // deprecated, browser only, old way
	            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
	            var builder = new Builder();
	            builder.append(part);
	            return builder.getBlob(type);
	        }
	        catch (e) {
	
	            // well, fuck ?!
	            throw new Error("Bug : can't construct the Blob.");
	        }
	    }
	
	
	};
	/**
	 * The identity function.
	 * @param {Object} input the input.
	 * @return {Object} the same input.
	 */
	function identity(input) {
	    return input;
	}
	
	/**
	 * Fill in an array with a string.
	 * @param {String} str the string to use.
	 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
	 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
	 */
	function stringToArrayLike(str, array) {
	    for (var i = 0; i < str.length; ++i) {
	        array[i] = str.charCodeAt(i) & 0xFF;
	    }
	    return array;
	}
	
	/**
	 * An helper for the function arrayLikeToString.
	 * This contains static informations and functions that
	 * can be optimized by the browser JIT compiler.
	 */
	var arrayToStringHelper = {
	    /**
	     * Transform an array of int into a string, chunk by chunk.
	     * See the performances notes on arrayLikeToString.
	     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
	     * @param {String} type the type of the array.
	     * @param {Integer} chunk the chunk size.
	     * @return {String} the resulting string.
	     * @throws Error if the chunk is too big for the stack.
	     */
	    stringifyByChunk: function(array, type, chunk) {
	        var result = [], k = 0, len = array.length;
	        // shortcut
	        if (len <= chunk) {
	            return String.fromCharCode.apply(null, array);
	        }
	        while (k < len) {
	            if (type === "array" || type === "nodebuffer") {
	                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
	            }
	            else {
	                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
	            }
	            k += chunk;
	        }
	        return result.join("");
	    },
	    /**
	     * Call String.fromCharCode on every item in the array.
	     * This is the naive implementation, which generate A LOT of intermediate string.
	     * This should be used when everything else fail.
	     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
	     * @return {String} the result.
	     */
	    stringifyByChar: function(array){
	        var resultStr = "";
	        for(var i = 0; i < array.length; i++) {
	            resultStr += String.fromCharCode(array[i]);
	        }
	        return resultStr;
	    },
	    applyCanBeUsed : {
	        /**
	         * true if the browser accepts to use String.fromCharCode on Uint8Array
	         */
	        uint8array : (function () {
	            try {
	                return support.uint8array && String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;
	            } catch (e) {
	                return false;
	            }
	        })(),
	        /**
	         * true if the browser accepts to use String.fromCharCode on nodejs Buffer.
	         */
	        nodebuffer : (function () {
	            try {
	                return support.nodebuffer && String.fromCharCode.apply(null, nodejsUtils.newBuffer(1)).length === 1;
	            } catch (e) {
	                return false;
	            }
	        })()
	    }
	};
	
	/**
	 * Transform an array-like object to a string.
	 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
	 * @return {String} the result.
	 */
	function arrayLikeToString(array) {
	    // Performances notes :
	    // --------------------
	    // String.fromCharCode.apply(null, array) is the fastest, see
	    // see http://jsperf.com/converting-a-uint8array-to-a-string/2
	    // but the stack is limited (and we can get huge arrays !).
	    //
	    // result += String.fromCharCode(array[i]); generate too many strings !
	    //
	    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
	    // TODO : we now have workers that split the work. Do we still need that ?
	    var chunk = 65536,
	        type = exports.getTypeOf(array),
	        canUseApply = true;
	    if (type === "uint8array") {
	        canUseApply = arrayToStringHelper.applyCanBeUsed.uint8array;
	    } else if (type === "nodebuffer") {
	        canUseApply = arrayToStringHelper.applyCanBeUsed.nodebuffer;
	    }
	
	    if (canUseApply) {
	        while (chunk > 1) {
	            try {
	                return arrayToStringHelper.stringifyByChunk(array, type, chunk);
	            } catch (e) {
	                chunk = Math.floor(chunk / 2);
	            }
	        }
	    }
	
	    // no apply or chunk error : slow and painful algorithm
	    // default browser on android 4.*
	    return arrayToStringHelper.stringifyByChar(array);
	}
	
	exports.applyFromCharCode = arrayLikeToString;
	
	
	/**
	 * Copy the data from an array-like to an other array-like.
	 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
	 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
	 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
	 */
	function arrayLikeToArrayLike(arrayFrom, arrayTo) {
	    for (var i = 0; i < arrayFrom.length; i++) {
	        arrayTo[i] = arrayFrom[i];
	    }
	    return arrayTo;
	}
	
	// a matrix containing functions to transform everything into everything.
	var transform = {};
	
	// string to ?
	transform["string"] = {
	    "string": identity,
	    "array": function(input) {
	        return stringToArrayLike(input, new Array(input.length));
	    },
	    "arraybuffer": function(input) {
	        return transform["string"]["uint8array"](input).buffer;
	    },
	    "uint8array": function(input) {
	        return stringToArrayLike(input, new Uint8Array(input.length));
	    },
	    "nodebuffer": function(input) {
	        return stringToArrayLike(input, nodejsUtils.newBuffer(input.length));
	    }
	};
	
	// array to ?
	transform["array"] = {
	    "string": arrayLikeToString,
	    "array": identity,
	    "arraybuffer": function(input) {
	        return (new Uint8Array(input)).buffer;
	    },
	    "uint8array": function(input) {
	        return new Uint8Array(input);
	    },
	    "nodebuffer": function(input) {
	        return nodejsUtils.newBuffer(input);
	    }
	};
	
	// arraybuffer to ?
	transform["arraybuffer"] = {
	    "string": function(input) {
	        return arrayLikeToString(new Uint8Array(input));
	    },
	    "array": function(input) {
	        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
	    },
	    "arraybuffer": identity,
	    "uint8array": function(input) {
	        return new Uint8Array(input);
	    },
	    "nodebuffer": function(input) {
	        return nodejsUtils.newBuffer(new Uint8Array(input));
	    }
	};
	
	// uint8array to ?
	transform["uint8array"] = {
	    "string": arrayLikeToString,
	    "array": function(input) {
	        return arrayLikeToArrayLike(input, new Array(input.length));
	    },
	    "arraybuffer": function(input) {
	        return input.buffer;
	    },
	    "uint8array": identity,
	    "nodebuffer": function(input) {
	        return nodejsUtils.newBuffer(input);
	    }
	};
	
	// nodebuffer to ?
	transform["nodebuffer"] = {
	    "string": arrayLikeToString,
	    "array": function(input) {
	        return arrayLikeToArrayLike(input, new Array(input.length));
	    },
	    "arraybuffer": function(input) {
	        return transform["nodebuffer"]["uint8array"](input).buffer;
	    },
	    "uint8array": function(input) {
	        return arrayLikeToArrayLike(input, new Uint8Array(input.length));
	    },
	    "nodebuffer": identity
	};
	
	/**
	 * Transform an input into any type.
	 * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
	 * If no output type is specified, the unmodified input will be returned.
	 * @param {String} outputType the output type.
	 * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
	 * @throws {Error} an Error if the browser doesn't support the requested output type.
	 */
	exports.transformTo = function(outputType, input) {
	    if (!input) {
	        // undefined, null, etc
	        // an empty string won't harm.
	        input = "";
	    }
	    if (!outputType) {
	        return input;
	    }
	    exports.checkSupport(outputType);
	    var inputType = exports.getTypeOf(input);
	    var result = transform[inputType][outputType](input);
	    return result;
	};
	
	/**
	 * Return the type of the input.
	 * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
	 * @param {Object} input the input to identify.
	 * @return {String} the (lowercase) type of the input.
	 */
	exports.getTypeOf = function(input) {
	    if (typeof input === "string") {
	        return "string";
	    }
	    if (Object.prototype.toString.call(input) === "[object Array]") {
	        return "array";
	    }
	    if (support.nodebuffer && nodejsUtils.isBuffer(input)) {
	        return "nodebuffer";
	    }
	    if (support.uint8array && input instanceof Uint8Array) {
	        return "uint8array";
	    }
	    if (support.arraybuffer && input instanceof ArrayBuffer) {
	        return "arraybuffer";
	    }
	};
	
	/**
	 * Throw an exception if the type is not supported.
	 * @param {String} type the type to check.
	 * @throws {Error} an Error if the browser doesn't support the requested type.
	 */
	exports.checkSupport = function(type) {
	    var supported = support[type.toLowerCase()];
	    if (!supported) {
	        throw new Error(type + " is not supported by this platform");
	    }
	};
	
	exports.MAX_VALUE_16BITS = 65535;
	exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1
	
	/**
	 * Prettify a string read as binary.
	 * @param {string} str the string to prettify.
	 * @return {string} a pretty string.
	 */
	exports.pretty = function(str) {
	    var res = '',
	        code, i;
	    for (i = 0; i < (str || "").length; i++) {
	        code = str.charCodeAt(i);
	        res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
	    }
	    return res;
	};
	
	/**
	 * Defer the call of a function.
	 * @param {Function} callback the function to call asynchronously.
	 * @param {Array} args the arguments to give to the callback.
	 */
	exports.delay = function(callback, args, self) {
	    asap(function () {
	        callback.apply(self || null, args || []);
	    });
	};
	
	/**
	 * Extends a prototype with an other, without calling a constructor with
	 * side effects. Inspired by nodejs' `utils.inherits`
	 * @param {Function} ctor the constructor to augment
	 * @param {Function} superCtor the parent constructor to use
	 */
	exports.inherits = function (ctor, superCtor) {
	    var Obj = function() {};
	    Obj.prototype = superCtor.prototype;
	    ctor.prototype = new Obj();
	};
	
	/**
	 * Merge the objects passed as parameters into a new one.
	 * @private
	 * @param {...Object} var_args All objects to merge.
	 * @return {Object} a new object with the data of the others.
	 */
	exports.extend = function() {
	    var result = {}, i, attr;
	    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
	        for (attr in arguments[i]) {
	            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
	                result[attr] = arguments[i][attr];
	            }
	        }
	    }
	    return result;
	};
	
	/**
	 * Transform arbitrary content into a Promise.
	 * @param {String} name a name for the content being processed.
	 * @param {Object} inputData the content to process.
	 * @param {Boolean} isBinary true if the content is not an unicode string
	 * @param {Boolean} isOptimizedBinaryString true if the string content only has one byte per character.
	 * @param {Boolean} isBase64 true if the string content is encoded with base64.
	 * @return {Promise} a promise in a format usable by JSZip.
	 */
	exports.prepareContent = function(name, inputData, isBinary, isOptimizedBinaryString, isBase64) {
	
	    var promise = null;
	    if (support.blob && inputData instanceof Blob && typeof FileReader !== "undefined") {
	        promise = new external.Promise(function (resolve, reject) {
	            var reader = new FileReader();
	
	            reader.onload = function(e) {
	                resolve(e.target.result);
	            };
	            reader.onerror = function(e) {
	                reject(e.target.error);
	            };
	            reader.readAsArrayBuffer(inputData);
	        });
	    } else {
	        // if data is already a promise, this flatten it.
	        promise = external.Promise.resolve(inputData);
	    }
	
	    return promise.then(function(data) {
	        var dataType = exports.getTypeOf(data);
	
	        if (!dataType) {
	            return external.Promise.reject(
	                new Error("The data of '" + name + "' is in an unsupported format !")
	            );
	        }
	        // special case : it's way easier to work with Uint8Array than with ArrayBuffer
	        if (dataType === "arraybuffer") {
	            data = exports.transformTo("uint8array", data);
	        } else if (dataType === "string") {
	            if (isBase64) {
	                data = base64.decode(data);
	            }
	            else if (isBinary) {
	                // optimizedBinaryString === true means that the file has already been filtered with a 0xFF mask
	                if (isOptimizedBinaryString !== true) {
	                    // this is a string, not in a base64 format.
	                    // Be sure that this is a correct "binary string"
	                    data = string2binary(data);
	                }
	            }
	        }
	        return data;
	    });
	};


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	exports.base64 = true;
	exports.array = true;
	exports.string = true;
	exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
	exports.nodebuffer = typeof Buffer !== "undefined";
	// contains true if JSZip can read/generate Uint8Array, false otherwise.
	exports.uint8array = typeof Uint8Array !== "undefined";
	
	if (typeof ArrayBuffer === "undefined") {
	    exports.blob = false;
	}
	else {
	    var buffer = new ArrayBuffer(0);
	    try {
	        exports.blob = new Blob([buffer], {
	            type: "application/zip"
	        }).size === 0;
	    }
	    catch (e) {
	        try {
	            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
	            var builder = new Builder();
	            builder.append(buffer);
	            exports.blob = builder.getBlob('application/zip').size === 0;
	        }
	        catch (e) {
	            exports.blob = false;
	        }
	    }
	}
	
	exports.nodestream = !!__webpack_require__(167).prototype;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(166).Buffer))

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(78);

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Readable = __webpack_require__(168).Readable;
	
	var util = __webpack_require__(197);
	util.inherits(NodejsStreamOutputAdapter, Readable);
	
	/**
	* A nodejs stream using a worker as source.
	* @see the SourceWrapper in http://nodejs.org/api/stream.html
	* @constructor
	* @param {StreamHelper} helper the helper wrapping the worker
	* @param {Object} options the nodejs stream options
	* @param {Function} updateCb the update callback.
	*/
	function NodejsStreamOutputAdapter(helper, options, updateCb) {
	    Readable.call(this, options);
	    this._helper = helper;
	
	    var self = this;
	    helper.on("data", function (data, meta) {
	        if (!self.push(data)) {
	            self._helper.pause();
	        }
	        if(updateCb) {
	            updateCb(meta);
	        }
	    })
	    .on("error", function(e) {
	        self.emit('error', e);
	    })
	    .on("end", function () {
	        self.push(null);
	    });
	}
	
	
	NodejsStreamOutputAdapter.prototype._read = function() {
	    this._helper.resume();
	};
	
	module.exports = NodejsStreamOutputAdapter;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = (function (){
	  try {
	    return __webpack_require__(169); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(187);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(192);
	exports.Duplex = __webpack_require__(191);
	exports.Transform = __webpack_require__(195);
	exports.PassThrough = __webpack_require__(196);


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(170).EventEmitter;
	var inherits = __webpack_require__(171);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(172);
	Stream.Writable = __webpack_require__(183);
	Stream.Duplex = __webpack_require__(184);
	Stream.Transform = __webpack_require__(185);
	Stream.PassThrough = __webpack_require__(186);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(59);

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(90);

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(174);
	exports.Stream = __webpack_require__(169);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(179);
	exports.Duplex = __webpack_require__(178);
	exports.Transform = __webpack_require__(181);
	exports.PassThrough = __webpack_require__(182);
	if (!process.browser && process.env.READABLE_STREAM === 'disable') {
	  module.exports = __webpack_require__(169);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(50);

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Readable;
	
	/*<replacement>*/
	var isArray = __webpack_require__(175);
	/*</replacement>*/
	
	
	/*<replacement>*/
	var Buffer = __webpack_require__(166).Buffer;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	var EE = __webpack_require__(170).EventEmitter;
	
	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	var Stream = __webpack_require__(169);
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	var StringDecoder;
	
	
	/*<replacement>*/
	var debug = __webpack_require__(177);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	
	util.inherits(Readable, Stream);
	
	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(178);
	
	  options = options || {};
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(180).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  var Duplex = __webpack_require__(178);
	
	  if (!(this instanceof Readable))
	    return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;
	
	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);
	
	      if (!addToFront)
	        state.reading = false;
	
	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);
	
	        if (state.needReadable)
	          emitReadable(stream);
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(180).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}
	
	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;
	
	  if (state.objectMode)
	    return n === 0 ? 0 : 1;
	
	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }
	
	  if (n <= 0)
	    return 0;
	
	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);
	
	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }
	
	  return n;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }
	
	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }
	
	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);
	
	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;
	
	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }
	
	  state.length -= n;
	
	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;
	
	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);
	
	  if (!util.isNull(ret))
	    this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	
	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};
	
	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }
	
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];
	
	
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	
	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;
	
	    if (!dest)
	      dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }
	
	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;
	
	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }
	
	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}
	
	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}
	
	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;
	
	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;
	
	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);
	
	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);
	
	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);
	
	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();
	
	        c += cpy;
	      }
	    }
	  }
	
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}
	
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173)))

/***/ },
/* 175 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(166).Buffer))

/***/ },
/* 177 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/
	
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	var Readable = __webpack_require__(174);
	var Writable = __webpack_require__(179);
	
	util.inherits(Duplex, Readable);
	
	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});
	
	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false)
	    this.readable = false;
	
	  if (options && options.writable === false)
	    this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}
	
	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173)))

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.
	
	module.exports = Writable;
	
	/*<replacement>*/
	var Buffer = __webpack_require__(166).Buffer;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	var Stream = __webpack_require__(169);
	
	util.inherits(Writable, Stream);
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}
	
	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(178);
	
	  options = options || {};
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.buffer = [];
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}
	
	function Writable(options) {
	  var Duplex = __webpack_require__(178);
	
	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};
	
	
	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;
	
	  if (!util.isFunction(cb))
	    cb = function() {};
	
	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function() {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function() {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;
	
	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);
	
	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	
	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);
	
	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });
	
	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }
	
	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }
	
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};
	
	
	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173)))

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(166).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	
	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(178);
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	
	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (!util.isNullOrUndefined(data))
	    stream.push(data);
	
	  if (cb)
	    cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	
	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(options, this);
	
	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}
	
	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};
	
	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;
	
	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	
	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');
	
	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');
	
	  return stream.push(null);
	}


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(181);
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(179)


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(178)


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(181)


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(182)


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Readable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(188);
	/*</replacement>*/
	
	/*<replacement>*/
	var isArray = __webpack_require__(189);
	/*</replacement>*/
	
	/*<replacement>*/
	var Buffer = __webpack_require__(166).Buffer;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	var EE = __webpack_require__(170);
	
	/*<replacement>*/
	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(169);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(170).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(166).Buffer;
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __webpack_require__(190);
	var debug = undefined;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	var Duplex;
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(191);
	
	  options = options || {};
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;
	
	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(180).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	var Duplex;
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(191);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options && typeof options.read === 'function') this._read = options.read;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	
	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }
	
	      if (!addToFront) state.reading = false;
	
	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	          if (state.needReadable) emitReadable(stream);
	        }
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(180).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended) return 0;
	
	  if (state.objectMode) return n === 0 ? 0 : 1;
	
	  if (n === null || isNaN(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;
	  }
	
	  if (n <= 0) return 0;
	
	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	
	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else {
	      return state.length;
	    }
	  }
	
	  return n;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }
	
	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }
	
	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }
	
	  state.length -= n;
	
	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended) state.needReadable = true;
	
	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      if (state.pipesCount === 1 && state.pipes[0] === dest && src.listenerCount('data') === 1 && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error) dest.on('error', onerror);else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);else dest._events.error = [onerror, dest._events.error];
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }
	
	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;
	
	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }
	
	  if (ev === 'readable' && !this._readableState.endEmitted) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;
	
	  // nothing in the list, definitely empty.
	  if (list.length === 0) return null;
	
	  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode) ret = '';else ret = new Buffer(n);
	
	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);
	
	        if (stringMode) ret += buf.slice(0, cpy);else buf.copy(ret, c, 0, cpy);
	
	        if (cpy < buf.length) list[0] = buf.slice(cpy);else list.shift();
	
	        c += cpy;
	      }
	    }
	  }
	
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('endReadable called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173)))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173)))

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(81);

/***/ },
/* 190 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(188);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	var Readable = __webpack_require__(187);
	var Writable = __webpack_require__(192);
	
	util.inherits(Duplex, Readable);
	
	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	module.exports = Writable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(188);
	/*</replacement>*/
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/
	
	/*<replacement>*/
	var Buffer = __webpack_require__(166).Buffer;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(194)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(169);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(170).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(166).Buffer;
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	var Duplex;
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(191);
	
	  options = options || {};
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;
	
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // create the two objects needed to store the corked requests
	  // they are not a linked list, as no new elements are inserted in there
	  this.corkedRequestsFree = new CorkedRequest(this);
	  this.corkedRequestsFree.next = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();
	
	var Duplex;
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(191);
	
	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    state.corkedRequestsFree = holder.next;
	    holder.next = null;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173), __webpack_require__(193).setImmediate))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(173).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(193).setImmediate, __webpack_require__(193).clearImmediate))

/***/ },
/* 194 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(191);
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(this);
	
	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	function done(stream, er) {
	  if (er) return stream.emit('error', er);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length) throw new Error('calling transform done when ws.length != 0');
	
	  if (ts.transforming) throw new Error('calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(195);
	
	/*<replacement>*/
	var util = __webpack_require__(176);
	util.inherits = __webpack_require__(171);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(88);

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var utils = __webpack_require__(164);
	var support = __webpack_require__(165);
	// private property
	var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	
	
	// public method for encoding
	exports.encode = function(input) {
	    var output = [];
	    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	    var i = 0, len = input.length, remainingBytes = len;
	
	    var isArray = utils.getTypeOf(input) !== "string";
	    while (i < input.length) {
	        remainingBytes = len - i;
	
	        if (!isArray) {
	            chr1 = input.charCodeAt(i++);
	            chr2 = i < len ? input.charCodeAt(i++) : 0;
	            chr3 = i < len ? input.charCodeAt(i++) : 0;
	        } else {
	            chr1 = input[i++];
	            chr2 = i < len ? input[i++] : 0;
	            chr3 = i < len ? input[i++] : 0;
	        }
	
	        enc1 = chr1 >> 2;
	        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
	        enc3 = remainingBytes > 1 ? (((chr2 & 15) << 2) | (chr3 >> 6)) : 64;
	        enc4 = remainingBytes > 2 ? (chr3 & 63) : 64;
	
	        output.push(_keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4));
	
	    }
	
	    return output.join("");
	};
	
	// public method for decoding
	exports.decode = function(input) {
	    var chr1, chr2, chr3;
	    var enc1, enc2, enc3, enc4;
	    var i = 0, resultIndex = 0;
	
	    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
	
	    var totalLength = input.length * 3 / 4;
	    if(input.charAt(input.length - 1) === _keyStr.charAt(64)) {
	        totalLength--;
	    }
	    if(input.charAt(input.length - 2) === _keyStr.charAt(64)) {
	        totalLength--;
	    }
	    var output;
	    if (support.uint8array) {
	        output = new Uint8Array(totalLength);
	    } else {
	        output = new Array(totalLength);
	    }
	
	    while (i < input.length) {
	
	        enc1 = _keyStr.indexOf(input.charAt(i++));
	        enc2 = _keyStr.indexOf(input.charAt(i++));
	        enc3 = _keyStr.indexOf(input.charAt(i++));
	        enc4 = _keyStr.indexOf(input.charAt(i++));
	
	        chr1 = (enc1 << 2) | (enc2 >> 4);
	        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
	        chr3 = ((enc3 & 3) << 6) | enc4;
	
	        output[resultIndex++] = chr1;
	
	        if (enc3 !== 64) {
	            output[resultIndex++] = chr2;
	        }
	        if (enc4 !== 64) {
	            output[resultIndex++] = chr3;
	        }
	
	    }
	
	    return output;
	};


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	module.exports = {
	    /**
	     * True if this is running in Nodejs, will be undefined in a browser.
	     * In a browser, browserify won't include this file and the whole module
	     * will be resolved an empty object.
	     */
	    isNode : typeof Buffer !== "undefined",
	    /**
	     * Create a new nodejs Buffer.
	     * @param {Object} data the data to pass to the constructor.
	     * @param {String} encoding the encoding to use.
	     * @return {Buffer} a new Buffer.
	     */
	    newBuffer : function(data, encoding){
	        return new Buffer(data, encoding);
	    },
	    /**
	     * Find out if an object is a Buffer.
	     * @param {Object} b the object to test.
	     * @return {Boolean} true if the object is a Buffer, false otherwise.
	     */
	    isBuffer : function(b){
	        return Buffer.isBuffer(b);
	    },
	
	    isStream : function (obj) {
	        return obj &&
	            typeof obj.on === "function" &&
	            typeof obj.pause === "function" &&
	            typeof obj.resume === "function";
	    }
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(166).Buffer))

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	// rawAsap provides everything we need except exception management.
	var rawAsap = __webpack_require__(201);
	// RawTasks are recycled to reduce GC churn.
	var freeTasks = [];
	// We queue errors to ensure they are thrown in right order (FIFO).
	// Array-as-queue is good enough here, since we are just dealing with exceptions.
	var pendingErrors = [];
	var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);
	
	function throwFirstError() {
	    if (pendingErrors.length) {
	        throw pendingErrors.shift();
	    }
	}
	
	/**
	 * Calls a task as soon as possible after returning, in its own event, with priority
	 * over other events like animation, reflow, and repaint. An error thrown from an
	 * event will not interrupt, nor even substantially slow down the processing of
	 * other events, but will be rather postponed to a lower priority event.
	 * @param {{call}} task A callable object, typically a function that takes no
	 * arguments.
	 */
	module.exports = asap;
	function asap(task) {
	    var rawTask;
	    if (freeTasks.length) {
	        rawTask = freeTasks.pop();
	    } else {
	        rawTask = new RawTask();
	    }
	    rawTask.task = task;
	    rawAsap(rawTask);
	}
	
	// We wrap tasks with recyclable task objects.  A task object implements
	// `call`, just like a function.
	function RawTask() {
	    this.task = null;
	}
	
	// The sole purpose of wrapping the task is to catch the exception and recycle
	// the task object after its single use.
	RawTask.prototype.call = function () {
	    try {
	        this.task.call();
	    } catch (error) {
	        if (asap.onerror) {
	            // This hook exists purely for testing purposes.
	            // Its name will be periodically randomized to break any code that
	            // depends on its existence.
	            asap.onerror(error);
	        } else {
	            // In a web browser, exceptions are not fatal. However, to avoid
	            // slowing down the queue of pending tasks, we rethrow the error in a
	            // lower priority turn.
	            pendingErrors.push(error);
	            requestErrorThrow();
	        }
	    } finally {
	        this.task = null;
	        freeTasks[freeTasks.length] = this;
	    }
	};


/***/ },
/* 201 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}
	
	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;
	
	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}
	
	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
	
	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
	var BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;
	
	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);
	
	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.
	
	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396
	
	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}
	
	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.js’s
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;
	
	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}
	
	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html
	
	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.
	
	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }
	
	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.
	
	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }
	
	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.
	
	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.
	
	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);
	
	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}
	
	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
	
	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ES6Promise = __webpack_require__(203).Promise;
	
	/**
	 * Let the user use/change some implementations.
	 */
	module.exports = {
	    Promise: ES6Promise
	};


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, global, module) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   3.0.2
	 */
	
	(function() {
	    "use strict";
	    function lib$es6$promise$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }
	
	    function lib$es6$promise$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }
	
	    function lib$es6$promise$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }
	
	    var lib$es6$promise$utils$$_isArray;
	    if (!Array.isArray) {
	      lib$es6$promise$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      lib$es6$promise$utils$$_isArray = Array.isArray;
	    }
	
	    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
	    var lib$es6$promise$asap$$len = 0;
	    var lib$es6$promise$asap$$toString = {}.toString;
	    var lib$es6$promise$asap$$vertxNext;
	    var lib$es6$promise$asap$$customSchedulerFn;
	
	    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
	      lib$es6$promise$asap$$len += 2;
	      if (lib$es6$promise$asap$$len === 2) {
	        // If len is 2, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        if (lib$es6$promise$asap$$customSchedulerFn) {
	          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
	        } else {
	          lib$es6$promise$asap$$scheduleFlush();
	        }
	      }
	    }
	
	    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
	      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
	    }
	
	    function lib$es6$promise$asap$$setAsap(asapFn) {
	      lib$es6$promise$asap$$asap = asapFn;
	    }
	
	    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
	    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
	    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
	    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
	
	    // test for web worker but not in IE10
	    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';
	
	    // node
	    function lib$es6$promise$asap$$useNextTick() {
	      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	      // see https://github.com/cujojs/when/issues/410 for details
	      return function() {
	        process.nextTick(lib$es6$promise$asap$$flush);
	      };
	    }
	
	    // vertx
	    function lib$es6$promise$asap$$useVertxTimer() {
	      return function() {
	        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
	      };
	    }
	
	    function lib$es6$promise$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });
	
	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }
	
	    // web worker
	    function lib$es6$promise$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = lib$es6$promise$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }
	
	    function lib$es6$promise$asap$$useSetTimeout() {
	      return function() {
	        setTimeout(lib$es6$promise$asap$$flush, 1);
	      };
	    }
	
	    var lib$es6$promise$asap$$queue = new Array(1000);
	    function lib$es6$promise$asap$$flush() {
	      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
	        var callback = lib$es6$promise$asap$$queue[i];
	        var arg = lib$es6$promise$asap$$queue[i+1];
	
	        callback(arg);
	
	        lib$es6$promise$asap$$queue[i] = undefined;
	        lib$es6$promise$asap$$queue[i+1] = undefined;
	      }
	
	      lib$es6$promise$asap$$len = 0;
	    }
	
	    function lib$es6$promise$asap$$attemptVertx() {
	      try {
	        var r = require;
	        var vertx = __webpack_require__(205);
	        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
	        return lib$es6$promise$asap$$useVertxTimer();
	      } catch(e) {
	        return lib$es6$promise$asap$$useSetTimeout();
	      }
	    }
	
	    var lib$es6$promise$asap$$scheduleFlush;
	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (lib$es6$promise$asap$$isNode) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
	    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
	    } else if (lib$es6$promise$asap$$isWorker) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
	    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
	    } else {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
	    }
	
	    function lib$es6$promise$$internal$$noop() {}
	
	    var lib$es6$promise$$internal$$PENDING   = void 0;
	    var lib$es6$promise$$internal$$FULFILLED = 1;
	    var lib$es6$promise$$internal$$REJECTED  = 2;
	
	    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();
	
	    function lib$es6$promise$$internal$$selfFulfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }
	
	    function lib$es6$promise$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.');
	    }
	
	    function lib$es6$promise$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
	        return lib$es6$promise$$internal$$GET_THEN_ERROR;
	      }
	    }
	
	    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }
	
	    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
	       lib$es6$promise$asap$$asap(function(promise) {
	        var sealed = false;
	        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            lib$es6$promise$$internal$$resolve(promise, value);
	          } else {
	            lib$es6$promise$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;
	
	          lib$es6$promise$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	        if (!sealed && error) {
	          sealed = true;
	          lib$es6$promise$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }
	
	    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
	      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, thenable._result);
	      } else {
	        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      }
	    }
	
	    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
	      if (maybeThenable.constructor === promise.constructor) {
	        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        var then = lib$es6$promise$$internal$$getThen(maybeThenable);
	
	        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        } else if (lib$es6$promise$utils$$isFunction(then)) {
	          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }
	
	    function lib$es6$promise$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
	      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
	        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
	      } else {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      }
	    }
	
	    function lib$es6$promise$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }
	
	      lib$es6$promise$$internal$$publish(promise);
	    }
	
	    function lib$es6$promise$$internal$$fulfill(promise, value) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	
	      promise._result = value;
	      promise._state = lib$es6$promise$$internal$$FULFILLED;
	
	      if (promise._subscribers.length !== 0) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
	      }
	    }
	
	    function lib$es6$promise$$internal$$reject(promise, reason) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	      promise._state = lib$es6$promise$$internal$$REJECTED;
	      promise._result = reason;
	
	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
	    }
	
	    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;
	
	      parent._onerror = null;
	
	      subscribers[length] = child;
	      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;
	
	      if (length === 0 && parent._state) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
	      }
	    }
	
	    function lib$es6$promise$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;
	
	      if (subscribers.length === 0) { return; }
	
	      var child, callback, detail = promise._result;
	
	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];
	
	        if (child) {
	          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }
	
	      promise._subscribers.length = 0;
	    }
	
	    function lib$es6$promise$$internal$$ErrorObject() {
	      this.error = null;
	    }
	
	    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();
	
	    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
	        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
	      }
	    }
	
	    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
	          value, error, succeeded, failed;
	
	      if (hasCallback) {
	        value = lib$es6$promise$$internal$$tryCatch(callback, detail);
	
	        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }
	
	        if (promise === value) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
	          return;
	        }
	
	      } else {
	        value = detail;
	        succeeded = true;
	      }
	
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      } else if (failed) {
	        lib$es6$promise$$internal$$reject(promise, error);
	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, value);
	      }
	    }
	
	    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        lib$es6$promise$$internal$$reject(promise, e);
	      }
	    }
	
	    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
	      var enumerator = this;
	
	      enumerator._instanceConstructor = Constructor;
	      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);
	
	      if (enumerator._validateInput(input)) {
	        enumerator._input     = input;
	        enumerator.length     = input.length;
	        enumerator._remaining = input.length;
	
	        enumerator._init();
	
	        if (enumerator.length === 0) {
	          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	        } else {
	          enumerator.length = enumerator.length || 0;
	          enumerator._enumerate();
	          if (enumerator._remaining === 0) {
	            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	          }
	        }
	      } else {
	        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
	      }
	    }
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
	      return lib$es6$promise$utils$$isArray(input);
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
	      return new Error('Array Methods must be provided an Array');
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
	      this._result = new Array(this.length);
	    };
	
	    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
	      var enumerator = this;
	
	      var length  = enumerator.length;
	      var promise = enumerator.promise;
	      var input   = enumerator._input;
	
	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        enumerator._eachEntry(input[i], i);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var enumerator = this;
	      var c = enumerator._instanceConstructor;
	
	      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
	        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
	          entry._onerror = null;
	          enumerator._settledAt(entry._state, i, entry._result);
	        } else {
	          enumerator._willSettleAt(c.resolve(entry), i);
	        }
	      } else {
	        enumerator._remaining--;
	        enumerator._result[i] = entry;
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var enumerator = this;
	      var promise = enumerator.promise;
	
	      if (promise._state === lib$es6$promise$$internal$$PENDING) {
	        enumerator._remaining--;
	
	        if (state === lib$es6$promise$$internal$$REJECTED) {
	          lib$es6$promise$$internal$$reject(promise, value);
	        } else {
	          enumerator._result[i] = value;
	        }
	      }
	
	      if (enumerator._remaining === 0) {
	        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;
	
	      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
	      });
	    };
	    function lib$es6$promise$promise$all$$all(entries) {
	      return new lib$es6$promise$enumerator$$default(this, entries).promise;
	    }
	    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
	    function lib$es6$promise$promise$race$$race(entries) {
	      /*jshint validthis:true */
	      var Constructor = this;
	
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	
	      if (!lib$es6$promise$utils$$isArray(entries)) {
	        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
	        return promise;
	      }
	
	      var length = entries.length;
	
	      function onFulfillment(value) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      }
	
	      function onRejection(reason) {
	        lib$es6$promise$$internal$$reject(promise, reason);
	      }
	
	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
	      }
	
	      return promise;
	    }
	    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
	    function lib$es6$promise$promise$resolve$$resolve(object) {
	      /*jshint validthis:true */
	      var Constructor = this;
	
	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }
	
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$resolve(promise, object);
	      return promise;
	    }
	    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
	    function lib$es6$promise$promise$reject$$reject(reason) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$reject(promise, reason);
	      return promise;
	    }
	    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;
	
	    var lib$es6$promise$promise$$counter = 0;
	
	    function lib$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }
	
	    function lib$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }
	
	    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise's eventual value or the reason
	      why the promise cannot be fulfilled.
	
	      Terminology
	      -----------
	
	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.
	
	      A promise can be in one of three states: pending, fulfilled, or rejected.
	
	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.
	
	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.
	
	
	      Basic Usage:
	      ------------
	
	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);
	
	        // on failure
	        reject(reason);
	      });
	
	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```
	
	      Advanced Usage:
	      ---------------
	
	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.
	
	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();
	
	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();
	
	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }
	
	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```
	
	      Unlike callbacks, promises are great composable primitives.
	
	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON
	
	        return values;
	      });
	      ```
	
	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function lib$es6$promise$promise$$Promise(resolver) {
	      this._id = lib$es6$promise$promise$$counter++;
	      this._state = undefined;
	      this._result = undefined;
	      this._subscribers = [];
	
	      if (lib$es6$promise$$internal$$noop !== resolver) {
	        if (!lib$es6$promise$utils$$isFunction(resolver)) {
	          lib$es6$promise$promise$$needsResolver();
	        }
	
	        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
	          lib$es6$promise$promise$$needsNew();
	        }
	
	        lib$es6$promise$$internal$$initializePromise(this, resolver);
	      }
	    }
	
	    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
	    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
	    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
	    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
	    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
	    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
	    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;
	
	    lib$es6$promise$promise$$Promise.prototype = {
	      constructor: lib$es6$promise$promise$$Promise,
	
	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.
	
	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```
	
	      Chaining
	      --------
	
	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.
	
	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });
	
	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	
	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```
	
	      Assimilation
	      ------------
	
	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.
	
	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```
	
	      If the assimliated promise rejects, then the downstream promise will also reject.
	
	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```
	
	      Simple Example
	      --------------
	
	      Synchronous Example
	
	      ```javascript
	      var result;
	
	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```
	
	      Errback Example
	
	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```
	
	      Promise Example;
	
	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```
	
	      Advanced Example
	      --------------
	
	      Synchronous Example
	
	      ```javascript
	      var author, books;
	
	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```
	
	      Errback Example
	
	      ```js
	
	      function foundBooks(books) {
	
	      }
	
	      function failure(reason) {
	
	      }
	
	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```
	
	      Promise Example;
	
	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```
	
	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: function(onFulfillment, onRejection) {
	        var parent = this;
	        var state = parent._state;
	
	        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
	          return this;
	        }
	
	        var child = new this.constructor(lib$es6$promise$$internal$$noop);
	        var result = parent._result;
	
	        if (state) {
	          var callback = arguments[state - 1];
	          lib$es6$promise$asap$$asap(function(){
	            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
	          });
	        } else {
	          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	        }
	
	        return child;
	      },
	
	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.
	
	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }
	
	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }
	
	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```
	
	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };
	    function lib$es6$promise$polyfill$$polyfill() {
	      var local;
	
	      if (typeof global !== 'undefined') {
	          local = global;
	      } else if (typeof self !== 'undefined') {
	          local = self;
	      } else {
	          try {
	              local = Function('return this')();
	          } catch (e) {
	              throw new Error('polyfill failed because global object is unavailable in this environment');
	          }
	      }
	
	      var P = local.Promise;
	
	      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
	        return;
	      }
	
	      local.Promise = lib$es6$promise$promise$$default;
	    }
	    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;
	
	    var lib$es6$promise$umd$$ES6Promise = {
	      'Promise': lib$es6$promise$promise$$default,
	      'polyfill': lib$es6$promise$polyfill$$default
	    };
	
	    /* global define:true module:true window: true */
	    if ("function" === 'function' && __webpack_require__(206)['amd']) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = lib$es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
	    }
	
	    lib$es6$promise$polyfill$$default();
	}).call(this);
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(173), (function() { return this; }()), __webpack_require__(204)(module)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(33);

/***/ },
/* 205 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 206 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 207 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * A worker that does nothing but passing chunks to the next one. This is like
	 * a nodejs stream but with some differences. On the good side :
	 * - it works on IE 6-9 without any issue / polyfill
	 * - it weights less than the full dependencies bundled with browserify
	 * - it forwards errors (no need to declare an error handler EVERYWHERE)
	 *
	 * A chunk is an object with 2 attributes : `meta` and `data`. The former is an
	 * object containing anything (`percent` for example), see each worker for more
	 * details. The latter is the real data (String, Uint8Array, etc).
	 *
	 * @constructor
	 * @param {String} name the name of the stream (mainly used for debugging purposes)
	 */
	function GenericWorker(name) {
	    // the name of the worker
	    this.name = name || "default";
	    // an object containing metadata about the workers chain
	    this.streamInfo = {};
	    // an error which happened when the worker was paused
	    this.generatedError = null;
	    // an object containing metadata to be merged by this worker into the general metadata
	    this.extraStreamInfo = {};
	    // true if the stream is paused (and should not do anything), false otherwise
	    this.isPaused = true;
	    // true if the stream is finished (and should not do anything), false otherwise
	    this.isFinished = false;
	    // true if the stream is locked to prevent further structure updates (pipe), false otherwise
	    this.isLocked = false;
	    // the event listeners
	    this._listeners = {
	        'data':[],
	        'end':[],
	        'error':[]
	    };
	    // the previous worker, if any
	    this.previous = null;
	}
	
	GenericWorker.prototype = {
	    /**
	     * Push a chunk to the next workers.
	     * @param {Object} chunk the chunk to push
	     */
	    push : function (chunk) {
	        this.emit("data", chunk);
	    },
	    /**
	     * End the stream.
	     * @return {Boolean} true if this call ended the worker, false otherwise.
	     */
	    end : function () {
	        if (this.isFinished) {
	            return false;
	        }
	
	        this.flush();
	        try {
	            this.emit("end");
	            this.cleanUp();
	            this.isFinished = true;
	        } catch (e) {
	            this.emit("error", e);
	        }
	        return true;
	    },
	    /**
	     * End the stream with an error.
	     * @param {Error} e the error which caused the premature end.
	     * @return {Boolean} true if this call ended the worker with an error, false otherwise.
	     */
	    error : function (e) {
	        if (this.isFinished) {
	            return false;
	        }
	
	        if(this.isPaused) {
	            this.generatedError = e;
	        } else {
	            this.isFinished = true;
	
	            this.emit("error", e);
	
	            // in the workers chain exploded in the middle of the chain,
	            // the error event will go downward but we also need to notify
	            // workers upward that there has been an error.
	            if(this.previous) {
	                this.previous.error(e);
	            }
	
	            this.cleanUp();
	        }
	        return true;
	    },
	    /**
	     * Add a callback on an event.
	     * @param {String} name the name of the event (data, end, error)
	     * @param {Function} listener the function to call when the event is triggered
	     * @return {GenericWorker} the current object for chainability
	     */
	    on : function (name, listener) {
	        this._listeners[name].push(listener);
	        return this;
	    },
	    /**
	     * Clean any references when a worker is ending.
	     */
	    cleanUp : function () {
	        this.streamInfo = this.generatedError = this.extraStreamInfo = null;
	        this._listeners = [];
	    },
	    /**
	     * Trigger an event. This will call registered callback with the provided arg.
	     * @param {String} name the name of the event (data, end, error)
	     * @param {Object} arg the argument to call the callback with.
	     */
	    emit : function (name, arg) {
	        if (this._listeners[name]) {
	            for(var i = 0; i < this._listeners[name].length; i++) {
	                this._listeners[name][i].call(this, arg);
	            }
	        }
	    },
	    /**
	     * Chain a worker with an other.
	     * @param {Worker} next the worker receiving events from the current one.
	     * @return {worker} the next worker for chainability
	     */
	    pipe : function (next) {
	        return next.registerPrevious(this);
	    },
	    /**
	     * Same as `pipe` in the other direction.
	     * Using an API with `pipe(next)` is very easy.
	     * Implementing the API with the point of view of the next one registering
	     * a source is easier, see the ZipFileWorker.
	     * @param {Worker} previous the previous worker, sending events to this one
	     * @return {Worker} the current worker for chainability
	     */
	    registerPrevious : function (previous) {
	        if (this.isLocked) {
	            throw new Error("The stream '" + this + "' has already been used.");
	        }
	
	        // sharing the streamInfo...
	        this.streamInfo = previous.streamInfo;
	        // ... and adding our own bits
	        this.mergeStreamInfo();
	        this.previous =  previous;
	        var self = this;
	        previous.on('data', function (chunk) {
	            self.processChunk(chunk);
	        });
	        previous.on('end', function () {
	            self.end();
	        });
	        previous.on('error', function (e) {
	            self.error(e);
	        });
	        return this;
	    },
	    /**
	     * Pause the stream so it doesn't send events anymore.
	     * @return {Boolean} true if this call paused the worker, false otherwise.
	     */
	    pause : function () {
	        if(this.isPaused || this.isFinished) {
	            return false;
	        }
	        this.isPaused = true;
	
	        if(this.previous) {
	            this.previous.pause();
	        }
	        return true;
	    },
	    /**
	     * Resume a paused stream.
	     * @return {Boolean} true if this call resumed the worker, false otherwise.
	     */
	    resume : function () {
	        if(!this.isPaused || this.isFinished) {
	            return false;
	        }
	        this.isPaused = false;
	
	        // if true, the worker tried to resume but failed
	        var withError = false;
	        if(this.generatedError) {
	            this.error(this.generatedError);
	            withError = true;
	        }
	        if(this.previous) {
	            this.previous.resume();
	        }
	
	        return !withError;
	    },
	    /**
	     * Flush any remaining bytes as the stream is ending.
	     */
	    flush : function () {},
	    /**
	     * Process a chunk. This is usually the method overridden.
	     * @param {Object} chunk the chunk to process.
	     */
	    processChunk : function(chunk) {
	        this.push(chunk);
	    },
	    /**
	     * Add a key/value to be added in the workers chain streamInfo once activated.
	     * @param {String} key the key to use
	     * @param {Object} value the associated value
	     * @return {Worker} the current worker for chainability
	     */
	    withStreamInfo : function (key, value) {
	        this.extraStreamInfo[key] = value;
	        this.mergeStreamInfo();
	        return this;
	    },
	    /**
	     * Merge this worker's streamInfo into the chain's streamInfo.
	     */
	    mergeStreamInfo : function () {
	        for(var key in this.extraStreamInfo) {
	            if (!this.extraStreamInfo.hasOwnProperty(key)) {
	                continue;
	            }
	            this.streamInfo[key] = this.extraStreamInfo[key];
	        }
	    },
	
	    /**
	     * Lock the stream to prevent further updates on the workers chain.
	     * After calling this method, all calls to pipe will fail.
	     */
	    lock: function () {
	        if (this.isLocked) {
	            throw new Error("The stream '" + this + "' has already been used.");
	        }
	        this.isLocked = true;
	        if (this.previous) {
	            this.previous.lock();
	        }
	    },
	
	    /**
	     *
	     * Pretty print the workers chain.
	     */
	    toString : function () {
	        var me = "Worker " + this.name;
	        if (this.previous) {
	            return this.previous + " -> " + me;
	        } else {
	            return me;
	        }
	    }
	};
	
	module.exports = GenericWorker;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var utils = __webpack_require__(164);
	var ConvertWorker = __webpack_require__(209);
	var GenericWorker = __webpack_require__(207);
	var base64 = __webpack_require__(198);
	var NodejsStreamOutputAdapter = __webpack_require__(167);
	var external = __webpack_require__(202);
	
	/**
	 * Apply the final transformation of the data. If the user wants a Blob for
	 * example, it's easier to work with an U8intArray and finally do the
	 * ArrayBuffer/Blob conversion.
	 * @param {String} type the name of the final type
	 * @param {String|Uint8Array|Buffer} content the content to transform
	 * @param {String} mimeType the mime type of the content, if applicable.
	 * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.
	 */
	function transformZipOutput(type, content, mimeType) {
	    switch(type) {
	        case "blob" :
	            return utils.newBlob(utils.transformTo("arraybuffer", content), mimeType);
	        case "base64" :
	            return base64.encode(content);
	        default :
	            return utils.transformTo(type, content);
	    }
	}
	
	/**
	 * Concatenate an array of data of the given type.
	 * @param {String} type the type of the data in the given array.
	 * @param {Array} dataArray the array containing the data chunks to concatenate
	 * @return {String|Uint8Array|Buffer} the concatenated data
	 * @throws Error if the asked type is unsupported
	 */
	function concat (type, dataArray) {
	    var i, index = 0, res = null, totalLength = 0;
	    for(i = 0; i < dataArray.length; i++) {
	        totalLength += dataArray[i].length;
	    }
	    switch(type) {
	        case "string":
	            return dataArray.join("");
	          case "array":
	            return Array.prototype.concat.apply([], dataArray);
	        case "uint8array":
	            res = new Uint8Array(totalLength);
	            for(i = 0; i < dataArray.length; i++) {
	                res.set(dataArray[i], index);
	                index += dataArray[i].length;
	            }
	            return res;
	        case "nodebuffer":
	            return Buffer.concat(dataArray);
	        default:
	            throw new Error("concat : unsupported type '"  + type + "'");
	    }
	}
	
	/**
	 * Listen a StreamHelper, accumulate its content and concatenate it into a
	 * complete block.
	 * @param {StreamHelper} helper the helper to use.
	 * @param {Function} updateCallback a callback called on each update. Called
	 * with one arg :
	 * - the metadata linked to the update received.
	 * @return Promise the promise for the accumulation.
	 */
	function accumulate(helper, updateCallback) {
	    return new external.Promise(function (resolve, reject){
	        var dataArray = [];
	        var chunkType = helper._internalType,
	            resultType = helper._outputType,
	            mimeType = helper._mimeType;
	        helper
	        .on('data', function (data, meta) {
	            dataArray.push(data);
	            if(updateCallback) {
	                updateCallback(meta);
	            }
	        })
	        .on('error', function(err) {
	            dataArray = [];
	            reject(err);
	        })
	        .on('end', function (){
	            try {
	                var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);
	                resolve(result);
	            } catch (e) {
	                reject(e);
	            }
	            dataArray = [];
	        })
	        .resume();
	    });
	}
	
	/**
	 * An helper to easily use workers outside of JSZip.
	 * @constructor
	 * @param {Worker} worker the worker to wrap
	 * @param {String} outputType the type of data expected by the use
	 * @param {String} mimeType the mime type of the content, if applicable.
	 */
	function StreamHelper(worker, outputType, mimeType) {
	    var internalType = outputType;
	    switch(outputType) {
	        case "blob":
	        case "arraybuffer":
	            internalType = "uint8array";
	        break;
	        case "base64":
	            internalType = "string";
	        break;
	    }
	
	    try {
	        // the type used internally
	        this._internalType = internalType;
	        // the type used to output results
	        this._outputType = outputType;
	        // the mime type
	        this._mimeType = mimeType;
	        utils.checkSupport(internalType);
	        this._worker = worker.pipe(new ConvertWorker(internalType));
	        // the last workers can be rewired without issues but we need to
	        // prevent any updates on previous workers.
	        worker.lock();
	    } catch(e) {
	        this._worker = new GenericWorker("error");
	        this._worker.error(e);
	    }
	}
	
	StreamHelper.prototype = {
	    /**
	     * Listen a StreamHelper, accumulate its content and concatenate it into a
	     * complete block.
	     * @param {Function} updateCb the update callback.
	     * @return Promise the promise for the accumulation.
	     */
	    accumulate : function (updateCb) {
	        return accumulate(this, updateCb);
	    },
	    /**
	     * Add a listener on an event triggered on a stream.
	     * @param {String} evt the name of the event
	     * @param {Function} fn the listener
	     * @return {StreamHelper} the current helper.
	     */
	    on : function (evt, fn) {
	        var self = this;
	
	        if(evt === "data") {
	            this._worker.on(evt, function (chunk) {
	                fn.call(self, chunk.data, chunk.meta);
	            });
	        } else {
	            this._worker.on(evt, function () {
	                utils.delay(fn, arguments, self);
	            });
	        }
	        return this;
	    },
	    /**
	     * Resume the flow of chunks.
	     * @return {StreamHelper} the current helper.
	     */
	    resume : function () {
	        utils.delay(this._worker.resume, [], this._worker);
	        return this;
	    },
	    /**
	     * Pause the flow of chunks.
	     * @return {StreamHelper} the current helper.
	     */
	    pause : function () {
	        this._worker.pause();
	        return this;
	    },
	    /**
	     * Return a nodejs stream for this helper.
	     * @param {Function} updateCb the update callback.
	     * @return {NodejsStreamOutputAdapter} the nodejs stream.
	     */
	    toNodejsStream : function (updateCb) {
	        utils.checkSupport("nodestream");
	        if (this._outputType !== "nodebuffer") {
	            // an object stream containing blob/arraybuffer/uint8array/string
	            // is strange and I don't know if it would be useful.
	            // I you find this comment and have a good usecase, please open a
	            // bug report !
	            throw new Error(this._outputType + " is not supported by this method");
	        }
	
	        return new NodejsStreamOutputAdapter(this, {
	            objectMode : this._outputType !== "nodebuffer"
	        }, updateCb);
	    }
	};
	
	
	module.exports = StreamHelper;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(166).Buffer))

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var GenericWorker = __webpack_require__(207);
	var utils = __webpack_require__(164);
	
	/**
	 * A worker which convert chunks to a specified type.
	 * @constructor
	 * @param {String} destType the destination type.
	 */
	function ConvertWorker(destType) {
	    GenericWorker.call(this, "ConvertWorker to " + destType);
	    this.destType = destType;
	}
	utils.inherits(ConvertWorker, GenericWorker);
	
	/**
	 * @see GenericWorker.processChunk
	 */
	ConvertWorker.prototype.processChunk = function (chunk) {
	    this.push({
	        data : utils.transformTo(this.destType, chunk.data),
	        meta : chunk.meta
	    });
	};
	module.exports = ConvertWorker;


/***/ },
/* 210 */
/***/ function(module, exports) {

	'use strict';
	exports.base64 = false;
	exports.binary = false;
	exports.dir = false;
	exports.createFolders = true;
	exports.date = null;
	exports.compression = null;
	exports.compressionOptions = null;
	exports.comment = null;
	exports.unixPermissions = null;
	exports.dosPermissions = null;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var external = __webpack_require__(202);
	var DataWorker = __webpack_require__(212);
	var DataLengthProbe = __webpack_require__(213);
	var Crc32Probe = __webpack_require__(214);
	var DataLengthProbe = __webpack_require__(213);
	
	/**
	 * Represent a compressed object, with everything needed to decompress it.
	 * @constructor
	 * @param {number} compressedSize the size of the data compressed.
	 * @param {number} uncompressedSize the size of the data after decompression.
	 * @param {number} crc32 the crc32 of the decompressed file.
	 * @param {object} compression the type of compression, see lib/compressions.js.
	 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the compressed data.
	 */
	function CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {
	    this.compressedSize = compressedSize;
	    this.uncompressedSize = uncompressedSize;
	    this.crc32 = crc32;
	    this.compression = compression;
	    this.compressedContent = data;
	}
	
	CompressedObject.prototype = {
	    /**
	     * Create a worker to get the uncompressed content.
	     * @return {GenericWorker} the worker.
	     */
	    getContentWorker : function () {
	        var worker = new DataWorker(external.Promise.resolve(this.compressedContent))
	        .pipe(this.compression.uncompressWorker())
	        .pipe(new DataLengthProbe("data_length"));
	
	        var that = this;
	        worker.on("end", function () {
	            if(this.streamInfo['data_length'] !== that.uncompressedSize) {
	                throw new Error("Bug : uncompressed data size mismatch");
	            }
	        });
	        return worker;
	    },
	    /**
	     * Create a worker to get the compressed content.
	     * @return {GenericWorker} the worker.
	     */
	    getCompressedWorker : function () {
	        return new DataWorker(external.Promise.resolve(this.compressedContent))
	        .withStreamInfo("compressedSize", this.compressedSize)
	        .withStreamInfo("uncompressedSize", this.uncompressedSize)
	        .withStreamInfo("crc32", this.crc32)
	        .withStreamInfo("compression", this.compression)
	        ;
	    }
	};
	
	/**
	 * Chain the given worker with other workers to compress the content with the
	 * given compresion.
	 * @param {GenericWorker} uncompressedWorker the worker to pipe.
	 * @param {Object} compression the compression object.
	 * @param {Object} compressionOptions the options to use when compressing.
	 * @return {GenericWorker} the new worker compressing the content.
	 */
	CompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {
	    return uncompressedWorker
	    .pipe(new Crc32Probe())
	    .pipe(new DataLengthProbe("uncompressedSize"))
	    .pipe(compression.compressWorker(compressionOptions))
	    .pipe(new DataLengthProbe("compressedSize"))
	    .withStreamInfo("compression", compression);
	};
	
	module.exports = CompressedObject;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(164);
	var GenericWorker = __webpack_require__(207);
	
	// the size of the generated chunks
	// TODO expose this as a public variable
	var DEFAULT_BLOCK_SIZE = 16 * 1024;
	
	/**
	 * A worker that reads a content and emits chunks.
	 * @constructor
	 * @param {Promise} dataP the promise of the data to split
	 */
	function DataWorker(dataP) {
	    GenericWorker.call(this, "DataWorker");
	    var self = this;
	    this.dataIsReady = false;
	    this.index = 0;
	    this.max = 0;
	    this.data = null;
	    this.type = "";
	
	    this._tickScheduled = false;
	
	    dataP.then(function (data) {
	        self.dataIsReady = true;
	        self.data = data;
	        self.max = data && data.length || 0;
	        self.type = utils.getTypeOf(data);
	        if(!self.isPaused) {
	            self._tickAndRepeat();
	        }
	    }, function (e) {
	        self.error(e);
	    });
	}
	
	utils.inherits(DataWorker, GenericWorker);
	
	/**
	 * @see GenericWorker.cleanUp
	 */
	DataWorker.prototype.cleanUp = function () {
	    GenericWorker.prototype.cleanUp.call(this);
	    this.data = null;
	};
	
	/**
	 * @see GenericWorker.resume
	 */
	DataWorker.prototype.resume = function () {
	    if(!GenericWorker.prototype.resume.call(this)) {
	        return false;
	    }
	
	    if (!this._tickScheduled && this.dataIsReady) {
	        this._tickScheduled = true;
	        utils.delay(this._tickAndRepeat, [], this);
	    }
	    return true;
	};
	
	/**
	 * Trigger a tick a schedule an other call to this function.
	 */
	DataWorker.prototype._tickAndRepeat = function() {
	    this._tickScheduled = false;
	    if(this.isPaused || this.isFinished) {
	        return;
	    }
	    this._tick();
	    if(!this.isFinished) {
	        utils.delay(this._tickAndRepeat, [], this);
	        this._tickScheduled = true;
	    }
	};
	
	/**
	 * Read and push a chunk.
	 */
	DataWorker.prototype._tick = function() {
	
	    if(this.isPaused || this.isFinished) {
	        return false;
	    }
	
	    var size = DEFAULT_BLOCK_SIZE;
	    var data = null, nextIndex = Math.min(this.max, this.index + size);
	    if (this.index >= this.max) {
	        // EOF
	        return this.end();
	    } else {
	        switch(this.type) {
	            case "string":
	                data = this.data.substring(this.index, nextIndex);
	            break;
	            case "uint8array":
	                data = this.data.subarray(this.index, nextIndex);
	            break;
	            case "array":
	            case "nodebuffer":
	                data = this.data.slice(this.index, nextIndex);
	            break;
	        }
	        this.index = nextIndex;
	        return this.push({
	            data : data,
	            meta : {
	                percent : this.max ? this.index / this.max * 100 : 0
	            }
	        });
	    }
	};
	
	module.exports = DataWorker;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(164);
	var GenericWorker = __webpack_require__(207);
	
	/**
	 * A worker which calculate the total length of the data flowing through.
	 * @constructor
	 * @param {String} propName the name used to expose the length
	 */
	function DataLengthProbe(propName) {
	    GenericWorker.call(this, "DataLengthProbe for " + propName);
	    this.propName = propName;
	    this.withStreamInfo(propName, 0);
	}
	utils.inherits(DataLengthProbe, GenericWorker);
	
	/**
	 * @see GenericWorker.processChunk
	 */
	DataLengthProbe.prototype.processChunk = function (chunk) {
	    if(chunk) {
	        var length = this.streamInfo[this.propName] || 0;
	        this.streamInfo[this.propName] = length + chunk.data.length;
	    }
	    GenericWorker.prototype.processChunk.call(this, chunk);
	};
	module.exports = DataLengthProbe;
	


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var GenericWorker = __webpack_require__(207);
	var crc32 = __webpack_require__(215);
	var utils = __webpack_require__(164);
	
	/**
	 * A worker which calculate the crc32 of the data flowing through.
	 * @constructor
	 */
	function Crc32Probe() {
	    GenericWorker.call(this, "Crc32Probe");
	}
	utils.inherits(Crc32Probe, GenericWorker);
	
	/**
	 * @see GenericWorker.processChunk
	 */
	Crc32Probe.prototype.processChunk = function (chunk) {
	    this.streamInfo.crc32 = crc32(chunk.data, this.streamInfo.crc32 || 0);
	    this.push(chunk);
	};
	module.exports = Crc32Probe;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(164);
	
	/**
	 * The following functions come from pako, from pako/lib/zlib/crc32.js
	 * released under the MIT license, see pako https://github.com/nodeca/pako/
	 */
	
	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	    var c, table = [];
	
	    for(var n =0; n < 256; n++){
	        c = n;
	        for(var k =0; k < 8; k++){
	            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	        }
	        table[n] = c;
	    }
	
	    return table;
	}
	
	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();
	
	
	function crc32(crc, buf, len, pos) {
	    var t = crcTable, end = pos + len;
	
	    crc = crc ^ (-1);
	
	    for (var i = pos; i < end; i++ ) {
	        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	    }
	
	    return (crc ^ (-1)); // >>> 0;
	}
	
	// That's all for the pako functions.
	
	/**
	 * Compute the crc32 of a string.
	 * This is almost the same as the function crc32, but for strings. Using the
	 * same function for the two use cases leads to horrible performances.
	 * @param {Number} crc the starting value of the crc.
	 * @param {String} str the string to use.
	 * @param {Number} len the length of the string.
	 * @param {Number} pos the starting position for the crc32 computation.
	 * @return {Number} the computed crc32.
	 */
	function crc32str(crc, str, len, pos) {
	    var t = crcTable, end = pos + len;
	
	    crc = crc ^ (-1);
	
	    for (var i = pos; i < end; i++ ) {
	        crc = (crc >>> 8) ^ t[(crc ^ str.charCodeAt(i)) & 0xFF];
	    }
	
	    return (crc ^ (-1)); // >>> 0;
	}
	
	module.exports = function crc32wrapper(input, crc) {
	    if (typeof input === "undefined" || !input.length) {
	        return 0;
	    }
	
	    var isArray = utils.getTypeOf(input) !== "string";
	
	    if(isArray) {
	        return crc32(crc|0, input, input.length, 0);
	    } else {
	        return crc32str(crc|0, input, input.length, 0);
	    }
	};
	// vim: set shiftwidth=4 softtabstop=4:


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var StreamHelper = __webpack_require__(208);
	var DataWorker = __webpack_require__(212);
	var utf8 = __webpack_require__(163);
	var CompressedObject = __webpack_require__(211);
	var GenericWorker = __webpack_require__(207);
	
	/**
	 * A simple object representing a file in the zip file.
	 * @constructor
	 * @param {string} name the name of the file
	 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
	 * @param {Object} options the options of the file
	 */
	var ZipObject = function(name, data, options) {
	    this.name = name;
	    this.dir = options.dir;
	    this.date = options.date;
	    this.comment = options.comment;
	    this.unixPermissions = options.unixPermissions;
	    this.dosPermissions = options.dosPermissions;
	
	    this._data = data;
	    this._dataBinary = options.binary;
	    // keep only the compression
	    this.options = {
	        compression : options.compression,
	        compressionOptions : options.compressionOptions
	    };
	};
	
	ZipObject.prototype = {
	    /**
	     * Create an internal stream for the content of this object.
	     * @param {String} type the type of each chunk.
	     * @return StreamHelper the stream.
	     */
	    internalStream: function (type) {
	        var outputType = type.toLowerCase();
	        var askUnicodeString = outputType === "string" || outputType === "text";
	        if (outputType === "binarystring" || outputType === "text") {
	            outputType = "string";
	        }
	        var result = this._decompressWorker();
	
	        var isUnicodeString = !this._dataBinary;
	
	        if (isUnicodeString && !askUnicodeString) {
	            result = result.pipe(new utf8.Utf8EncodeWorker());
	        }
	        if (!isUnicodeString && askUnicodeString) {
	            result = result.pipe(new utf8.Utf8DecodeWorker());
	        }
	
	        return new StreamHelper(result, outputType, "");
	    },
	
	    /**
	     * Prepare the content in the asked type.
	     * @param {String} type the type of the result.
	     * @param {Function} onUpdate a function to call on each internal update.
	     * @return Promise the promise of the result.
	     */
	    async: function (type, onUpdate) {
	        return this.internalStream(type).accumulate(onUpdate);
	    },
	
	    /**
	     * Prepare the content as a nodejs stream.
	     * @param {String} type the type of each chunk.
	     * @param {Function} onUpdate a function to call on each internal update.
	     * @return Stream the stream.
	     */
	    nodeStream: function (type, onUpdate) {
	        return this.internalStream(type || "nodebuffer").toNodejsStream(onUpdate);
	    },
	
	    /**
	     * Return a worker for the compressed content.
	     * @private
	     * @param {Object} compression the compression object to use.
	     * @param {Object} compressionOptions the options to use when compressing.
	     * @return Worker the worker.
	     */
	    _compressWorker: function (compression, compressionOptions) {
	        if (
	            this._data instanceof CompressedObject &&
	            this._data.compression.magic === compression.magic
	        ) {
	            return this._data.getCompressedWorker();
	        } else {
	            var result = this._decompressWorker();
	            if(!this._dataBinary) {
	                result = result.pipe(new utf8.Utf8EncodeWorker());
	            }
	            return CompressedObject.createWorkerFrom(result, compression, compressionOptions);
	        }
	    },
	    /**
	     * Return a worker for the decompressed content.
	     * @private
	     * @return Worker the worker.
	     */
	    _decompressWorker : function () {
	        if (this._data instanceof CompressedObject) {
	            return this._data.getContentWorker();
	        } else if (this._data instanceof GenericWorker) {
	            return this._data;
	        } else {
	            return new DataWorker(this._data);
	        }
	    }
	};
	
	var removedMethods = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"];
	var removedFn = function () {
	    throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
	};
	
	for(var i = 0; i < removedMethods.length; i++) {
	    ZipObject.prototype[removedMethods[i]] = removedFn;
	}
	module.exports = ZipObject;


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var compressions = __webpack_require__(218);
	var ZipFileWorker = __webpack_require__(236);
	
	/**
	 * Find the compression to use.
	 * @param {String} fileCompression the compression defined at the file level, if any.
	 * @param {String} zipCompression the compression defined at the load() level.
	 * @return {Object} the compression object to use.
	 */
	var getCompression = function (fileCompression, zipCompression) {
	
	    var compressionName = fileCompression || zipCompression;
	    var compression = compressions[compressionName];
	    if (!compression) {
	        throw new Error(compressionName + " is not a valid compression method !");
	    }
	    return compression;
	};
	
	/**
	 * Create a worker to generate a zip file.
	 * @param {JSZip} zip the JSZip instance at the right root level.
	 * @param {Object} options to generate the zip file.
	 * @param {String} comment the comment to use.
	 */
	exports.generateWorker = function (zip, options, comment) {
	
	    var zipFileWorker = new ZipFileWorker(options.streamFiles, comment, options.platform, options.encodeFileName);
	    var entriesCount = 0;
	    try {
	
	        zip.forEach(function (relativePath, file) {
	            entriesCount++;
	            var compression = getCompression(file.options.compression, options.compression);
	            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};
	            var dir = file.dir, date = file.date;
	
	            file._compressWorker(compression, compressionOptions)
	            .withStreamInfo("file", {
	                name : relativePath,
	                dir : dir,
	                date : date,
	                comment : file.comment || "",
	                unixPermissions : file.unixPermissions,
	                dosPermissions : file.dosPermissions
	            })
	            .pipe(zipFileWorker);
	        });
	        zipFileWorker.entriesCount = entriesCount;
	    } catch (e) {
	        zipFileWorker.error(e);
	    }
	
	    return zipFileWorker;
	};


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var GenericWorker = __webpack_require__(207);
	
	exports.STORE = {
	    magic: "\x00\x00",
	    compressWorker : function (compressionOptions) {
	        return new GenericWorker("STORE compression");
	    },
	    uncompressWorker : function () {
	        return new GenericWorker("STORE decompression");
	    }
	};
	exports.DEFLATE = __webpack_require__(219);


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');
	
	var pako = __webpack_require__(220);
	var utils = __webpack_require__(164);
	var GenericWorker = __webpack_require__(207);
	
	var ARRAY_TYPE = USE_TYPEDARRAY ? "uint8array" : "array";
	
	exports.magic = "\x08\x00";
	
	/**
	 * Create a worker that uses pako to inflate/deflate.
	 * @constructor
	 * @param {String} action the name of the pako function to call : either "Deflate" or "Inflate".
	 * @param {Object} options the options to use when (de)compressing.
	 */
	function FlateWorker(action, options) {
	    GenericWorker.call(this, "FlateWorker/" + action);
	
	    this._pako = new pako[action]({
	        raw:true,
	        level : options.level || -1 // default compression
	    });
	    // the `meta` object from the last chunk received
	    // this allow this worker to pass around metadata
	    this.meta = {};
	
	    var self = this;
	    this._pako.onData = function(data) {
	        self.push({
	            data : data,
	            meta : self.meta
	        });
	    };
	}
	
	utils.inherits(FlateWorker, GenericWorker);
	
	/**
	 * @see GenericWorker.processChunk
	 */
	FlateWorker.prototype.processChunk = function (chunk) {
	    this.meta = chunk.meta;
	    this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);
	};
	
	/**
	 * @see GenericWorker.flush
	 */
	FlateWorker.prototype.flush = function () {
	    GenericWorker.prototype.flush.call(this);
	    this._pako.push([], true);
	};
	/**
	 * @see GenericWorker.cleanUp
	 */
	FlateWorker.prototype.cleanUp = function () {
	    GenericWorker.prototype.cleanUp.call(this);
	    this._pako = null;
	};
	
	exports.compressWorker = function (compressionOptions) {
	    return new FlateWorker("Deflate", compressionOptions);
	};
	exports.uncompressWorker = function () {
	    return new FlateWorker("Inflate", {});
	};


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	// Top level file is just a mixin of submodules & constants
	'use strict';
	
	var assign    = __webpack_require__(221).assign;
	
	var deflate   = __webpack_require__(222);
	var inflate   = __webpack_require__(230);
	var constants = __webpack_require__(234);
	
	var pako = {};
	
	assign(pako, deflate, inflate, constants);
	
	module.exports = pako;


/***/ },
/* 221 */
/***/ function(module, exports) {

	'use strict';
	
	
	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');
	
	
	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }
	
	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }
	
	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }
	
	  return obj;
	};
	
	
	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};
	
	
	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;
	
	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }
	
	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }
	
	    return result;
	  }
	};
	
	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};
	
	
	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};
	
	exports.setTyped(TYPED_OK);


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var zlib_deflate = __webpack_require__(223);
	var utils        = __webpack_require__(221);
	var strings      = __webpack_require__(228);
	var msg          = __webpack_require__(227);
	var ZStream      = __webpack_require__(229);
	
	var toString = Object.prototype.toString;
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	var Z_NO_FLUSH      = 0;
	var Z_FINISH        = 4;
	
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_SYNC_FLUSH    = 2;
	
	var Z_DEFAULT_COMPRESSION = -1;
	
	var Z_DEFAULT_STRATEGY    = 0;
	
	var Z_DEFLATED  = 8;
	
	/* ===========================================================================*/
	
	
	/**
	 * class Deflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[deflate]],
	 * [[deflateRaw]] and [[gzip]].
	 **/
	
	/* internal
	 * Deflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Deflate#onData]] not overriden.
	 **/
	
	/**
	 * Deflate.result -> Uint8Array|Array
	 *
	 * Compressed result, generated by default [[Deflate#onData]]
	 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
	 * push a chunk with explicit flush (call [[Deflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/
	
	/**
	 * Deflate.err -> Number
	 *
	 * Error code after deflate finished. 0 (Z_OK) on success.
	 * You will not need it in real life, because deflate errors
	 * are possible only on wrong options or bad `onData` / `onEnd`
	 * custom handlers.
	 **/
	
	/**
	 * Deflate.msg -> String
	 *
	 * Error message, if [[Deflate.err]] != 0
	 **/
	
	
	/**
	 * new Deflate(options)
	 * - options (Object): zlib deflate options.
	 *
	 * Creates new deflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `level`
	 * - `windowBits`
	 * - `memLevel`
	 * - `strategy`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw deflate
	 * - `gzip` (Boolean) - create gzip wrapper
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 * - `header` (Object) - custom header for gzip
	 *   - `text` (Boolean) - true if compressed data believed to be text
	 *   - `time` (Number) - modification time, unix timestamp
	 *   - `os` (Number) - operation system code
	 *   - `extra` (Array) - array of bytes with extra data (max 65536)
	 *   - `name` (String) - file name (binary string)
	 *   - `comment` (String) - comment (binary string)
	 *   - `hcrc` (Boolean) - true if header crc should be added
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var deflate = new pako.Deflate({ level: 3});
	 *
	 * deflate.push(chunk1, false);
	 * deflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (deflate.err) { throw new Error(deflate.err); }
	 *
	 * console.log(deflate.result);
	 * ```
	 **/
	function Deflate(options) {
	  if (!(this instanceof Deflate)) return new Deflate(options);
	
	  this.options = utils.assign({
	    level: Z_DEFAULT_COMPRESSION,
	    method: Z_DEFLATED,
	    chunkSize: 16384,
	    windowBits: 15,
	    memLevel: 8,
	    strategy: Z_DEFAULT_STRATEGY,
	    to: ''
	  }, options || {});
	
	  var opt = this.options;
	
	  if (opt.raw && (opt.windowBits > 0)) {
	    opt.windowBits = -opt.windowBits;
	  }
	
	  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
	    opt.windowBits += 16;
	  }
	
	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data
	
	  this.strm = new ZStream();
	  this.strm.avail_out = 0;
	
	  var status = zlib_deflate.deflateInit2(
	    this.strm,
	    opt.level,
	    opt.method,
	    opt.windowBits,
	    opt.memLevel,
	    opt.strategy
	  );
	
	  if (status !== Z_OK) {
	    throw new Error(msg[status]);
	  }
	
	  if (opt.header) {
	    zlib_deflate.deflateSetHeader(this.strm, opt.header);
	  }
	
	  if (opt.dictionary) {
	    var dict;
	    // Convert data if needed
	    if (typeof opt.dictionary === 'string') {
	      // If we need to compress text, change encoding to utf8.
	      dict = strings.string2buf(opt.dictionary);
	    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
	      dict = new Uint8Array(opt.dictionary);
	    } else {
	      dict = opt.dictionary;
	    }
	
	    status = zlib_deflate.deflateSetDictionary(this.strm, dict);
	
	    if (status !== Z_OK) {
	      throw new Error(msg[status]);
	    }
	
	    this._dict_set = true;
	  }
	}
	
	/**
	 * Deflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
	 *   converted to utf8 byte sequence.
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
	 * new compressed chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the compression context.
	 *
	 * On fail call [[Deflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * array format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Deflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var status, _mode;
	
	  if (this.ended) { return false; }
	
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);
	
	  // Convert data if needed
	  if (typeof data === 'string') {
	    // If we need to compress text, change encoding to utf8.
	    strm.input = strings.string2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }
	
	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;
	
	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */
	
	    if (status !== Z_STREAM_END && status !== Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
	      if (this.options.to === 'string') {
	        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
	      } else {
	        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	      }
	    }
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);
	
	  // Finalize on the last chunk.
	  if (_mode === Z_FINISH) {
	    status = zlib_deflate.deflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === Z_OK;
	  }
	
	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === Z_SYNC_FLUSH) {
	    this.onEnd(Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }
	
	  return true;
	};
	
	
	/**
	 * Deflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Deflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};
	
	
	/**
	 * Deflate#onEnd(status) -> Void
	 * - status (Number): deflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called once after you tell deflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Deflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === Z_OK) {
	    if (this.options.to === 'string') {
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};
	
	
	/**
	 * deflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * Compress `data` with deflate algorithm and `options`.
	 *
	 * Supported options are:
	 *
	 * - level
	 * - windowBits
	 * - memLevel
	 * - strategy
	 * - dictionary
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
	 *
	 * console.log(pako.deflate(data));
	 * ```
	 **/
	function deflate(input, options) {
	  var deflator = new Deflate(options);
	
	  deflator.push(input, true);
	
	  // That will never happens, if you don't cheat with options :)
	  if (deflator.err) { throw deflator.msg; }
	
	  return deflator.result;
	}
	
	
	/**
	 * deflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function deflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return deflate(input, options);
	}
	
	
	/**
	 * gzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but create gzip wrapper instead of
	 * deflate one.
	 **/
	function gzip(input, options) {
	  options = options || {};
	  options.gzip = true;
	  return deflate(input, options);
	}
	
	
	exports.Deflate = Deflate;
	exports.deflate = deflate;
	exports.deflateRaw = deflateRaw;
	exports.gzip = gzip;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils   = __webpack_require__(221);
	var trees   = __webpack_require__(224);
	var adler32 = __webpack_require__(225);
	var crc32   = __webpack_require__(226);
	var msg     = __webpack_require__(227);
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	
	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	//var Z_TREES         = 6;
	
	
	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;
	
	
	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;
	
	
	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY    = 0;
	
	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;
	
	
	/* The deflate compression method */
	var Z_DEFLATED  = 8;
	
	/*============================================================================*/
	
	
	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;
	
	
	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */
	
	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);
	
	var PRESET_DICT = 0x20;
	
	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;
	
	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */
	
	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
	
	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}
	
	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}
	
	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
	
	
	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;
	
	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }
	
	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}
	
	
	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}
	
	
	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}
	
	
	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}
	
	
	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;
	
	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }
	
	  strm.avail_in -= len;
	
	  // zmemcpy(buf, strm->next_in, len);
	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  }
	
	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }
	
	  strm.next_in += len;
	  strm.total_in += len;
	
	  return len;
	}
	
	
	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;
	
	  var _win = s.window; // shortcut
	
	  var wmask = s.w_mask;
	  var prev  = s.prev;
	
	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */
	
	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];
	
	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
	
	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }
	
	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
	
	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;
	
	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */
	
	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }
	
	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");
	
	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);
	
	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
	
	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;
	
	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
	
	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}
	
	
	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;
	
	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
	
	  do {
	    more = s.window_size - s.lookahead - s.strstart;
	
	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}
	
	
	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
	
	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;
	
	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */
	
	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);
	
	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);
	
	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }
	
	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;
	
	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];
	
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
	
	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */
	
	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
	
	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}
	
	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;
	
	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }
	
	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {
	
	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }
	
	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	
	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");
	
	    s.strstart += s.lookahead;
	    s.lookahead = 0;
	
	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;
	
	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	
	
	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	
	  s.insert = 0;
	
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	
	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	
	  return BS_NEED_MORE;
	}
	
	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */
	
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }
	
	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }
	
	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
	
	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
	
	      s.lookahead -= s.match_length;
	
	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;
	
	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	
	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */
	
	  var max_insert;
	
	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }
	
	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }
	
	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;
	
	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	
	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {
	
	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */
	
	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
	
	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;
	
	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }
	
	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
	
	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
	
	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	
	  return BS_BLOCK_DONE;
	}
	
	
	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */
	
	  var _win = s.window;
	
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }
	
	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }
	
	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);
	
	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
	
	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	
	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */
	
	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }
	
	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}
	
	var configuration_table;
	
	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */
	
	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];
	
	
	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;
	
	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);
	
	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;
	
	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}
	
	
	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */
	
	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */
	
	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */
	
	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */
	
	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */
	
	  this.head = null;   /* Heads of the hash chains or NIL. */
	
	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */
	
	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */
	
	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */
	
	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */
	
	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */
	
	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */
	
	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */
	
	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/
	
	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */
	
	  this.nice_match = 0; /* Stop searching when current match exceeds this */
	
	              /* used by trees.c: */
	
	  /* Didn't use ct_data typedef below to suppress compiler warning */
	
	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
	
	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);
	
	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */
	
	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */
	
	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
	  zero(this.heap);
	
	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */
	
	  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */
	
	  this.l_buf = 0;          /* buffer index for literals or lengths */
	
	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */
	
	  this.last_lit = 0;      /* running index in l_buf */
	
	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */
	
	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */
	
	
	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */
	
	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}
	
	
	function deflateResetKeep(strm) {
	  var s;
	
	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;
	
	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;
	
	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}
	
	
	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}
	
	
	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
	  strm.state.gzhead = head;
	  return Z_OK;
	}
	
	
	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;
	
	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }
	
	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	
	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }
	
	
	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	
	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */
	
	  var s = new DeflateState();
	
	  strm.state = s;
	  s.strm = strm;
	
	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;
	
	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
	
	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);
	
	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */
	
	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */
	
	  s.pending_buf_size = s.lit_bufsize * 4;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);
	
	  s.d_buf = s.lit_bufsize >> 1;
	  s.l_buf = (1 + 2) * s.lit_bufsize;
	
	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;
	
	  return deflateReset(strm);
	}
	
	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}
	
	
	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only
	
	  if (!strm || !strm.state ||
	    flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }
	
	  s = strm.state;
	
	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }
	
	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;
	
	  /* Write the header */
	  if (s.status === INIT_STATE) {
	
	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	                );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;
	
	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);
	
	      s.status = BUSY_STATE;
	      putShortMSB(s, header);
	
	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }
	
	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	
	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;
	
	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);
	
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;
	
	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);
	
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif
	
	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }
	
	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }
	
	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }
	
	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));
	
	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */
	
	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);
	
	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}
	
	  if (flush !== Z_FINISH) { return Z_OK; }
	  if (s.wrap <= 0) { return Z_STREAM_END; }
	
	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }
	
	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}
	
	function deflateEnd(strm) {
	  var status;
	
	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }
	
	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	  strm.state = null;
	
	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}
	
	
	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;
	
	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;
	
	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR;
	  }
	
	  s = strm.state;
	  wrap = s.wrap;
	
	  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
	  }
	
	  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */
	
	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {            /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new utils.Buf8(s.w_size);
	    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
	
	      s.prev[str & s.w_mask] = s.head[s.ins_h];
	
	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK;
	}
	
	
	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';
	
	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var utils = __webpack_require__(221);
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	
	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;
	
	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;
	
	/*============================================================================*/
	
	
	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }
	
	// From zutil.h
	
	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */
	
	var MIN_MATCH    = 3;
	var MAX_MATCH    = 258;
	/* The minimum and maximum match lengths */
	
	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */
	
	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	
	var D_CODES       = 30;
	/* number of distance codes */
	
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	
	var MAX_BITS      = 15;
	/* All codes must not exceed MAX_BITS bits */
	
	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */
	
	
	/* ===========================================================================
	 * Constants
	 */
	
	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */
	
	var END_BLOCK   = 256;
	/* end of block literal code */
	
	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */
	
	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */
	
	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */
	
	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];
	
	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];
	
	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];
	
	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* eslint-enable comma-spacing,array-bracket-spacing */
	
	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */
	
	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */
	
	// We pre-fill arrays with 0 to avoid uninitialized gaps
	
	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */
	
	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES + 2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */
	
	var static_dtree  = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */
	
	var _dist_code    = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */
	
	var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */
	
	var base_length   = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */
	
	var base_dist     = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */
	
	
	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
	
	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */
	
	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	}
	
	
	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;
	
	
	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	}
	
	
	
	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}
	
	
	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}
	
	
	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}
	
	
	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
	}
	
	
	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}
	
	
	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;
	
	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}
	
	
	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */
	
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }
	
	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */
	
	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */
	
	    if (n > max_code) { continue; } /* not a leaf node */
	
	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }
	
	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */
	
	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);
	
	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
	        tree[m * 2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}
	
	
	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */
	
	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
	
	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n * 2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);
	
	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}
	
	
	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */
	
	  // do check in _tr_init()
	  //if (static_init_done) return;
	
	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/
	
	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;
	
	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");
	
	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }
	
	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);
	
	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1]/*.Len*/ = 5;
	    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
	  }
	
	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);
	
	  //static_init_done = true;
	}
	
	
	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */
	
	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }
	
	  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}
	
	
	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}
	
	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */
	
	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}
	
	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}
	
	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }
	
	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;
	
	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}
	
	
	// inlined manually
	// var SMALLEST = 1;
	
	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */
	
	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;
	
	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");
	
	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */
	
	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");
	
	    } while (lx < s.last_lit);
	  }
	
	  send_code(s, END_BLOCK, ltree);
	}
	
	
	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */
	
	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;
	
	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;
	
	    } else {
	      tree[n * 2 + 1]/*.Len*/ = 0;
	    }
	  }
	
	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;
	
	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;
	
	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }
	
	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/
	
	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */
	
	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;
	
	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;
	
	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	
	  } while (s.heap_len >= 2);
	
	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];
	
	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);
	
	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}
	
	
	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */
	
	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */
	
	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */
	
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */
	
	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;
	
	    if (++count < max_count && curlen === nextlen) {
	      continue;
	
	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;
	
	    } else if (curlen !== 0) {
	
	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;
	
	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;
	
	    } else {
	      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
	    }
	
	    count = 0;
	    prevlen = curlen;
	
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;
	
	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;
	
	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}
	
	
	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */
	
	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */
	
	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */
	
	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	
	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;
	
	    if (++count < max_count && curlen === nextlen) {
	      continue;
	
	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);
	
	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);
	
	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);
	
	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }
	
	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;
	
	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;
	
	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}
	
	
	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */
	
	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
	
	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */
	
	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));
	
	  return max_blindex;
	}
	
	
	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */
	
	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1,   5);
	  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
	
	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
	
	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}
	
	
	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;
	
	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }
	
	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }
	
	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}
	
	
	var static_init_done = false;
	
	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{
	
	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }
	
	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
	
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	
	  /* Initialize the first block of the first file: */
	  init_block(s);
	}
	
	
	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}
	
	
	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}
	
	
	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */
	
	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {
	
	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }
	
	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	
	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */
	
	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);
	
	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;
	
	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));
	
	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }
	
	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }
	
	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */
	
	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);
	
	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
	
	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);
	
	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);
	
	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}
	
	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;
	
	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
	
	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;
	
	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
	
	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }
	
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	
	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif
	
	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}
	
	exports._tr_init  = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block  = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;


/***/ },
/* 225 */
/***/ function(module, exports) {

	'use strict';
	
	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.
	
	function adler32(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;
	
	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;
	
	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);
	
	    s1 %= 65521;
	    s2 %= 65521;
	  }
	
	  return (s1 | (s2 << 16)) |0;
	}
	
	
	module.exports = adler32;


/***/ },
/* 226 */
/***/ function(module, exports) {

	'use strict';
	
	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.
	
	
	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];
	
	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }
	
	  return table;
	}
	
	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();
	
	
	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;
	
	  crc ^= -1;
	
	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }
	
	  return (crc ^ (-1)); // >>> 0;
	}
	
	
	module.exports = crc32;


/***/ },
/* 227 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	// String encode/decode helpers
	'use strict';
	
	
	var utils = __webpack_require__(221);
	
	
	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safary
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;
	
	try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }
	
	
	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new utils.Buf8(256);
	for (var q = 0; q < 256; q++) {
	  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
	}
	_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
	
	
	// convert string to array (typed, when possible)
	exports.string2buf = function (str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
	
	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }
	
	  // allocate buffer
	  buf = new utils.Buf8(buf_len);
	
	  // convert
	  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }
	
	  return buf;
	};
	
	// Helper (used in 2 places)
	function buf2binstring(buf, len) {
	  // use fallback for big arrays to avoid stack overflow
	  if (len < 65537) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
	    }
	  }
	
	  var result = '';
	  for (var i = 0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}
	
	
	// Convert byte array to binary string
	exports.buf2binstring = function (buf) {
	  return buf2binstring(buf, buf.length);
	};
	
	
	// Convert binary string (typed, when possible)
	exports.binstring2buf = function (str) {
	  var buf = new utils.Buf8(str.length);
	  for (var i = 0, len = buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	};
	
	
	// convert array to string
	exports.buf2string = function (buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;
	
	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len * 2);
	
	  for (out = 0, i = 0; i < len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }
	
	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }
	
	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }
	
	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }
	
	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }
	
	  return buf2binstring(utf16buf, out);
	};
	
	
	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	exports.utf8border = function (buf, max) {
	  var pos;
	
	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }
	
	  // go back from last position, until start of sequence found
	  pos = max - 1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }
	
	  // Fuckup - very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }
	
	  // If we came to start of buffer - that means vuffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }
	
	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};


/***/ },
/* 229 */
/***/ function(module, exports) {

	'use strict';
	
	
	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}
	
	module.exports = ZStream;


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var zlib_inflate = __webpack_require__(231);
	var utils        = __webpack_require__(221);
	var strings      = __webpack_require__(228);
	var c            = __webpack_require__(234);
	var msg          = __webpack_require__(227);
	var ZStream      = __webpack_require__(229);
	var GZheader     = __webpack_require__(235);
	
	var toString = Object.prototype.toString;
	
	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/
	
	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overriden.
	 **/
	
	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
	 * push a chunk with explicit flush (call [[Inflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/
	
	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/
	
	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/
	
	
	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	function Inflate(options) {
	  if (!(this instanceof Inflate)) return new Inflate(options);
	
	  this.options = utils.assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});
	
	  var opt = this.options;
	
	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }
	
	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }
	
	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }
	
	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data
	
	  this.strm   = new ZStream();
	  this.strm.avail_out = 0;
	
	  var status  = zlib_inflate.inflateInit2(
	    this.strm,
	    opt.windowBits
	  );
	
	  if (status !== c.Z_OK) {
	    throw new Error(msg[status]);
	  }
	
	  this.header = new GZheader();
	
	  zlib_inflate.inflateGetHeader(this.strm, this.header);
	}
	
	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var dictionary = this.options.dictionary;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;
	  var dict;
	
	  // Flag to properly process Z_BUF_ERROR on testing inflate call
	  // when we check that all output data was flushed.
	  var allowBufError = false;
	
	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);
	
	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = strings.binstring2buf(data);
	  } else if (toString.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }
	
	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;
	
	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	
	    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */
	
	    if (status === c.Z_NEED_DICT && dictionary) {
	      // Convert data if needed
	      if (typeof dictionary === 'string') {
	        dict = strings.string2buf(dictionary);
	      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
	        dict = new Uint8Array(dictionary);
	      } else {
	        dict = dictionary;
	      }
	
	      status = zlib_inflate.inflateSetDictionary(this.strm, dict);
	
	    }
	
	    if (status === c.Z_BUF_ERROR && allowBufError === true) {
	      status = c.Z_OK;
	      allowBufError = false;
	    }
	
	    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	
	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {
	
	        if (this.options.to === 'string') {
	
	          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
	
	          tail = strm.next_out - next_out_utf8;
	          utf8str = strings.buf2string(strm.output, next_out_utf8);
	
	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }
	
	          this.onData(utf8str);
	
	        } else {
	          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }
	
	    // When no more input data, we should check that internal inflate buffers
	    // are flushed. The only way to do it when avail_out = 0 - run one more
	    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
	    // Here we set flag to process this error properly.
	    //
	    // NOTE. Deflate does not return error in this case and does not needs such
	    // logic.
	    if (strm.avail_in === 0 && strm.avail_out === 0) {
	      allowBufError = true;
	    }
	
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);
	
	  if (status === c.Z_STREAM_END) {
	    _mode = c.Z_FINISH;
	  }
	
	  // Finalize on the last chunk.
	  if (_mode === c.Z_FINISH) {
	    status = zlib_inflate.inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === c.Z_OK;
	  }
	
	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === c.Z_SYNC_FLUSH) {
	    this.onEnd(c.Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }
	
	  return true;
	};
	
	
	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};
	
	
	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called either after you tell inflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === c.Z_OK) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 alligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};
	
	
	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function inflate(input, options) {
	  var inflator = new Inflate(options);
	
	  inflator.push(input, true);
	
	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg; }
	
	  return inflator.result;
	}
	
	
	/**
	 * inflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * The same as [[inflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function inflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return inflate(input, options);
	}
	
	
	/**
	 * ungzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Just shortcut to [[inflate]], because it autodetects format
	 * by header.content. Done for convenience.
	 **/
	
	
	exports.Inflate = Inflate;
	exports.inflate = inflate;
	exports.inflateRaw = inflateRaw;
	exports.ungzip  = inflate;


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var utils         = __webpack_require__(221);
	var adler32       = __webpack_require__(225);
	var crc32         = __webpack_require__(226);
	var inflate_fast  = __webpack_require__(232);
	var inflate_table = __webpack_require__(233);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	
	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;
	
	
	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;
	
	/* The deflate compression method */
	var Z_DEFLATED  = 8;
	
	
	/* STATES ====================================================================*/
	/* ===========================================================================*/
	
	
	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */
	
	/* ===========================================================================*/
	
	
	
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
	
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;
	
	
	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}
	
	
	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */
	
	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */
	
	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */
	
	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */
	
	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */
	
	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */
	
	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */
	
	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */
	
	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}
	
	function inflateResetKeep(strm) {
	  var state;
	
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
	
	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}
	
	function inflateReset(strm) {
	  var state;
	
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);
	
	}
	
	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;
	
	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	
	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }
	
	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }
	
	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}
	
	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;
	
	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */
	
	  state = new InflateState();
	
	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}
	
	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}
	
	
	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;
	
	var lenfix, distfix; // We have no pointers in JS, so keep tables separate
	
	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;
	
	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);
	
	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }
	
	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });
	
	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }
	
	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });
	
	    /* do this just once */
	    virgin = false;
	  }
	
	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}
	
	
	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.
	
	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;
	
	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;
	
	    state.window = new utils.Buf8(state.wsize);
	  }
	
	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}
	
	function inflate(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;
	
	  var n; // temporary var for NEED_BITS
	
	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];
	
	
	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }
	
	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */
	
	
	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---
	
	  _in = have;
	  _out = left;
	  ret = Z_OK;
	
	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	    case HEAD:
	      if (state.wrap === 0) {
	        state.mode = TYPEDO;
	        break;
	      }
	      //=== NEEDBITS(16);
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = FLAGS;
	        break;
	      }
	      state.flags = 0;           /* expect zlib header */
	      if (state.head) {
	        state.head.done = false;
	      }
	      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	        strm.msg = 'incorrect header check';
	        state.mode = BAD;
	        break;
	      }
	      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	      len = (hold & 0x0f)/*BITS(4)*/ + 8;
	      if (state.wbits === 0) {
	        state.wbits = len;
	      }
	      else if (len > state.wbits) {
	        strm.msg = 'invalid window size';
	        state.mode = BAD;
	        break;
	      }
	      state.dmax = 1 << len;
	      //Tracev((stderr, "inflate:   zlib header ok\n"));
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = hold & 0x200 ? DICTID : TYPE;
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      break;
	    case FLAGS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.flags = hold;
	      if ((state.flags & 0xff) !== Z_DEFLATED) {
	        strm.msg = 'unknown compression method';
	        state.mode = BAD;
	        break;
	      }
	      if (state.flags & 0xe000) {
	        strm.msg = 'unknown header flags set';
	        state.mode = BAD;
	        break;
	      }
	      if (state.head) {
	        state.head.text = ((hold >> 8) & 1);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = TIME;
	      /* falls through */
	    case TIME:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.time = hold;
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC4(state.check, hold)
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        hbuf[2] = (hold >>> 16) & 0xff;
	        hbuf[3] = (hold >>> 24) & 0xff;
	        state.check = crc32(state.check, hbuf, 4, 0);
	        //===
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = OS;
	      /* falls through */
	    case OS:
	      //=== NEEDBITS(16); */
	      while (bits < 16) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if (state.head) {
	        state.head.xflags = (hold & 0xff);
	        state.head.os = (hold >> 8);
	      }
	      if (state.flags & 0x0200) {
	        //=== CRC2(state.check, hold);
	        hbuf[0] = hold & 0xff;
	        hbuf[1] = (hold >>> 8) & 0xff;
	        state.check = crc32(state.check, hbuf, 2, 0);
	        //===//
	      }
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = EXLEN;
	      /* falls through */
	    case EXLEN:
	      if (state.flags & 0x0400) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length = hold;
	        if (state.head) {
	          state.head.extra_len = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      else if (state.head) {
	        state.head.extra = null/*Z_NULL*/;
	      }
	      state.mode = EXTRA;
	      /* falls through */
	    case EXTRA:
	      if (state.flags & 0x0400) {
	        copy = state.length;
	        if (copy > have) { copy = have; }
	        if (copy) {
	          if (state.head) {
	            len = state.head.extra_len - state.length;
	            if (!state.head.extra) {
	              // Use untyped array for more conveniend processing later
	              state.head.extra = new Array(state.head.extra_len);
	            }
	            utils.arraySet(
	              state.head.extra,
	              input,
	              next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len
	            );
	            //zmemcpy(state.head.extra + len, next,
	            //        len + copy > state.head.extra_max ?
	            //        state.head.extra_max - len : copy);
	          }
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          state.length -= copy;
	        }
	        if (state.length) { break inf_leave; }
	      }
	      state.length = 0;
	      state.mode = NAME;
	      /* falls through */
	    case NAME:
	      if (state.flags & 0x0800) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          // TODO: 2 or 1 bytes?
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.name_max*/)) {
	            state.head.name += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.name = null;
	      }
	      state.length = 0;
	      state.mode = COMMENT;
	      /* falls through */
	    case COMMENT:
	      if (state.flags & 0x1000) {
	        if (have === 0) { break inf_leave; }
	        copy = 0;
	        do {
	          len = input[next + copy++];
	          /* use constant limit because in js we should not preallocate memory */
	          if (state.head && len &&
	              (state.length < 65536 /*state.head.comm_max*/)) {
	            state.head.comment += String.fromCharCode(len);
	          }
	        } while (len && copy < have);
	        if (state.flags & 0x0200) {
	          state.check = crc32(state.check, input, copy, next);
	        }
	        have -= copy;
	        next += copy;
	        if (len) { break inf_leave; }
	      }
	      else if (state.head) {
	        state.head.comment = null;
	      }
	      state.mode = HCRC;
	      /* falls through */
	    case HCRC:
	      if (state.flags & 0x0200) {
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.check & 0xffff)) {
	          strm.msg = 'header crc mismatch';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	      }
	      if (state.head) {
	        state.head.hcrc = ((state.flags >> 9) & 1);
	        state.head.done = true;
	      }
	      strm.adler = state.check = 0;
	      state.mode = TYPE;
	      break;
	    case DICTID:
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      strm.adler = state.check = zswap32(hold);
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = DICT;
	      /* falls through */
	    case DICT:
	      if (state.havedict === 0) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        return Z_NEED_DICT;
	      }
	      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	      state.mode = TYPE;
	      /* falls through */
	    case TYPE:
	      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case TYPEDO:
	      if (state.last) {
	        //--- BYTEBITS() ---//
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        state.mode = CHECK;
	        break;
	      }
	      //=== NEEDBITS(3); */
	      while (bits < 3) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.last = (hold & 0x01)/*BITS(1)*/;
	      //--- DROPBITS(1) ---//
	      hold >>>= 1;
	      bits -= 1;
	      //---//
	
	      switch ((hold & 0x03)/*BITS(2)*/) {
	      case 0:                             /* stored block */
	        //Tracev((stderr, "inflate:     stored block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = STORED;
	        break;
	      case 1:                             /* fixed block */
	        fixedtables(state);
	        //Tracev((stderr, "inflate:     fixed codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = LEN_;             /* decode codes */
	        if (flush === Z_TREES) {
	          //--- DROPBITS(2) ---//
	          hold >>>= 2;
	          bits -= 2;
	          //---//
	          break inf_leave;
	        }
	        break;
	      case 2:                             /* dynamic block */
	        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	        //        state.last ? " (last)" : ""));
	        state.mode = TABLE;
	        break;
	      case 3:
	        strm.msg = 'invalid block type';
	        state.mode = BAD;
	      }
	      //--- DROPBITS(2) ---//
	      hold >>>= 2;
	      bits -= 2;
	      //---//
	      break;
	    case STORED:
	      //--- BYTEBITS() ---// /* go to byte boundary */
	      hold >>>= bits & 7;
	      bits -= bits & 7;
	      //---//
	      //=== NEEDBITS(32); */
	      while (bits < 32) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	        strm.msg = 'invalid stored block lengths';
	        state.mode = BAD;
	        break;
	      }
	      state.length = hold & 0xffff;
	      //Tracev((stderr, "inflate:       stored length %u\n",
	      //        state.length));
	      //=== INITBITS();
	      hold = 0;
	      bits = 0;
	      //===//
	      state.mode = COPY_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case COPY_:
	      state.mode = COPY;
	      /* falls through */
	    case COPY:
	      copy = state.length;
	      if (copy) {
	        if (copy > have) { copy = have; }
	        if (copy > left) { copy = left; }
	        if (copy === 0) { break inf_leave; }
	        //--- zmemcpy(put, next, copy); ---
	        utils.arraySet(output, input, next, copy, put);
	        //---//
	        have -= copy;
	        next += copy;
	        left -= copy;
	        put += copy;
	        state.length -= copy;
	        break;
	      }
	      //Tracev((stderr, "inflate:       stored end\n"));
	      state.mode = TYPE;
	      break;
	    case TABLE:
	      //=== NEEDBITS(14); */
	      while (bits < 14) {
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	      }
	      //===//
	      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	      //--- DROPBITS(5) ---//
	      hold >>>= 5;
	      bits -= 5;
	      //---//
	      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	      //--- DROPBITS(4) ---//
	      hold >>>= 4;
	      bits -= 4;
	      //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	      if (state.nlen > 286 || state.ndist > 30) {
	        strm.msg = 'too many length or distance symbols';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracev((stderr, "inflate:       table sizes ok\n"));
	      state.have = 0;
	      state.mode = LENLENS;
	      /* falls through */
	    case LENLENS:
	      while (state.have < state.ncode) {
	        //=== NEEDBITS(3);
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	        //--- DROPBITS(3) ---//
	        hold >>>= 3;
	        bits -= 3;
	        //---//
	      }
	      while (state.have < 19) {
	        state.lens[order[state.have++]] = 0;
	      }
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      //state.next = state.codes;
	      //state.lencode = state.next;
	      // Switch to use dynamic table
	      state.lencode = state.lendyn;
	      state.lenbits = 7;
	
	      opts = { bits: state.lenbits };
	      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	      state.lenbits = opts.bits;
	
	      if (ret) {
	        strm.msg = 'invalid code lengths set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, "inflate:       code lengths ok\n"));
	      state.have = 0;
	      state.mode = CODELENS;
	      /* falls through */
	    case CODELENS:
	      while (state.have < state.nlen + state.ndist) {
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_val < 16) {
	          //--- DROPBITS(here.bits) ---//
	          hold >>>= here_bits;
	          bits -= here_bits;
	          //---//
	          state.lens[state.have++] = here_val;
	        }
	        else {
	          if (here_val === 16) {
	            //=== NEEDBITS(here.bits + 2);
	            n = here_bits + 2;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            if (state.have === 0) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            len = state.lens[state.have - 1];
	            copy = 3 + (hold & 0x03);//BITS(2);
	            //--- DROPBITS(2) ---//
	            hold >>>= 2;
	            bits -= 2;
	            //---//
	          }
	          else if (here_val === 17) {
	            //=== NEEDBITS(here.bits + 3);
	            n = here_bits + 3;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 3 + (hold & 0x07);//BITS(3);
	            //--- DROPBITS(3) ---//
	            hold >>>= 3;
	            bits -= 3;
	            //---//
	          }
	          else {
	            //=== NEEDBITS(here.bits + 7);
	            n = here_bits + 7;
	            while (bits < n) {
	              if (have === 0) { break inf_leave; }
	              have--;
	              hold += input[next++] << bits;
	              bits += 8;
	            }
	            //===//
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            len = 0;
	            copy = 11 + (hold & 0x7f);//BITS(7);
	            //--- DROPBITS(7) ---//
	            hold >>>= 7;
	            bits -= 7;
	            //---//
	          }
	          if (state.have + copy > state.nlen + state.ndist) {
	            strm.msg = 'invalid bit length repeat';
	            state.mode = BAD;
	            break;
	          }
	          while (copy--) {
	            state.lens[state.have++] = len;
	          }
	        }
	      }
	
	      /* handle error breaks in while */
	      if (state.mode === BAD) { break; }
	
	      /* check for end-of-block code (better have one) */
	      if (state.lens[256] === 0) {
	        strm.msg = 'invalid code -- missing end-of-block';
	        state.mode = BAD;
	        break;
	      }
	
	      /* build code tables -- note: do not change the lenbits or distbits
	         values here (9 and 6) without reading the comments in inftrees.h
	         concerning the ENOUGH constants, which depend on those values */
	      state.lenbits = 9;
	
	      opts = { bits: state.lenbits };
	      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.lenbits = opts.bits;
	      // state.lencode = state.next;
	
	      if (ret) {
	        strm.msg = 'invalid literal/lengths set';
	        state.mode = BAD;
	        break;
	      }
	
	      state.distbits = 6;
	      //state.distcode.copy(state.codes);
	      // Switch to use dynamic table
	      state.distcode = state.distdyn;
	      opts = { bits: state.distbits };
	      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	      // We have separate tables & no pointers. 2 commented lines below not needed.
	      // state.next_index = opts.table_index;
	      state.distbits = opts.bits;
	      // state.distcode = state.next;
	
	      if (ret) {
	        strm.msg = 'invalid distances set';
	        state.mode = BAD;
	        break;
	      }
	      //Tracev((stderr, 'inflate:       codes ok\n'));
	      state.mode = LEN_;
	      if (flush === Z_TREES) { break inf_leave; }
	      /* falls through */
	    case LEN_:
	      state.mode = LEN;
	      /* falls through */
	    case LEN:
	      if (have >= 6 && left >= 258) {
	        //--- RESTORE() ---
	        strm.next_out = put;
	        strm.avail_out = left;
	        strm.next_in = next;
	        strm.avail_in = have;
	        state.hold = hold;
	        state.bits = bits;
	        //---
	        inflate_fast(strm, _out);
	        //--- LOAD() ---
	        put = strm.next_out;
	        output = strm.output;
	        left = strm.avail_out;
	        next = strm.next_in;
	        input = strm.input;
	        have = strm.avail_in;
	        hold = state.hold;
	        bits = state.bits;
	        //---
	
	        if (state.mode === TYPE) {
	          state.back = -1;
	        }
	        break;
	      }
	      state.back = 0;
	      for (;;) {
	        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;
	
	        if (here_bits <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if (here_op && (here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.lencode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      state.length = here_val;
	      if (here_op === 0) {
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        state.mode = LIT;
	        break;
	      }
	      if (here_op & 32) {
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.back = -1;
	        state.mode = TYPE;
	        break;
	      }
	      if (here_op & 64) {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break;
	      }
	      state.extra = here_op & 15;
	      state.mode = LENEXT;
	      /* falls through */
	    case LENEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	      //Tracevv((stderr, "inflate:         length %u\n", state.length));
	      state.was = state.length;
	      state.mode = DIST;
	      /* falls through */
	    case DIST:
	      for (;;) {
	        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	        here_bits = here >>> 24;
	        here_op = (here >>> 16) & 0xff;
	        here_val = here & 0xffff;
	
	        if ((here_bits) <= bits) { break; }
	        //--- PULLBYTE() ---//
	        if (have === 0) { break inf_leave; }
	        have--;
	        hold += input[next++] << bits;
	        bits += 8;
	        //---//
	      }
	      if ((here_op & 0xf0) === 0) {
	        last_bits = here_bits;
	        last_op = here_op;
	        last_val = here_val;
	        for (;;) {
	          here = state.distcode[last_val +
	                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;
	
	          if ((last_bits + here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        //--- DROPBITS(last.bits) ---//
	        hold >>>= last_bits;
	        bits -= last_bits;
	        //---//
	        state.back += last_bits;
	      }
	      //--- DROPBITS(here.bits) ---//
	      hold >>>= here_bits;
	      bits -= here_bits;
	      //---//
	      state.back += here_bits;
	      if (here_op & 64) {
	        strm.msg = 'invalid distance code';
	        state.mode = BAD;
	        break;
	      }
	      state.offset = here_val;
	      state.extra = (here_op) & 15;
	      state.mode = DISTEXT;
	      /* falls through */
	    case DISTEXT:
	      if (state.extra) {
	        //=== NEEDBITS(state.extra);
	        n = state.extra;
	        while (bits < n) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	        //--- DROPBITS(state.extra) ---//
	        hold >>>= state.extra;
	        bits -= state.extra;
	        //---//
	        state.back += state.extra;
	      }
	//#ifdef INFLATE_STRICT
	      if (state.offset > state.dmax) {
	        strm.msg = 'invalid distance too far back';
	        state.mode = BAD;
	        break;
	      }
	//#endif
	      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	      state.mode = MATCH;
	      /* falls through */
	    case MATCH:
	      if (left === 0) { break inf_leave; }
	      copy = _out - left;
	      if (state.offset > copy) {         /* copy from window */
	        copy = state.offset - copy;
	        if (copy > state.whave) {
	          if (state.sane) {
	            strm.msg = 'invalid distance too far back';
	            state.mode = BAD;
	            break;
	          }
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	        }
	        if (copy > state.wnext) {
	          copy -= state.wnext;
	          from = state.wsize - copy;
	        }
	        else {
	          from = state.wnext - copy;
	        }
	        if (copy > state.length) { copy = state.length; }
	        from_source = state.window;
	      }
	      else {                              /* copy from output */
	        from_source = output;
	        from = put - state.offset;
	        copy = state.length;
	      }
	      if (copy > left) { copy = left; }
	      left -= copy;
	      state.length -= copy;
	      do {
	        output[put++] = from_source[from++];
	      } while (--copy);
	      if (state.length === 0) { state.mode = LEN; }
	      break;
	    case LIT:
	      if (left === 0) { break inf_leave; }
	      output[put++] = state.length;
	      left--;
	      state.mode = LEN;
	      break;
	    case CHECK:
	      if (state.wrap) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          // Use '|' insdead of '+' to make sure that result is signed
	          hold |= input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        _out -= left;
	        strm.total_out += _out;
	        state.total += _out;
	        if (_out) {
	          strm.adler = state.check =
	              /*UPDATE(state.check, put - _out, _out);*/
	              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));
	
	        }
	        _out = left;
	        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	          strm.msg = 'incorrect data check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   check matches trailer\n"));
	      }
	      state.mode = LENGTH;
	      /* falls through */
	    case LENGTH:
	      if (state.wrap && state.flags) {
	        //=== NEEDBITS(32);
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (hold !== (state.total & 0xffffffff)) {
	          strm.msg = 'incorrect length check';
	          state.mode = BAD;
	          break;
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        //Tracev((stderr, "inflate:   length matches trailer\n"));
	      }
	      state.mode = DONE;
	      /* falls through */
	    case DONE:
	      ret = Z_STREAM_END;
	      break inf_leave;
	    case BAD:
	      ret = Z_DATA_ERROR;
	      break inf_leave;
	    case MEM:
	      return Z_MEM_ERROR;
	    case SYNC:
	      /* falls through */
	    default:
	      return Z_STREAM_ERROR;
	    }
	  }
	
	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
	
	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */
	
	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---
	
	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}
	
	function inflateEnd(strm) {
	
	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }
	
	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}
	
	function inflateGetHeader(strm, head) {
	  var state;
	
	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }
	
	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}
	
	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;
	
	  var state;
	  var dictid;
	  var ret;
	
	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;
	
	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}
	
	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';
	
	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/


/***/ },
/* 232 */
/***/ function(module, exports) {

	'use strict';
	
	// See state defs from inflate.js
	var BAD = 30;       /* got a data error -- remain here until reset */
	var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	
	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.
	
	   Entry assumptions:
	
	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8
	
	   On return, state.mode is one of:
	
	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data
	
	   Notes:
	
	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.
	
	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;
	
	
	  var input, output; // JS specific, because we have no pointers
	
	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;
	
	
	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */
	
	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }
	
	    here = lcode[hold & lmask];
	
	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];
	
	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;
	
	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }
	
	// (!) This block is disabled in zlib defailts,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }
	
	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }
	
	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);
	
	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;
	
	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	var utils = __webpack_require__(221);
	
	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];
	
	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];
	
	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];
	
	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];
	
	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */
	
	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;
	
	  var here_bits, here_op, here_val;
	
	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.
	
	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.
	
	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.
	
	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */
	
	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }
	
	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;
	
	
	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;
	
	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }
	
	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }
	
	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }
	
	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }
	
	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.
	
	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.
	
	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.
	
	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.
	
	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */
	
	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;
	
	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;
	
	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }
	
	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */
	
	  /* check available table space */
	  if ((type === LENS && used > ENOUGH_LENS) ||
	    (type === DISTS && used > ENOUGH_DISTS)) {
	    return 1;
	  }
	
	  var i = 0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }
	
	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);
	
	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }
	
	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }
	
	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }
	
	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */
	
	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }
	
	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS && used > ENOUGH_LENS) ||
	        (type === DISTS && used > ENOUGH_DISTS)) {
	        return 1;
	      }
	
	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }
	
	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }
	
	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};


/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';
	
	
	module.exports = {
	
	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,
	
	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,
	
	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,
	
	
	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,
	
	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,
	
	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};


/***/ },
/* 235 */
/***/ function(module, exports) {

	'use strict';
	
	
	function GZheader() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications
	
	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //
	
	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}
	
	module.exports = GZheader;


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(164);
	var GenericWorker = __webpack_require__(207);
	var utf8 = __webpack_require__(163);
	var crc32 = __webpack_require__(215);
	var signature = __webpack_require__(237);
	
	/**
	 * Transform an integer into a string in hexadecimal.
	 * @private
	 * @param {number} dec the number to convert.
	 * @param {number} bytes the number of bytes to generate.
	 * @returns {string} the result.
	 */
	var decToHex = function(dec, bytes) {
	    var hex = "", i;
	    for (i = 0; i < bytes; i++) {
	        hex += String.fromCharCode(dec & 0xff);
	        dec = dec >>> 8;
	    }
	    return hex;
	};
	
	/**
	 * Generate the UNIX part of the external file attributes.
	 * @param {Object} unixPermissions the unix permissions or null.
	 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
	 * @return {Number} a 32 bit integer.
	 *
	 * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :
	 *
	 * TTTTsstrwxrwxrwx0000000000ADVSHR
	 * ^^^^____________________________ file type, see zipinfo.c (UNX_*)
	 *     ^^^_________________________ setuid, setgid, sticky
	 *        ^^^^^^^^^________________ permissions
	 *                 ^^^^^^^^^^______ not used ?
	 *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only
	 */
	var generateUnixExternalFileAttr = function (unixPermissions, isDir) {
	
	    var result = unixPermissions;
	    if (!unixPermissions) {
	        // I can't use octal values in strict mode, hence the hexa.
	        //  040775 => 0x41fd
	        // 0100664 => 0x81b4
	        result = isDir ? 0x41fd : 0x81b4;
	    }
	    return (result & 0xFFFF) << 16;
	};
	
	/**
	 * Generate the DOS part of the external file attributes.
	 * @param {Object} dosPermissions the dos permissions or null.
	 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
	 * @return {Number} a 32 bit integer.
	 *
	 * Bit 0     Read-Only
	 * Bit 1     Hidden
	 * Bit 2     System
	 * Bit 3     Volume Label
	 * Bit 4     Directory
	 * Bit 5     Archive
	 */
	var generateDosExternalFileAttr = function (dosPermissions, isDir) {
	
	    // the dir flag is already set for compatibility
	    return (dosPermissions || 0)  & 0x3F;
	};
	
	/**
	 * Generate the various parts used in the construction of the final zip file.
	 * @param {Object} streamInfo the hash with informations about the compressed file.
	 * @param {Boolean} streamedContent is the content streamed ?
	 * @param {Boolean} streamingEnded is the stream finished ?
	 * @param {number} offset the current offset from the start of the zip file.
	 * @param {String} platform let's pretend we are this platform (change platform dependents fields)
	 * @param {Function} encodeFileName the function to encode the file name / comment.
	 * @return {Object} the zip parts.
	 */
	var generateZipParts = function(streamInfo, streamedContent, streamingEnded, offset, platform, encodeFileName) {
	    var file = streamInfo['file'],
	    compression = streamInfo['compression'],
	    useCustomEncoding = encodeFileName !== utf8.utf8encode,
	    encodedFileName = utils.transformTo("string", encodeFileName(file.name)),
	    utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
	    comment = file.comment,
	    encodedComment = utils.transformTo("string", encodeFileName(comment)),
	    utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
	    useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
	    useUTF8ForComment = utfEncodedComment.length !== comment.length,
	    dosTime,
	    dosDate,
	    extraFields = "",
	    unicodePathExtraField = "",
	    unicodeCommentExtraField = "",
	    dir = file.dir,
	    date = file.date;
	
	
	    var dataInfo = {
	        crc32 : 0,
	        compressedSize : 0,
	        uncompressedSize : 0
	    };
	
	    // if the content is streamed, the sizes/crc32 are only available AFTER
	    // the end of the stream.
	    if (!streamedContent || streamingEnded) {
	        dataInfo.crc32 = streamInfo['crc32'];
	        dataInfo.compressedSize = streamInfo['compressedSize'];
	        dataInfo.uncompressedSize = streamInfo['uncompressedSize'];
	    }
	
	    var bitflag = 0;
	    if (streamedContent) {
	        bitflag |= 0x0008;
	    }
	    if (!useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment)) {
	        bitflag |= 0x0800;
	    }
	
	
	    var extFileAttr = 0;
	    var versionMadeBy = 0;
	    if (dir) {
	        // dos or unix, we set the dos dir flag
	        extFileAttr |= 0x00010;
	    }
	    if(platform === "UNIX") {
	        versionMadeBy = 0x031E; // UNIX, version 3.0
	        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
	    } else { // DOS or other, fallback to DOS
	        versionMadeBy = 0x0014; // DOS, version 2.0
	        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
	    }
	
	    // date
	    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html
	    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html
	    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html
	
	    dosTime = date.getUTCHours();
	    dosTime = dosTime << 6;
	    dosTime = dosTime | date.getUTCMinutes();
	    dosTime = dosTime << 5;
	    dosTime = dosTime | date.getUTCSeconds() / 2;
	
	    dosDate = date.getUTCFullYear() - 1980;
	    dosDate = dosDate << 4;
	    dosDate = dosDate | (date.getUTCMonth() + 1);
	    dosDate = dosDate << 5;
	    dosDate = dosDate | date.getUTCDate();
	
	    if (useUTF8ForFileName) {
	        // set the unicode path extra field. unzip needs at least one extra
	        // field to correctly handle unicode path, so using the path is as good
	        // as any other information. This could improve the situation with
	        // other archive managers too.
	        // This field is usually used without the utf8 flag, with a non
	        // unicode path in the header (winrar, winzip). This helps (a bit)
	        // with the messy Windows' default compressed folders feature but
	        // breaks on p7zip which doesn't seek the unicode path extra field.
	        // So for now, UTF-8 everywhere !
	        unicodePathExtraField =
	            // Version
	            decToHex(1, 1) +
	            // NameCRC32
	            decToHex(crc32(encodedFileName), 4) +
	            // UnicodeName
	            utfEncodedFileName;
	
	        extraFields +=
	            // Info-ZIP Unicode Path Extra Field
	            "\x75\x70" +
	            // size
	            decToHex(unicodePathExtraField.length, 2) +
	            // content
	            unicodePathExtraField;
	    }
	
	    if(useUTF8ForComment) {
	
	        unicodeCommentExtraField =
	            // Version
	            decToHex(1, 1) +
	            // CommentCRC32
	            decToHex(crc32(encodedComment), 4) +
	            // UnicodeName
	            utfEncodedComment;
	
	        extraFields +=
	            // Info-ZIP Unicode Path Extra Field
	            "\x75\x63" +
	            // size
	            decToHex(unicodeCommentExtraField.length, 2) +
	            // content
	            unicodeCommentExtraField;
	    }
	
	    var header = "";
	
	    // version needed to extract
	    header += "\x0A\x00";
	    // general purpose bit flag
	    // set bit 11 if utf8
	    header += decToHex(bitflag, 2);
	    // compression method
	    header += compression.magic;
	    // last mod file time
	    header += decToHex(dosTime, 2);
	    // last mod file date
	    header += decToHex(dosDate, 2);
	    // crc-32
	    header += decToHex(dataInfo.crc32, 4);
	    // compressed size
	    header += decToHex(dataInfo.compressedSize, 4);
	    // uncompressed size
	    header += decToHex(dataInfo.uncompressedSize, 4);
	    // file name length
	    header += decToHex(encodedFileName.length, 2);
	    // extra field length
	    header += decToHex(extraFields.length, 2);
	
	
	    var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;
	
	    var dirRecord = signature.CENTRAL_FILE_HEADER +
	        // version made by (00: DOS)
	        decToHex(versionMadeBy, 2) +
	        // file header (common to file and central directory)
	        header +
	        // file comment length
	        decToHex(encodedComment.length, 2) +
	        // disk number start
	        "\x00\x00" +
	        // internal file attributes TODO
	        "\x00\x00" +
	        // external file attributes
	        decToHex(extFileAttr, 4) +
	        // relative offset of local header
	        decToHex(offset, 4) +
	        // file name
	        encodedFileName +
	        // extra field
	        extraFields +
	        // file comment
	        encodedComment;
	
	    return {
	        fileRecord: fileRecord,
	        dirRecord: dirRecord
	    };
	};
	
	/**
	 * Generate the EOCD record.
	 * @param {Number} entriesCount the number of entries in the zip file.
	 * @param {Number} centralDirLength the length (in bytes) of the central dir.
	 * @param {Number} localDirLength the length (in bytes) of the local dir.
	 * @param {String} comment the zip file comment as a binary string.
	 * @param {Function} encodeFileName the function to encode the comment.
	 * @return {String} the EOCD record.
	 */
	var generateCentralDirectoryEnd = function (entriesCount, centralDirLength, localDirLength, comment, encodeFileName) {
	    var dirEnd = "";
	    var encodedComment = utils.transformTo("string", encodeFileName(comment));
	
	    // end of central dir signature
	    dirEnd = signature.CENTRAL_DIRECTORY_END +
	        // number of this disk
	        "\x00\x00" +
	        // number of the disk with the start of the central directory
	        "\x00\x00" +
	        // total number of entries in the central directory on this disk
	        decToHex(entriesCount, 2) +
	        // total number of entries in the central directory
	        decToHex(entriesCount, 2) +
	        // size of the central directory   4 bytes
	        decToHex(centralDirLength, 4) +
	        // offset of start of central directory with respect to the starting disk number
	        decToHex(localDirLength, 4) +
	        // .ZIP file comment length
	        decToHex(encodedComment.length, 2) +
	        // .ZIP file comment
	        encodedComment;
	
	    return dirEnd;
	};
	
	/**
	 * Generate data descriptors for a file entry.
	 * @param {Object} streamInfo the hash generated by a worker, containing informations
	 * on the file entry.
	 * @return {String} the data descriptors.
	 */
	var generateDataDescriptors = function (streamInfo) {
	    var descriptor = "";
	    descriptor = signature.DATA_DESCRIPTOR +
	        // crc-32                          4 bytes
	        decToHex(streamInfo['crc32'], 4) +
	        // compressed size                 4 bytes
	        decToHex(streamInfo['compressedSize'], 4) +
	        // uncompressed size               4 bytes
	        decToHex(streamInfo['uncompressedSize'], 4);
	
	    return descriptor;
	};
	
	
	/**
	 * A worker to concatenate other workers to create a zip file.
	 * @param {Boolean} streamFiles `true` to stream the content of the files,
	 * `false` to accumulate it.
	 * @param {String} comment the comment to use.
	 * @param {String} platform the platform to use, "UNIX" or "DOS".
	 * @param {Function} encodeFileName the function to encode file names and comments.
	 */
	function ZipFileWorker(streamFiles, comment, platform, encodeFileName) {
	    GenericWorker.call(this, "ZipFileWorker");
	    // The number of bytes written so far. This doesn't count accumulated chunks.
	    this.bytesWritten = 0;
	    // The comment of the zip file
	    this.zipComment = comment;
	    // The platform "generating" the zip file.
	    this.zipPlatform = platform;
	    // the function to encode file names and comments.
	    this.encodeFileName = encodeFileName;
	    // Should we stream the content of the files ?
	    this.streamFiles = streamFiles;
	    // If `streamFiles` is false, we will need to accumulate the content of the
	    // files to calculate sizes / crc32 (and write them *before* the content).
	    // This boolean indicates if we are accumulating chunks (it will change a lot
	    // during the lifetime of this worker).
	    this.accumulate = false;
	    // The buffer receiving chunks when accumulating content.
	    this.contentBuffer = [];
	    // The list of generated directory records.
	    this.dirRecords = [];
	    // The offset (in bytes) from the beginning of the zip file for the current source.
	    this.currentSourceOffset = 0;
	    // The total number of entries in this zip file.
	    this.entriesCount = 0;
	    // the name of the file currently being added, null when handling the end of the zip file.
	    // Used for the emited metadata.
	    this.currentFile = null;
	
	
	
	    this._sources = [];
	}
	utils.inherits(ZipFileWorker, GenericWorker);
	
	/**
	 * @see GenericWorker.push
	 */
	ZipFileWorker.prototype.push = function (chunk) {
	
	    var currentFilePercent = chunk.meta.percent || 0;
	    var entriesCount = this.entriesCount;
	    var remainingFiles = this._sources.length;
	
	    if(this.accumulate) {
	        this.contentBuffer.push(chunk);
	    } else {
	        this.bytesWritten += chunk.data.length;
	
	        GenericWorker.prototype.push.call(this, {
	            data : chunk.data,
	            meta : {
	                currentFile : this.currentFile,
	                percent : entriesCount ? (currentFilePercent + 100 * (entriesCount - remainingFiles - 1)) / entriesCount : 100
	            }
	        });
	    }
	};
	
	/**
	 * The worker started a new source (an other worker).
	 * @param {Object} streamInfo the streamInfo object from the new source.
	 */
	ZipFileWorker.prototype.openedSource = function (streamInfo) {
	    this.currentSourceOffset = this.bytesWritten;
	    this.currentFile = streamInfo['file'].name;
	
	    // don't stream folders (because they don't have any content)
	    if(this.streamFiles && !streamInfo['file'].dir) {
	        var record = generateZipParts(streamInfo, this.streamFiles, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
	        this.push({
	            data : record.fileRecord,
	            meta : {percent:0}
	        });
	    } else {
	        // we need to wait for the whole file before pushing anything
	        this.accumulate = true;
	    }
	};
	
	/**
	 * The worker finished a source (an other worker).
	 * @param {Object} streamInfo the streamInfo object from the finished source.
	 */
	ZipFileWorker.prototype.closedSource = function (streamInfo) {
	    this.accumulate = false;
	    var record = generateZipParts(streamInfo, this.streamFiles, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
	
	    this.dirRecords.push(record.dirRecord);
	    if(this.streamFiles && !streamInfo['file'].dir) {
	        // after the streamed file, we put data descriptors
	        this.push({
	            data : generateDataDescriptors(streamInfo),
	            meta : {percent:100}
	        });
	    } else {
	        // the content wasn't streamed, we need to push everything now
	        // first the file record, then the content
	        this.push({
	            data : record.fileRecord,
	            meta : {percent:0}
	        });
	        while(this.contentBuffer.length) {
	            this.push(this.contentBuffer.shift());
	        }
	    }
	    this.currentFile = null;
	};
	
	/**
	 * @see GenericWorker.flush
	 */
	ZipFileWorker.prototype.flush = function () {
	
	    var localDirLength = this.bytesWritten;
	    for(var i = 0; i < this.dirRecords.length; i++) {
	        this.push({
	            data : this.dirRecords[i],
	            meta : {percent:100}
	        });
	    }
	    var centralDirLength = this.bytesWritten - localDirLength;
	
	    var dirEnd = generateCentralDirectoryEnd(this.dirRecords.length, centralDirLength, localDirLength, this.zipComment, this.encodeFileName);
	
	    this.push({
	        data : dirEnd,
	        meta : {percent:100}
	    });
	};
	
	/**
	 * Prepare the next source to be read.
	 */
	ZipFileWorker.prototype.prepareNextSource = function () {
	    this.previous = this._sources.shift();
	    this.openedSource(this.previous.streamInfo);
	    if (this.isPaused) {
	        this.previous.pause();
	    } else {
	        this.previous.resume();
	    }
	};
	
	/**
	 * @see GenericWorker.registerPrevious
	 */
	ZipFileWorker.prototype.registerPrevious = function (previous) {
	    this._sources.push(previous);
	    var self = this;
	
	    previous.on('data', function (chunk) {
	        self.processChunk(chunk);
	    });
	    previous.on('end', function () {
	        self.closedSource(self.previous.streamInfo);
	        if(self._sources.length) {
	            self.prepareNextSource();
	        } else {
	            self.end();
	        }
	    });
	    previous.on('error', function (e) {
	        self.error(e);
	    });
	    return this;
	};
	
	/**
	 * @see GenericWorker.resume
	 */
	ZipFileWorker.prototype.resume = function () {
	    if(!GenericWorker.prototype.resume.call(this)) {
	        return false;
	    }
	
	    if (!this.previous && this._sources.length) {
	        this.prepareNextSource();
	        return true;
	    }
	    if (!this.previous && !this._sources.length && !this.generatedError) {
	        this.end();
	        return true;
	    }
	};
	
	/**
	 * @see GenericWorker.error
	 */
	ZipFileWorker.prototype.error = function (e) {
	    var sources = this._sources;
	    if(!GenericWorker.prototype.error.call(this, e)) {
	        return false;
	    }
	    for(var i = 0; i < sources.length; i++) {
	        try {
	            sources[i].error(e);
	        } catch(e) {
	            // the `error` exploded, nothing to do
	        }
	    }
	    return true;
	};
	
	/**
	 * @see GenericWorker.lock
	 */
	ZipFileWorker.prototype.lock = function () {
	    GenericWorker.prototype.lock.call(this);
	    var sources = this._sources;
	    for(var i = 0; i < sources.length; i++) {
	        sources[i].lock();
	    }
	};
	
	module.exports = ZipFileWorker;


/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';
	exports.LOCAL_FILE_HEADER = "PK\x03\x04";
	exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
	exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
	exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
	exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
	exports.DATA_DESCRIPTOR = "PK\x07\x08";


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var utils = __webpack_require__(164);
	var GenericWorker = __webpack_require__(207);
	
	/**
	 * A worker that use a nodejs stream as source.
	 * @constructor
	 * @param {String} filename the name of the file entry for this stream.
	 * @param {Readable} stream the nodejs stream.
	 */
	function NodejsStreamInputAdapter(filename, stream) {
	    GenericWorker.call(this, "Nodejs stream input adapter for " + filename);
	    this._upstreamEnded = false;
	    this._bindStream(stream);
	}
	
	utils.inherits(NodejsStreamInputAdapter, GenericWorker);
	
	/**
	 * Prepare the stream and bind the callbacks on it.
	 * Do this ASAP on node 0.10 ! A lazy binding doesn't always work.
	 * @param {Stream} stream the nodejs stream to use.
	 */
	NodejsStreamInputAdapter.prototype._bindStream = function (stream) {
	    var self = this;
	    this._stream = stream;
	    stream.pause();
	    stream
	    .on("data", function (chunk) {
	        self.push({
	            data: chunk,
	            meta : {
	                percent : 0
	            }
	        });
	    })
	    .on("error", function (e) {
	        if(self.isPaused) {
	            this.generatedError = e;
	        } else {
	            self.error(e);
	        }
	    })
	    .on("end", function () {
	        if(self.isPaused) {
	            self._upstreamEnded = true;
	        } else {
	            self.end();
	        }
	    });
	};
	NodejsStreamInputAdapter.prototype.pause = function () {
	    if(!GenericWorker.prototype.pause.call(this)) {
	        return false;
	    }
	    this._stream.pause();
	    return true;
	};
	NodejsStreamInputAdapter.prototype.resume = function () {
	    if(!GenericWorker.prototype.resume.call(this)) {
	        return false;
	    }
	
	    if(this._upstreamEnded) {
	        this.end();
	    } else {
	        this._stream.resume();
	    }
	
	    return true;
	};
	
	module.exports = NodejsStreamInputAdapter;


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var utils = __webpack_require__(164);
	var external = __webpack_require__(202);
	var utf8 = __webpack_require__(163);
	var utils = __webpack_require__(164);
	var ZipEntries = __webpack_require__(240);
	var Crc32Probe = __webpack_require__(214);
	var nodejsUtils = __webpack_require__(199);
	
	/**
	 * Check the CRC32 of an entry.
	 * @param {ZipEntry} zipEntry the zip entry to check.
	 * @return {Promise} the result.
	 */
	function checkEntryCRC32(zipEntry) {
	    return new external.Promise(function (resolve, reject) {
	        var worker = zipEntry.decompressed.getContentWorker().pipe(new Crc32Probe());
	        worker.on("error", function (e) {
	            reject(e);
	        })
	        .on("end", function () {
	            if (worker.streamInfo.crc32 !== zipEntry.decompressed.crc32) {
	                reject(new Error("Corrupted zip : CRC32 mismatch"));
	            } else {
	                resolve();
	            }
	        })
	        .resume();
	    });
	}
	
	module.exports = function(data, options) {
	    var zip = this;
	    options = utils.extend(options || {}, {
	        base64: false,
	        checkCRC32: false,
	        optimizedBinaryString: false,
	        createFolders: false,
	        decodeFileName: utf8.utf8decode
	    });
	
	    if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {
	        return external.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file."));
	    }
	
	    return utils.prepareContent("the loaded zip file", data, true, options.optimizedBinaryString, options.base64)
	    .then(function(data) {
	        var zipEntries = new ZipEntries(options);
	        zipEntries.load(data);
	        return zipEntries;
	    }).then(function checkCRC32(zipEntries) {
	        var promises = [external.Promise.resolve(zipEntries)];
	        var files = zipEntries.files;
	        if (options.checkCRC32) {
	            for (var i = 0; i < files.length; i++) {
	                promises.push(checkEntryCRC32(files[i]));
	            }
	        }
	        return external.Promise.all(promises);
	    }).then(function addFiles(results) {
	        var zipEntries = results.shift();
	        var files = zipEntries.files;
	        for (var i = 0; i < files.length; i++) {
	            var input = files[i];
	            zip.file(input.fileNameStr, input.decompressed, {
	                binary: true,
	                optimizedBinaryString: true,
	                date: input.date,
	                dir: input.dir,
	                comment : input.fileCommentStr.length ? input.fileCommentStr : null,
	                unixPermissions : input.unixPermissions,
	                dosPermissions : input.dosPermissions,
	                createFolders: options.createFolders
	            });
	        }
	        if (zipEntries.zipComment.length) {
	            zip.comment = zipEntries.zipComment;
	        }
	
	        return zip;
	    });
	};


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var readerFor = __webpack_require__(241);
	var utils = __webpack_require__(164);
	var sig = __webpack_require__(237);
	var ZipEntry = __webpack_require__(247);
	var utf8 = __webpack_require__(163);
	var support = __webpack_require__(165);
	//  class ZipEntries {{{
	/**
	 * All the entries in the zip file.
	 * @constructor
	 * @param {Object} loadOptions Options for loading the stream.
	 */
	function ZipEntries(loadOptions) {
	    this.files = [];
	    this.loadOptions = loadOptions;
	}
	ZipEntries.prototype = {
	    /**
	     * Check that the reader is on the speficied signature.
	     * @param {string} expectedSignature the expected signature.
	     * @throws {Error} if it is an other signature.
	     */
	    checkSignature: function(expectedSignature) {
	        if (!this.reader.readAndCheckSignature(expectedSignature)) {
	            this.reader.index -= 4;
	            var signature = this.reader.readString(4);
	            throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
	        }
	    },
	    /**
	     * Check if the given signature is at the given index.
	     * @param {number} askedIndex the index to check.
	     * @param {string} expectedSignature the signature to expect.
	     * @return {boolean} true if the signature is here, false otherwise.
	     */
	    isSignature: function(askedIndex, expectedSignature) {
	        var currentIndex = this.reader.index;
	        this.reader.setIndex(askedIndex);
	        var signature = this.reader.readString(4);
	        var result = signature === expectedSignature;
	        this.reader.setIndex(currentIndex);
	        return result;
	    },
	    /**
	     * Read the end of the central directory.
	     */
	    readBlockEndOfCentral: function() {
	        this.diskNumber = this.reader.readInt(2);
	        this.diskWithCentralDirStart = this.reader.readInt(2);
	        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
	        this.centralDirRecords = this.reader.readInt(2);
	        this.centralDirSize = this.reader.readInt(4);
	        this.centralDirOffset = this.reader.readInt(4);
	
	        this.zipCommentLength = this.reader.readInt(2);
	        // warning : the encoding depends of the system locale
	        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
	        // On a windows machine, this field is encoded with the localized windows code page.
	        var zipComment = this.reader.readData(this.zipCommentLength);
	        var decodeParamType = support.uint8array ? "uint8array" : "array";
	        // To get consistent behavior with the generation part, we will assume that
	        // this is utf8 encoded unless specified otherwise.
	        var decodeContent = utils.transformTo(decodeParamType, zipComment);
	        this.zipComment = this.loadOptions.decodeFileName(decodeContent);
	    },
	    /**
	     * Read the end of the Zip 64 central directory.
	     * Not merged with the method readEndOfCentral :
	     * The end of central can coexist with its Zip64 brother,
	     * I don't want to read the wrong number of bytes !
	     */
	    readBlockZip64EndOfCentral: function() {
	        this.zip64EndOfCentralSize = this.reader.readInt(8);
	        this.reader.skip(4);
	        // this.versionMadeBy = this.reader.readString(2);
	        // this.versionNeeded = this.reader.readInt(2);
	        this.diskNumber = this.reader.readInt(4);
	        this.diskWithCentralDirStart = this.reader.readInt(4);
	        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
	        this.centralDirRecords = this.reader.readInt(8);
	        this.centralDirSize = this.reader.readInt(8);
	        this.centralDirOffset = this.reader.readInt(8);
	
	        this.zip64ExtensibleData = {};
	        var extraDataSize = this.zip64EndOfCentralSize - 44,
	            index = 0,
	            extraFieldId,
	            extraFieldLength,
	            extraFieldValue;
	        while (index < extraDataSize) {
	            extraFieldId = this.reader.readInt(2);
	            extraFieldLength = this.reader.readInt(4);
	            extraFieldValue = this.reader.readData(extraFieldLength);
	            this.zip64ExtensibleData[extraFieldId] = {
	                id: extraFieldId,
	                length: extraFieldLength,
	                value: extraFieldValue
	            };
	        }
	    },
	    /**
	     * Read the end of the Zip 64 central directory locator.
	     */
	    readBlockZip64EndOfCentralLocator: function() {
	        this.diskWithZip64CentralDirStart = this.reader.readInt(4);
	        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
	        this.disksCount = this.reader.readInt(4);
	        if (this.disksCount > 1) {
	            throw new Error("Multi-volumes zip are not supported");
	        }
	    },
	    /**
	     * Read the local files, based on the offset read in the central part.
	     */
	    readLocalFiles: function() {
	        var i, file;
	        for (i = 0; i < this.files.length; i++) {
	            file = this.files[i];
	            this.reader.setIndex(file.localHeaderOffset);
	            this.checkSignature(sig.LOCAL_FILE_HEADER);
	            file.readLocalPart(this.reader);
	            file.handleUTF8();
	            file.processAttributes();
	        }
	    },
	    /**
	     * Read the central directory.
	     */
	    readCentralDir: function() {
	        var file;
	
	        this.reader.setIndex(this.centralDirOffset);
	        while (this.reader.readAndCheckSignature(sig.CENTRAL_FILE_HEADER)) {
	            file = new ZipEntry({
	                zip64: this.zip64
	            }, this.loadOptions);
	            file.readCentralPart(this.reader);
	            this.files.push(file);
	        }
	
	        if (this.centralDirRecords !== this.files.length) {
	            if (this.centralDirRecords !== 0 && this.files.length === 0) {
	                // We expected some records but couldn't find ANY.
	                // This is really suspicious, as if something went wrong.
	                throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
	            } else {
	                // We found some records but not all.
	                // Something is wrong but we got something for the user: no error here.
	                // console.warn("expected", this.centralDirRecords, "records in central dir, got", this.files.length);
	            }
	        }
	    },
	    /**
	     * Read the end of central directory.
	     */
	    readEndOfCentral: function() {
	        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
	        if (offset < 0) {
	            // Check if the content is a truncated zip or complete garbage.
	            // A "LOCAL_FILE_HEADER" is not required at the beginning (auto
	            // extractible zip for example) but it can give a good hint.
	            // If an ajax request was used without responseType, we will also
	            // get unreadable data.
	            var isGarbage = !this.isSignature(0, sig.LOCAL_FILE_HEADER);
	
	            if (isGarbage) {
	                throw new Error("Can't find end of central directory : is this a zip file ? " +
	                                "If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html");
	            } else {
	                throw new Error("Corrupted zip : can't find end of central directory");
	            }
	
	        }
	        this.reader.setIndex(offset);
	        var endOfCentralDirOffset = offset;
	        this.checkSignature(sig.CENTRAL_DIRECTORY_END);
	        this.readBlockEndOfCentral();
	
	
	        /* extract from the zip spec :
	            4)  If one of the fields in the end of central directory
	                record is too small to hold required data, the field
	                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
	                ZIP64 format record should be created.
	            5)  The end of central directory record and the
	                Zip64 end of central directory locator record must
	                reside on the same disk when splitting or spanning
	                an archive.
	         */
	        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
	            this.zip64 = true;
	
	            /*
	            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
	            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
	            all numbers as 64-bit double precision IEEE 754 floating point numbers.
	            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
	            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
	            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
	            */
	
	            // should look for a zip64 EOCD locator
	            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
	            if (offset < 0) {
	                throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
	            }
	            this.reader.setIndex(offset);
	            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
	            this.readBlockZip64EndOfCentralLocator();
	
	            // now the zip64 EOCD record
	            if (!this.isSignature(this.relativeOffsetEndOfZip64CentralDir, sig.ZIP64_CENTRAL_DIRECTORY_END)) {
	                // console.warn("ZIP64 end of central directory not where expected.");
	                this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
	                if (this.relativeOffsetEndOfZip64CentralDir < 0) {
	                    throw new Error("Corrupted zip : can't find the ZIP64 end of central directory");
	                }
	            }
	            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
	            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
	            this.readBlockZip64EndOfCentral();
	        }
	
	        var expectedEndOfCentralDirOffset = this.centralDirOffset + this.centralDirSize;
	        if (this.zip64) {
	            expectedEndOfCentralDirOffset += 20; // end of central dir 64 locator
	            expectedEndOfCentralDirOffset += 12 /* should not include the leading 12 bytes */ + this.zip64EndOfCentralSize;
	        }
	
	        var extraBytes = endOfCentralDirOffset - expectedEndOfCentralDirOffset;
	
	        if (extraBytes > 0) {
	            // console.warn(extraBytes, "extra bytes at beginning or within zipfile");
	            if (this.isSignature(endOfCentralDirOffset, sig.CENTRAL_FILE_HEADER)) {
	                // The offsets seem wrong, but we have something at the specified offset.
	                // So… we keep it.
	            } else {
	                // the offset is wrong, update the "zero" of the reader
	                // this happens if data has been prepended (crx files for example)
	                this.reader.zero = extraBytes;
	            }
	        } else if (extraBytes < 0) {
	            throw new Error("Corrupted zip: missing " + Math.abs(extraBytes) + " bytes.");
	        }
	    },
	    prepareReader: function(data) {
	        this.reader = readerFor(data);
	    },
	    /**
	     * Read a zip file and create ZipEntries.
	     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
	     */
	    load: function(data) {
	        this.prepareReader(data);
	        this.readEndOfCentral();
	        this.readCentralDir();
	        this.readLocalFiles();
	    }
	};
	// }}} end of ZipEntries
	module.exports = ZipEntries;


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(164);
	var support = __webpack_require__(165);
	var ArrayReader = __webpack_require__(242);
	var StringReader = __webpack_require__(244);
	var NodeBufferReader = __webpack_require__(245);
	var Uint8ArrayReader = __webpack_require__(246);
	
	/**
	 * Create a reader adapted to the data.
	 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data to read.
	 * @return {DataReader} the data reader.
	 */
	module.exports = function (data) {
	    var type = utils.getTypeOf(data);
	    utils.checkSupport(type);
	    if (type === "string" && !support.uint8array) {
	        return new StringReader(data);
	    }
	    if (type === "nodebuffer") {
	        return new NodeBufferReader(data);
	    }
	    if (support.uint8array) {
	        return new Uint8ArrayReader(utils.transformTo("uint8array", data));
	    }
	    return new ArrayReader(utils.transformTo("array", data));
	};
	
	// vim: set shiftwidth=4 softtabstop=4:


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var DataReader = __webpack_require__(243);
	var utils = __webpack_require__(164);
	
	function ArrayReader(data) {
	    DataReader.call(this, data);
		for(var i = 0; i < this.data.length; i++) {
			data[i] = data[i] & 0xFF;
		}
	}
	utils.inherits(ArrayReader, DataReader);
	/**
	 * @see DataReader.byteAt
	 */
	ArrayReader.prototype.byteAt = function(i) {
	    return this.data[this.zero + i];
	};
	/**
	 * @see DataReader.lastIndexOfSignature
	 */
	ArrayReader.prototype.lastIndexOfSignature = function(sig) {
	    var sig0 = sig.charCodeAt(0),
	        sig1 = sig.charCodeAt(1),
	        sig2 = sig.charCodeAt(2),
	        sig3 = sig.charCodeAt(3);
	    for (var i = this.length - 4; i >= 0; --i) {
	        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
	            return i - this.zero;
	        }
	    }
	
	    return -1;
	};
	/**
	 * @see DataReader.readAndCheckSignature
	 */
	ArrayReader.prototype.readAndCheckSignature = function (sig) {
	    var sig0 = sig.charCodeAt(0),
	        sig1 = sig.charCodeAt(1),
	        sig2 = sig.charCodeAt(2),
	        sig3 = sig.charCodeAt(3),
	        data = this.readData(4);
	    return sig0 === data[0] && sig1 === data[1] && sig2 === data[2] && sig3 === data[3];
	};
	/**
	 * @see DataReader.readData
	 */
	ArrayReader.prototype.readData = function(size) {
	    this.checkOffset(size);
	    if(size === 0) {
	        return [];
	    }
	    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
	    this.index += size;
	    return result;
	};
	module.exports = ArrayReader;


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var utils = __webpack_require__(164);
	
	function DataReader(data) {
	    this.data = data; // type : see implementation
	    this.length = data.length;
	    this.index = 0;
	    this.zero = 0;
	}
	DataReader.prototype = {
	    /**
	     * Check that the offset will not go too far.
	     * @param {string} offset the additional offset to check.
	     * @throws {Error} an Error if the offset is out of bounds.
	     */
	    checkOffset: function(offset) {
	        this.checkIndex(this.index + offset);
	    },
	    /**
	     * Check that the specifed index will not be too far.
	     * @param {string} newIndex the index to check.
	     * @throws {Error} an Error if the index is out of bounds.
	     */
	    checkIndex: function(newIndex) {
	        if (this.length < this.zero + newIndex || newIndex < 0) {
	            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
	        }
	    },
	    /**
	     * Change the index.
	     * @param {number} newIndex The new index.
	     * @throws {Error} if the new index is out of the data.
	     */
	    setIndex: function(newIndex) {
	        this.checkIndex(newIndex);
	        this.index = newIndex;
	    },
	    /**
	     * Skip the next n bytes.
	     * @param {number} n the number of bytes to skip.
	     * @throws {Error} if the new index is out of the data.
	     */
	    skip: function(n) {
	        this.setIndex(this.index + n);
	    },
	    /**
	     * Get the byte at the specified index.
	     * @param {number} i the index to use.
	     * @return {number} a byte.
	     */
	    byteAt: function(i) {
	        // see implementations
	    },
	    /**
	     * Get the next number with a given byte size.
	     * @param {number} size the number of bytes to read.
	     * @return {number} the corresponding number.
	     */
	    readInt: function(size) {
	        var result = 0,
	            i;
	        this.checkOffset(size);
	        for (i = this.index + size - 1; i >= this.index; i--) {
	            result = (result << 8) + this.byteAt(i);
	        }
	        this.index += size;
	        return result;
	    },
	    /**
	     * Get the next string with a given byte size.
	     * @param {number} size the number of bytes to read.
	     * @return {string} the corresponding string.
	     */
	    readString: function(size) {
	        return utils.transformTo("string", this.readData(size));
	    },
	    /**
	     * Get raw data without conversion, <size> bytes.
	     * @param {number} size the number of bytes to read.
	     * @return {Object} the raw data, implementation specific.
	     */
	    readData: function(size) {
	        // see implementations
	    },
	    /**
	     * Find the last occurence of a zip signature (4 bytes).
	     * @param {string} sig the signature to find.
	     * @return {number} the index of the last occurence, -1 if not found.
	     */
	    lastIndexOfSignature: function(sig) {
	        // see implementations
	    },
	    /**
	     * Read the signature (4 bytes) at the current position and compare it with sig.
	     * @param {string} sig the expected signature
	     * @return {boolean} true if the signature matches, false otherwise.
	     */
	    readAndCheckSignature: function(sig) {
	        // see implementations
	    },
	    /**
	     * Get the next date.
	     * @return {Date} the date.
	     */
	    readDate: function() {
	        var dostime = this.readInt(4);
	        return new Date(Date.UTC(
	        ((dostime >> 25) & 0x7f) + 1980, // year
	        ((dostime >> 21) & 0x0f) - 1, // month
	        (dostime >> 16) & 0x1f, // day
	        (dostime >> 11) & 0x1f, // hour
	        (dostime >> 5) & 0x3f, // minute
	        (dostime & 0x1f) << 1)); // second
	    }
	};
	module.exports = DataReader;


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var DataReader = __webpack_require__(243);
	var utils = __webpack_require__(164);
	
	function StringReader(data) {
	    DataReader.call(this, data);
	}
	utils.inherits(StringReader, DataReader);
	/**
	 * @see DataReader.byteAt
	 */
	StringReader.prototype.byteAt = function(i) {
	    return this.data.charCodeAt(this.zero + i);
	};
	/**
	 * @see DataReader.lastIndexOfSignature
	 */
	StringReader.prototype.lastIndexOfSignature = function(sig) {
	    return this.data.lastIndexOf(sig) - this.zero;
	};
	/**
	 * @see DataReader.readAndCheckSignature
	 */
	StringReader.prototype.readAndCheckSignature = function (sig) {
	    var data = this.readData(4);
	    return sig === data;
	};
	/**
	 * @see DataReader.readData
	 */
	StringReader.prototype.readData = function(size) {
	    this.checkOffset(size);
	    // this will work because the constructor applied the "& 0xff" mask.
	    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
	    this.index += size;
	    return result;
	};
	module.exports = StringReader;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var Uint8ArrayReader = __webpack_require__(246);
	var utils = __webpack_require__(164);
	
	function NodeBufferReader(data) {
	    Uint8ArrayReader.call(this, data);
	}
	utils.inherits(NodeBufferReader, Uint8ArrayReader);
	
	/**
	 * @see DataReader.readData
	 */
	NodeBufferReader.prototype.readData = function(size) {
	    this.checkOffset(size);
	    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
	    this.index += size;
	    return result;
	};
	module.exports = NodeBufferReader;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ArrayReader = __webpack_require__(242);
	var utils = __webpack_require__(164);
	
	function Uint8ArrayReader(data) {
	    ArrayReader.call(this, data);
	}
	utils.inherits(Uint8ArrayReader, ArrayReader);
	/**
	 * @see DataReader.readData
	 */
	Uint8ArrayReader.prototype.readData = function(size) {
	    this.checkOffset(size);
	    if(size === 0) {
	        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
	        return new Uint8Array(0);
	    }
	    var result = this.data.subarray(this.zero + this.index, this.zero + this.index + size);
	    this.index += size;
	    return result;
	};
	module.exports = Uint8ArrayReader;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var readerFor = __webpack_require__(241);
	var utils = __webpack_require__(164);
	var CompressedObject = __webpack_require__(211);
	var crc32fn = __webpack_require__(215);
	var utf8 = __webpack_require__(163);
	var compressions = __webpack_require__(218);
	var support = __webpack_require__(165);
	
	var MADE_BY_DOS = 0x00;
	var MADE_BY_UNIX = 0x03;
	
	/**
	 * Find a compression registered in JSZip.
	 * @param {string} compressionMethod the method magic to find.
	 * @return {Object|null} the JSZip compression object, null if none found.
	 */
	var findCompression = function(compressionMethod) {
	    for (var method in compressions) {
	        if (!compressions.hasOwnProperty(method)) {
	            continue;
	        }
	        if (compressions[method].magic === compressionMethod) {
	            return compressions[method];
	        }
	    }
	    return null;
	};
	
	// class ZipEntry {{{
	/**
	 * An entry in the zip file.
	 * @constructor
	 * @param {Object} options Options of the current file.
	 * @param {Object} loadOptions Options for loading the stream.
	 */
	function ZipEntry(options, loadOptions) {
	    this.options = options;
	    this.loadOptions = loadOptions;
	}
	ZipEntry.prototype = {
	    /**
	     * say if the file is encrypted.
	     * @return {boolean} true if the file is encrypted, false otherwise.
	     */
	    isEncrypted: function() {
	        // bit 1 is set
	        return (this.bitFlag & 0x0001) === 0x0001;
	    },
	    /**
	     * say if the file has utf-8 filename/comment.
	     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
	     */
	    useUTF8: function() {
	        // bit 11 is set
	        return (this.bitFlag & 0x0800) === 0x0800;
	    },
	    /**
	     * Read the local part of a zip file and add the info in this object.
	     * @param {DataReader} reader the reader to use.
	     */
	    readLocalPart: function(reader) {
	        var compression, localExtraFieldsLength;
	
	        // we already know everything from the central dir !
	        // If the central dir data are false, we are doomed.
	        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
	        // The less data we get here, the more reliable this should be.
	        // Let's skip the whole header and dash to the data !
	        reader.skip(22);
	        // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
	        // Strangely, the filename here is OK.
	        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
	        // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
	        // Search "unzip mismatching "local" filename continuing with "central" filename version" on
	        // the internet.
	        //
	        // I think I see the logic here : the central directory is used to display
	        // content and the local directory is used to extract the files. Mixing / and \
	        // may be used to display \ to windows users and use / when extracting the files.
	        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
	        this.fileNameLength = reader.readInt(2);
	        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
	        // the fileName is stored as binary data, the handleUTF8 method will take care of the encoding.
	        this.fileName = reader.readData(this.fileNameLength);
	        reader.skip(localExtraFieldsLength);
	
	        if (this.compressedSize === -1 || this.uncompressedSize === -1) {
	            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize === -1 || uncompressedSize === -1)");
	        }
	
	        compression = findCompression(this.compressionMethod);
	        if (compression === null) { // no compression found
	            throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + utils.transformTo("string", this.fileName) + ")");
	        }
	        this.decompressed = new CompressedObject(this.compressedSize, this.uncompressedSize, this.crc32, compression, reader.readData(this.compressedSize));
	    },
	
	    /**
	     * Read the central part of a zip file and add the info in this object.
	     * @param {DataReader} reader the reader to use.
	     */
	    readCentralPart: function(reader) {
	        this.versionMadeBy = reader.readInt(2);
	        reader.skip(2);
	        // this.versionNeeded = reader.readInt(2);
	        this.bitFlag = reader.readInt(2);
	        this.compressionMethod = reader.readString(2);
	        this.date = reader.readDate();
	        this.crc32 = reader.readInt(4);
	        this.compressedSize = reader.readInt(4);
	        this.uncompressedSize = reader.readInt(4);
	        var fileNameLength = reader.readInt(2);
	        this.extraFieldsLength = reader.readInt(2);
	        this.fileCommentLength = reader.readInt(2);
	        this.diskNumberStart = reader.readInt(2);
	        this.internalFileAttributes = reader.readInt(2);
	        this.externalFileAttributes = reader.readInt(4);
	        this.localHeaderOffset = reader.readInt(4);
	
	        if (this.isEncrypted()) {
	            throw new Error("Encrypted zip are not supported");
	        }
	
	        // will be read in the local part, see the comments there
	        reader.skip(fileNameLength);
	        this.readExtraFields(reader);
	        this.parseZIP64ExtraField(reader);
	        this.fileComment = reader.readData(this.fileCommentLength);
	    },
	
	    /**
	     * Parse the external file attributes and get the unix/dos permissions.
	     */
	    processAttributes: function () {
	        this.unixPermissions = null;
	        this.dosPermissions = null;
	        var madeBy = this.versionMadeBy >> 8;
	
	        // Check if we have the DOS directory flag set.
	        // We look for it in the DOS and UNIX permissions
	        // but some unknown platform could set it as a compatibility flag.
	        this.dir = this.externalFileAttributes & 0x0010 ? true : false;
	
	        if(madeBy === MADE_BY_DOS) {
	            // first 6 bits (0 to 5)
	            this.dosPermissions = this.externalFileAttributes & 0x3F;
	        }
	
	        if(madeBy === MADE_BY_UNIX) {
	            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;
	            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);
	        }
	
	        // fail safe : if the name ends with a / it probably means a folder
	        if (!this.dir && this.fileNameStr.slice(-1) === '/') {
	            this.dir = true;
	        }
	    },
	
	    /**
	     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
	     * @param {DataReader} reader the reader to use.
	     */
	    parseZIP64ExtraField: function(reader) {
	
	        if (!this.extraFields[0x0001]) {
	            return;
	        }
	
	        // should be something, preparing the extra reader
	        var extraReader = readerFor(this.extraFields[0x0001].value);
	
	        // I really hope that these 64bits integer can fit in 32 bits integer, because js
	        // won't let us have more.
	        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
	            this.uncompressedSize = extraReader.readInt(8);
	        }
	        if (this.compressedSize === utils.MAX_VALUE_32BITS) {
	            this.compressedSize = extraReader.readInt(8);
	        }
	        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
	            this.localHeaderOffset = extraReader.readInt(8);
	        }
	        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
	            this.diskNumberStart = extraReader.readInt(4);
	        }
	    },
	    /**
	     * Read the central part of a zip file and add the info in this object.
	     * @param {DataReader} reader the reader to use.
	     */
	    readExtraFields: function(reader) {
	        var end = reader.index + this.extraFieldsLength,
	            extraFieldId,
	            extraFieldLength,
	            extraFieldValue;
	
	        if (!this.extraFields) {
	            this.extraFields = {};
	        }
	
	        while (reader.index < end) {
	            extraFieldId = reader.readInt(2);
	            extraFieldLength = reader.readInt(2);
	            extraFieldValue = reader.readData(extraFieldLength);
	
	            this.extraFields[extraFieldId] = {
	                id: extraFieldId,
	                length: extraFieldLength,
	                value: extraFieldValue
	            };
	        }
	    },
	    /**
	     * Apply an UTF8 transformation if needed.
	     */
	    handleUTF8: function() {
	        var decodeParamType = support.uint8array ? "uint8array" : "array";
	        if (this.useUTF8()) {
	            this.fileNameStr = utf8.utf8decode(this.fileName);
	            this.fileCommentStr = utf8.utf8decode(this.fileComment);
	        } else {
	            var upath = this.findExtraFieldUnicodePath();
	            if (upath !== null) {
	                this.fileNameStr = upath;
	            } else {
	                // ASCII text or unsupported code page
	                var fileNameByteArray =  utils.transformTo(decodeParamType, this.fileName);
	                this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);
	            }
	
	            var ucomment = this.findExtraFieldUnicodeComment();
	            if (ucomment !== null) {
	                this.fileCommentStr = ucomment;
	            } else {
	                // ASCII text or unsupported code page
	                var commentByteArray =  utils.transformTo(decodeParamType, this.fileComment);
	                this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);
	            }
	        }
	    },
	
	    /**
	     * Find the unicode path declared in the extra field, if any.
	     * @return {String} the unicode path, null otherwise.
	     */
	    findExtraFieldUnicodePath: function() {
	        var upathField = this.extraFields[0x7075];
	        if (upathField) {
	            var extraReader = readerFor(upathField.value);
	
	            // wrong version
	            if (extraReader.readInt(1) !== 1) {
	                return null;
	            }
	
	            // the crc of the filename changed, this field is out of date.
	            if (crc32fn(this.fileName) !== extraReader.readInt(4)) {
	                return null;
	            }
	
	            return utf8.utf8decode(extraReader.readData(upathField.length - 5));
	        }
	        return null;
	    },
	
	    /**
	     * Find the unicode comment declared in the extra field, if any.
	     * @return {String} the unicode comment, null otherwise.
	     */
	    findExtraFieldUnicodeComment: function() {
	        var ucommentField = this.extraFields[0x6375];
	        if (ucommentField) {
	            var extraReader = readerFor(ucommentField.value);
	
	            // wrong version
	            if (extraReader.readInt(1) !== 1) {
	                return null;
	            }
	
	            // the crc of the comment changed, this field is out of date.
	            if (crc32fn(this.fileComment) !== extraReader.readInt(4)) {
	                return null;
	            }
	
	            return utf8.utf8decode(extraReader.readData(ucommentField.length - 5));
	        }
	        return null;
	    }
	};
	module.exports = ZipEntry;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const check = __webpack_require__(24);
	const download = (filename, type, source) => {
	};
	exports.downloadAction = ({ input: { filename, mime, content } }) => {
	    const el = document.createElement('a');
	    el.setAttribute('href', `data:${mime};charset=utf-8;base64,` + content);
	    el.setAttribute('download', filename);
	    el.style.display = 'none';
	    document.body.appendChild(el);
	    el.click();
	    document.body.removeChild(el);
	};
	exports.downloadAction['async'] = true;
	exports.downloadAction['input'] =
	    { filename: check.string,
	        mime: check.string,
	        content: check.string // base64 encoded
	    };


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const moveAction_1 = __webpack_require__(250);
	exports.move = [moveAction_1.moveAction // no need to throttle ( 10, [ moveAction ] )
	];


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const GraphHelper_1 = __webpack_require__(25);
	const NodeHelper_1 = __webpack_require__(26);
	const movep = ['$dragdrop', 'move'];
	const dropp = ['$dragdrop', 'drop'];
	const dragp = ['$dragdrop', 'drag'];
	const nextNodeId = NodeHelper_1.NodeHelper.nextNodeId;
	exports.moveAction = ({ state, input, output }) => {
	    const move = input.move;
	    const drag = state.get(dragp);
	    const { target, clientPos } = move;
	    const copy = drag.copy || move.copy;
	    // If target is not set = no drop operation
	    let drop = state.get(dropp);
	    if (target && target !== '') {
	        let [ownerType, nodeId, apos] = target.split('-');
	        if ((drop && target === drop.target) || nodeId === 'drop') {
	        }
	        else if (ownerType === 'library') {
	            if (drag.ownerType === 'library') {
	                // abort
	                drop = null;
	            }
	            else {
	                // drop on library
	                state.set(['$factory', 'pane', 'library'], true);
	                drop =
	                    { target,
	                        ownerType
	                    };
	            }
	        }
	        else {
	            // changed
	            let graph;
	            if (drag.ownerType === ownerType && !copy) {
	                // when dropping on drag origin, we use rest graph
	                graph = drag.rgraph;
	            }
	            else {
	                graph = state.get([ownerType, 'graph']);
	            }
	            let newId = nextNodeId(graph.nodesById);
	            let pos = parseInt(apos);
	            let parentId;
	            const child = drag.dgraph;
	            if (apos) {
	                // should have a way to set nodeId to 'drop' here or mark as ghost...
	                graph = GraphHelper_1.GraphHelper.insert(graph, nodeId, pos, child);
	                nodeId = null;
	            }
	            else {
	                // find node in graph
	                const node = graph.nodesById[nodeId];
	                if (!node) {
	                    // drag move happens before proper ui update
	                    return;
	                }
	                parentId = node.parent;
	                if (parentId) {
	                    const parent = graph.nodesById[parentId];
	                    pos = parent.children.indexOf(nodeId);
	                    graph = GraphHelper_1.GraphHelper.slip(graph, parent.id, pos, child);
	                }
	                else {
	                }
	            }
	            // TODO: we could save the operation so that we have live preview
	            // of the operation.
	            // eventual drop operation
	            drop =
	                { target,
	                    ghostId: newId,
	                    nodeId,
	                    graph,
	                    ownerType,
	                    copy
	                };
	        }
	    }
	    else {
	        // no target = abort
	        drop = null;
	    }
	    state.set(dropp, drop);
	    state.set(movep, move);
	};


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(97));
	const Model = __webpack_require__(79);
	const add_1 = __webpack_require__(252);
	const name_1 = __webpack_require__(254);
	const remove_1 = __webpack_require__(255);
	const select_1 = __webpack_require__(257);
	const CurrentScene = Model.monkey({ cursors: { sceneById: ['data', 'scene'],
	        id: ['$sceneId']
	    },
	    get(data) {
	        const sceneById = data.sceneById || {};
	        return sceneById[data.id];
	    }
	});
	exports.Scene = (options = {}) => {
	    return (module, controller) => {
	        module.addState(CurrentScene);
	        module.addSignals({ add: add_1.add,
	            name: name_1.name,
	            remove: remove_1.remove,
	            select: select_1.select
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const addAction_1 = __webpack_require__(253);
	const save_1 = __webpack_require__(76);
	const copy = __webpack_require__(81);
	exports.add = [addAction_1.addAction,
	    copy('input:/_id', 'state:/$sceneId'),
	    ...save_1.save
	];


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Scene_1 = __webpack_require__(251);
	exports.addAction = ({ state, input: {  }, output }) => {
	    const scene = Scene_1.SceneHelper.create();
	    const docs = [scene];
	    // This is a flag that will set name editing after db object
	    // is selected.
	    state.set(['$factory', 'editing'], scene._id);
	    // add to project
	    const project = state.get(['project']);
	    const scenes = project.scenes || [];
	    const list = [...scenes, scene._id];
	    docs.push(Object.assign({}, project, { scenes: list }));
	    // we set _id for select operation
	    output({ docs, _id: scene._id });
	};


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const saveDoc_1 = __webpack_require__(102);
	const set = __webpack_require__(60);
	exports.name = [set('output:/type', 'scene'),
	    set('output:/key', 'name'),
	    set('state:/$factory.scene.close', true),
	    ...saveDoc_1.saveDoc
	];


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const removeAction_1 = __webpack_require__(256);
	const save_1 = __webpack_require__(76);
	const Status_1 = __webpack_require__(57);
	exports.remove = [removeAction_1.removeAction,
	    { success: [...save_1.save],
	        error: [Status_1.status]
	    }
	];


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const _1 = __webpack_require__(251);
	exports.removeAction = ({ state, input: { _id }, output }) => {
	    // clear modal
	    state.set(['$factory', 'modal', 'active'], false);
	    // clear options pane
	    state.set(['$factory', 'pane', 'scene'], false);
	    if (!_id) {
	        output.error({ status: { type: 'error', message: 'No _id cannot delete scene' }
	        });
	        return;
	    }
	    const doc = state.get(['data', 'scene', _id]);
	    if (!doc) {
	        output.error({ status: { type: 'error', message: 'Cannot delete unselected scene.' }
	        });
	        return;
	    }
	    const sceneById = state.get(['data', 'scene']);
	    const docs = [];
	    // Remove ref in parent
	    const parent = state.get(['project']);
	    // Find current selection in ordered scenes
	    const sortedscenes = [...parent.scenes];
	    sortedscenes.sort((a, b) => sceneById[a].name > sceneById[b].name ? 1 : -1);
	    const oldidx = sortedscenes.indexOf(doc._id);
	    const scenes = sortedscenes.filter((id) => id !== doc._id);
	    const selidx = oldidx >= scenes.length ?
	        scenes.length - 1 : oldidx;
	    const sceneId = scenes[selidx];
	    // Change parent
	    docs.push(Object.assign({}, parent, { scenes }));
	    const user = state.get(['user']);
	    const newScene = sceneById[sceneId];
	    // Select new scene
	    docs.push(_1.SceneHelper.select(state, user, newScene));
	    // Remove element
	    docs.push(Object.assign({}, doc, { _deleted: true }));
	    // Remove graph
	    const graph = doc.graph;
	    if (graph) {
	        const nodes = graph.nodes;
	    }
	    output.success({ docs });
	};


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const copy = __webpack_require__(81);
	exports.select = [copy('input:/_id', 'state:/$sceneId')
	];


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const Model = __webpack_require__(79);
	const githubLibraryGet_1 = __webpack_require__(259);
	const libraryGithubPath_1 = __webpack_require__(261);
	const libraryGithubToken_1 = __webpack_require__(262);
	const name_1 = __webpack_require__(263);
	const defaultUser = { _id: 'gaspard' //makeId ()
	    ,
	    type: 'user',
	    name: 'New user',
	    projectId: null,
	    blockId: null,
	    sceneId: null
	};
	const CurrentUser = Model.monkey({ cursors: { userById: ['data', 'user'],
	        id: ['$auth', 'userId']
	    },
	    get(data) {
	        const userById = data.userById || {};
	        return userById[data.id || 'gaspard']
	            || defaultUser;
	    }
	});
	exports.User = (options = {}) => {
	    return (module, controller) => {
	        module.addState(CurrentUser);
	        module.addSignals({ name: name_1.name,
	            githubLibraryGet: githubLibraryGet_1.githubLibraryGet,
	            libraryGithubPath: libraryGithubPath_1.libraryGithubPath,
	            libraryGithubToken: libraryGithubToken_1.libraryGithubToken
	        });
	        return {}; // meta information
	    };
	};


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const githubLibraryGetAction_1 = __webpack_require__(260);
	const Status_1 = __webpack_require__(57);
	const copy = __webpack_require__(81);
	exports.githubLibraryGet = [githubLibraryGetAction_1.githubLibraryGetAction,
	    { success: [copy('input:/', 'state:/github')],
	        error: [Status_1.status]
	    }
	];


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const LibraryHelper_1 = __webpack_require__(160);
	const download = (filename, type, source) => {
	    const el = document.createElement('a');
	    el.setAttribute('href', `data:${type};charset=utf-8;base64,` + source);
	    el.setAttribute('download', filename);
	    el.style.display = 'none';
	    document.body.appendChild(el);
	    el.click();
	    document.body.removeChild(el);
	};
	exports.githubLibraryGetAction = ({ state, output }) => {
	    const user = state.get(['user']);
	    const libpath = user.libraryGithubPath;
	    const token = user.libraryGithubToken;
	    if (libpath && token) {
	    }
	    const library = state.get(['data', 'component']);
	    LibraryHelper_1.LibraryHelper.zip(library, (source) => {
	        download('library.zip', 'application/zip', source);
	    });
	};
	// githubLibraryGetAction [ 'async' ] = true


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const saveDoc_1 = __webpack_require__(102);
	const set = __webpack_require__(60);
	exports.libraryGithubPath = [set('output:/type', 'user'),
	    set('output:/key', 'libraryGithubPath'),
	    ...saveDoc_1.saveDoc
	];


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const saveDoc_1 = __webpack_require__(102);
	const set = __webpack_require__(60);
	exports.libraryGithubToken = [set('output:/type', 'user'),
	    set('output:/key', 'libraryGithubToken'),
	    ...saveDoc_1.saveDoc
	];


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const saveDoc_1 = __webpack_require__(102);
	const set = __webpack_require__(60);
	exports.name = [set('output:/type', 'user'),
	    set('output:/key', 'name'),
	    ...saveDoc_1.saveDoc
	];


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(265));
	__export(__webpack_require__(266));
	const changed_1 = __webpack_require__(267);
	exports.Sync = (options = {}) => {
	    return (module, controller) => {
	        module.addState({ status: 'offline'
	        });
	        module.addSignals({ changed: changed_1.changed
	        });
	        // SyncHelper.start ( { controller, db } )
	        return {}; // meta information
	    };
	};


/***/ },
/* 265 */
/***/ function(module, exports) {

	"use strict";
	exports.start = [];


/***/ },
/* 266 */
/***/ function(module, exports) {

	"use strict";
	exports.stop = [];


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const changedAction_1 = __webpack_require__(268);
	const status_1 = __webpack_require__(3);
	exports.changed = [changedAction_1.changedAction,
	    { success: [], error: [status_1.status] }
	];


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const check = __webpack_require__(24);
	exports.changedAction = ({ state, input: { type, message }, output }) => {
	    if (type === 'error') {
	        output.error({ status: { type, message } });
	    }
	    else {
	        state.set(['$sync', 'status'], type);
	        output.success();
	    }
	};
	// Cerebral type checking
	exports.changedAction['input'] = (k) => (check.string(k.type)
	    && check.maybe.string(k.message));


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var MODULE = 'cerebral-module-router'
	var isObject = __webpack_require__(270)
	var get = __webpack_require__(271)
	
	var Mapper = __webpack_require__(274)
	var addressbar
	try {
	  addressbar = __webpack_require__(280)
	} catch (e) {
	  addressbar = {
	    pathname: '/',
	    value: '',
	    origin: '',
	    on: function () {},
	    removeListener: function () {}
	  }
	}
	
	module.exports = Router
	
	function Router (routesConfig, options) {
	  options = options || {}
	
	  if (!routesConfig) {
	    throw new Error('Cerebral router - Routes configuration wasn\'t provided.')
	  } else {
	    routesConfig = flattenConfig(routesConfig)
	  }
	
	  if (!options.baseUrl && options.onlyHash) {
	    // autodetect baseUrl
	    options.baseUrl = addressbar.pathname
	  }
	  options.baseUrl = (options.baseUrl || '') + (options.onlyHash ? '#' : '')
	  var urlMapper = Mapper(options.mapper)
	
	  return function init (module, controller) {
	    var signals = getRoutableSignals(routesConfig, controller.getSignals())
	    var rememberedUrl
	    var initialSignals
	
	    function setRememberedUrl () {
	      addressbar.value = rememberedUrl
	      rememberedUrl = null
	    }
	
	    function onUrlChange (event) {
	      var url = event ? event.target.value : addressbar.value
	      url = url.replace(addressbar.origin, '')
	
	      if (options.onlyHash && !~url.indexOf('#')) {
	        // treat hash absense as root route
	        url = url + '#/'
	      }
	
	      // check if url should be routed
	      if (url.indexOf(options.baseUrl) === 0) {
	        var map = urlMapper.map(url.replace(options.baseUrl, ''), routesConfig)
	
	        if (map) {
	          event && event.preventDefault()
	          addressbar.value = url
	
	          signals[map.match].signal(map.values, {
	            isRouted: true
	          })
	        } else {
	          if (options.allowEscape) return
	
	          event && event.preventDefault()
	          console.warn('Cerebral router - No route matched "' + url + '" url, navigation was prevented. ' +
	            'Please verify url or catch unmatched routes with a "/*" route.')
	        }
	      }
	    }
	
	    function onPredefinedSignal (event) {
	      var signal = signals[event.signal.name]
	      if (signal) {
	        if (!rememberedUrl) setTimeout(setRememberedUrl)
	
	        var route = signal.route
	        var input = event.signal.input || {}
	        rememberedUrl = options.baseUrl + urlMapper.stringify(route, input)
	      }
	    }
	
	    function onSignalStart (event) {
	      if (Array.isArray(initialSignals)) {
	        initialSignals.push(event.signal)
	      }
	
	      var signal = signals[event.signal.name]
	      if (signal && (!event.signal.isRouted && !(event.options && event.options.isRouted))) {
	        var route = signal.route
	        var input = event.signal.input || event.payload || {}
	        addressbar.value = options.baseUrl + urlMapper.stringify(route, input)
	      }
	    }
	
	    function onSignalEnd (event) {
	      if (Array.isArray(initialSignals)) {
	        initialSignals.splice(initialSignals.indexOf(event.signal), 1)
	
	        if (initialSignals.length === 0) {
	          controller.removeListener('signalEnd', onSignalEnd)
	          initialSignals = null
	          if (typeof rememberedUrl === 'undefined') setTimeout(onUrlChange)
	        }
	      }
	    }
	
	    function onModulesLoaded (event) {
	      if (rememberedUrl) return
	      if (Array.isArray(initialSignals) && initialSignals.length === 0) {
	        setTimeout(onUrlChange)
	        initialSignals = null
	      }
	    }
	
	    var services = {
	      trigger: function trigger (url) {
	        if (url) addressbar.value = url
	        onUrlChange()
	      },
	
	      detach: function detach () {
	        addressbar.removeListener('change', onUrlChange)
	      },
	
	      getUrl: function getUrl () {
	        return addressbar.value.replace(addressbar.origin + options.baseUrl, '')
	      },
	
	      getSignalUrl: function getSignalUrl (signalName, input) {
	        if (signals[signalName]) {
	          var route = signals[signalName].route
	          return options.baseUrl + urlMapper.stringify(route, input || {})
	        } else {
	          return false
	        }
	      },
	
	      redirect: function redirect (url, params) {
	        params = params || {}
	        params.replace = (typeof params.replace === 'undefined') ? true : params.replace
	
	        addressbar.value = {
	          value: options.baseUrl + url,
	          replace: params.replace
	        }
	
	        setTimeout(onUrlChange)
	      },
	
	      redirectToSignal: function redirectToSignal (signalName, payload) {
	        var signal = get(signals, signalName)
	        if (signal) {
	          setTimeout(signal.signal.bind(null, payload))
	        } else {
	          console.warn('Cerebral router - signal ' + signalName + ' is not bound to route. Redirect wouldn\'t happen.')
	        }
	      }
	    }
	
	    module.alias(MODULE)
	    module.addServices(services)
	    addressbar.on('change', onUrlChange)
	    controller.on('predefinedSignal', onPredefinedSignal)
	    controller.on('signalStart', onSignalStart)
	
	    if (!options.preventAutostart) {
	      initialSignals = []
	      controller.on('signalEnd', onSignalEnd)
	      controller.on('modulesLoaded', onModulesLoaded)
	    }
	
	    if (controller.addContextProvider) {
	      var context = {}
	      context[MODULE] = {
	        path: module.path
	      }
	      controller.addContextProvider(context)
	    }
	  }
	}
	
	var getRouterServices = function (context) {
	  var modulePath = context[MODULE] ? context[MODULE].path : context.modules[MODULE].path
	  return modulePath.reduce(function (services, key) {
	    return services[key]
	  }, context.services)
	}
	
	Router.redirect = function (url, params) {
	  function action (context) {
	    var services = getRouterServices(context)
	
	    return services.redirect(url, params)
	  }
	
	  action.displayName = 'redirect(' + url + ')'
	
	  return action
	}
	
	function flattenConfig (config, prev, flatten) {
	  flatten = flatten || {}
	  prev = prev || ''
	
	  Object.keys(config).forEach(function (key) {
	    if (isObject(config[key])) {
	      flattenConfig(config[key], prev + key, flatten)
	    } else {
	      flatten[prev + key] = config[key]
	    }
	  })
	
	  return flatten
	}
	
	function getRoutableSignals (config, signals) {
	  var routableSignals = {}
	
	  Object.keys(config).forEach(function (route) {
	    var signal = get(signals, config[route])
	    if (!signal) {
	      throw new Error('Cerebral router - The signal "' + config[route] +
	      '" for the route "' + route + '" does not exist. ' +
	      'Make sure that ' + MODULE + ' loaded after all modules with routable signals.')
	    }
	    if (routableSignals[config[route]]) {
	      throw new Error('Cerebral router - The signal "' + config[route] +
	      '" has already been bound to route "' + route +
	      '". Create a new signal and reuse actions instead if needed.')
	    }
	    routableSignals[config[route]] = {
	      route: route,
	      signal: signal
	    }
	  })
	
	  return routableSignals
	}


/***/ },
/* 270 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.2 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	
	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	var stringToPath = __webpack_require__(272);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);
	
	  var index = 0,
	      length = path.length;
	
	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}
	
	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}
	
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}
	
	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @type {Function}
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}
	
	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is used in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}
	
	module.exports = get;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	var baseToString = __webpack_require__(273);
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';
	
	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	
	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;
	
	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};
	
	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	  ? exports
	  : undefined;
	
	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	  ? module
	  : undefined;
	
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);
	
	/** Detect free variable `self`. */
	var freeSelf = checkGlobal(objectTypes[typeof self] && self);
	
	/** Detect free variable `window`. */
	var freeWindow = checkGlobal(objectTypes[typeof window] && window);
	
	/** Detect `this` as the global object. */
	var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
	
	/**
	 * Used as a reference to the global object.
	 *
	 * The `this` value is used if it's the global object to avoid Greasemonkey's
	 * restricted `window` object, otherwise the `window` object is used.
	 */
	var root = freeGlobal ||
	  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	    freeSelf || thisGlobal || Function('return this')();
	
	/**
	 * Checks if `value` is a global object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	 */
	function checkGlobal(value) {
	  return (value && value.Object === Object) ? value : null;
	}
	
	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}
	
	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/** Built-in value references. */
	var splice = arrayProto.splice;
	
	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map'),
	    nativeCreate = getNative(Object, 'create');
	
	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}
	
	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}
	
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}
	
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}
	
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}
	
	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;
	
	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}
	
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}
	
	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  return index < 0 ? undefined : data[index][1];
	}
	
	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}
	
	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	
	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;
	
	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}
	
	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}
	
	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}
	
	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}
	
	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}
	
	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;
	
	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	
	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object[key];
	  return isNative(value) ? value : undefined;
	}
	
	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}
	
	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoize(function(string) {
	  var result = [];
	  toString(string).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});
	
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}
	
	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;
	
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}
	
	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;
	
	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array and weak map constructors,
	  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}
	
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}
	
	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}
	
	module.exports = stringToPath;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204)(module), (function() { return this; }())))

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};
	
	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	  ? exports
	  : undefined;
	
	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	  ? module
	  : undefined;
	
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);
	
	/** Detect free variable `self`. */
	var freeSelf = checkGlobal(objectTypes[typeof self] && self);
	
	/** Detect free variable `window`. */
	var freeWindow = checkGlobal(objectTypes[typeof window] && window);
	
	/** Detect `this` as the global object. */
	var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
	
	/**
	 * Used as a reference to the global object.
	 *
	 * The `this` value is used if it's the global object to avoid Greasemonkey's
	 * restricted `window` object, otherwise the `window` object is used.
	 */
	var root = freeGlobal ||
	  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	    freeSelf || thisGlobal || Function('return this')();
	
	/**
	 * Checks if `value` is a global object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	 */
	function checkGlobal(value) {
	  return (value && value.Object === Object) ? value : null;
	}
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}
	
	module.exports = baseToString;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(204)(module), (function() { return this; }())))

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var mapper = __webpack_require__(275)
	var compileRoute = __webpack_require__(276)
	
	module.exports = function urlMapper (options) {
	  return mapper(compileRoute, options)
	}


/***/ },
/* 275 */
/***/ function(module, exports) {

	module.exports = function mapper (compileFn, options) {
	  if (typeof compileFn !== 'function') throw new Error('URL Mapper - function to compile a route expected as first argument')
	
	  options = options || {}
	  var cache = {}
	
	  function getCompiledRoute (route) {
	    if (!cache[route]) {
	      cache[route] = compileFn(route, options)
	    }
	
	    return cache[route]
	  }
	
	  function parse (route, url) {
	    if (arguments.length < 2) throw new Error('URL Mapper - parse method expects 2 arguments')
	    return getCompiledRoute(route).parse(url)
	  }
	
	  function stringify (route, values) {
	    if (arguments.length < 2) throw new Error('URL Mapper - stringify method expects 2 arguments')
	    return getCompiledRoute(route).stringify(values)
	  }
	
	  function map (url, routes) {
	    if (arguments.length < 2) throw new Error('URL Mapper - map method expects 2 arguments')
	    for (var route in routes) {
	      var compiled = getCompiledRoute(route)
	      var values = compiled.parse(url)
	      if (values) {
	        var match = routes[route]
	
	        return {
	          route: route,
	          match: match,
	          values: values
	        }
	      }
	    }
	  }
	
	  return {
	    parse: parse,
	    stringify: stringify,
	    map: map
	  }
	}


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	var URLON = __webpack_require__(277)
	var pathToRegexp = __webpack_require__(278)
	
	function compileRoute (route, options) {
	  var re
	  var compiled
	  var keys = []
	  var querySeparator = options.querySeparator || '?'
	
	  re = pathToRegexp(route, keys)
	  keys = keys.map(function (key) { return key.name.toString() })
	  compiled = pathToRegexp.compile(route)
	
	  return {
	    parse: function (url) {
	      var path = url
	      var result = {}
	
	      if (~path.indexOf('#') && !~querySeparator.indexOf('#')) {
	        path = path.split('#')[0]
	      }
	
	      if (~path.indexOf(querySeparator)) {
	        if (options.query) {
	          var queryString = '_' + path.slice(path.indexOf(querySeparator) + querySeparator.length)
	          result = URLON.parse(queryString)
	        }
	        path = path.split(querySeparator)[0]
	      }
	
	      var match = re.exec(path)
	      if (!match) return null
	
	      for (var i = 1; i < match.length; ++i) {
	        var key = keys[i - 1]
	        var value = decodeURIComponent(match[i])
	        if (value[0] === ':') {
	          result[key] = URLON.parse(value)
	        } else {
	          result[key] = value
	        }
	      }
	
	      return result
	    },
	
	    stringify: function (values) {
	      var pathParams = {}
	      var queryParams = {}
	
	      Object.keys(values).forEach(function (key) {
	        if (~keys.indexOf(key)) {
	          switch (typeof values[key]) {
	            case 'boolean':
	            case 'number':
	              pathParams[key] = URLON.stringify(values[key])
	              break
	
	            case 'object':
	              throw new Error('URL Mapper - objects are not allowed to be stringified as part of path')
	
	            default:
	              pathParams[key] = values[key]
	          }
	        } else {
	          if (typeof values[key] !== 'undefined') queryParams[key] = values[key]
	        }
	      })
	
	      var path = compiled(pathParams)
	      var queryString = ''
	
	      if (options.query) {
	        if (Object.keys(queryParams).length) {
	          queryString = querySeparator + URLON.stringify(queryParams).slice(1)
	        }
	      }
	
	      return path + queryString
	    }
	  }
	}
	
	module.exports = compileRoute


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var URLON = {
		stringify: function (input) {
			function encodeString (str) {
				return encodeURI(str.replace(/([=:&@_;\/])/g, '/$1'));
			}
	
			function stringify (input) {
				// Number or Boolean or Null
				if (typeof input === 'number' || input === true || input === false || input === null) {
					return ':' + input;
				}
				// Array
				if (input instanceof Array) {
					var res = [];
					for (var i = 0; i < input.length; ++i) {
						res.push(stringify(input[i]));
					}
					return '@' + res.join('&') + ';';
				}
				// Object
				if (typeof input === 'object') {
					var res = [];
					for (var key in input) {
						res.push(encodeString(key) + stringify(input[key]));
					}
					return '_' + res.join('&') + ';';
				}
				// String or undefined
				return '=' + encodeString((input !== null ? (input !== undefined ? input : "undefined") : "null").toString());
			}
	
			return stringify(input).replace(/;+$/g, '');
		},
	
		parse: function (str) {
			var pos = 0;
			str = decodeURI(str);
	
			function read() {
				var token = '';
				for (; pos !== str.length; ++pos) {
					if (str.charAt(pos) === '/') {
						pos += 1;
						if (pos === str.length) {
							token += ';';
							break;
						}
					} else if (str.charAt(pos).match(/[=:&@_;]/)) {
						break;
					}
					token += str.charAt(pos);
				}
				return token;
			}
	
			function parse() {
				var type = str.charAt(pos++);
	
				// String
				if (type === '=') {
					return read();
				}
				// Number or Boolean
				if (type === ':') {
					var value = read();
					if (value === 'true') {
						return true;
					}
					if (value === 'false') {
						return false;
					}
					value = parseFloat(value);
					return isNaN(value) ? null : value;
				}
				// Array
				if (type === '@') {
					var res = [];
					loop: {
						if (pos >= str.length || str.charAt(pos) === ';') {
							break loop;
						}
						while (1) {
							res.push(parse());
							if (pos >= str.length || str.charAt(pos) === ';') {
								break loop;
							}
							pos += 1;
						}
					}
					pos += 1;
					return res;
				}
				// Object
				if (type === '_') {
					var res = {};
					loop: {
						if (pos >= str.length || str.charAt(pos) === ';') {
							break loop;
						}
						while (1) {
							var name = read();
							res[name] = parse();
							if (pos >= str.length || str.charAt(pos) === ';') {
								break loop;
							}
							pos += 1;
						}
					}
					pos += 1;
					return res;
				}
				// Error
				throw 'Unexpected char ' + type;
			}
	
			return parse();
		}
	};
	
	if (true) {
		exports.stringify = URLON.stringify;
		exports.parse = URLON.parse;
	}


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var isarray = __webpack_require__(279)
	
	/**
	 * Expose `pathToRegexp`.
	 */
	module.exports = pathToRegexp
	module.exports.parse = parse
	module.exports.compile = compile
	module.exports.tokensToFunction = tokensToFunction
	module.exports.tokensToRegExp = tokensToRegExp
	
	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g')
	
	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string} str
	 * @return {!Array}
	 */
	function parse (str) {
	  var tokens = []
	  var key = 0
	  var index = 0
	  var path = ''
	  var res
	
	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0]
	    var escaped = res[1]
	    var offset = res.index
	    path += str.slice(index, offset)
	    index = offset + m.length
	
	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1]
	      continue
	    }
	
	    var next = str[index]
	    var prefix = res[2]
	    var name = res[3]
	    var capture = res[4]
	    var group = res[5]
	    var modifier = res[6]
	    var asterisk = res[7]
	
	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path)
	      path = ''
	    }
	
	    var partial = prefix != null && next != null && next !== prefix
	    var repeat = modifier === '+' || modifier === '*'
	    var optional = modifier === '?' || modifier === '*'
	    var delimiter = res[2] || '/'
	    var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?')
	
	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: escapeGroup(pattern)
	    })
	  }
	
	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index)
	  }
	
	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path)
	  }
	
	  return tokens
	}
	
	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str) {
	  return tokensToFunction(parse(str))
	}
	
	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}
	
	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}
	
	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length)
	
	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
	    }
	  }
	
	  return function (obj, opts) {
	    var path = ''
	    var data = obj || {}
	    var options = opts || {}
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent
	
	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i]
	
	      if (typeof token === 'string') {
	        path += token
	
	        continue
	      }
	
	      var value = data[token.name]
	      var segment
	
	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix
	          }
	
	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }
	
	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }
	
	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }
	
	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j])
	
	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }
	
	          path += (j === 0 ? token.prefix : token.delimiter) + segment
	        }
	
	        continue
	      }
	
	      segment = token.asterisk ? encodeAsterisk(value) : encode(value)
	
	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }
	
	      path += token.prefix + segment
	    }
	
	    return path
	  }
	}
	
	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1')
	}
	
	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}
	
	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys
	  return re
	}
	
	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}
	
	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g)
	
	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      })
	    }
	  }
	
	  return attachKeys(path, keys)
	}
	
	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = []
	
	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source)
	  }
	
	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))
	
	  return attachKeys(regexp, keys)
	}
	
	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  var tokens = parse(path)
	  var re = tokensToRegExp(tokens, options)
	
	  // Attach keys back to the regexp.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] !== 'string') {
	      keys.push(tokens[i])
	    }
	  }
	
	  return attachKeys(re, keys)
	}
	
	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}  tokens
	 * @param  {Object=} options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, options) {
	  options = options || {}
	
	  var strict = options.strict
	  var end = options.end !== false
	  var route = ''
	  var lastToken = tokens[tokens.length - 1]
	  var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken)
	
	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i]
	
	    if (typeof token === 'string') {
	      route += escapeString(token)
	    } else {
	      var prefix = escapeString(token.prefix)
	      var capture = '(?:' + token.pattern + ')'
	
	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*'
	      }
	
	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?'
	        } else {
	          capture = prefix + '(' + capture + ')?'
	        }
	      } else {
	        capture = prefix + '(' + capture + ')'
	      }
	
	      route += capture
	    }
	  }
	
	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?'
	  }
	
	  if (end) {
	    route += '$'
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithSlash ? '' : '(?=\\/|$)'
	  }
	
	  return new RegExp('^' + route, flags(options))
	}
	
	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  keys = keys || []
	
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys)
	    keys = []
	  } else if (!options) {
	    options = {}
	  }
	
	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }
	
	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }
	
	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}


/***/ },
/* 279 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/* global history */
	
	var URL = __webpack_require__(281)
	var EventEmitter = __webpack_require__(170).EventEmitter
	var instance = null
	
	// Check if IE history polyfill is added
	var location = window.history.location || window.location
	
	module.exports = (function () {
	  if (instance) {
	    return instance
	  }
	
	  var eventEmitter = new EventEmitter()
	
	  eventEmitter.addEventListener = eventEmitter.addListener
	  eventEmitter.removeEventListener = eventEmitter.removeListener
	
	  var initialUrl = location.href
	  var uri = URL(initialUrl)
	  var origin = uri.protocol + '//' + uri.host
	  var isPreventingDefault = false
	  var doReplace = false
	  var prevUrl = ''
	  // var linkClicked = false
	  var isEmitting = false
	  var setSyncUrl = false
	
	  var emitChange = function (url, event) {
	    eventEmitter.emit('change', {
	      preventDefault: function () {
	        event && event.preventDefault()
	        isPreventingDefault = true
	      },
	      target: {
	        value: url ? origin + url : location.href
	      }
	    })
	  }
	
	  var onUrlChange = function (type) {
	    return function (event) {
	      if (location.href === prevUrl) {
	        return
	      }
	
	      // Fixes bug where trailing slash is converted to normal url
	      if (location.href[location.href.length - 1] === '/') {
	        doReplace = true
	      }
	
	      isEmitting = true
	      emitChange()
	      isEmitting = false
	
	      if (!setSyncUrl && isPreventingDefault) {
	        history.replaceState({}, '', (prevUrl || initialUrl).replace(origin, ''))
	      }
	
	      prevUrl = location.href
	      isPreventingDefault = false
	      setSyncUrl = false
	      doReplace = false
	    }
	  }
	
	  // this hack resolves issue with safari
	  // see issue from Page JS for reference https://github.com/visionmedia/page.js/issues/213
	  // see also https://github.com/visionmedia/page.js/pull/240
	  if (document.readyState !== 'complete') {
	    // load event has not fired
	    global.addEventListener('load', function () {
	      setTimeout(function () {
	        global.addEventListener('popstate', onUrlChange('pop'), false)
	      }, 0)
	    }, false)
	  } else {
	    // load event has fired
	    global.addEventListener('popstate', onUrlChange('pop'), false)
	  }
	
	  Object.defineProperty(eventEmitter, 'value', {
	    get: function () {
	      return location.href
	    },
	    set: function (value) {
	      if (typeof value !== 'string') {
	        doReplace = Boolean(value.replace)
	        value = value.value
	      }
	
	      // If emitting a change we flag that we are setting
	      // a url based on the event being emitted
	      if (isEmitting) {
	        setSyncUrl = true
	      }
	
	      // Ensure full url
	      if (value.indexOf(origin) === -1) {
	        value = origin + value
	      }
	
	      // If it is same url, forget about it
	      if (value === location.href) {
	        return
	      }
	
	      // We might need to replace the url if we are fixing
	      // for example trailing slash issue
	      if (doReplace) {
	        history.replaceState({}, '', value.replace(origin, ''))
	        doReplace = false
	      } else {
	        history.pushState({}, '', value.replace(origin, ''))
	      }
	
	      prevUrl = location.href
	      isPreventingDefault = false
	    }
	  })
	
	  // expose URLUtils like API https://developer.mozilla.org/en-US/docs/Web/API/URLUtils
	  // thanks https://github.com/cofounders/urlutils for reference
	  Object.defineProperty(eventEmitter, 'origin', {
	    get: function () {
	      var uri = URL(location.href)
	      return uri.protocol + '//' + uri.host
	    }
	  })
	
	  Object.defineProperty(eventEmitter, 'protocol', {
	    get: function () {
	      return URL(location.href).protocol
	    }
	  })
	
	  Object.defineProperty(eventEmitter, 'port', {
	    get: function () {
	      return URL(location.href).port
	    }
	  })
	
	  Object.defineProperty(eventEmitter, 'hostname', {
	    get: function () {
	      return URL(location.href).hostname
	    }
	  })
	
	  Object.defineProperty(eventEmitter, 'pathname', {
	    get: function () {
	      return URL(location.href).pathname
	    }
	  })
	
	  Object.defineProperty(eventEmitter, 'hash', {
	    get: function () {
	      return URL(location.href).hash
	    }
	  })
	
	  /*
	    This code is from the Page JS source code. Amazing work on handling all
	    kinds of scenarios with hyperlinks, thanks!
	  */
	
	  var isSameOrigin = function (href) {
	    return (href && (href.indexOf(origin) === 0))
	  }
	
	  var getClickedHref = function (event) {
	    // check which button
	    if ((event.which === null ? event.button : event.which) !== 1) { return false }
	
	    // check for modifiers
	    if (event.metaKey || event.ctrlKey || event.shiftKey) { return false }
	    if (event.defaultPrevented) { return false }
	
	    // ensure link
	    var element = event.target
	    while (element && element.nodeName !== 'A') { element = element.parentNode }
	    if (!element || element.nodeName !== 'A') { return false }
	
	    // Ignore if tag has
	    // 1. "download" attribute
	    // 2. rel="external" attribute
	    if (element.hasAttribute('download') || element.getAttribute('rel') === 'external') { return false }
	
	    // Check for mailto: in the href
	    var href = element.getAttribute('href')
	    if (href && href.indexOf('mailto:') > -1) { return false }
	
	    // check target
	    if (element.target) { return false }
	
	    // x-origin
	    if (!isSameOrigin(element.href)) { return false }
	
	    return href
	  }
	
	  global.addEventListener(document.ontouchstart ? 'touchstart' : 'click', function (event) {
	    var href = getClickedHref(event)
	    if (href) {
	      // linkClicked = true
	      isEmitting = true
	      emitChange(href, event)
	      isEmitting = false
	      if (isPreventingDefault) {
	        // linkClicked = false
	      }
	      prevUrl = href
	      isPreventingDefault = false
	    }
	  })
	
	  instance = eventEmitter
	
	  return eventEmitter
	}())
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var required = __webpack_require__(282)
	  , lolcation = __webpack_require__(283)
	  , qs = __webpack_require__(284)
	  , relativere = /^\/(?!\/)/
	  , protocolre = /^([a-z0-9.+-]+:)?(\/\/)?(.*)$/i; // actual protocol is first match
	
	/**
	 * These are the parse instructions for the URL parsers, it informs the parser
	 * about:
	 *
	 * 0. The char it Needs to parse, if it's a string it should be done using
	 *    indexOf, RegExp using exec and NaN means set as current value.
	 * 1. The property we should set when parsing this value.
	 * 2. Indication if it's backwards or forward parsing, when set as number it's
	 *    the value of extra chars that should be split off.
	 * 3. Inherit from location if non existing in the parser.
	 * 4. `toLowerCase` the resulting value.
	 */
	var instructions = [
	  ['#', 'hash'],                        // Extract from the back.
	  ['?', 'query'],                       // Extract from the back.
	  ['/', 'pathname'],                    // Extract from the back.
	  ['@', 'auth', 1],                     // Extract from the front.
	  [NaN, 'host', undefined, 1, 1],       // Set left over value.
	  [/\:(\d+)$/, 'port'],                 // RegExp the back.
	  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
	];
	
	 /**
	 * @typedef ProtocolExtract
	 * @type Object
	 * @property {String} protocol Protocol matched in the URL, in lowercase
	 * @property {Boolean} slashes Indicates whether the protocol is followed by double slash ("//")
	 * @property {String} rest     Rest of the URL that is not part of the protocol
	 */
	
	 /**
	  * Extract protocol information from a URL with/without double slash ("//")
	  *
	  * @param  {String} address   URL we want to extract from.
	  * @return {ProtocolExtract}  Extracted information
	  * @private
	  */
	function extractProtocol(address) {
	  var match = protocolre.exec(address);
	  return {
	    protocol: match[1] ? match[1].toLowerCase() : '',
	    slashes: !!match[2],
	    rest: match[3] ? match[3] : ''
	  };
	}
	
	/**
	 * The actual URL instance. Instead of returning an object we've opted-in to
	 * create an actual constructor as it's much more memory efficient and
	 * faster and it pleases my CDO.
	 *
	 * @constructor
	 * @param {String} address URL we want to parse.
	 * @param {Object|String} location Location defaults for relative paths.
	 * @param {Boolean|Function} parser Parser for the query string.
	 * @api public
	 */
	function URL(address, location, parser) {
	  if (!(this instanceof URL)) {
	    return new URL(address, location, parser);
	  }
	
	  var relative = relativere.test(address)
	    , parse, instruction, index, key
	    , type = typeof location
	    , url = this
	    , i = 0;
	
	  //
	  // The following if statements allows this module two have compatibility with
	  // 2 different API:
	  //
	  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
	  //    where the boolean indicates that the query string should also be parsed.
	  //
	  // 2. The `URL` interface of the browser which accepts a URL, object as
	  //    arguments. The supplied object will be used as default values / fall-back
	  //    for relative paths.
	  //
	  if ('object' !== type && 'string' !== type) {
	    parser = location;
	    location = null;
	  }
	
	  if (parser && 'function' !== typeof parser) {
	    parser = qs.parse;
	  }
	
	  location = lolcation(location);
	
	  // extract protocol information before running the instructions
	  var extracted = extractProtocol(address);
	  url.protocol = extracted.protocol || location.protocol || '';
	  url.slashes = extracted.slashes || location.slashes;
	  address = extracted.rest;
	
	  for (; i < instructions.length; i++) {
	    instruction = instructions[i];
	    parse = instruction[0];
	    key = instruction[1];
	
	    if (parse !== parse) {
	      url[key] = address;
	    } else if ('string' === typeof parse) {
	      if (~(index = address.indexOf(parse))) {
	        if ('number' === typeof instruction[2]) {
	          url[key] = address.slice(0, index);
	          address = address.slice(index + instruction[2]);
	        } else {
	          url[key] = address.slice(index);
	          address = address.slice(0, index);
	        }
	      }
	    } else if (index = parse.exec(address)) {
	      url[key] = index[1];
	      address = address.slice(0, address.length - index[0].length);
	    }
	
	    url[key] = url[key] || (instruction[3] || ('port' === key && relative) ? location[key] || '' : '');
	
	    //
	    // Hostname, host and protocol should be lowercased so they can be used to
	    // create a proper `origin`.
	    //
	    if (instruction[4]) {
	      url[key] = url[key].toLowerCase();
	    }
	  }
	
	  //
	  // Also parse the supplied query string in to an object. If we're supplied
	  // with a custom parser as function use that instead of the default build-in
	  // parser.
	  //
	  if (parser) url.query = parser(url.query);
	
	  //
	  // We should not add port numbers if they are already the default port number
	  // for a given protocol. As the host also contains the port number we're going
	  // override it with the hostname which contains no port number.
	  //
	  if (!required(url.port, url.protocol)) {
	    url.host = url.hostname;
	    url.port = '';
	  }
	
	  //
	  // Parse down the `auth` for the username and password.
	  //
	  url.username = url.password = '';
	  if (url.auth) {
	    instruction = url.auth.split(':');
	    url.username = instruction[0] || '';
	    url.password = instruction[1] || '';
	  }
	
	  //
	  // The href is just the compiled result.
	  //
	  url.href = url.toString();
	}
	
	/**
	 * This is convenience method for changing properties in the URL instance to
	 * insure that they all propagate correctly.
	 *
	 * @param {String} prop          Property we need to adjust.
	 * @param {Mixed} value          The newly assigned value.
	 * @param {Boolean|Function} fn  When setting the query, it will be the function used to parse
	 *                               the query.
	 *                               When setting the protocol, double slash will be removed from
	 *                               the final url if it is true.
	 * @returns {URL}
	 * @api public
	 */
	URL.prototype.set = function set(part, value, fn) {
	  var url = this;
	
	  if ('query' === part) {
	    if ('string' === typeof value && value.length) {
	      value = (fn || qs.parse)(value);
	    }
	
	    url[part] = value;
	  } else if ('port' === part) {
	    url[part] = value;
	
	    if (!required(value, url.protocol)) {
	      url.host = url.hostname;
	      url[part] = '';
	    } else if (value) {
	      url.host = url.hostname +':'+ value;
	    }
	  } else if ('hostname' === part) {
	    url[part] = value;
	
	    if (url.port) value += ':'+ url.port;
	    url.host = value;
	  } else if ('host' === part) {
	    url[part] = value;
	
	    if (/\:\d+/.test(value)) {
	      value = value.split(':');
	      url.hostname = value[0];
	      url.port = value[1];
	    }
	  } else if ('protocol' === part) {
	    url.protocol = value;
	    url.slashes = !fn;
	  } else {
	    url[part] = value;
	  }
	
	  url.href = url.toString();
	  return url;
	};
	
	/**
	 * Transform the properties back in to a valid and full URL string.
	 *
	 * @param {Function} stringify Optional query stringify function.
	 * @returns {String}
	 * @api public
	 */
	URL.prototype.toString = function toString(stringify) {
	  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
	
	  var query
	    , url = this
	    , protocol = url.protocol;
	
	  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
	
	  var result = protocol + (url.slashes ? '//' : '');
	
	  if (url.username) {
	    result += url.username;
	    if (url.password) result += ':'+ url.password;
	    result += '@';
	  }
	
	  result += url.hostname;
	  if (url.port) result += ':'+ url.port;
	
	  result += url.pathname;
	
	  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
	  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;
	
	  if (url.hash) result += url.hash;
	
	  return result;
	};
	
	//
	// Expose the URL parser and some additional properties that might be useful for
	// others.
	//
	URL.qs = qs;
	URL.location = lolcation;
	module.exports = URL;


/***/ },
/* 282 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Check if we're required to add a port number.
	 *
	 * @see https://url.spec.whatwg.org/#default-port
	 * @param {Number|String} port Port number we need to check
	 * @param {String} protocol Protocol we need to check against.
	 * @returns {Boolean} Is it a default port for the given protocol
	 * @api private
	 */
	module.exports = function required(port, protocol) {
	  protocol = protocol.split(':')[0];
	  port = +port;
	
	  if (!port) return false;
	
	  switch (protocol) {
	    case 'http':
	    case 'ws':
	    return port !== 80;
	
	    case 'https':
	    case 'wss':
	    return port !== 443;
	
	    case 'ftp':
	    return port !== 21;
	
	    case 'gopher':
	    return port !== 70;
	
	    case 'file':
	    return false;
	  }
	
	  return port !== 0;
	};


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;
	
	/**
	 * These properties should not be copied or inherited from. This is only needed
	 * for all non blob URL's as a blob URL does not include a hash, only the
	 * origin.
	 *
	 * @type {Object}
	 * @private
	 */
	var ignore = { hash: 1, query: 1 }
	  , URL;
	
	/**
	 * The location object differs when your code is loaded through a normal page,
	 * Worker or through a worker using a blob. And with the blobble begins the
	 * trouble as the location object will contain the URL of the blob, not the
	 * location of the page where our code is loaded in. The actual origin is
	 * encoded in the `pathname` so we can thankfully generate a good "default"
	 * location from it so we can generate proper relative URL's again.
	 *
	 * @param {Object|String} loc Optional default location object.
	 * @returns {Object} lolcation object.
	 * @api public
	 */
	module.exports = function lolcation(loc) {
	  loc = loc || global.location || {};
	  URL = URL || __webpack_require__(281);
	
	  var finaldestination = {}
	    , type = typeof loc
	    , key;
	
	  if ('blob:' === loc.protocol) {
	    finaldestination = new URL(unescape(loc.pathname), {});
	  } else if ('string' === type) {
	    finaldestination = new URL(loc, {});
	    for (key in ignore) delete finaldestination[key];
	  } else if ('object' === type) {
	    for (key in loc) {
	      if (key in ignore) continue;
	      finaldestination[key] = loc[key];
	    }
	
	    if (finaldestination.slashes === undefined) {
	      finaldestination.slashes = slashes.test(loc.href);
	    }
	  }
	
	  return finaldestination;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 284 */
/***/ function(module, exports) {

	'use strict';
	
	var has = Object.prototype.hasOwnProperty;
	
	/**
	 * Simple query string parser.
	 *
	 * @param {String} query The query string that needs to be parsed.
	 * @returns {Object}
	 * @api public
	 */
	function querystring(query) {
	  var parser = /([^=?&]+)=([^&]*)/g
	    , result = {}
	    , part;
	
	  //
	  // Little nifty parsing hack, leverage the fact that RegExp.exec increments
	  // the lastIndex property so we can continue executing this loop until we've
	  // parsed all results.
	  //
	  for (;
	    part = parser.exec(query);
	    result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])
	  );
	
	  return result;
	}
	
	/**
	 * Transform a query string to an object.
	 *
	 * @param {Object} obj Object that should be transformed.
	 * @param {String} prefix Optional prefix.
	 * @returns {String}
	 * @api public
	 */
	function querystringify(obj, prefix) {
	  prefix = prefix || '';
	
	  var pairs = [];
	
	  //
	  // Optionally prefix with a '?' if needed
	  //
	  if ('string' !== typeof prefix) prefix = '?';
	
	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
	    }
	  }
	
	  return pairs.length ? prefix + pairs.join('&') : '';
	}
	
	//
	// Expose the module.
	//
	exports.stringify = querystringify;
	exports.parse = querystring;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(61);

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(100);

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(288);
	__webpack_require__(292);
	const Component_1 = __webpack_require__(12);
	const Editor_1 = __webpack_require__(294);
	const Login_1 = __webpack_require__(339);
	const ProjectChooser_1 = __webpack_require__(342);
	const StatusBar_1 = __webpack_require__(345);
	const StatusDetail_1 = __webpack_require__(357);
	const User_1 = __webpack_require__(360);
	const route = (r) => {
	    switch (r) {
	        case 'login': return Component_1.Component.createElement(Login_1.Login, {key: 'Login'});
	        case 'home': // continue
	        case 'projects': return Component_1.Component.createElement(ProjectChooser_1.ProjectChooser, {key: 'ProjectChooser'});
	        case 'project': return Component_1.Component.createElement(Editor_1.Editor, null);
	        case 'user': return Component_1.Component.createElement(User_1.User, null);
	        default: return Component_1.Component.createElement("div", null);
	    }
	};
	exports.App = Component_1.Component({ route: ['$route']
	}, ({ state }) => {
	    return Component_1.Component.createElement("div", {class: 'App'}, 
	        Component_1.Component.createElement("div", {class: 'wrap'}, route(state.route)), 
	        Component_1.Component.createElement(StatusBar_1.StatusBar, {key: 'StatusBar'}), 
	        Component_1.Component.createElement(StatusDetail_1.StatusDetail, {key: 'StatusDetail'}));
	});


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(289);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "@keyframes blinker {\n  50% {\n    opacity: 0.0; } }\n\n@keyframes pulse {\n  from {\n    stroke: black;\n    fill: white;\n    transform: translateY(0px); }\n  to {\n    stroke: white;\n    fill: transparent;\n    transform: translateY(-3px); } }\n\n@keyframes detached {\n  0% {\n    stroke: black; }\n  50% {\n    stroke: black; }\n  100% {\n    stroke: #c80000; } }\n\n@keyframes ghost {\n  to {\n    stroke-dashoffset: 10; } }\n\n.blink {\n  animation: blinker 1s linear infinite; }\n\n.pulse {\n  animation: pulse 0.4s infinite alternate; }\n\n._detachedFx {\n  animation: detached 0.8s infinite alternate; }\n\nh1, h2, h3, p, .name, .fa {\n  font-size: 1em;\n  font-weight: normal;\n  line-height: 1.2em;\n  padding: 4px;\n  margin: 4px 0; }\n\n.fa {\n  margin: 0;\n  padding-right: 8px;\n  color: #333333;\n  transition: background-color 0.3s;\n  border-radius: 4px;\n  cursor: pointer; }\n  .fa:hover {\n    background: #151414; }\n\np {\n  margin: 0; }\n\n.EditableText {\n  min-width: 4em;\n  cursor: text;\n  background-color: transparent;\n  border-bottom: 1px dashed #fff;\n  border-bottom-color: rgba(204, 204, 204, 0);\n  transition: border-bottom-color 0.8s, background-color 0.3s, color 0.3s; }\n  .EditableText input.fld {\n    border: none;\n    padding: 4px;\n    font: inherit;\n    background-color: transparent;\n    border-radius: 0;\n    width: 100%;\n    outline: none; }\n  .EditableText.active {\n    padding: 0;\n    background-color: #bd9368; }\n  .EditableText.saving {\n    color: white; }\n  .EditableText:hover {\n    border-bottom-color: rgba(26, 26, 26, 0.4); }\n\n._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list, .console {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p, .console p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect, .li {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\nhtml,\nbody,\nul,\nol {\n  margin: 0;\n  padding: 0;\n  list-style-type: none; }\n\nle-test div {\n  border: 1px solid grey;\n  padding: 4px;\n  background: #999;\n  margin: 4px; }\n\nle-test .container div {\n  background: #944; }\n\nhtml, body, #app {\n  margin: 0;\n  height: 100%;\n  overflow: hidden; }\n\n#app *::-webkit-scrollbar {\n  width: 0px;\n  /* remove scrollbar space */\n  background: transparent;\n  /* optional: just make scrollbar invisible */ }\n\n.App {\n  display: flex;\n  flex-direction: column; }\n  .App > .wrap {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column; }\n\na {\n  text-decoration: none;\n  color: inherit;\n  display: block; }\n\nbody {\n  font-family: \"Avenir Next\", \"Segoe ui\", \"Muli\", Helvetica, sans-serif;\n  font-size: 10pt;\n  background: #3d3838;\n  color: #000;\n  cursor: default; }\n\n.fld {\n  background: #807575;\n  border: none;\n  border-radius: 4px;\n  padding: 4px;\n  font: inherit; }\n\n._search, .search {\n  background: #4b4444;\n  padding: 4px;\n  border: 1px solid #353131;\n  position: relative; }\n  ._search p input, .search p input {\n    position: absolute;\n    top: 4px;\n    left: 4px;\n    width: 132px; }\n\n._saved, .search .saved {\n  padding: 4px; }\n  ._saved li, .search .saved li {\n    background: #585151;\n    display: inline-block;\n    border-radius: 4px;\n    border: 1px solid #353131;\n    margin: 2px;\n    text-align: center;\n    width: 1.4em; }\n    ._saved li.sel, .search .saved li.sel {\n      background: #71583e;\n      color: #000; }\n\n.li {\n  cursor: pointer;\n  color: #141414;\n  padding: 4px;\n  background: #585151;\n  border-bottom: 1px solid #353131; }\n  .li.drag {\n    padding: 0; }\n    .li.drag span {\n      padding: 4px; }\n      .li.drag span:before {\n        color: #222;\n        content: \":: \"; }\n  .li span {\n    display: block; }\n  .li.sel {\n    background: #71583e;\n    color: #000; }\n  .li.add {\n    background: none;\n    color: #585151;\n    border-bottom: none;\n    text-align: center;\n    font-weight: bold;\n    transition: background 0.5s, color 0.5s; }\n    .li.add:hover {\n      background: #585151;\n      color: #000; }\n\n._button, .refresh {\n  cursor: pointer; }\n\n.dragged {\n  opacity: 0.8;\n  border-width: 2px;\n  border-radius: 4px; }\n\n._drop .drag-enter {\n  background: #71583e;\n  color: #000;\n  cursor: copy; }\n\n.search {\n  border-right: 0; }\n\n.console {\n  border-right: 0;\n  position: relative; }\n  .console p input {\n    position: absolute;\n    top: 4px;\n    right: 4px;\n    width: 50%; }\n", ""]);
	
	// exports


/***/ },
/* 290 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(293);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.Workbench {\n  background: #3d3838;\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column; }\n  .Workbench > .stretch {\n    flex-grow: 1;\n    width: 100%;\n    display: flex;\n    position: relative; }\n  .Workbench .Pane {\n    overflow: hidden;\n    position: absolute;\n    left: 0;\n    margin-left: -1px;\n    width: 0px;\n    transition: width 0.1s;\n    border-bottom-right-radius: 4px; }\n    .Workbench .Pane.active {\n      width: 140px; }\n    .Workbench .Pane .wrap {\n      background: #383333;\n      box-shadow: inset 0 0 10px #232020;\n      padding: 4px; }\n", ""]);
	
	// exports


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(295);
	const Block_1 = __webpack_require__(297);
	const Component_1 = __webpack_require__(12);
	const Drag_1 = __webpack_require__(314);
	const Library_1 = __webpack_require__(323);
	const Factory_1 = __webpack_require__(10);
	const Playback_1 = __webpack_require__(326);
	const Project_1 = __webpack_require__(330);
	const ProjectPane_1 = __webpack_require__(333);
	const Scene_1 = __webpack_require__(336);
	// import { ToolsPane } from './ToolsPane'
	exports.Editor = Component_1.Component({}, () => (Component_1.Component.createElement("div", {class: 'Editor'}, 
	    Component_1.Component.createElement(Factory_1.Modal, {key: 'Modal'}), 
	    Component_1.Component.createElement("div", {class: 'Workbench'}, 
	        Component_1.Component.createElement(Playback_1.Playback, {key: 'playback'}), 
	        Component_1.Component.createElement("div", {class: 'stretch'}, 
	            Component_1.Component.createElement(Project_1.Project, {key: 'Project'}), 
	            Component_1.Component.createElement(Scene_1.Scene, {key: 'Scene'}), 
	            Component_1.Component.createElement(Block_1.Block, {key: 'Block'}))), 
	    Component_1.Component.createElement(Library_1.Library, {key: 'Library'}), 
	    Component_1.Component.createElement(ProjectPane_1.ProjectPane, {key: 'ProjectPane'}), 
	    Component_1.Component.createElement(Drag_1.Drag, {key: 'Drag'}))));


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(296);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, ".Editor {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column; }\n", ""]);
	
	// exports


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(298);
	const Component_1 = __webpack_require__(12);
	const CodeEditor_1 = __webpack_require__(300);
	const Controls_1 = __webpack_require__(311);
	const Factory_1 = __webpack_require__(10);
	// import { Graph } from '../Graph'
	const BlockName = Factory_1.editable(['block', 'name']);
	exports.Block = Component_1.Component({ block: ['block'],
	    select: ['$block'],
	    tab: ['$blocktab'],
	    controls: ['$controls'],
	    editing: BlockName.path
	}, ({ state, signals }) => {
	    const klass = { Block: true, hidden: !state.block };
	    const tab = state.tab || 'code';
	    const codetab = { visibility: tab === 'code' ? 'inherit' : 'hidden' };
	    const controlstab = { visibility: tab === 'controls' ? 'inherit' : 'hidden' };
	    const usetab = (v) => {
	        signals.block.tab({ value: v });
	    };
	    return Component_1.Component.createElement("div", {class: klass}, 
	        Component_1.Component.createElement("div", {class: 'bar tabs'}, 
	            Component_1.Component.createElement("div", {class: 'stretch'}, 
	                Component_1.Component.createElement("div", {class: 'fa fa-cube', "on-click": () => usetab('code')}), 
	                Component_1.Component.createElement(BlockName, {class: 'name'})), 
	            Component_1.Component.createElement("div", {class: { tab: true, sel: tab === 'code' }}, 
	                Component_1.Component.createElement("div", {class: 'fa fa-file-text'}), 
	                "index.js"), 
	            Component_1.Component.createElement("div", {class: { tab: true, sel: tab === 'code' }}, 
	                Component_1.Component.createElement("div", {class: 'fa fa-file-text'}), 
	                "frag.glsl"), 
	            Component_1.Component.createElement("div", {class: { tab: true, sel: tab === 'code' }}, 
	                Component_1.Component.createElement("div", {class: 'fa fa-sliders', "on-click": () => usetab('controls')}), 
	                "Control")), 
	        Component_1.Component.createElement(CodeEditor_1.CodeEditor, {key: 'CodeEditor', block: state.block || {}, style: codetab}), 
	        Component_1.Component.createElement(Controls_1.Controls, {key: 'Controls', style: controlstab}));
	});


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(299);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.Block {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  width: 460px;\n  background: #232020;\n  border-top-left-radius: 4px; }\n  .Block .bar {\n    border-top-left-radius: 4px; }\n  .Block .CodeMirror {\n    height: 306px; }\n  .Block.hidden {\n    visibility: hidden; }\n", ""]);
	
	// exports


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(301);
	const Component_1 = __webpack_require__(12);
	const CodeHelper_1 = __webpack_require__(30);
	// CodeMirror CSS
	__webpack_require__(303);
	__webpack_require__(305);
	__webpack_require__(307);
	__webpack_require__(309);
	let editor = null;
	let source;
	const ederror = [];
	exports.CodeEditor = Component_1.Component({}, ({ props, signals }) => {
	    const block = props.block;
	    const save = () => {
	        // Save callback
	        source = editor.getValue();
	        signals.block.source({ value: source });
	        // HACK
	        if (editor) {
	            setTimeout(() => {
	                const errors = editor.options.scrubber['HACK'];
	                console.log(editor.options.scrubber);
	                editor.operation(() => {
	                    const doc = editor.getDoc();
	                    for (const v of ederror) {
	                        doc.removeLineWidget(v);
	                    }
	                    ederror.length = 0;
	                    if (errors) {
	                        for (const v of errors) {
	                            const msg = document.createElement('div');
	                            msg.textContent = v.message;
	                            msg.className = 'error';
	                            ederror.push(doc.addLineWidget(v.loc.line, msg, { coverGutter: false, noHScroll: true }));
	                        }
	                    }
	                });
	            }, 1000);
	        }
	    };
	    const create = (_, { elm }) => {
	        if (editor === null) {
	            editor = false;
	            setTimeout(() => {
	                editor = CodeHelper_1.CodeHelper.editor(elm, block.source, save);
	            }, 100);
	        }
	    };
	    if (source !== block.source && editor) {
	        source = block.source;
	        CodeHelper_1.CodeHelper.sourceChanged(editor, block);
	    }
	    return Component_1.Component.createElement("div", {class: 'CodeEditor', style: props.style}, 
	        Component_1.Component.createElement("div", {class: 'codeholder', "hook-create": create})
	    );
	});


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(302);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n#app .CodeEditor .scrubbing {\n  background: yellow; }\n\n#app .CodeEditor .cm-number {\n  border: 1px dashed transparent; }\n  #app .CodeEditor .cm-number.scrub {\n    cursor: move;\n    border: 1px dashed #585151;\n    border-radius: 4px; }\n\n#app .CodeEditor .CodeMirror-overlayscroll-horizontal div,\n#app .CodeEditor .CodeMirror-overlayscroll-vertical div {\n  background: #3d3838; }\n\n#app .CodeEditor .CodeMirror {\n  padding: 4px 0 8px 4px; }\n", ""]);
	
	// exports


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(304);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./../../sass-loader/index.js!./codemirror.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./../../sass-loader/index.js!./codemirror.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "/* BASICS */\n.CodeMirror {\n  /* Set height, width, borders, and global font properties here */\n  font-family: monospace;\n  height: 300px;\n  color: black; }\n\n/* PADDING */\n.CodeMirror-lines {\n  padding: 4px 0;\n  /* Vertical padding around content */ }\n\n.CodeMirror pre {\n  padding: 0 4px;\n  /* Horizontal padding of content */ }\n\n.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {\n  background-color: white;\n  /* The little square between H and V scrollbars */ }\n\n/* GUTTER */\n.CodeMirror-gutters {\n  border-right: 1px solid #ddd;\n  background-color: #f7f7f7;\n  white-space: nowrap; }\n\n.CodeMirror-linenumber {\n  padding: 0 3px 0 5px;\n  min-width: 20px;\n  text-align: right;\n  color: #999;\n  white-space: nowrap; }\n\n.CodeMirror-guttermarker {\n  color: black; }\n\n.CodeMirror-guttermarker-subtle {\n  color: #999; }\n\n/* CURSOR */\n.CodeMirror-cursor {\n  border-left: 1px solid black;\n  border-right: none;\n  width: 0; }\n\n/* Shown when moving in bi-directional text */\n.CodeMirror div.CodeMirror-secondarycursor {\n  border-left: 1px solid silver; }\n\n.cm-fat-cursor .CodeMirror-cursor {\n  width: auto;\n  border: 0 !important;\n  background: #7e7; }\n\n.cm-fat-cursor div.CodeMirror-cursors {\n  z-index: 1; }\n\n.cm-animate-fat-cursor {\n  width: auto;\n  border: 0;\n  -webkit-animation: blink 1.06s steps(1) infinite;\n  -moz-animation: blink 1.06s steps(1) infinite;\n  animation: blink 1.06s steps(1) infinite;\n  background-color: #7e7; }\n\n@-moz-keyframes blink {\n  0% { }\n  50% {\n    background-color: transparent; }\n  100% { } }\n\n@-webkit-keyframes blink {\n  0% { }\n  50% {\n    background-color: transparent; }\n  100% { } }\n\n@keyframes blink {\n  0% { }\n  50% {\n    background-color: transparent; }\n  100% { } }\n\n/* Can style cursor different in overwrite (non-insert) mode */\n.cm-tab {\n  display: inline-block;\n  text-decoration: inherit; }\n\n.CodeMirror-ruler {\n  border-left: 1px solid #ccc;\n  position: absolute; }\n\n/* DEFAULT THEME */\n.cm-s-default .cm-header {\n  color: blue; }\n\n.cm-s-default .cm-quote {\n  color: #090; }\n\n.cm-negative {\n  color: #d44; }\n\n.cm-positive {\n  color: #292; }\n\n.cm-header, .cm-strong {\n  font-weight: bold; }\n\n.cm-em {\n  font-style: italic; }\n\n.cm-link {\n  text-decoration: underline; }\n\n.cm-strikethrough {\n  text-decoration: line-through; }\n\n.cm-s-default .cm-keyword {\n  color: #708; }\n\n.cm-s-default .cm-atom {\n  color: #219; }\n\n.cm-s-default .cm-number {\n  color: #164; }\n\n.cm-s-default .cm-def {\n  color: #00f; }\n\n.cm-s-default .cm-variable-2 {\n  color: #05a; }\n\n.cm-s-default .cm-variable-3 {\n  color: #085; }\n\n.cm-s-default .cm-comment {\n  color: #a50; }\n\n.cm-s-default .cm-string {\n  color: #a11; }\n\n.cm-s-default .cm-string-2 {\n  color: #f50; }\n\n.cm-s-default .cm-meta {\n  color: #555; }\n\n.cm-s-default .cm-qualifier {\n  color: #555; }\n\n.cm-s-default .cm-builtin {\n  color: #30a; }\n\n.cm-s-default .cm-bracket {\n  color: #997; }\n\n.cm-s-default .cm-tag {\n  color: #170; }\n\n.cm-s-default .cm-attribute {\n  color: #00c; }\n\n.cm-s-default .cm-hr {\n  color: #999; }\n\n.cm-s-default .cm-link {\n  color: #00c; }\n\n.cm-s-default .cm-error {\n  color: #f00; }\n\n.cm-invalidchar {\n  color: #f00; }\n\n.CodeMirror-composing {\n  border-bottom: 2px solid; }\n\n/* Default styles for common addons */\ndiv.CodeMirror span.CodeMirror-matchingbracket {\n  color: #0f0; }\n\ndiv.CodeMirror span.CodeMirror-nonmatchingbracket {\n  color: #f22; }\n\n.CodeMirror-matchingtag {\n  background: rgba(255, 150, 0, 0.3); }\n\n.CodeMirror-activeline-background {\n  background: #e8f2ff; }\n\n/* STOP */\n/* The rest of this file contains styles related to the mechanics of\n   the editor. You probably shouldn't touch them. */\n.CodeMirror {\n  position: relative;\n  overflow: hidden;\n  background: white; }\n\n.CodeMirror-scroll {\n  overflow: scroll !important;\n  /* Things will break if this is overridden */\n  /* 30px is the magic margin used to hide the element's real scrollbars */\n  /* See overflow: hidden in .CodeMirror */\n  margin-bottom: -30px;\n  margin-right: -30px;\n  padding-bottom: 30px;\n  height: 100%;\n  outline: none;\n  /* Prevent dragging from highlighting the element */\n  position: relative; }\n\n.CodeMirror-sizer {\n  position: relative;\n  border-right: 30px solid transparent; }\n\n/* The fake, visible scrollbars. Used to force redraw during scrolling\n   before actual scrolling happens, thus preventing shaking and\n   flickering artifacts. */\n.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {\n  position: absolute;\n  z-index: 6;\n  display: none; }\n\n.CodeMirror-vscrollbar {\n  right: 0;\n  top: 0;\n  overflow-x: hidden;\n  overflow-y: scroll; }\n\n.CodeMirror-hscrollbar {\n  bottom: 0;\n  left: 0;\n  overflow-y: hidden;\n  overflow-x: scroll; }\n\n.CodeMirror-scrollbar-filler {\n  right: 0;\n  bottom: 0; }\n\n.CodeMirror-gutter-filler {\n  left: 0;\n  bottom: 0; }\n\n.CodeMirror-gutters {\n  position: absolute;\n  left: 0;\n  top: 0;\n  min-height: 100%;\n  z-index: 3; }\n\n.CodeMirror-gutter {\n  white-space: normal;\n  height: 100%;\n  display: inline-block;\n  vertical-align: top;\n  margin-bottom: -30px;\n  /* Hack to make IE7 behave */\n  *zoom: 1;\n  *display: inline; }\n\n.CodeMirror-gutter-wrapper {\n  position: absolute;\n  z-index: 4;\n  background: none !important;\n  border: none !important; }\n\n.CodeMirror-gutter-background {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  z-index: 4; }\n\n.CodeMirror-gutter-elt {\n  position: absolute;\n  cursor: default;\n  z-index: 4; }\n\n.CodeMirror-gutter-wrapper {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none; }\n\n.CodeMirror-lines {\n  cursor: text;\n  min-height: 1px;\n  /* prevents collapsing before first draw */ }\n\n.CodeMirror pre {\n  /* Reset some styles that the rest of the page might have set */\n  -moz-border-radius: 0;\n  -webkit-border-radius: 0;\n  border-radius: 0;\n  border-width: 0;\n  background: transparent;\n  font-family: inherit;\n  font-size: inherit;\n  margin: 0;\n  white-space: pre;\n  word-wrap: normal;\n  line-height: inherit;\n  color: inherit;\n  z-index: 2;\n  position: relative;\n  overflow: visible;\n  -webkit-tap-highlight-color: transparent;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none; }\n\n.CodeMirror-wrap pre {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  word-break: normal; }\n\n.CodeMirror-linebackground {\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  z-index: 0; }\n\n.CodeMirror-linewidget {\n  position: relative;\n  z-index: 2;\n  overflow: auto; }\n\n.CodeMirror-code {\n  outline: none; }\n\n/* Force content-box sizing for the elements where we expect it */\n.CodeMirror-scroll,\n.CodeMirror-sizer,\n.CodeMirror-gutter,\n.CodeMirror-gutters,\n.CodeMirror-linenumber {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box; }\n\n.CodeMirror-measure {\n  position: absolute;\n  width: 100%;\n  height: 0;\n  overflow: hidden;\n  visibility: hidden; }\n\n.CodeMirror-cursor {\n  position: absolute; }\n\n.CodeMirror-measure pre {\n  position: static; }\n\ndiv.CodeMirror-cursors {\n  visibility: hidden;\n  position: relative;\n  z-index: 3; }\n\ndiv.CodeMirror-dragcursors {\n  visibility: visible; }\n\n.CodeMirror-focused div.CodeMirror-cursors {\n  visibility: visible; }\n\n.CodeMirror-selected {\n  background: #d9d9d9; }\n\n.CodeMirror-focused .CodeMirror-selected {\n  background: #d7d4f0; }\n\n.CodeMirror-crosshair {\n  cursor: crosshair; }\n\n.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection {\n  background: #d7d4f0; }\n\n.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection {\n  background: #d7d4f0; }\n\n.cm-searching {\n  background: #ffa;\n  background: rgba(255, 255, 0, 0.4); }\n\n/* IE7 hack to prevent it from returning funny offsetTops on the spans */\n.CodeMirror span {\n  *vertical-align: text-bottom; }\n\n/* Used to force a border model for a node */\n.cm-force-border {\n  padding-right: .1px; }\n\n@media print {\n  /* Hide the cursor when printing */\n  .CodeMirror div.CodeMirror-cursors {\n    visibility: hidden; } }\n\n/* See issue #2901 */\n.cm-tab-wrap-hack:after {\n  content: ''; }\n\n/* Help users use markselection to safely style text background */\nspan.CodeMirror-selectedtext {\n  background: none; }\n", ""]);
	
	// exports


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(306);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./../../sass-loader/index.js!./bespin.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./../../sass-loader/index.js!./bespin.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "/*\n\n    Name:       Bespin\n    Author:     Mozilla / Jan T. Sott\n\n    CodeMirror template by Jan T. Sott (https://github.com/idleberg/base16-codemirror)\n    Original Base16 color scheme by Chris Kempson (https://github.com/chriskempson/base16)\n\n*/\n.cm-s-bespin.CodeMirror {\n  background: #28211c;\n  color: #9d9b97; }\n\n.cm-s-bespin div.CodeMirror-selected {\n  background: #36312e !important; }\n\n.cm-s-bespin .CodeMirror-gutters {\n  background: #28211c;\n  border-right: 0px; }\n\n.cm-s-bespin .CodeMirror-linenumber {\n  color: #666666; }\n\n.cm-s-bespin .CodeMirror-cursor {\n  border-left: 1px solid #797977 !important; }\n\n.cm-s-bespin span.cm-comment {\n  color: #937121; }\n\n.cm-s-bespin span.cm-atom {\n  color: #9b859d; }\n\n.cm-s-bespin span.cm-number {\n  color: #9b859d; }\n\n.cm-s-bespin span.cm-property, .cm-s-bespin span.cm-attribute {\n  color: #54be0d; }\n\n.cm-s-bespin span.cm-keyword {\n  color: #cf6a4c; }\n\n.cm-s-bespin span.cm-string {\n  color: #f9ee98; }\n\n.cm-s-bespin span.cm-variable {\n  color: #54be0d; }\n\n.cm-s-bespin span.cm-variable-2 {\n  color: #5ea6ea; }\n\n.cm-s-bespin span.cm-def {\n  color: #cf7d34; }\n\n.cm-s-bespin span.cm-error {\n  background: #cf6a4c;\n  color: #797977; }\n\n.cm-s-bespin span.cm-bracket {\n  color: #9d9b97; }\n\n.cm-s-bespin span.cm-tag {\n  color: #cf6a4c; }\n\n.cm-s-bespin span.cm-link {\n  color: #9b859d; }\n\n.cm-s-bespin .CodeMirror-matchingbracket {\n  text-decoration: underline;\n  color: white !important; }\n\n.cm-s-bespin .CodeMirror-activeline-background {\n  background: #404040; }\n", ""]);
	
	// exports


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(308);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../css-loader/index.js!./../../../sass-loader/index.js!./simplescrollbars.css", function() {
				var newContent = require("!!./../../../css-loader/index.js!./../../../sass-loader/index.js!./simplescrollbars.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, ".CodeMirror-simplescroll-horizontal div, .CodeMirror-simplescroll-vertical div {\n  position: absolute;\n  background: #ccc;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  border: 1px solid #bbb;\n  border-radius: 2px; }\n\n.CodeMirror-simplescroll-horizontal, .CodeMirror-simplescroll-vertical {\n  position: absolute;\n  z-index: 6;\n  background: #eee; }\n\n.CodeMirror-simplescroll-horizontal {\n  bottom: 0;\n  left: 0;\n  height: 8px; }\n\n.CodeMirror-simplescroll-horizontal div {\n  bottom: 0;\n  height: 100%; }\n\n.CodeMirror-simplescroll-vertical {\n  right: 0;\n  top: 0;\n  width: 8px; }\n\n.CodeMirror-simplescroll-vertical div {\n  right: 0;\n  width: 100%; }\n\n.CodeMirror-overlayscroll .CodeMirror-scrollbar-filler, .CodeMirror-overlayscroll .CodeMirror-gutter-filler {\n  display: none; }\n\n.CodeMirror-overlayscroll-horizontal div, .CodeMirror-overlayscroll-vertical div {\n  position: absolute;\n  background: #bcd;\n  border-radius: 3px; }\n\n.CodeMirror-overlayscroll-horizontal, .CodeMirror-overlayscroll-vertical {\n  position: absolute;\n  z-index: 6; }\n\n.CodeMirror-overlayscroll-horizontal {\n  bottom: 0;\n  left: 0;\n  height: 6px; }\n\n.CodeMirror-overlayscroll-horizontal div {\n  bottom: 0;\n  height: 100%; }\n\n.CodeMirror-overlayscroll-vertical {\n  right: 0;\n  top: 0;\n  width: 6px; }\n\n.CodeMirror-overlayscroll-vertical div {\n  right: 0;\n  width: 100%; }\n", ""]);
	
	// exports


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(310);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../css-loader/index.js!./../../../sass-loader/index.js!./dialog.css", function() {
				var newContent = require("!!./../../../css-loader/index.js!./../../../sass-loader/index.js!./dialog.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, ".CodeMirror-dialog {\n  position: absolute;\n  left: 0;\n  right: 0;\n  background: inherit;\n  z-index: 15;\n  padding: .1em .8em;\n  overflow: hidden;\n  color: inherit; }\n\n.CodeMirror-dialog-top {\n  border-bottom: 1px solid #eee;\n  top: 0; }\n\n.CodeMirror-dialog-bottom {\n  border-top: 1px solid #eee;\n  bottom: 0; }\n\n.CodeMirror-dialog input {\n  border: none;\n  outline: none;\n  background: transparent;\n  width: 20em;\n  color: inherit;\n  font-family: monospace; }\n\n.CodeMirror-dialog button {\n  font-size: 70%; }\n", ""]);
	
	// exports


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(312);
	const Component_1 = __webpack_require__(12);
	const makeControl = (ctrl, idx, matrix, clbk) => {
	    if (ctrl.type === 'Slider') {
	        const change = (e) => {
	            const el = e.target;
	            const v = parseFloat(el.value);
	            clbk(idx, [v]);
	        };
	        const v = (matrix[idx] || ctrl.values)[0];
	        return Component_1.Component.createElement("div", {class: { Slider: true, ctrl: true }}, 
	            Component_1.Component.createElement("label", null, ctrl.labels[0]), 
	            Component_1.Component.createElement("input", {"on-input": change, type: 'range', min: '0.0', max: '1.0', step: '0.001', value: v}));
	    }
	    else if (ctrl.type === 'Pad') {
	        return Component_1.Component.createElement("div", {class: 'Pad'}, "TODO");
	    }
	    else {
	        return Component_1.Component.createElement("div", {class: 'ctrl'}, 
	            "Unknown control '", 
	            ctrl.type, 
	            "'");
	    }
	};
	const makeControls = (controls, matrix, clbk) => {
	    if (!controls) {
	        return '';
	    }
	    if (!matrix) {
	        matrix = [];
	    }
	    return controls.map((c, idx) => makeControl(c, idx, matrix, clbk));
	};
	exports.Controls = Component_1.Component({ controls: ['$controls'],
	    matrix: ['$playback', 'ctrl']
	}, ({ state, props, signals }) => {
	    const clbk = (pos, values) => {
	        signals.block.values({ values, pos });
	    };
	    const matrix = state.matrix;
	    return Component_1.Component.createElement("div", {class: 'Controls', style: props.style}, makeControls(state.controls, matrix, clbk));
	});


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(313);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, ".Controls {\n  position: absolute;\n  top: 30px;\n  height: 90%;\n  width: 100%;\n  display: flex;\n  flex-direction: column; }\n\n.Slider {\n  margin: 5px;\n  width: 200px;\n  height: 25px; }\n  .Slider input {\n    width: 100%; }\n  .Slider label {\n    padding: 3px;\n    color: white; }\n", ""]);
	
	// exports


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(315);
	const Component_1 = __webpack_require__(12);
	const Graph_1 = __webpack_require__(317);
	exports.Drag = Component_1.Component({ drag: ['$dragdrop', 'drag'],
	    move: ['$dragdrop', 'move'],
	    drop: ['$dragdrop', 'drop']
	}, ({ state, signals }) => {
	    const drag = state.drag;
	    const move = state.move;
	    if (!drag || !move) {
	        return Component_1.Component.createElement("div", {id: 'drag', class: { Drag: true }});
	    }
	    const klass = { Drag: true, copy: move.copy || drag.ownerType === 'library' || drag.copy };
	    if (state.drop && state.drop.ownerType !== 'library') {
	        // hide drag element
	        klass['hide'] = true;
	    }
	    const x = move.clientPos.x;
	    const y = move.clientPos.y;
	    // draw Graph
	    return Component_1.Component.createElement(Graph_1.Graph, {key: 'drag.graph', class: klass, position: { x, y }, ownerType: 'drag', rootId: drag.nodeId, graph: drag.dgraph});
	});


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(316);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, ".Drag {\n  position: fixed;\n  display: block;\n  opacity: 0.8;\n  z-index: 6; }\n  .Drag.Graph {\n    margin: 0;\n    padding: 0; }\n  .Drag path {\n    cursor: grabbing;\n    cursor: -moz-grabbing;\n    cursor: -webkit-grabbing; }\n  .Drag.copy path {\n    cursor: copy; }\n  .Drag.drag-hide {\n    display: none; }\n  .Drag.hide {\n    display: none; }\n  .Drag .plus, .Drag .click {\n    display: none; }\n", ""]);
	
	// exports


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(318);
	const Component_1 = __webpack_require__(12);
	const Graph_1 = __webpack_require__(46);
	const Node_1 = __webpack_require__(320);
	const mapUINodes = (graph, uigraph, ownerType, blockId) => {
	    const nodesById = graph.nodesById;
	    const nodes = uigraph.nodes;
	    const uiNodeById = uigraph.uiNodeById;
	    const key = `Node-${ownerType}-`;
	    return nodes.map((n) => {
	        const uinode = uiNodeById[n];
	        const node = nodesById[n];
	        return Component_1.Component.createElement(Node_1.Node, {key: key + uinode.id, blockId: blockId, uinode: uinode, node: node, ownerType: ownerType});
	    });
	};
	const empty = { select: { id: '', nodeId: '', ownerType: '' } };
	exports.Graph = Component_1.Component({
	    // update graph on drag op
	    drop: ['$dragdrop', 'drop'] // react to drag op
	    ,
	    drag: ['$dragdrop', 'drag'],
	    select: ['$block'],
	    scale: ['$ui', 'scale']
	}, ({ props, state, signals }) => {
	    const ownerType = props.ownerType;
	    const select = state.select || {};
	    const blockId = select.ownerType === ownerType ? select.id : null;
	    let graph = props.graph;
	    const drop = state.drop;
	    const drag = state.drag;
	    const rootId = props.rootId || Graph_1.NodeHelper.rootNodeId;
	    if (graph) {
	        let nodeId;
	        let ghostId;
	        if (drop && drop.ownerType === ownerType) {
	            graph = drop.graph;
	            nodeId = drop.nodeId;
	            ghostId = drop.ghostId;
	        }
	        else if (drag && drag.ownerType === ownerType && !drag.copy) {
	            graph = drag.rgraph;
	        }
	        // FIXME: use uigraph in cache if { graph, ghostId, nodesId } are all the same...
	        const uigraph = Graph_1.uimap(graph, ghostId, nodeId);
	        const klass = Object.assign({ Graph: true }, props.class);
	        const style = {};
	        // TODO: implement scale change with slider
	        // in the status bar.
	        const scale = state.scale || 1;
	        const transform = `scale(${scale})`;
	        const pos = props.position;
	        if (pos) {
	            style.left = (pos.x - uigraph.grabpos.x) + 'px';
	            style.top = (pos.y - uigraph.grabpos.y) + 'px';
	        }
	        return Component_1.Component.createElement("div", {class: klass, style: style, "on-click": () => signals.block.select(empty)}, 
	            Component_1.Component.createElement("svg", {width: uigraph.size.width, height: uigraph.size.height, "on-click": () => signals.block.select(empty)}, 
	                Component_1.Component.createElement("g", {transform: transform}, mapUINodes(graph, uigraph, ownerType, blockId))
	            )
	        );
	    }
	    else {
	        return '';
	    }
	});


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(319);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.Graph {\n  padding: 0 16px;\n  height: 100%;\n  overflow: auto; }\n", ""]);
	
	// exports


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(321);
	const Component_1 = __webpack_require__(12);
	const DragDrop_1 = __webpack_require__(149);
	const makeSlot = (slot, datainfo, clbk) => {
	    const flags = slot.flags;
	    const { x, y } = slot.pos;
	    const klass = Object.assign({}, flags, { slot: true });
	    const slotinfo = `${datainfo}-${slot.idx}`;
	    const transform = `translate(${x}, ${y})`;
	    if (flags.free) {
	        return Component_1.Component.createElement("g", {transform: transform}, 
	            Component_1.Component.createElement("path", {d: slot.plus, class: 'plus'}), 
	            Component_1.Component.createElement("path", {d: slot.click, "data-drop": slotinfo, "on-click": (e) => clbk(e, slot.idx), class: 'click'}));
	    }
	    else if (flags.detached || flags.incompatible) {
	        return Component_1.Component.createElement("g", {transform: transform}, 
	            Component_1.Component.createElement("path", {d: slot.path, class: klass})
	        );
	    }
	    else {
	        // do not draw slot
	        return '';
	    }
	};
	exports.Node = Component_1.Component({ blockId: ['user', 'blockId'],
	    move: ['$dragdrop', 'move'] // react to drag op
	}, ({ state, props, signals }) => {
	    const uinode = props.uinode;
	    const node = props.node;
	    const ownerType = props.ownerType;
	    const x = uinode.pos.x;
	    const y = uinode.pos.y;
	    const transform = `translate(${x},${y})`;
	    let datainfo = `${ownerType}-${uinode.id}`;
	    if (uinode.isghost) {
	        if (uinode.isghost === node.id) {
	            // hovering on main element: do nothing
	            datainfo = `${ownerType}-drop`;
	        }
	        else {
	            // force change of drop layout
	            datainfo = ``;
	        }
	    }
	    const klass = { sel: node.blockId === props.blockId,
	        [uinode.className]: true,
	        ghost: uinode.isghost,
	        invalid: node.invalid
	    };
	    const { click, mousedown, mousemove, mouseup } = DragDrop_1.DragDropHelper.drag(signals, (nodePos, copy) => {
	        // start drag
	        signals.$dragdrop.drag({ drag: { ownerType,
	                nodeId: node.id,
	                nodePos,
	                copy
	            }
	        });
	    }, (e) => {
	        // normal click
	        signals.block.select({ select: { id: node.blockId, nodeId: node.id, ownerType } });
	    });
	    const slotclick = (e, pos) => {
	        e.stopPropagation();
	        signals.block.add({ pos,
	            parentId: uinode.id,
	            ownerType
	        });
	    };
	    return Component_1.Component.createElement("g", {transform: transform}, 
	        Component_1.Component.createElement("path", {d: uinode.path, class: klass, "data-drop": datainfo, "on-mousedown": mousedown, "on-mouseup": mouseup, "on-mousemove": mousemove, "on-click": click}), 
	        Component_1.Component.createElement("text", {x: uinode.size.tx, y: uinode.size.ty}, uinode.name), 
	        uinode.slots.map((s) => makeSlot(s, datainfo, slotclick)));
	});


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(322);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "@keyframes blinker {\n  50% {\n    opacity: 0.0; } }\n\n@keyframes pulse {\n  from {\n    stroke: black;\n    fill: white;\n    transform: translateY(0px); }\n  to {\n    stroke: white;\n    fill: transparent;\n    transform: translateY(-3px); } }\n\n@keyframes detached {\n  0% {\n    stroke: black; }\n  50% {\n    stroke: black; }\n  100% {\n    stroke: #c80000; } }\n\n@keyframes ghost {\n  to {\n    stroke-dashoffset: 10; } }\n\n.blink {\n  animation: blinker 1s linear infinite; }\n\n.pulse {\n  animation: pulse 0.4s infinite alternate; }\n\n._detachedFx {\n  animation: detached 0.8s infinite alternate; }\n\n._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect, svg * {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\nsvg path.box1 {\n  fill: #738f56; }\n  svg path.box1:hover {\n    fill: #87a569; }\n  svg path.box1.dark {\n    fill: #333630; }\n  svg path.box1.sel {\n    fill: #db8b3a; }\n\n.li.box1 {\n  background: #80ac53; }\n\nsvg path.box2 {\n  fill: #568f56; }\n  svg path.box2:hover {\n    fill: #69a569; }\n  svg path.box2.dark {\n    fill: #303630; }\n  svg path.box2.sel {\n    fill: #db8b3a; }\n\n.li.box2 {\n  background: #53ac53; }\n\nsvg path.box3 {\n  fill: #568f73; }\n  svg path.box3:hover {\n    fill: #69a587; }\n  svg path.box3.dark {\n    fill: #303633; }\n  svg path.box3.sel {\n    fill: #db8b3a; }\n\n.li.box3 {\n  background: #53ac80; }\n\nsvg path.box4 {\n  fill: #568f8f; }\n  svg path.box4:hover {\n    fill: #69a5a5; }\n  svg path.box4.dark {\n    fill: #303636; }\n  svg path.box4.sel {\n    fill: #db8b3a; }\n\n.li.box4 {\n  background: #53acac; }\n\nsvg path.box5 {\n  fill: #56738f; }\n  svg path.box5:hover {\n    fill: #6987a5; }\n  svg path.box5.dark {\n    fill: #303336; }\n  svg path.box5.sel {\n    fill: #db8b3a; }\n\n.li.box5 {\n  background: #5380ac; }\n\nsvg path.box6 {\n  fill: #56568f; }\n  svg path.box6:hover {\n    fill: #6969a5; }\n  svg path.box6.dark {\n    fill: #303036; }\n  svg path.box6.sel {\n    fill: #db8b3a; }\n\n.li.box6 {\n  background: #5353ac; }\n\nsvg path.box7 {\n  fill: #73568f; }\n  svg path.box7:hover {\n    fill: #8769a5; }\n  svg path.box7.dark {\n    fill: #333036; }\n  svg path.box7.sel {\n    fill: #db8b3a; }\n\n.li.box7 {\n  background: #8053ac; }\n\nsvg path.box8 {\n  fill: #8f568f; }\n  svg path.box8:hover {\n    fill: #a569a5; }\n  svg path.box8.dark {\n    fill: #363036; }\n  svg path.box8.sel {\n    fill: #db8b3a; }\n\n.li.box8 {\n  background: #ac53ac; }\n\nsvg path.box9 {\n  fill: #8f5673; }\n  svg path.box9:hover {\n    fill: #a56987; }\n  svg path.box9.dark {\n    fill: #363033; }\n  svg path.box9.sel {\n    fill: #db8b3a; }\n\n.li.box9 {\n  background: #ac5380; }\n\nsvg path.box10 {\n  fill: #8f5656; }\n  svg path.box10:hover {\n    fill: #a56969; }\n  svg path.box10.dark {\n    fill: #363030; }\n  svg path.box10.sel {\n    fill: #db8b3a; }\n\n.li.box10 {\n  background: #ac5353; }\n\nsvg path.box11 {\n  fill: #8f7356; }\n  svg path.box11:hover {\n    fill: #a58769; }\n  svg path.box11.dark {\n    fill: #363330; }\n  svg path.box11.sel {\n    fill: #db8b3a; }\n\n.li.box11 {\n  background: #ac8053; }\n\nsvg path.box12 {\n  fill: #8f8f56; }\n  svg path.box12:hover {\n    fill: #a5a569; }\n  svg path.box12.dark {\n    fill: #363630; }\n  svg path.box12.sel {\n    fill: #db8b3a; }\n\n.li.box12 {\n  background: #acac53; }\n\nsvg .slot {\n  fill: none;\n  stroke: black;\n  stroke-width: 1px; }\n  svg .slot.detached, svg .slot.incompatible {\n    stroke-width: 3px;\n    stroke: red;\n    transform: translateY(-1px); }\n  svg .slot.incompatible {\n    stroke-width: 2px;\n    transform: translateY(-2px) rotate(45deg); }\n\nsvg .plus {\n  fill: none;\n  stroke: #302c2c;\n  stroke-width: 1px;\n  cursor: pointer; }\n\nsvg .click {\n  fill: transparent;\n  transition: fill 0.8s;\n  stroke: none;\n  cursor: pointer; }\n  svg .click:hover, svg .click.active {\n    fill: rgba(0, 0, 0, 0.3); }\n\nsvg text {\n  pointer-events: none;\n  font-size: getfont(size);\n  fill: #000; }\n  svg text.main {\n    fill: #d98632; }\n\nsvg path {\n  cursor: pointer;\n  stroke-width: 1px;\n  stroke: black; }\n  svg path.main {\n    cursor: pointer;\n    fill: #3d3838; }\n    svg path.main:hover {\n      fill: #4b4444; }\n    svg path.main.sel {\n      fill: #db8b3a; }\n\npath.ghost, .Drag path {\n  stroke: white;\n  stroke-dasharray: 5;\n  stroke-dashoffset: 0;\n  animation: ghost 1.2s linear infinite; }\n\npath.invalid {\n  mask: url(#mask-stripe); }\n\nsvg#files {\n  border: 2px dashed transparent; }\n  svg#files.drag-over {\n    border-color: #71583e; }\n\nsvg#scratch {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: -999;\n  opacity: 0; }\n", ""]);
	
	// exports


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(324);
	const Component_1 = __webpack_require__(12);
	const DragDrop_1 = __webpack_require__(149);
	const Factory_1 = __webpack_require__(10);
	const renderLibrary = (component, signals) => {
	    // const uinode =
	    const { mousedown, mousemove, mouseup } = DragDrop_1.DragDropHelper.drag(signals, (nodePos) => {
	        signals.$dragdrop.drag({ drag: { componentId: component._id, ownerType: 'library', nodePos }
	        });
	    }, (e) => { });
	    return Component_1.Component.createElement("div", {class: 'li', "data-drop": 'library', "on-mousedown": mousedown, "on-mouseup": mouseup, "on-mousemove": mousemove}, 
	        Component_1.Component.createElement("span", {"data-drop": 'library'}, component.name)
	    );
	};
	const Pane = Factory_1.pane('library');
	exports.Library = Component_1.Component({ rows: ['library', '$rows'],
	    status: ['$status', 'list'],
	    active: Pane.path,
	    drop: ['$dragdrop', 'drop']
	}, ({ state, signals }) => {
	    // TODO: highlight on drop
	    const drop = state.drop && state.drop.ownerType === 'library';
	    const klass = { results: true, drop };
	    return Component_1.Component.createElement(Pane, {class: 'Library'}, 
	        Component_1.Component.createElement(Pane.toggle, {class: 'fbar bar', "data-drop": 'library'}, 
	            Component_1.Component.createElement("div", {class: 'fa fa-book', "data-drop": 'library'}), 
	            Component_1.Component.createElement("div", {class: 'name', "data-drop": 'library'}, "Library"), 
	            Component_1.Component.createElement("div", {class: 'rarrow', "data-drop": 'library'})), 
	        Component_1.Component.createElement(Pane.toggle, {class: 'bar'}, 
	            Component_1.Component.createElement("div", {class: 'spacer'}), 
	            Component_1.Component.createElement("div", {class: 'larrow'}), 
	            " "), 
	        Component_1.Component.createElement("div", {class: 'op', "on-click": () => signals.library.zip()}, 
	            "download ", 
	            Component_1.Component.createElement("div", {class: 'fa fa-download'})), 
	        Component_1.Component.createElement("div", {class: 'search'}, 
	            Component_1.Component.createElement("p", null, 
	                " ", 
	                Component_1.Component.createElement("input", {value: 'search', class: 'fld'}))
	        ), 
	        Component_1.Component.createElement("div", {class: klass, "data-drop": 'library'}, 
	            Component_1.Component.createElement("div", {"data-drop": 'library'}, state.rows.map((component) => renderLibrary(component, signals)))
	        ));
	});


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(325);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane, .Library {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap, .Library .wrap {\n    overflow: visible; }\n  ._pane .bar, .Library .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow, .Library .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow, .Library .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar, .Library .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow, .Library .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow, .Library .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, .Library .bar .fa, ._pane .bar .name, .Library .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name, .Library .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover, .Library .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer, .Library .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow, .Library .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow, .Library .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.Library {\n  left: -168px;\n  transition: left 0.2s;\n  border-bottom-right-radius: 4px;\n  padding-bottom: 4px; }\n  .Library .bar {\n    flex-direction: row-reverse; }\n    .Library .bar.fbar {\n      flex-direction: row;\n      left: 0; }\n  .Library.active {\n    left: 0; }\n  .Library .results {\n    min-height: 200px;\n    max-height: 400px; }\n    .Library .results .li {\n      padding-left: 12px; }\n    .Library .results.drop {\n      border: 2px solid #D76D01; }\n", ""]);
	
	// exports


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(327);
	const Component_1 = __webpack_require__(12);
	const Playback_1 = __webpack_require__(44);
	const CodeHelper_1 = __webpack_require__(30);
	const cache = { nodecache: {} };
	const context = Playback_1.PlaybackHelper.mainContext();
	let uicontrols = null;
	/* ====== PLAYBACK LIBS ======= */
	const THREE = __webpack_require__(329);
	const PRELOADED = { THREE };
	/* ====== PLAYBACK LIBS ======= */
	const helpers = { require: (name) => PRELOADED[name]
	};
	let editor;
	exports.Playback = Component_1.Component({ graph: ['scene', 'graph'],
	    drop: ['$dragdrop', 'drop'] // react to drag op
	    ,
	    drag: ['$dragdrop', 'drag'],
	    select: ['$block'],
	    ctrl: ['$playback', 'ctrl'],
	    tab: ['$blocktab']
	}, ({ state, signals }) => {
	    const w = 320;
	    const h = 180;
	    const hair = 6;
	    const usedh = 2 * (4 + hair) + h;
	    const usedw = 2 * (4 + hair) + w;
	    const portStyle = { top: 4 + hair + 'px',
	        left: 4 + hair + 'px',
	        width: w + 'px',
	        height: h + 'px'
	    };
	    if (!editor) {
	        editor = CodeHelper_1.CodeHelper.getEditor();
	        if (editor) {
	            cache.scrubber = editor.options.scrubber;
	        }
	    }
	    const select = state.select;
	    const playbackctrl = state.ctrl;
	    const ownerType = 'scene';
	    const drop = state.drop;
	    const drag = state.drag;
	    let graph = state.graph;
	    if (drop && drop.ownerType === ownerType) {
	        graph = drop.graph;
	    }
	    else if (drag && drag.ownerType === ownerType) {
	        graph = drag.rgraph;
	    }
	    let update;
	    if (graph) {
	        // TODO: Get project graph and branch with scene...
	        update = () => {
	            try {
	                if (select && select.ownerType === 'scene') {
	                    cache.scrub = select.id;
	                }
	                else {
	                    cache.scrub = null;
	                }
	                Playback_1.PlaybackHelper.run(graph, context, cache, helpers);
	                // New scrubber is ready: update editor
	                if (editor) {
	                    // New marks ready. Update editor.
	                    CodeHelper_1.CodeHelper.scrubMark(editor);
	                }
	                if (select && select.ownerType === 'scene' && state.tab === 'controls') {
	                    // FIXME: only on changes to ctrl
	                    const nodeId = select.nodeId;
	                    const nc = cache.nodecache[nodeId];
	                    const controls = nc.controls;
	                    if (controls !== uicontrols) {
	                        uicontrols = controls;
	                        // Prepare ui
	                        const controlsm = controls.map((c) => ({ type: c.type, labels: c.labels, values: Object.assign([], c.values) }));
	                        signals.block.controls({ controls: controlsm });
	                    }
	                    if (playbackctrl) {
	                        // Get values from UI
	                        for (let i = 0; i < controls.length; ++i) {
	                            const ctrl = controls[i];
	                            const values = playbackctrl[i];
	                            if (values) {
	                                ctrl.set(values);
	                            }
	                        }
	                    }
	                }
	            }
	            catch (err) {
	                console.error(err);
	            }
	        };
	    }
	    return Component_1.Component.createElement("div", {class: 'Playback', style: { height: usedh + 'px' }, "hook-update": update}, 
	        Component_1.Component.createElement("div", {class: 'wrap', style: { height: usedh + 'px',
	            width: usedw + 'px' }}, 
	            Component_1.Component.createElement("div", {class: 'Screen', style: portStyle}, 
	                Component_1.Component.createElement("svg", {width: w + 2 + 2 * hair, height: h + 2 + 2 * hair, class: 'tv', style: { marginLeft: -1 - hair, marginTop: -1 - hair }}, 
	                    Component_1.Component.createElement("rect", {x: 0.5 - 1, y: 0.5 + hair, width: w + 3 + 2 * hair, height: h + 1}), 
	                    Component_1.Component.createElement("rect", {x: 0.5 + hair, y: 0.5 - 1, width: w + 1, height: h + 3 + 2 * hair})), 
	                Component_1.Component.createElement("div", {id: 'screen'}))
	        )
	    );
	});


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(328);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.Playback {\n  background: #232020;\n  color: #999999;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%; }\n  .Playback .wrap {\n    position: relative; }\n  .Playback .Screen {\n    position: absolute; }\n    .Playback .Screen #screen {\n      background: black;\n      width: 100%;\n      height: 100%; }\n    .Playback .Screen svg {\n      position: absolute;\n      top: 0;\n      left: 0; }\n  .Playback .tv rect {\n    stroke: #333333;\n    stroke-width: 1px;\n    fill: none; }\n", ""]);
	
	// exports


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(14))(99);

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(331);
	const Component_1 = __webpack_require__(12);
	const Factory_1 = __webpack_require__(10);
	const Graph_1 = __webpack_require__(317);
	const ProjectName = Factory_1.editable(['project', 'name']);
	const ProjectOptions = Factory_1.pane('project-opts');
	exports.Project = Component_1.Component({ graph: ['project', 'graph'],
	    project: ['project'],
	    editing: ProjectName.path,
	    pane: ProjectOptions.path,
	    block: ['block'],
	    drop: ['$dragdrop', 'drop']
	}, ({ state, signals }) => {
	    const dclass = state.drop && state.drop.ownerType === 'project';
	    const klass = { Project: true, drop: dclass };
	    return Component_1.Component.createElement("div", {class: klass}, 
	        Component_1.Component.createElement("div", {class: 'bar'}, 
	            Component_1.Component.createElement(ProjectOptions.toggle, {class: 'fa fa-diamond'}), 
	            Component_1.Component.createElement(ProjectName, {class: 'name'})), 
	        Component_1.Component.createElement(ProjectOptions, null, 
	            Component_1.Component.createElement("div", {class: 'button delete'}, "delete"), 
	            Component_1.Component.createElement("div", {class: 'button'}, "duplicate")), 
	        Component_1.Component.createElement(Graph_1.Graph, {key: 'project.graph', ownerType: 'project', graph: state.graph}));
	});


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(332);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.Project {\n  width: 34%;\n  border: 1px solid #353131;\n  border-width: 1px 0 0 0;\n  display: flex;\n  flex-direction: column; }\n  .Project .name {\n    color: #d98632; }\n", ""]);
	
	// exports


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(334);
	const Component_1 = __webpack_require__(12);
	const Factory_1 = __webpack_require__(10);
	const sortByName = (a, b) => a.name > b.name ? 1 : -1;
	let oldprops;
	const showScenes = ({ scenes, sceneById, selectedSceneId }, signals) => {
	    if (!scenes || !sceneById) {
	        return '';
	    }
	    const list = scenes.map((id) => sceneById[id] || {});
	    list.sort(sortByName);
	    return list.map((scene) => (Component_1.Component.createElement("div", {class: { li: true,
	        sel: scene._id === selectedSceneId
	    }, "on-click": () => signals.scene.select({ _id: scene._id })}, 
	        Component_1.Component.createElement("div", {class: 'fa fa-film'}), 
	        scene.name)));
	};
	const Scenes = Component_1.Component({}, ({ props, signals }) => (Component_1.Component.createElement("div", {class: 'scenes'}, 
	    Component_1.Component.createElement("p", null, "Scenes"), 
	    Component_1.Component.createElement("div", null, 
	        showScenes(props, signals), 
	        Component_1.Component.createElement("div", {class: 'li add', "on-click": () => signals.scene.add({})}, "+")))));
	const Pane = Factory_1.pane('project');
	exports.ProjectPane = Component_1.Component({ project: ['project'],
	    sceneById: ['data', 'scene'],
	    selectedSceneId: ['$sceneId'],
	    pane: Pane.path
	}, ({ state, signals }) => (Component_1.Component.createElement(Pane, {class: 'ProjectPane'}, 
	    Component_1.Component.createElement(Pane.toggle, {class: 'fbar bar'}, 
	        Component_1.Component.createElement("div", {class: 'fa fa-diamond'}), 
	        Component_1.Component.createElement("div", {class: 'name'}, "Project"), 
	        Component_1.Component.createElement("div", {class: 'larrow'})), 
	    Component_1.Component.createElement(Pane.toggle, {class: 'bar'}, 
	        Component_1.Component.createElement("div", {class: 'spacer'}), 
	        Component_1.Component.createElement("div", {class: 'rarrow'}), 
	        " "), 
	    Component_1.Component.createElement("a", {class: 'op', href: '/#/project'}, 
	        "projects", 
	        Component_1.Component.createElement("div", {class: 'fa fa-hand-o-right'})), 
	    Component_1.Component.createElement("div", {class: 'control'}, 
	        Component_1.Component.createElement("p", null, "Control"), 
	        Component_1.Component.createElement("div", null, 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "OSC")
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "MIDI")
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "VST Plugin")
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "Keyboard")
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "Mouse")
	            ))), 
	    Component_1.Component.createElement(Scenes, {scenes: (state.project || {}).scenes, sceneById: state.sceneById, selectedSceneId: state.selectedSceneId, key: 'project.scenes'}), 
	    Component_1.Component.createElement("div", {class: 'assets'}, 
	        Component_1.Component.createElement("p", null, "assets"), 
	        Component_1.Component.createElement("div", null, 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "dancing queen.mp4")
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "shiva.jpg")
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "components (lib)")
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement("span", null, "lucy-forge (lib)")
	            ))))));


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(335);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane, .ProjectPane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap, .ProjectPane .wrap {\n    overflow: visible; }\n  ._pane .bar, .ProjectPane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow, .ProjectPane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow, .ProjectPane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar, .ProjectPane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow, .ProjectPane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow, .ProjectPane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, .ProjectPane .bar .fa, ._pane .bar .name, .ProjectPane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name, .ProjectPane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover, .ProjectPane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer, .ProjectPane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow, .ProjectPane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow, .ProjectPane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.ProjectPane {\n  right: -168px;\n  transition: right 0.2s;\n  border-bottom-left-radius: 4px;\n  padding-bottom: 4px; }\n  .ProjectPane .bar {\n    flex-direction: row; }\n    .ProjectPane .bar.fbar {\n      flex-direction: row-reverse;\n      right: 0; }\n  .ProjectPane.active {\n    right: 0; }\n", ""]);
	
	// exports


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(337);
	const Component_1 = __webpack_require__(12);
	const Factory_1 = __webpack_require__(10);
	const Graph_1 = __webpack_require__(317);
	const SceneName = Factory_1.editable(['scene', 'name']);
	const SceneOptions = Factory_1.pane('scene');
	exports.Scene = Component_1.Component({ scene: ['scene'],
	    editing: SceneName.path,
	    pane: SceneOptions.path,
	    block: ['block'],
	    drop: ['$dragdrop', 'drop']
	}, ({ state, signals }) => {
	    const dclass = state.drop && state.drop.ownerType === 'scene';
	    const klass = { Scene: true, drop: dclass };
	    const scene = state.scene;
	    if (!scene) {
	        return '';
	    }
	    // console.log ( JSON.stringify ( scene.graph, null, 2 ) )
	    const deleteModal = Factory_1.openModal({ message: 'Delete scene ?',
	        type: 'scene',
	        _id: scene._id,
	        operation: 'remove',
	        confirm: 'Delete'
	    }, signals);
	    return Component_1.Component.createElement("div", {class: klass}, 
	        Component_1.Component.createElement("div", {class: 'bar'}, 
	            Component_1.Component.createElement(SceneOptions.toggle, {class: 'fa fa-film'}), 
	            Component_1.Component.createElement(SceneName, {class: 'name'})), 
	        Component_1.Component.createElement(SceneOptions, null, 
	            Component_1.Component.createElement("div", {class: 'button delete', "on-click": deleteModal}, "delete"), 
	            Component_1.Component.createElement("div", {class: 'button'}, "duplicate")), 
	        Component_1.Component.createElement(Graph_1.Graph, {key: 'scene.graph', selectedBlockId: state.blockId, ownerType: 'scene', graph: scene.graph}));
	});


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(338);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.Scene {\n  position: relative;\n  width: 66%;\n  border: 1px solid #353131;\n  border-width: 1px 0 0 1px;\n  display: flex;\n  flex-direction: column; }\n  .Scene .name {\n    color: #d98632; }\n", ""]);
	
	// exports


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(340);
	const Component_1 = __webpack_require__(12);
	exports.Login = Component_1.Component({}, ({ signals }) => (Component_1.Component.createElement("div", {class: 'Login'}, 
	    Component_1.Component.createElement("div", {class: 'wrap'}, 
	        Component_1.Component.createElement("h3", null, "Please login"), 
	        Component_1.Component.createElement("div", null, "todo"))
	)));


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(341);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "", ""]);
	
	// exports


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(343);
	const Component_1 = __webpack_require__(12);
	const selectProject = (signals, _id) => {
	    signals.project.select({ _id });
	};
	const sortByName = (a, b) => a.name > b.name ? 1 : -1;
	const showProjects = ({ projectsById, selectedProjectId }, signals) => {
	    const list = [];
	    for (const k in (projectsById || {})) {
	        list.push(projectsById[k]);
	    }
	    list.sort(sortByName);
	    return list.map((project) => (Component_1.Component.createElement("a", {class: { li: true,
	        sel: project._id === selectedProjectId
	    }, href: `/#/project/${project._id}`}, 
	        Component_1.Component.createElement("div", {class: 'fa fa-film'}), 
	        project.name)));
	};
	exports.ProjectChooser = Component_1.Component({ projectsById: ['data', 'project'],
	    selectedProjectId: ['$projectId']
	}, ({ state, signals }) => (Component_1.Component.createElement("div", {class: { ProjectChooser: true, Modal: true, active: true }}, 
	    Component_1.Component.createElement("div", {class: 'wrap'}, 
	        Component_1.Component.createElement("p", {class: 'message'}, "Select project"), 
	        Component_1.Component.createElement("div", {class: 'list'}, 
	            showProjects(state, signals), 
	            Component_1.Component.createElement("div", {class: 'li add', "on-click": () => signals.project.add({})}, "+")))
	)));


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(344);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.ProjectChooser .wrap {\n  width: 300px; }\n", ""]);
	
	// exports


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(346);
	const Component_1 = __webpack_require__(12);
	const MidiStatus_1 = __webpack_require__(348);
	const Status_1 = __webpack_require__(351);
	const Sync_1 = __webpack_require__(354);
	exports.StatusBar = Component_1.Component({ status: ['$status', 'list']
	}, ({ state, signals }) => {
	    const l = state.status || [];
	    const s = l[0];
	    return Component_1.Component.createElement("div", {class: 'StatusBar'}, 
	        s ? Component_1.Component.createElement(Status_1.Status, {status: s}) : '', 
	        Component_1.Component.createElement(MidiStatus_1.MidiStatus, null), 
	        Component_1.Component.createElement(Sync_1.Sync, null));
	});


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(347);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.StatusBar {\n  height: 20px;\n  width: 100%;\n  background: #3d3838;\n  border: 1px solid #353131;\n  padding: 8px;\n  color: #999999;\n  z-index: 4;\n  display: flex;\n  justify-content: flex-start; }\n  .StatusBar .Status {\n    flex-grow: 1; }\n", ""]);
	
	// exports


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(349);
	const Component_1 = __webpack_require__(12);
	const ICON = 'fa-plug';
	const BASE = { MidiStatus: true, fa: true, [ICON]: true };
	const STATUS = { on: Object.assign({}, BASE, { paused: true }),
	    active: Object.assign({}, BASE, { active: true }),
	    off: Object.assign({}, BASE, { offline: true }),
	    error: Object.assign({}, BASE, { error: true })
	};
	const syncToClass = (sync) => {
	    return { fa: true, [sync || '']: true };
	};
	exports.MidiStatus = Component_1.Component({ status: ['$midi', 'status']
	}, ({ state }) => (Component_1.Component.createElement("div", {class: STATUS[state.status || 'off']})));


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(350);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n", ""]);
	
	// exports


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(352);
	const Component_1 = __webpack_require__(12);
	exports.Status = Component_1.Component({}, ({ props, signals }) => {
	    const status = props.status;
	    const toggleDetail = (e) => {
	        signals.$status.toggledDetail({ detail: status
	        });
	    };
	    const klass = Object.assign({}, props.class || {}, { Status: true, [status.type]: true });
	    return Component_1.Component.createElement("div", {class: klass, "on-click": toggleDetail}, 
	        props.nosvg ? '' :
	            Component_1.Component.createElement("svg", {height: '12', width: '18'}, 
	                Component_1.Component.createElement("circle", {cx: '5.5', cy: '6.5', r: '5', class: 'outer'}), 
	                Component_1.Component.createElement("circle", {cx: '5.5', cy: '6.5', r: '3', class: 'inner'})), 
	        status.message);
	});


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(353);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n@keyframes fadea {\n  0% {\n    opacity: 1.0; }\n  100% {\n    opacity: 0.1; } }\n\n@keyframes fadeb {\n  0% {\n    opacity: 1.0; }\n  100% {\n    opacity: 0.1; } }\n\n.Status {\n  cursor: pointer; }\n  .Status.info {\n    color: #777; }\n    .Status.info .outer {\n      stroke: #666; }\n    .Status.info .inner {\n      fill: #666;\n      animation: fadea 2s 1 both; }\n  .Status.error {\n    color: #a77; }\n    .Status.error .outer {\n      stroke: #b22; }\n    .Status.error .inner {\n      fill: #f00;\n      animation: fadea 2s 1 both; }\n  .Status.warn {\n    color: #997; }\n    .Status.warn .outer {\n      stroke: #bb0; }\n    .Status.warn .inner {\n      fill: #ff0;\n      animation: fadeb 2s 1 both; }\n  .Status.success {\n    color: #686; }\n    .Status.success .outer {\n      stroke: #0b0; }\n    .Status.success .inner {\n      fill: #0f0;\n      animation: fadeb 2s 1 both; }\n  .Status .outer {\n    stroke-width: 1px;\n    stroke: #000;\n    fill: none; }\n  .Status .inner {\n    stroke: none;\n    fill: #000; }\n", ""]);
	
	// exports


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(355);
	const Component_1 = __webpack_require__(12);
	const ICON = 'fa-exchange';
	const BASE = { Sync: true, fa: true, [ICON]: true };
	const STATUS = { paused: Object.assign({}, BASE, { paused: true }),
	    active: Object.assign({}, BASE, { active: true }),
	    complete: Object.assign({}, BASE, { complete: true }),
	    offline: Object.assign({}, BASE, { offline: true }),
	    error: Object.assign({}, BASE, { error: true })
	};
	exports.Sync = Component_1.Component({ status: ['$sync', 'status']
	}, ({ state }) => (Component_1.Component.createElement("div", {class: STATUS[state.status || 'paused']})));


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(356);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap {\n    padding: 8px; }\n  ._info .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.Sync, .MidiStatus {\n  width: 1em;\n  height: 1em;\n  color: #686;\n  flex-grow: 0;\n  align-content: flex-end; }\n  .Sync.paused, .MidiStatus.paused {\n    color: #686; }\n  .Sync.active, .MidiStatus.active {\n    color: #fe9327; }\n  .Sync.offline, .MidiStatus.offline {\n    color: #a77; }\n  .Sync.error, .MidiStatus.error {\n    color: #a77; }\n\n.Sync {\n  margin-right: 8px; }\n", ""]);
	
	// exports


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(358);
	const Component_1 = __webpack_require__(12);
	const Status_1 = __webpack_require__(351);
	exports.StatusDetail = Component_1.Component({ detail: ['$status', 'detail'],
	    visible: ['$status', 'showDetail']
	}, ({ state, signals }) => {
	    const status = state.detail || {};
	    return Component_1.Component.createElement("div", {class: { StatusDetail: true, active: state.visible }}, 
	        Component_1.Component.createElement("div", {class: 'bar'}, 
	            Component_1.Component.createElement(Status_1.Status, {status: status, class: 'name'})
	        ), 
	        Component_1.Component.createElement("div", {class: 'wrap'}, (status.detail || []).map((s) => Component_1.Component.createElement("div", {class: 'entry'}, s))));
	});


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(359);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "._info, .StatusDetail {\n  background: rgba(35, 32, 32, 0.95);\n  border: 1px solid #353131;\n  border-top-right-radius: 4px;\n  color: #999999;\n  min-width: 180px;\n  max-width: 380px;\n  min-height: 100px;\n  position: fixed;\n  bottom: 37px;\n  left: 0; }\n  ._info .wrap, .StatusDetail .wrap {\n    padding: 8px; }\n  ._info .bar, .StatusDetail .bar {\n    border-top-right-radius: 4px; }\n  ._info .wrap, .StatusDetail .wrap {\n    max-height: 300px;\n    overflow: auto; }\n\n._list {\n  background: #3d3838;\n  height: 200px;\n  border: 1px solid #353131;\n  margin-top: -1px;\n  overflow-x: hidden; }\n  ._list p {\n    background: #4b4444;\n    border: 1px solid #353131;\n    padding: 8px 4px;\n    margin: -1px; }\n\n._noselect {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.bar {\n  background: #302c2c;\n  padding-left: 4px; }\n  .bar div {\n    display: inline-block; }\n  .bar .fa {\n    color: #5a534b; }\n  .bar .fa.active, .bar .active > .fa {\n    color: #f1d2b3; }\n  .bar.tabs {\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end; }\n    .bar.tabs .stretch {\n      flex-grow: 1; }\n  .bar .tab {\n    border-left: 1px solid #232020;\n    color: #868686;\n    padding: 4px 8px; }\n    .bar .tab.sel {\n      background: #28211c; }\n\n._pane {\n  z-index: 5;\n  position: fixed;\n  top: 4px;\n  box-shadow: 0 0 10px #151414;\n  background: rgba(75, 68, 68, 0.95);\n  width: 160px; }\n  ._pane .wrap {\n    overflow: visible; }\n  ._pane .bar {\n    display: flex;\n    align-items: center;\n    flex-direction: row-reverse;\n    cursor: pointer;\n    padding: 0;\n    height: 32px; }\n    ._pane .bar .rarrow {\n      border-left-color: #282525; }\n    ._pane .bar .larrow {\n      border-right-color: #282525; }\n    ._pane .bar.fbar {\n      flex-direction: row;\n      background: none;\n      position: fixed;\n      height: 32px;\n      top: 4px; }\n      ._pane .bar.fbar .rarrow {\n        border-left-color: #302c2c; }\n      ._pane .bar.fbar .larrow {\n        border-right-color: #302c2c; }\n    ._pane .bar .fa, ._pane .bar .name {\n      padding: 8px;\n      border-radius: 0;\n      background: #302c2c; }\n    ._pane .bar .name {\n      color: #868686; }\n      ._pane .bar .name:hover {\n        color: #9f9f9f; }\n    ._pane .bar .spacer {\n      width: 16px;\n      height: 100%;\n      background-color: #282525; }\n  ._pane .larrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-left: none; }\n  ._pane .rarrow {\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: 16px solid transparent;\n    border-right: none; }\n\n.Modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  background-color: rgba(20, 20, 20, 0);\n  z-index: -9;\n  opacity: 0;\n  justify-content: center;\n  align-items: center; }\n  .Modal.active {\n    background-color: rgba(20, 20, 20, 0.5);\n    opacity: 1;\n    z-index: 9; }\n  .Modal .wrap {\n    background: #918787;\n    padding: 8px;\n    border: 1px solid #353131;\n    border-radius: 4px;\n    min-width: 160px; }\n  .Modal .message {\n    margin: 4px 0; }\n  .Modal .bwrap {\n    margin-top: 32px;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-end; }\n\n.button {\n  padding: 2px 4px;\n  border-radius: 4px;\n  border: 2px solid #332e2e;\n  border-top-color: #383333;\n  border-right-color: #383333;\n  margin: 8px;\n  cursor: pointer;\n  background: linear-gradient(#b1aaaa, #7d7373); }\n  .button:active {\n    position: relative;\n    top: 1px; }\n  .button:active {\n    background: linear-gradient(#7d7373, #b1aaaa); }\n  .button.delete {\n    background: linear-gradient(#a97e7e, #815656); }\n  .button.continue {\n    background: linear-gradient(#b0906f, #8b6c4d);\n    align-self: flex-end; }\n\n.Pane .op {\n  cursor: pointer;\n  padding: 4px;\n  background: #232020;\n  color: #4d4d4d;\n  text-align: right; }\n  .Pane .op:hover {\n    color: #999999; }\n\n.StatusDetail {\n  visibility: hidden;\n  opacity: 0;\n  transition: visibility 0.3s, opacity 0.3s;\n  z-index: 4; }\n  .StatusDetail.active {\n    opacity: 1;\n    visibility: visible; }\n  .StatusDetail .entry {\n    border-top: 1px solid rgba(88, 81, 81, 0.95);\n    padding: 4px 0;\n    white-space: pre-wrap; }\n    .StatusDetail .entry:first-child {\n      border: 0; }\n", ""]);
	
	// exports


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(361);
	const Component_1 = __webpack_require__(12);
	const Factory_1 = __webpack_require__(10);
	const GithubToken = Factory_1.editable(['user', 'libraryGithubToken']);
	const GithubPath = Factory_1.editable(['user', 'libraryGithubPath']);
	const UserName = Factory_1.editable(['user', 'name']);
	const showFiles = (entries) => {
	    return Object.keys(entries || {}).sort().map(s => Component_1.Component.createElement("div", {class: 'li'}, s));
	};
	exports.User = Component_1.Component({ user: ['user'],
	    files: ['github', 'library'],
	    editing: ['$factory', 'user']
	}, ({ state, signals }) => (Component_1.Component.createElement("div", {class: { User: true, Modal: true, active: true }}, 
	    Component_1.Component.createElement("div", {class: 'wrap'}, 
	        Component_1.Component.createElement("p", {class: 'message'}, "User preferences"), 
	        Component_1.Component.createElement("div", {class: 'list'}, 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement(UserName, null)
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement(GithubToken, {default: 'somelongauthtoken'})
	            ), 
	            Component_1.Component.createElement("div", {class: 'li'}, 
	                Component_1.Component.createElement(GithubPath, {default: 'user'})
	            )), 
	        Component_1.Component.createElement("div", {class: 'list'}, showFiles(state.files)))
	)));


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(362);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(291)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/sass-loader/index.js!./style.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(290)();
	// imports
	
	
	// module
	exports.push([module.id, "", ""]);
	
	// exports


/***/ }
/******/ ]);
//# sourceMappingURL=app.js.map